{
  "address": "0x5EfFfdeD487B62ba912A9BdE3536ABAb0c703818",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc0cf0537f036ebec8a5a32df0aebe63713c2e217843b432c32701f391660ff36",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x5EfFfdeD487B62ba912A9BdE3536ABAb0c703818",
    "transactionIndex": 0,
    "gasUsed": "2464909",
    "logsBloom": "0x
    "blockHash": "0xb80dcda724e9d3166cdb31e4f282c34e0bdc4913cfdd83c4ed5b4becbd7d32b4",
    "transactionHash": "0xc0cf0537f036ebec8a5a32df0aebe63713c2e217843b432c32701f391660ff36",
    "logs": [],
    "blockNumber": 23431171,
    "cumulativeGasUsed": "2464909",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "94fbb7a604794f85797dfeb659444719",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/DiamondCutFacet.sol\":\"DiamondCutFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/facets/DiamondCutFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport {DiamondStorageLib} from \\\"../lib/DiamondStorageLib.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override paused {\\n        DiamondStorageLib.enforceIsContractOwner();\\n        DiamondStorageLib.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n\\n    function unpause() external override {\\n        DiamondStorageLib.enforceIsPauseAdmin();\\n\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n        require(!ds._active, \\\"ProtocolUpgrade: already unpaused.\\\");\\n        ds._active = true;\\n    }\\n\\n    function pause() external override {\\n        DiamondStorageLib.enforceIsPauseAdmin();\\n\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n        require(ds._active, \\\"ProtocolUpgrade: already paused.\\\");\\n        ds._active = false;\\n    }\\n\\n    modifier paused() {\\n        DiamondStorageLib.DiamondStorage storage ds;\\n        bytes32 position = DiamondStorageLib.DIAMOND_STORAGE_POSITION;\\n        // get diamond storage\\n        assembly {\\n            ds.slot := position\\n        }\\n        require(!ds._active, \\\"ProtocolUpgrade: not paused.\\\");\\n\\n        _;\\n    }\\n}\",\"keccak256\":\"0xe0bfd811e4c46df21e215f3856380efc1dd962c7095f4f7480f04a8c19943c07\",\"license\":\"MIT\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\",\"keccak256\":\"0xdabe34201dcc6fd64a1cf484d16f031d6d64e39ebdcae7cc63e7c525c8beecc7\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IStakingPositions\\n * Types for staking\\n */\\ninterface IStakingPositions {\\n    struct StakedPosition {\\n        address vault;\\n        bytes32 symbol;\\n        bytes4 balanceSelector;\\n        bytes4 unstakeSelector;\\n    }\\n}\\n\",\"keccak256\":\"0xe617bf40dd2a59f4dbf9d24696fe931a0247a59dae1ba58ab26ff58518b2c846\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // Bytes32ToAddressMap\\n\\n    struct Bytes32ToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (key, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x74c86dcb231a31355e8947aea10f3c94eb5f1656b000ce90d18f5a48fcb98b4a\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary DiamondStorageLib {\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n    bytes32 constant LIQUIDATION_STORAGE_POSITION = keccak256(\\\"diamond.standard.liquidation.storage\\\");\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // Used to select methods that can be executed even when Diamond is paused\\n        mapping(bytes4 => bool) canBeExecutedWhenPaused;\\n\\n        bool _initialized;\\n        bool _active;\\n\\n        uint256 _lastBorrowTimestamp;\\n    }\\n\\n    struct SmartLoanStorage {\\n        // PauseAdmin has the power to pause/unpause the contract without the timelock delay in case of a critical bug/exploit\\n        address pauseAdmin;\\n        // Owner of the contract\\n        address contractOwner;\\n        // Proposed owner of the contract\\n        address proposedOwner;\\n        // Proposed pauseAdmin of the contract\\n        address proposedPauseAdmin;\\n        // Is contract initialized?\\n        bool _initialized;\\n        // TODO: mock staking tokens until redstone oracle supports them\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\n        // Staked positions of the contract\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\n    }\\n\\n    struct LiquidationStorage {\\n        // Mapping controlling addresses that can execute the liquidation methods\\n        mapping(address=>bool) canLiquidate;\\n    }\\n\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\n        assembly {\\n            rgs.slot := position\\n        }\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function liquidationStorage() internal pure returns (LiquidationStorage storage ls) {\\n        bytes32 position = LIQUIDATION_STORAGE_POSITION;\\n        assembly {\\n            ls.slot := position\\n        }\\n    }\\n\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\n        assembly {\\n            sls.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    event PauseAdminOwnershipTransferred(address indexed previousPauseAdmin, address indexed newPauseAdmin);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousOwner = sls.contractOwner;\\n        sls.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function setContractPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousPauseAdmin = sls.pauseAdmin;\\n        sls.pauseAdmin = _newPauseAdmin;\\n        emit PauseAdminOwnershipTransferred(previousPauseAdmin, _newPauseAdmin);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = smartLoanStorage().contractOwner;\\n    }\\n\\n    function pauseAdmin() internal view returns (address pauseAdmin) {\\n        pauseAdmin = smartLoanStorage().pauseAdmin;\\n    }\\n\\n    function setProposedOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedOwner = _newOwner;\\n    }\\n\\n    function setProposedPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedPauseAdmin = _newPauseAdmin;\\n    }\\n\\n    function getPausedMethodExemption(bytes4 _methodSig) internal view returns (bool) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.canBeExecutedWhenPaused[_methodSig];\\n    }\\n\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\n    }\\n\\n    function proposedPauseAdmin() internal view returns (address proposedPauseAdmin) {\\n        proposedPauseAdmin = smartLoanStorage().proposedPauseAdmin;\\n    }\\n\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\n        _positions = smartLoanStorage().currentStakedPositions;\\n    }\\n\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        bool found;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].balanceSelector == position.balanceSelector) {\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        if (!found) {\\n            positions.push(position);\\n        }\\n    }\\n\\n    function removeStakedPosition(bytes4 balanceSelector) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].balanceSelector == balanceSelector) {\\n                positions[i] = positions[positions.length - 1];\\n                positions.pop();\\n            }\\n        }\\n    }\\n\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\n    }\\n\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        return sls.ownedAssets.contains(_symbol);\\n    }\\n\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\n    }\\n\\n    function enforceIsPauseAdmin() internal view {\\n        require(msg.sender == smartLoanStorage().pauseAdmin, \\\"DiamondStorageLib: Must be contract pauseAdmin\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\",\"keccak256\":\"0x8fe9c65ddbd9a36ecedc5e2b436fc0852961b125136179dc6494695de36013ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612bda806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631f931c1c146100465780633f4ba83a146100625780638456cb591461006c575b600080fd5b610060600480360381019061005b9190611925565b610076565b005b61006a61015d565b005b6100746101e3565b005b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091508160050160019054906101000a900460ff16156100f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e890611a17565b60405180910390fd5b6100f9610268565b6101548787906101099190611d40565b8686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610303565b50505050505050565b610165610532565b600061016f6105cd565b90508060050160019054906101000a900460ff16156101c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ba90611dc7565b60405180910390fd5b60018160050160016101000a81548160ff02191690831515021790555050565b6101eb610532565b60006101f56105cd565b90508060050160019054906101000a900460ff16610248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023f90611e33565b60405180910390fd5b60008160050160016101000a81548160ff02191690831515021790555050565b6102706105fa565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f890611ec5565b60405180910390fd5b565b60005b83518110156104e757600084828151811061032457610323611ee5565b5b60200260200101516020015190506000600281111561034657610345611f14565b5b81600281111561035957610358611f14565b5b036103a9576103a485838151811061037457610373611ee5565b5b60200260200101516000015186848151811061039357610392611ee5565b5b602002602001015160400151610627565b6104d3565b600160028111156103bd576103bc611f14565b5b8160028111156103d0576103cf611f14565b5b036104205761041b8583815181106103eb576103ea611ee5565b5b60200260200101516000015186848151811061040a57610409611ee5565b5b60200260200101516040015161089e565b6104d2565b60028081111561043357610432611f14565b5b81600281111561044657610445611f14565b5b036104965761049185838151811061046157610460611ee5565b5b6020026020010151600001518684815181106104805761047f611ee5565b5b602002602001015160400151610b1f565b6104d1565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c890611fb5565b60405180910390fd5b5b5b5080806104df9061200e565b915050610306565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161051b9392919061230b565b60405180910390a161052d8282610caa565b505050565b61053a6105fa565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c2906123c2565b60405180910390fd5b565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b600081511161066b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066290612454565b60405180910390fd5b60006106756105cd565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dd906124e6565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1603610753576107528285610ebc565b5b60005b835181101561089757600084828151811061077457610773611ee5565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085f90612578565b60405180910390fd5b6108748583868a610f97565b838061087f906125b0565b9450505050808061088f9061200e565b915050610756565b5050505050565b60008151116108e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d990612454565b60405180910390fd5b60006108ec6105cd565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361095d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610954906124e6565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff16036109ca576109c98285610ebc565b5b60005b8351811015610b185760008482815181106109eb576109ea611ee5565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad590612656565b60405180910390fd5b610ae9858284611144565b610af58583868a610f97565b8380610b00906125b0565b94505050508080610b109061200e565b9150506109cd565b5050505050565b6000815111610b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5a90612454565b60405180910390fd5b6000610b6d6105cd565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd5906126e8565b60405180910390fd5b60005b8251811015610ca4576000838281518110610bff57610bfe611ee5565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610c8f848284611144565b50508080610c9c9061200e565b915050610be1565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d27576000815114610d22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d19906127a0565b60405180910390fd5b610eb8565b6000815111610d6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6290612858565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610dc157610dc0826040518060600160405280602f8152602001612b76602f91396117a6565b5b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051610de991906128b4565b600060405180830381855af49150503d8060008114610e24576040519150601f19603f3d011682016040523d82523d6000602084013e610e29565b606091505b509150915081610eb557600081511115610e7a57806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e71919061290f565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac906129a3565b60405180910390fd5b50505b5050565b610ede816040518060600160405280602b8152602001612b4b602b91396117a6565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036111b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111aa90612a35565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611221576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121890612ac7565b60405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805490506112f89190612ae7565b905080821461148c5760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001828154811061135957611358611ee5565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000184815481106113d5576113d4611ee5565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054806114e0576114df612b1b565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff021916905550506000810361179f576000600186600201805490506115ca9190612ae7565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905081811461170b57600087600201838154811061163457611633611ee5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508088600201838154811061167857611677611ee5565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b8660020180548061171f5761171e612b1b565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000823b90506000811182906117f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e9919061290f565b60405180910390fd5b50505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126118315761183061180c565b5b8235905067ffffffffffffffff81111561184e5761184d611811565b5b60208301915083602082028301111561186a57611869611816565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061189c82611871565b9050919050565b6118ac81611891565b81146118b757600080fd5b50565b6000813590506118c9816118a3565b92915050565b60008083601f8401126118e5576118e461180c565b5b8235905067ffffffffffffffff81111561190257611901611811565b5b60208301915083600182028301111561191e5761191d611816565b5b9250929050565b60008060008060006060868803121561194157611940611802565b5b600086013567ffffffffffffffff81111561195f5761195e611807565b5b61196b8882890161181b565b9550955050602061197e888289016118ba565b935050604086013567ffffffffffffffff81111561199f5761199e611807565b5b6119ab888289016118cf565b92509250509295509295909350565b600082825260208201905092915050565b7f50726f746f636f6c557067726164653a206e6f74207061757365642e00000000600082015250565b6000611a01601c836119ba565b9150611a0c826119cb565b602082019050919050565b60006020820190508181036000830152611a30816119f4565b9050919050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a8082611a37565b810181811067ffffffffffffffff82111715611a9f57611a9e611a48565b5b80604052505050565b6000611ab26117f8565b9050611abe8282611a77565b919050565b600067ffffffffffffffff821115611ade57611add611a48565b5b602082029050602081019050919050565b600080fd5b600080fd5b60038110611b0657600080fd5b50565b600081359050611b1881611af9565b92915050565b600067ffffffffffffffff821115611b3957611b38611a48565b5b602082029050602081019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611b7f81611b4a565b8114611b8a57600080fd5b50565b600081359050611b9c81611b76565b92915050565b6000611bb5611bb084611b1e565b611aa8565b90508083825260208201905060208402830185811115611bd857611bd7611816565b5b835b81811015611c015780611bed8882611b8d565b845260208401935050602081019050611bda565b5050509392505050565b600082601f830112611c2057611c1f61180c565b5b8135611c30848260208601611ba2565b91505092915050565b600060608284031215611c4f57611c4e611aef565b5b611c596060611aa8565b90506000611c69848285016118ba565b6000830152506020611c7d84828501611b09565b602083015250604082013567ffffffffffffffff811115611ca157611ca0611af4565b5b611cad84828501611c0b565b60408301525092915050565b6000611ccc611cc784611ac3565b611aa8565b90508083825260208201905060208402830185811115611cef57611cee611816565b5b835b81811015611d3657803567ffffffffffffffff811115611d1457611d1361180c565b5b808601611d218982611c39565b85526020850194505050602081019050611cf1565b5050509392505050565b6000611d4d368484611cb9565b905092915050565b7f50726f746f636f6c557067726164653a20616c726561647920756e706175736560008201527f642e000000000000000000000000000000000000000000000000000000000000602082015250565b6000611db16022836119ba565b9150611dbc82611d55565b604082019050919050565b60006020820190508181036000830152611de081611da4565b9050919050565b7f50726f746f636f6c557067726164653a20616c7265616479207061757365642e600082015250565b6000611e1d6020836119ba565b9150611e2882611de7565b602082019050919050565b60006020820190508181036000830152611e4c81611e10565b9050919050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611eaf6029836119ba565b9150611eba82611e53565b604082019050919050565b60006020820190508181036000830152611ede81611ea2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4469616d6f6e6453746f726167654c69624375743a20496e636f72726563742060008201527f4661636574437574416374696f6e000000000000000000000000000000000000602082015250565b6000611f9f602e836119ba565b9150611faa82611f43565b604082019050919050565b60006020820190508181036000830152611fce81611f92565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600061201982612004565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361204b5761204a611fd5565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61208b81611891565b82525050565b600381106120a2576120a1611f14565b5b50565b60008190506120b382612091565b919050565b60006120c3826120a5565b9050919050565b6120d3816120b8565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61210e81611b4a565b82525050565b60006121208383612105565b60208301905092915050565b6000602082019050919050565b6000612144826120d9565b61214e81856120e4565b9350612159836120f5565b8060005b8381101561218a5781516121718882612114565b975061217c8361212c565b92505060018101905061215d565b5085935050505092915050565b60006060830160008301516121af6000860182612082565b5060208301516121c260208601826120ca565b50604083015184820360408601526121da8282612139565b9150508091505092915050565b60006121f38383612197565b905092915050565b6000602082019050919050565b600061221382612056565b61221d8185612061565b93508360208202850161222f85612072565b8060005b8581101561226b578484038952815161224c85826121e7565b9450612257836121fb565b925060208a01995050600181019050612233565b50829750879550505050505092915050565b61228681611891565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122c65780820151818401526020810190506122ab565b60008484015250505050565b60006122dd8261228c565b6122e78185612297565b93506122f78185602086016122a8565b61230081611a37565b840191505092915050565b600060608201905081810360008301526123258186612208565b9050612334602083018561227d565b818103604083015261234681846122d2565b9050949350505050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f61637420706175736541646d696e000000000000000000000000000000000000602082015250565b60006123ac602e836119ba565b91506123b782612350565b604082019050919050565b600060208201905081810360008301526123db8161239f565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a204e6f2073656c6563746f60008201527f727320696e20666163657420746f206375740000000000000000000000000000602082015250565b600061243e6032836119ba565b9150612449826123e2565b604082019050919050565b6000602082019050818103600083015261246d81612431565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a204164642066616365742060008201527f63616e2774206265206164647265737328302900000000000000000000000000602082015250565b60006124d06033836119ba565b91506124db82612474565b604082019050919050565b600060208201905081810360008301526124ff816124c3565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e2774206164642060008201527f66756e6374696f6e207468617420616c72656164792065786973747300000000602082015250565b6000612562603c836119ba565b915061256d82612506565b604082019050919050565b6000602082019050818103600083015261259181612555565b9050919050565b60006bffffffffffffffffffffffff82169050919050565b60006125bb82612598565b91506bffffffffffffffffffffffff82036125d9576125d8611fd5565b5b600182019050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e2774207265706c60008201527f6163652066756e6374696f6e20776974682073616d652066756e6374696f6e00602082015250565b6000612640603f836119ba565b915061264b826125e4565b604082019050919050565b6000602082019050818103600083015261266f81612633565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2052656d6f76652066616360008201527f65742061646472657373206d7573742062652061646472657373283029000000602082015250565b60006126d2603d836119ba565b91506126dd82612676565b604082019050919050565b60006020820190508181036000830152612701816126c5565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a205f696e6974206973206160008201527f646472657373283029206275745f63616c6c64617461206973206e6f7420656d60208201527f7074790000000000000000000000000000000000000000000000000000000000604082015250565b600061278a6043836119ba565b915061279582612708565b606082019050919050565b600060208201905081810360008301526127b98161277d565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a205f63616c6c646174612060008201527f697320656d70747920627574205f696e6974206973206e6f742061646472657360208201527f7328302900000000000000000000000000000000000000000000000000000000604082015250565b60006128426044836119ba565b915061284d826127c0565b606082019050919050565b6000602082019050818103600083015261287181612835565b9050919050565b600081905092915050565b600061288e8261228c565b6128988185612878565b93506128a88185602086016122a8565b80840191505092915050565b60006128c08284612883565b915081905092915050565b600081519050919050565b60006128e1826128cb565b6128eb81856119ba565b93506128fb8185602086016122a8565b61290481611a37565b840191505092915050565b6000602082019050818103600083015261292981846128d6565b905092915050565b7f4469616d6f6e6453746f726167654c69624375743a205f696e69742066756e6360008201527f74696f6e20726576657274656400000000000000000000000000000000000000602082015250565b600061298d602d836119ba565b915061299882612931565b604082019050919050565b600060208201905081810360008301526129bc81612980565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e27742072656d6f60008201527f76652066756e6374696f6e207468617420646f65736e27742065786973740000602082015250565b6000612a1f603e836119ba565b9150612a2a826129c3565b604082019050919050565b60006020820190508181036000830152612a4e81612a12565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e27742072656d6f60008201527f766520696d6d757461626c652066756e6374696f6e0000000000000000000000602082015250565b6000612ab16035836119ba565b9150612abc82612a55565b604082019050919050565b60006020820190508181036000830152612ae081612aa4565b9050919050565b6000612af282612004565b9150612afd83612004565b9250828203905081811115612b1557612b14611fd5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe4469616d6f6e6453746f726167654c69624375743a204e657720666163657420686173206e6f20636f64654469616d6f6e6453746f726167654c69624375743a205f696e6974206164647265737320686173206e6f20636f6465a264697066735822122077a677854b73fd96f6975e94b633186aaae8aab544c6d51606ac0b89a0e1786264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80631f931c1c146100465780633f4ba83a146100625780638456cb591461006c575b600080fd5b610060600480360381019061005b9190611925565b610076565b005b61006a61015d565b005b6100746101e3565b005b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091508160050160019054906101000a900460ff16156100f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e890611a17565b60405180910390fd5b6100f9610268565b6101548787906101099190611d40565b8686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610303565b50505050505050565b610165610532565b600061016f6105cd565b90508060050160019054906101000a900460ff16156101c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ba90611dc7565b60405180910390fd5b60018160050160016101000a81548160ff02191690831515021790555050565b6101eb610532565b60006101f56105cd565b90508060050160019054906101000a900460ff16610248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023f90611e33565b60405180910390fd5b60008160050160016101000a81548160ff02191690831515021790555050565b6102706105fa565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f890611ec5565b60405180910390fd5b565b60005b83518110156104e757600084828151811061032457610323611ee5565b5b60200260200101516020015190506000600281111561034657610345611f14565b5b81600281111561035957610358611f14565b5b036103a9576103a485838151811061037457610373611ee5565b5b60200260200101516000015186848151811061039357610392611ee5565b5b602002602001015160400151610627565b6104d3565b600160028111156103bd576103bc611f14565b5b8160028111156103d0576103cf611f14565b5b036104205761041b8583815181106103eb576103ea611ee5565b5b60200260200101516000015186848151811061040a57610409611ee5565b5b60200260200101516040015161089e565b6104d2565b60028081111561043357610432611f14565b5b81600281111561044657610445611f14565b5b036104965761049185838151811061046157610460611ee5565b5b6020026020010151600001518684815181106104805761047f611ee5565b5b602002602001015160400151610b1f565b6104d1565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c890611fb5565b60405180910390fd5b5b5b5080806104df9061200e565b915050610306565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161051b9392919061230b565b60405180910390a161052d8282610caa565b505050565b61053a6105fa565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c2906123c2565b60405180910390fd5b565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b600081511161066b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066290612454565b60405180910390fd5b60006106756105cd565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dd906124e6565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff1603610753576107528285610ebc565b5b60005b835181101561089757600084828151811061077457610773611ee5565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085f90612578565b60405180910390fd5b6108748583868a610f97565b838061087f906125b0565b9450505050808061088f9061200e565b915050610756565b5050505050565b60008151116108e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d990612454565b60405180910390fd5b60006108ec6105cd565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361095d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610954906124e6565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff16036109ca576109c98285610ebc565b5b60005b8351811015610b185760008482815181106109eb576109ea611ee5565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ade576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad590612656565b60405180910390fd5b610ae9858284611144565b610af58583868a610f97565b8380610b00906125b0565b94505050508080610b109061200e565b9150506109cd565b5050505050565b6000815111610b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5a90612454565b60405180910390fd5b6000610b6d6105cd565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610bde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd5906126e8565b60405180910390fd5b60005b8251811015610ca4576000838281518110610bff57610bfe611ee5565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610c8f848284611144565b50508080610c9c9061200e565b915050610be1565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d27576000815114610d22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d19906127a0565b60405180910390fd5b610eb8565b6000815111610d6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6290612858565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610dc157610dc0826040518060600160405280602f8152602001612b76602f91396117a6565b5b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051610de991906128b4565b600060405180830381855af49150503d8060008114610e24576040519150601f19603f3d011682016040523d82523d6000602084013e610e29565b606091505b509150915081610eb557600081511115610e7a57806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e71919061290f565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac906129a3565b60405180910390fd5b50505b5050565b610ede816040518060600160405280602b8152602001612b4b602b91396117a6565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036111b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111aa90612a35565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611221576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121890612ac7565b60405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805490506112f89190612ae7565b905080821461148c5760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001828154811061135957611358611ee5565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000184815481106113d5576113d4611ee5565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054806114e0576114df612b1b565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff021916905550506000810361179f576000600186600201805490506115ca9190612ae7565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905081811461170b57600087600201838154811061163457611633611ee5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508088600201838154811061167857611677611ee5565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b8660020180548061171f5761171e612b1b565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000823b90506000811182906117f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e9919061290f565b60405180910390fd5b50505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126118315761183061180c565b5b8235905067ffffffffffffffff81111561184e5761184d611811565b5b60208301915083602082028301111561186a57611869611816565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061189c82611871565b9050919050565b6118ac81611891565b81146118b757600080fd5b50565b6000813590506118c9816118a3565b92915050565b60008083601f8401126118e5576118e461180c565b5b8235905067ffffffffffffffff81111561190257611901611811565b5b60208301915083600182028301111561191e5761191d611816565b5b9250929050565b60008060008060006060868803121561194157611940611802565b5b600086013567ffffffffffffffff81111561195f5761195e611807565b5b61196b8882890161181b565b9550955050602061197e888289016118ba565b935050604086013567ffffffffffffffff81111561199f5761199e611807565b5b6119ab888289016118cf565b92509250509295509295909350565b600082825260208201905092915050565b7f50726f746f636f6c557067726164653a206e6f74207061757365642e00000000600082015250565b6000611a01601c836119ba565b9150611a0c826119cb565b602082019050919050565b60006020820190508181036000830152611a30816119f4565b9050919050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a8082611a37565b810181811067ffffffffffffffff82111715611a9f57611a9e611a48565b5b80604052505050565b6000611ab26117f8565b9050611abe8282611a77565b919050565b600067ffffffffffffffff821115611ade57611add611a48565b5b602082029050602081019050919050565b600080fd5b600080fd5b60038110611b0657600080fd5b50565b600081359050611b1881611af9565b92915050565b600067ffffffffffffffff821115611b3957611b38611a48565b5b602082029050602081019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611b7f81611b4a565b8114611b8a57600080fd5b50565b600081359050611b9c81611b76565b92915050565b6000611bb5611bb084611b1e565b611aa8565b90508083825260208201905060208402830185811115611bd857611bd7611816565b5b835b81811015611c015780611bed8882611b8d565b845260208401935050602081019050611bda565b5050509392505050565b600082601f830112611c2057611c1f61180c565b5b8135611c30848260208601611ba2565b91505092915050565b600060608284031215611c4f57611c4e611aef565b5b611c596060611aa8565b90506000611c69848285016118ba565b6000830152506020611c7d84828501611b09565b602083015250604082013567ffffffffffffffff811115611ca157611ca0611af4565b5b611cad84828501611c0b565b60408301525092915050565b6000611ccc611cc784611ac3565b611aa8565b90508083825260208201905060208402830185811115611cef57611cee611816565b5b835b81811015611d3657803567ffffffffffffffff811115611d1457611d1361180c565b5b808601611d218982611c39565b85526020850194505050602081019050611cf1565b5050509392505050565b6000611d4d368484611cb9565b905092915050565b7f50726f746f636f6c557067726164653a20616c726561647920756e706175736560008201527f642e000000000000000000000000000000000000000000000000000000000000602082015250565b6000611db16022836119ba565b9150611dbc82611d55565b604082019050919050565b60006020820190508181036000830152611de081611da4565b9050919050565b7f50726f746f636f6c557067726164653a20616c7265616479207061757365642e600082015250565b6000611e1d6020836119ba565b9150611e2882611de7565b602082019050919050565b60006020820190508181036000830152611e4c81611e10565b9050919050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611eaf6029836119ba565b9150611eba82611e53565b604082019050919050565b60006020820190508181036000830152611ede81611ea2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4469616d6f6e6453746f726167654c69624375743a20496e636f72726563742060008201527f4661636574437574416374696f6e000000000000000000000000000000000000602082015250565b6000611f9f602e836119ba565b9150611faa82611f43565b604082019050919050565b60006020820190508181036000830152611fce81611f92565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600061201982612004565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361204b5761204a611fd5565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61208b81611891565b82525050565b600381106120a2576120a1611f14565b5b50565b60008190506120b382612091565b919050565b60006120c3826120a5565b9050919050565b6120d3816120b8565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61210e81611b4a565b82525050565b60006121208383612105565b60208301905092915050565b6000602082019050919050565b6000612144826120d9565b61214e81856120e4565b9350612159836120f5565b8060005b8381101561218a5781516121718882612114565b975061217c8361212c565b92505060018101905061215d565b5085935050505092915050565b60006060830160008301516121af6000860182612082565b5060208301516121c260208601826120ca565b50604083015184820360408601526121da8282612139565b9150508091505092915050565b60006121f38383612197565b905092915050565b6000602082019050919050565b600061221382612056565b61221d8185612061565b93508360208202850161222f85612072565b8060005b8581101561226b578484038952815161224c85826121e7565b9450612257836121fb565b925060208a01995050600181019050612233565b50829750879550505050505092915050565b61228681611891565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156122c65780820151818401526020810190506122ab565b60008484015250505050565b60006122dd8261228c565b6122e78185612297565b93506122f78185602086016122a8565b61230081611a37565b840191505092915050565b600060608201905081810360008301526123258186612208565b9050612334602083018561227d565b818103604083015261234681846122d2565b9050949350505050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f61637420706175736541646d696e000000000000000000000000000000000000602082015250565b60006123ac602e836119ba565b91506123b782612350565b604082019050919050565b600060208201905081810360008301526123db8161239f565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a204e6f2073656c6563746f60008201527f727320696e20666163657420746f206375740000000000000000000000000000602082015250565b600061243e6032836119ba565b9150612449826123e2565b604082019050919050565b6000602082019050818103600083015261246d81612431565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a204164642066616365742060008201527f63616e2774206265206164647265737328302900000000000000000000000000602082015250565b60006124d06033836119ba565b91506124db82612474565b604082019050919050565b600060208201905081810360008301526124ff816124c3565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e2774206164642060008201527f66756e6374696f6e207468617420616c72656164792065786973747300000000602082015250565b6000612562603c836119ba565b915061256d82612506565b604082019050919050565b6000602082019050818103600083015261259181612555565b9050919050565b60006bffffffffffffffffffffffff82169050919050565b60006125bb82612598565b91506bffffffffffffffffffffffff82036125d9576125d8611fd5565b5b600182019050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e2774207265706c60008201527f6163652066756e6374696f6e20776974682073616d652066756e6374696f6e00602082015250565b6000612640603f836119ba565b915061264b826125e4565b604082019050919050565b6000602082019050818103600083015261266f81612633565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2052656d6f76652066616360008201527f65742061646472657373206d7573742062652061646472657373283029000000602082015250565b60006126d2603d836119ba565b91506126dd82612676565b604082019050919050565b60006020820190508181036000830152612701816126c5565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a205f696e6974206973206160008201527f646472657373283029206275745f63616c6c64617461206973206e6f7420656d60208201527f7074790000000000000000000000000000000000000000000000000000000000604082015250565b600061278a6043836119ba565b915061279582612708565b606082019050919050565b600060208201905081810360008301526127b98161277d565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a205f63616c6c646174612060008201527f697320656d70747920627574205f696e6974206973206e6f742061646472657360208201527f7328302900000000000000000000000000000000000000000000000000000000604082015250565b60006128426044836119ba565b915061284d826127c0565b606082019050919050565b6000602082019050818103600083015261287181612835565b9050919050565b600081905092915050565b600061288e8261228c565b6128988185612878565b93506128a88185602086016122a8565b80840191505092915050565b60006128c08284612883565b915081905092915050565b600081519050919050565b60006128e1826128cb565b6128eb81856119ba565b93506128fb8185602086016122a8565b61290481611a37565b840191505092915050565b6000602082019050818103600083015261292981846128d6565b905092915050565b7f4469616d6f6e6453746f726167654c69624375743a205f696e69742066756e6360008201527f74696f6e20726576657274656400000000000000000000000000000000000000602082015250565b600061298d602d836119ba565b915061299882612931565b604082019050919050565b600060208201905081810360008301526129bc81612980565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e27742072656d6f60008201527f76652066756e6374696f6e207468617420646f65736e27742065786973740000602082015250565b6000612a1f603e836119ba565b9150612a2a826129c3565b604082019050919050565b60006020820190508181036000830152612a4e81612a12565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e27742072656d6f60008201527f766520696d6d757461626c652066756e6374696f6e0000000000000000000000602082015250565b6000612ab16035836119ba565b9150612abc82612a55565b604082019050919050565b60006020820190508181036000830152612ae081612aa4565b9050919050565b6000612af282612004565b9150612afd83612004565b9250828203905081811115612b1557612b14611fd5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe4469616d6f6e6453746f726167654c69624375743a204e657720666163657420686173206e6f20636f64654469616d6f6e6453746f726167654c69624375743a205f696e6974206164647265737320686173206e6f20636f6465a264697066735822122077a677854b73fd96f6975e94b633186aaae8aab544c6d51606ac0b89a0e1786264736f6c63430008110033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
          "_diamondCut": "Contains the facet addresses and function selectors",
          "_init": "The address of the contract or facet to execute _calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}