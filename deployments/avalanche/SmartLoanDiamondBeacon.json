{
  "address": "0x023dA3e0D49Ee05704773271b11484C6D1E76cCb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_diamondCutFacet",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipProposalAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposed",
          "type": "address"
        }
      ],
      "name": "OwnershipProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPauseAdmin",
          "type": "address"
        }
      ],
      "name": "PauseAdminOwnershipProposalAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pauseAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposed",
          "type": "address"
        }
      ],
      "name": "PauseAdminOwnershipProposalCreated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "acceptBeaconOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptBeaconPauseAdminOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "methodSig",
          "type": "bytes4"
        }
      ],
      "name": "canBeExecutedWhenPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "funcSignature",
          "type": "bytes4"
        }
      ],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "proposeBeaconOwnershipTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newPauseAdmin",
          "type": "address"
        }
      ],
      "name": "proposeBeaconPauseAdminOwnershipTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "methodSigs",
          "type": "bytes4[]"
        },
        {
          "internalType": "bool[]",
          "name": "values",
          "type": "bool[]"
        }
      ],
      "name": "setPausedMethodExemptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc9168196a324d5f9ce65bc0370e5f282fdbe3f0695b48f9ab2734c9a1dccf59e",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x023dA3e0D49Ee05704773271b11484C6D1E76cCb",
    "transactionIndex": 0,
    "gasUsed": "3498767",
    "logsBloom": "0x
    "blockHash": "0xe734a01c534947a95e7a6083dfc6aa20375502a073432000d6e8f25d1b7e013f",
    "transactionHash": "0xc9168196a324d5f9ce65bc0370e5f282fdbe3f0695b48f9ab2734c9a1dccf59e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 23211346,
        "transactionHash": "0xc9168196a324d5f9ce65bc0370e5f282fdbe3f0695b48f9ab2734c9a1dccf59e",
        "address": "0x023dA3e0D49Ee05704773271b11484C6D1E76cCb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe734a01c534947a95e7a6083dfc6aa20375502a073432000d6e8f25d1b7e013f"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23211346,
        "transactionHash": "0xc9168196a324d5f9ce65bc0370e5f282fdbe3f0695b48f9ab2734c9a1dccf59e",
        "address": "0x023dA3e0D49Ee05704773271b11484C6D1E76cCb",
        "topics": [
          "0xa9b6c2526b044187e4744e292867fd1f6b7e6be882e40ec94d7949b26f8088b2",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe734a01c534947a95e7a6083dfc6aa20375502a073432000d6e8f25d1b7e013f"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23211346,
        "transactionHash": "0xc9168196a324d5f9ce65bc0370e5f282fdbe3f0695b48f9ab2734c9a1dccf59e",
        "address": "0x023dA3e0D49Ee05704773271b11484C6D1E76cCb",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000006442aa9fb9d6f011b420ee8384b57e26c2f5683a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000031f931c1c000000000000000000000000000000000000000000000000000000008456cb59000000000000000000000000000000000000000000000000000000003f4ba83a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0xe734a01c534947a95e7a6083dfc6aa20375502a073432000d6e8f25d1b7e013f"
      }
    ],
    "blockNumber": 23211346,
    "cumulativeGasUsed": "3498767",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "0x6442aa9fB9D6f011B420EE8384B57e26C2f5683A"
  ],
  "numDeployments": 1,
  "solcInputHash": "5790bf5c86e1239183c9cb67b7872f7d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_diamondCutFacet\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposalAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"OwnershipProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPauseAdmin\",\"type\":\"address\"}],\"name\":\"PauseAdminOwnershipProposalAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pauseAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposed\",\"type\":\"address\"}],\"name\":\"PauseAdminOwnershipProposalCreated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptBeaconOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptBeaconPauseAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"methodSig\",\"type\":\"bytes4\"}],\"name\":\"canBeExecutedWhenPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"funcSignature\",\"type\":\"bytes4\"}],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"proposeBeaconOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPauseAdmin\",\"type\":\"address\"}],\"name\":\"proposeBeaconPauseAdminOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"methodSigs\",\"type\":\"bytes4[]\"},{\"internalType\":\"bool[]\",\"name\":\"values\",\"type\":\"bool[]\"}],\"name\":\"setPausedMethodExemptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"OwnershipProposalAccepted(address)\":{\"details\":\"emitted after accepting a ownership transfer proposal by the new owner\",\"params\":{\"newOwner\":\"address of the new owner*\"}},\"OwnershipProposalCreated(address,address)\":{\"details\":\"emitted after creating a ownership transfer proposal by the owner\",\"params\":{\"owner\":\"address of the current owner\",\"proposed\":\"address of the proposed owner*\"}},\"PauseAdminOwnershipProposalAccepted(address)\":{\"details\":\"emitted after accepting a pauseAdmin transfer proposal by the new pauseAdmin\",\"params\":{\"newPauseAdmin\":\"address of the new pauseAdmin*\"}},\"PauseAdminOwnershipProposalCreated(address,address)\":{\"details\":\"emitted after creating a pauseAdmin transfer proposal by the pauseAdmin\",\"params\":{\"pauseAdmin\":\"address of the current pauseAdmin\",\"proposed\":\"address of the proposed pauseAdmin*\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"SmartLoanDiamondBeacon A contract that is authorised to borrow funds using delegated credit. It maintains solvency calculating the current value of assets and borrowings. In case the value of assets held drops below certain level, part of the funds may be forcibly repaid. It permits only a limited and safe token transfer.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SmartLoanDiamondBeacon.sol\":\"SmartLoanDiamondBeacon\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/SmartLoanDiamondBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 49fd65d9a6ea5ddcd283ac4913262e342cf1ad80;\\npragma solidity 0.8.17;\\n\\nimport {DiamondStorageLib} from \\\"./lib/DiamondStorageLib.sol\\\";\\nimport {IDiamondCut} from \\\"./interfaces/IDiamondCut.sol\\\";\\n\\n/**\\n * @title SmartLoanDiamondBeacon\\n * A contract that is authorised to borrow funds using delegated credit.\\n * It maintains solvency calculating the current value of assets and borrowings.\\n * In case the value of assets held drops below certain level, part of the funds may be forcibly repaid.\\n * It permits only a limited and safe token transfer.\\n *\\n */\\n\\ncontract SmartLoanDiamondBeacon {\\n    constructor(address _contractOwner, address _diamondCutFacet) payable {\\n        DiamondStorageLib.setContractOwner(_contractOwner);\\n        DiamondStorageLib.setContractPauseAdmin(_contractOwner);\\n\\n        // Add the diamondCut external function from the diamondCutFacet\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\n        bytes4[] memory functionSelectors = new bytes4[](3);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        functionSelectors[1] = IDiamondCut.pause.selector;\\n        functionSelectors[2] = IDiamondCut.unpause.selector;\\n        cut[0] = IDiamondCut.FacetCut({\\n        facetAddress : _diamondCutFacet,\\n        action : IDiamondCut.FacetCutAction.Add,\\n        functionSelectors : functionSelectors\\n        });\\n        DiamondStorageLib.diamondCut(cut, address(0), \\\"\\\");\\n\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n        // diamondCut(); unpause()\\n        ds.canBeExecutedWhenPaused[0x1f931c1c] = true;\\n        ds.canBeExecutedWhenPaused[0x3f4ba83a] = true;\\n    }\\n\\n    function implementation() public view returns (address) {\\n        return address(this);\\n    }\\n\\n    function canBeExecutedWhenPaused(bytes4 methodSig) external view returns (bool) {\\n        return DiamondStorageLib.getPausedMethodExemption(methodSig);\\n    }\\n\\n    function setPausedMethodExemptions(bytes4[] memory methodSigs, bool[] memory values) public {\\n        DiamondStorageLib.enforceIsContractOwner();\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n\\n        for(uint i; i<methodSigs.length; i++){\\n            require(!(methodSigs[i] == 0x3f4ba83a && values[i] == false), \\\"The unpause() method must be available during the paused state.\\\");\\n            ds.canBeExecutedWhenPaused[methodSigs[i]] = values[i];\\n        }\\n    }\\n\\n    function getStatus() public view returns(bool) {\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n        return ds._active;\\n    }\\n\\n    function implementation(bytes4 funcSignature) public view notPausedOrUpgrading(funcSignature) returns (address) {\\n        DiamondStorageLib.DiamondStorage storage ds;\\n        bytes32 position = DiamondStorageLib.DIAMOND_STORAGE_POSITION;\\n        // get diamond storage\\n        assembly {\\n            ds.slot := position\\n        }\\n        // get facet from function selector\\n        address facet = ds.selectorToFacetAndPosition[funcSignature].facetAddress;\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n        // Execute external function from facet using delegatecall and return any value.\\n        return facet;\\n    }\\n\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        address facet = implementation(msg.sig);\\n        // Execute external function from facet using delegatecall and return any value.\\n        assembly {\\n        // copy function selector and any arguments\\n            calldatacopy(0, 0, calldatasize())\\n        // execute function call using the facet\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n        // get any return value\\n            returndatacopy(0, 0, returndatasize())\\n        // return any return value or error back to the caller\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return (0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function proposeBeaconOwnershipTransfer(address _newOwner) external {\\n        DiamondStorageLib.enforceIsContractOwner();\\n        require(_newOwner != msg.sender, \\\"Can't propose oneself as a contract owner\\\");\\n        DiamondStorageLib.setProposedOwner(_newOwner);\\n\\n        emit OwnershipProposalCreated(msg.sender, _newOwner);\\n    }\\n\\n    function proposeBeaconPauseAdminOwnershipTransfer(address _newPauseAdmin) external {\\n        DiamondStorageLib.enforceIsPauseAdmin();\\n        require(_newPauseAdmin != msg.sender, \\\"Can't propose oneself as a contract pauseAdmin\\\");\\n        DiamondStorageLib.setProposedPauseAdmin(_newPauseAdmin);\\n\\n        emit PauseAdminOwnershipProposalCreated(msg.sender, _newPauseAdmin);\\n    }\\n\\n    function acceptBeaconOwnership() external {\\n        require(DiamondStorageLib.proposedOwner() == msg.sender, \\\"Only a proposed user can accept ownership\\\");\\n        DiamondStorageLib.setContractOwner(msg.sender);\\n        DiamondStorageLib.setProposedOwner(address(0));\\n\\n        emit OwnershipProposalAccepted(msg.sender);\\n    }\\n\\n    function acceptBeaconPauseAdminOwnership() external {\\n        require(DiamondStorageLib.proposedPauseAdmin() == msg.sender, \\\"Only a proposed user can accept ownership\\\");\\n        DiamondStorageLib.setContractPauseAdmin(msg.sender);\\n        DiamondStorageLib.setProposedPauseAdmin(address(0));\\n\\n        emit PauseAdminOwnershipProposalAccepted(msg.sender);\\n    }\\n\\n    modifier notPausedOrUpgrading(bytes4 funcSignature) {\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n        if(!ds._active){\\n            if(!ds.canBeExecutedWhenPaused[funcSignature]){\\n                revert(\\\"ProtocolUpgrade: paused.\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev emitted after creating a pauseAdmin transfer proposal by the pauseAdmin\\n     * @param pauseAdmin address of the current pauseAdmin\\n     * @param proposed address of the proposed pauseAdmin\\n     **/\\n    event PauseAdminOwnershipProposalCreated(address indexed pauseAdmin, address indexed proposed);\\n\\n    /**\\n     * @dev emitted after accepting a pauseAdmin transfer proposal by the new pauseAdmin\\n     * @param newPauseAdmin address of the new pauseAdmin\\n     **/\\n    event PauseAdminOwnershipProposalAccepted(address indexed newPauseAdmin);\\n\\n    /**\\n     * @dev emitted after creating a ownership transfer proposal by the owner\\n     * @param owner address of the current owner\\n     * @param proposed address of the proposed owner\\n     **/\\n    event OwnershipProposalCreated(address indexed owner, address indexed proposed);\\n\\n    /**\\n     * @dev emitted after accepting a ownership transfer proposal by the new owner\\n     * @param newOwner address of the new owner\\n     **/\\n    event OwnershipProposalAccepted(address indexed newOwner);\\n}\",\"keccak256\":\"0x94a7f0998756819ac8ee0d2e77d44cbac38d165918c0acd45ddd70064630829f\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\",\"keccak256\":\"0xdabe34201dcc6fd64a1cf484d16f031d6d64e39ebdcae7cc63e7c525c8beecc7\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IStakingPositions\\n * Types for staking\\n */\\ninterface IStakingPositions {\\n    struct StakedPosition {\\n        address vault;\\n        bytes32 symbol;\\n        bytes4 balanceSelector;\\n        bytes4 unstakeSelector;\\n    }\\n}\\n\",\"keccak256\":\"0xe617bf40dd2a59f4dbf9d24696fe931a0247a59dae1ba58ab26ff58518b2c846\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // Bytes32ToAddressMap\\n\\n    struct Bytes32ToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (key, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x74c86dcb231a31355e8947aea10f3c94eb5f1656b000ce90d18f5a48fcb98b4a\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary DiamondStorageLib {\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // Used to select methods that can be executed even when Diamond is paused\\n        mapping(bytes4 => bool) canBeExecutedWhenPaused;\\n\\n        bool _initialized;\\n        bool _active;\\n    }\\n\\n    struct SmartLoanStorage {\\n        // PauseAdmin has the power to pause/unpause the contract without the timelock delay in case of a critical bug/exploit\\n        address pauseAdmin;\\n        // Owner of the contract\\n        address contractOwner;\\n        // Proposed owner of the contract\\n        address proposedOwner;\\n        // Proposed pauseAdmin of the contract\\n        address proposedPauseAdmin;\\n        // Is contract initialized?\\n        bool _initialized;\\n        // TODO: mock staking tokens until redstone oracle supports them\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\n        // Staked positions of the contract\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\n    }\\n\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\n        assembly {\\n            rgs.slot := position\\n        }\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\n        assembly {\\n            sls.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    event PauseAdminOwnershipTransferred(address indexed previousPauseAdmin, address indexed newPauseAdmin);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousOwner = sls.contractOwner;\\n        sls.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function setContractPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousPauseAdmin = sls.pauseAdmin;\\n        sls.pauseAdmin = _newPauseAdmin;\\n        emit PauseAdminOwnershipTransferred(previousPauseAdmin, _newPauseAdmin);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = smartLoanStorage().contractOwner;\\n    }\\n\\n    function pauseAdmin() internal view returns (address pauseAdmin) {\\n        pauseAdmin = smartLoanStorage().pauseAdmin;\\n    }\\n\\n    function setProposedOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedOwner = _newOwner;\\n    }\\n\\n    function setProposedPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedPauseAdmin = _newPauseAdmin;\\n    }\\n\\n    function getPausedMethodExemption(bytes4 _methodSig) internal view returns (bool) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.canBeExecutedWhenPaused[_methodSig];\\n    }\\n\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\n    }\\n\\n    function proposedPauseAdmin() internal view returns (address proposedPauseAdmin) {\\n        proposedPauseAdmin = smartLoanStorage().proposedPauseAdmin;\\n    }\\n\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\n        _positions = smartLoanStorage().currentStakedPositions;\\n    }\\n\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        bool found;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].balanceSelector == position.balanceSelector) {\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        if (!found) {\\n            positions.push(position);\\n        }\\n    }\\n\\n    function removeStakedPosition(bytes4 balanceSelector) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].balanceSelector == balanceSelector) {\\n                positions[i] = positions[positions.length - 1];\\n                positions.pop();\\n            }\\n        }\\n    }\\n\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\n    }\\n\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        return sls.ownedAssets.contains(_symbol);\\n    }\\n\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\n    }\\n\\n    function enforceIsPauseAdmin() internal view {\\n        require(msg.sender == smartLoanStorage().pauseAdmin, \\\"DiamondStorageLib: Must be contract pauseAdmin\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\",\"keccak256\":\"0xf869344734b4c73c9ea873a4f45e007103ce89cd5a80667ac1d52620a262b095\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040516200603538038062006035833981810160405281019062000029919062001b8a565b6200003f82620003a560201b620009571760201c565b62000055826200048460201b62000a2e1760201c565b6000600167ffffffffffffffff81111562000075576200007462001bd1565b5b604051908082528060200260200182016040528015620000b257816020015b6200009e62001ad4565b815260200190600190039081620000945790505b5090506000600367ffffffffffffffff811115620000d557620000d462001bd1565b5b604051908082528060200260200182016040528015620001045781602001602082028036833780820191505090505b509050631f931c1c60e01b8160008151811062000126576200012562001c00565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050638456cb5960e01b8160018151811062000191576200019062001c00565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050633f4ba83a60e01b81600281518110620001fc57620001fb62001c00565b5b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152505060405180606001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020016000600281111562000286576200028562001c2f565b5b81526020018281525082600081518110620002a657620002a562001c00565b5b6020026020010181905250620002d9826000604051806020016040528060008152506200056360201b62000b051760201c565b6000620002f0620007e760201b62000d341760201c565b90506001816004016000631f931c1c60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055506001816004016000633f4ba83a60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505050620028c7565b6000620003b76200081460201b60201c565b905060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b6000620004966200081460201b60201c565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fa9b6c2526b044187e4744e292867fd1f6b7e6be882e40ec94d7949b26f8088b260405160405180910390a3505050565b60005b83518110156200079257600084828151811062000588576200058762001c00565b5b602002602001015160200151905060006002811115620005ad57620005ac62001c2f565b5b816002811115620005c357620005c262001c2f565b5b0362000623576200061d858381518110620005e357620005e262001c00565b5b60200260200101516000015186848151811062000605576200060462001c00565b5b6020026020010151604001516200084160201b60201c565b6200077b565b600160028111156200063a576200063962001c2f565b5b81600281111562000650576200064f62001c2f565b5b03620006b057620006aa85838151811062000670576200066f62001c00565b5b60200260200101516000015186848151811062000692576200069162001c00565b5b60200260200101516040015162000ae360201b60201c565b6200077a565b600280811115620006c657620006c562001c2f565b5b816002811115620006dc57620006db62001c2f565b5b036200073c5762000736858381518110620006fc57620006fb62001c00565b5b6020026020010151600001518684815181106200071e576200071d62001c00565b5b60200260200101516040015162000d9760201b60201c565b62000779565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007709062001ce5565b60405180910390fd5b5b5b508080620007899062001d40565b91505062000566565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673838383604051620007c893929190620020ba565b60405180910390a1620007e2828262000f3f60201b60201c565b505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b600081511162000888576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200087f906200217b565b60405180910390fd5b60006200089a620007e760201b60201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036200090e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009059062002213565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff160362000984576200098382856200116d60201b60201c565b5b60005b835181101562000adc576000848281518110620009a957620009a862001c00565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462000aa0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a9790620022ab565b60405180910390fd5b62000ab48583868a6200125160201b60201c565b838062000ac190620022e5565b9450505050808062000ad39062001d40565b91505062000987565b5050505050565b600081511162000b2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b21906200217b565b60405180910390fd5b600062000b3c620007e760201b60201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160362000bb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ba79062002213565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff160362000c265762000c2582856200116d60201b60201c565b5b60005b835181101562000d9057600084828151811062000c4b5762000c4a62001c00565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000d41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d389062002394565b60405180910390fd5b62000d54858284620013fe60201b60201c565b62000d688583868a6200125160201b60201c565b838062000d7590620022e5565b9450505050808062000d879062001d40565b91505062000c29565b5050505050565b600081511162000dde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000dd5906200217b565b60405180910390fd5b600062000df0620007e760201b60201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161462000e64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e5b906200242c565b60405180910390fd5b60005b825181101562000f3957600083828151811062000e895762000e8862001c00565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905062000f21848284620013fe60201b60201c565b5050808062000f309062001d40565b91505062000e67565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000fc157600081511462000fbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000fb290620024ea565b60405180910390fd5b62001169565b600081511162001008576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000fff90620025a8565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614620010685762001067826040518060600160405280602f815260200162006006602f913962001a7f60201b60201c565b5b6000808373ffffffffffffffffffffffffffffffffffffffff16836040516200109291906200260c565b600060405180830381855af49150503d8060008114620010cf576040519150601f19603f3d011682016040523d82523d6000602084013e620010d4565b606091505b50915091508162001166576000815111156200112957806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001120919062002671565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200115d906200270b565b60405180910390fd5b50505b5050565b62001198816040518060600160405280602b815260200162005fdb602b913962001a7f60201b60201c565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362001470576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200146790620027a3565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620014e1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620014d8906200283b565b60405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050620015ba91906200285d565b9050808214620017555760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000182815481106200161f576200161e62001c00565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000184815481106200169e576200169d62001c00565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805480620017ac57620017ab62002898565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff021916905550506000810362001a78576000600186600201805490506200189991906200285d565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050818114620019e157600087600201838154811062001907576200190662001c00565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050808860020183815481106200194e576200194d62001c00565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b86600201805480620019f857620019f762002898565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000823b905060008111829062001ace576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001ac5919062002671565b60405180910390fd5b50505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600281111562001b135762001b1262001c2f565b5b8152602001606081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062001b528262001b25565b9050919050565b62001b648162001b45565b811462001b7057600080fd5b50565b60008151905062001b848162001b59565b92915050565b6000806040838503121562001ba45762001ba362001b20565b5b600062001bb48582860162001b73565b925050602062001bc78582860162001b73565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f4469616d6f6e6453746f726167654c69624375743a20496e636f72726563742060008201527f4661636574437574416374696f6e000000000000000000000000000000000000602082015250565b600062001ccd602e8362001c5e565b915062001cda8262001c6f565b604082019050919050565b6000602082019050818103600083015262001d008162001cbe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600062001d4d8262001d36565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001d825762001d8162001d07565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62001dc48162001b45565b82525050565b6003811062001dde5762001ddd62001c2f565b5b50565b600081905062001df18262001dca565b919050565b600062001e038262001de1565b9050919050565b62001e158162001df6565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b62001e7e8162001e47565b82525050565b600062001e92838362001e73565b60208301905092915050565b6000602082019050919050565b600062001eb88262001e1b565b62001ec4818562001e26565b935062001ed18362001e37565b8060005b8381101562001f0857815162001eec888262001e84565b975062001ef98362001e9e565b92505060018101905062001ed5565b5085935050505092915050565b600060608301600083015162001f2f600086018262001db9565b50602083015162001f44602086018262001e0a565b506040830151848203604086015262001f5e828262001eab565b9150508091505092915050565b600062001f79838362001f15565b905092915050565b6000602082019050919050565b600062001f9b8262001d8d565b62001fa7818562001d98565b93508360208202850162001fbb8562001da9565b8060005b8581101562001ffd578484038952815162001fdb858262001f6b565b945062001fe88362001f81565b925060208a0199505060018101905062001fbf565b50829750879550505050505092915050565b6200201a8162001b45565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200205c5780820151818401526020810190506200203f565b60008484015250505050565b6000601f19601f8301169050919050565b6000620020868262002020565b6200209281856200202b565b9350620020a48185602086016200203c565b620020af8162002068565b840191505092915050565b60006060820190508181036000830152620020d6818662001f8e565b9050620020e760208301856200200f565b8181036040830152620020fb818462002079565b9050949350505050565b7f4469616d6f6e6453746f726167654c69624375743a204e6f2073656c6563746f60008201527f727320696e20666163657420746f206375740000000000000000000000000000602082015250565b60006200216360328362001c5e565b9150620021708262002105565b604082019050919050565b60006020820190508181036000830152620021968162002154565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a204164642066616365742060008201527f63616e2774206265206164647265737328302900000000000000000000000000602082015250565b6000620021fb60338362001c5e565b915062002208826200219d565b604082019050919050565b600060208201905081810360008301526200222e81620021ec565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e2774206164642060008201527f66756e6374696f6e207468617420616c72656164792065786973747300000000602082015250565b600062002293603c8362001c5e565b9150620022a08262002235565b604082019050919050565b60006020820190508181036000830152620022c68162002284565b9050919050565b60006bffffffffffffffffffffffff82169050919050565b6000620022f282620022cd565b91506bffffffffffffffffffffffff820362002313576200231262001d07565b5b600182019050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e2774207265706c60008201527f6163652066756e6374696f6e20776974682073616d652066756e6374696f6e00602082015250565b60006200237c603f8362001c5e565b915062002389826200231e565b604082019050919050565b60006020820190508181036000830152620023af816200236d565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2052656d6f76652066616360008201527f65742061646472657373206d7573742062652061646472657373283029000000602082015250565b600062002414603d8362001c5e565b91506200242182620023b6565b604082019050919050565b60006020820190508181036000830152620024478162002405565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a205f696e6974206973206160008201527f646472657373283029206275745f63616c6c64617461206973206e6f7420656d60208201527f7074790000000000000000000000000000000000000000000000000000000000604082015250565b6000620024d260438362001c5e565b9150620024df826200244e565b606082019050919050565b600060208201905081810360008301526200250581620024c3565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a205f63616c6c646174612060008201527f697320656d70747920627574205f696e6974206973206e6f742061646472657360208201527f7328302900000000000000000000000000000000000000000000000000000000604082015250565b60006200259060448362001c5e565b91506200259d826200250c565b606082019050919050565b60006020820190508181036000830152620025c38162002581565b9050919050565b600081905092915050565b6000620025e28262002020565b620025ee8185620025ca565b9350620026008185602086016200203c565b80840191505092915050565b60006200261a8284620025d5565b915081905092915050565b600081519050919050565b60006200263d8262002625565b62002649818562001c5e565b93506200265b8185602086016200203c565b620026668162002068565b840191505092915050565b600060208201905081810360008301526200268d818462002630565b905092915050565b7f4469616d6f6e6453746f726167654c69624375743a205f696e69742066756e6360008201527f74696f6e20726576657274656400000000000000000000000000000000000000602082015250565b6000620026f3602d8362001c5e565b9150620027008262002695565b604082019050919050565b600060208201905081810360008301526200272681620026e4565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e27742072656d6f60008201527f76652066756e6374696f6e207468617420646f65736e27742065786973740000602082015250565b60006200278b603e8362001c5e565b915062002798826200272d565b604082019050919050565b60006020820190508181036000830152620027be816200277c565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e27742072656d6f60008201527f766520696d6d757461626c652066756e6374696f6e0000000000000000000000602082015250565b60006200282360358362001c5e565b91506200283082620027c5565b604082019050919050565b60006020820190508181036000830152620028568162002814565b9050919050565b60006200286a8262001d36565b9150620028778362001d36565b925082820390508181111562002892576200289162001d07565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b61370480620028d76000396000f3fe60806040526004361061008a5760003560e01c80638865752311610059578063886575231461019e578063b9e75c67146101c7578063c83b58a0146101de578063df499fa514610207578063edad03791461021e5761008b565b80630d741577146100e25780634e69d5601461011f5780635c60da1b1461014a5780637aa071c0146101755761008b565b5b60006100ba6000357fffffffff000000000000000000000000000000000000000000000000000000001661025b565b90503660008037600080366000845af43d6000803e80600081146100dd573d6000f35b3d6000fd5b3480156100ee57600080fd5b5061010960048036038101906101049190612283565b61025b565b60405161011691906122f1565b60405180910390f35b34801561012b57600080fd5b50610134610441565b6040516101419190612327565b60405180910390f35b34801561015657600080fd5b5061015f610466565b60405161016c91906122f1565b60405180910390f35b34801561018157600080fd5b5061019c6004803603810190610197919061236e565b61046e565b005b3480156101aa57600080fd5b506101c560048036038101906101c091906125e3565b61054a565b005b3480156101d357600080fd5b506101dc6106cf565b005b3480156101ea57600080fd5b506102056004803603810190610200919061236e565b61079c565b005b34801561021357600080fd5b5061021c610878565b005b34801561022a57600080fd5b5061024560048036038101906102409190612283565b610945565b6040516102529190612327565b60405180910390f35b6000816000610268610d34565b90508060050160019054906101000a900460ff1661032157806004016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16610320576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610317906126b8565b60405180910390fd5b5b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091506000826000016000887bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042b90612724565b60405180910390fd5b8095505050505050919050565b60008061044c610d34565b90508060050160019054906101000a900460ff1691505090565b600030905090565b610476610d61565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db906127b6565b60405180910390fd5b6104ed81610dfc565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4df3b7624b06f776b815d2fefcdc202767d1b527b1449c2657d8f6951db44ddf60405160405180910390a350565b610552610e4f565b600061055c610d34565b905060005b83518110156106c957633f4ba83a60e01b848281518110610585576105846127d6565b5b60200260200101517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480156105d75750600015158382815181106105cb576105ca6127d6565b5b60200260200101511515145b15610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90612877565b60405180910390fd5b82818151811061062a576106296127d6565b5b602002602001015182600401600086848151811061064b5761064a6127d6565b5b60200260200101517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555080806106c1906128d0565b915050610561565b50505050565b3373ffffffffffffffffffffffffffffffffffffffff166106ee610eea565b73ffffffffffffffffffffffffffffffffffffffff1614610744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073b9061298a565b60405180910390fd5b61074d33610957565b6107576000610f1d565b3373ffffffffffffffffffffffffffffffffffffffff167fd3c0f3a3e3f95e42614af3ba6af04f6a6df312e675ce644bf876e1ae420e3cc660405160405180910390a2565b6107a4610e4f565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080990612a1c565b60405180910390fd5b61081b81610f1d565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f21deb7d724608c01da3d0b07a81834ec56f01dbf1263c6c878d360adf7b5f3dd60405160405180910390a350565b3373ffffffffffffffffffffffffffffffffffffffff16610897610f70565b73ffffffffffffffffffffffffffffffffffffffff16146108ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e49061298a565b60405180910390fd5b6108f633610a2e565b6109006000610dfc565b3373ffffffffffffffffffffffffffffffffffffffff167fe50a4f4f7511acadcc7bdb023559c8cc80d15be0d87fe6f7f6d28cceb1d3b7f860405160405180910390a2565b600061095082610fa3565b9050919050565b6000610961611019565b905060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b6000610a38611019565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fa9b6c2526b044187e4744e292867fd1f6b7e6be882e40ec94d7949b26f8088b260405160405180910390a3505050565b60005b8351811015610ce9576000848281518110610b2657610b256127d6565b5b602002602001015160200151905060006002811115610b4857610b47612a3c565b5b816002811115610b5b57610b5a612a3c565b5b03610bab57610ba6858381518110610b7657610b756127d6565b5b602002602001015160000151868481518110610b9557610b946127d6565b5b602002602001015160400151611046565b610cd5565b60016002811115610bbf57610bbe612a3c565b5b816002811115610bd257610bd1612a3c565b5b03610c2257610c1d858381518110610bed57610bec6127d6565b5b602002602001015160000151868481518110610c0c57610c0b6127d6565b5b6020026020010151604001516112bd565b610cd4565b600280811115610c3557610c34612a3c565b5b816002811115610c4857610c47612a3c565b5b03610c9857610c93858381518110610c6357610c626127d6565b5b602002602001015160000151868481518110610c8257610c816127d6565b5b60200260200101516040015161153e565b610cd3565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cca90612add565b60405180910390fd5b5b5b508080610ce1906128d0565b915050610b08565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673838383604051610d1d93929190612da3565b60405180910390a1610d2f82826116c9565b505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b610d69611019565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df190612e5a565b60405180910390fd5b565b6000610e06611019565b9050818160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610e57611019565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edf90612eec565b60405180910390fd5b565b6000610ef4611019565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610f27611019565b9050818160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000610f7a611019565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610fae610d34565b9050806004016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16915050919050565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b600081511161108a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108190612f7e565b60405180910390fd5b6000611094610d34565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611105576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fc90613010565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff16036111725761117182856118db565b5b60005b83518110156112b6576000848281518110611193576111926127d6565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127e906130a2565b60405180910390fd5b6112938583868a6119b6565b838061129e906130da565b945050505080806112ae906128d0565b915050611175565b5050505050565b6000815111611301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f890612f7e565b60405180910390fd5b600061130b610d34565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361137c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137390613010565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff16036113e9576113e882856118db565b5b60005b835181101561153757600084828151811061140a576114096127d6565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f490613180565b60405180910390fd5b611508858284611b63565b6115148583868a6119b6565b838061151f906130da565b9450505050808061152f906128d0565b9150506113ec565b5050505050565b6000815111611582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157990612f7e565b60405180910390fd5b600061158c610d34565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146115fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f490613212565b60405180910390fd5b60005b82518110156116c357600083828151811061161e5761161d6127d6565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506116ae848284611b63565b505080806116bb906128d0565b915050611600565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611746576000815114611741576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611738906132ca565b60405180910390fd5b6118d7565b600081511161178a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178190613382565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146117e0576117df826040518060600160405280602f81526020016136a0602f91396121c5565b5b6000808373ffffffffffffffffffffffffffffffffffffffff168360405161180891906133de565b600060405180830381855af49150503d8060008114611843576040519150601f19603f3d011682016040523d82523d6000602084013e611848565b606091505b5091509150816118d45760008151111561189957806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118909190613439565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cb906134cd565b60405180910390fd5b50505b5050565b6118fd816040518060600160405280602b8152602001613675602b91396121c5565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611bd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc99061355f565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c37906135f1565b60405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050611d179190613611565b9050808214611eab5760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018281548110611d7857611d776127d6565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018481548110611df457611df36127d6565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805480611eff57611efe613645565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff02191690555050600081036121be57600060018660020180549050611fe99190613611565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905081811461212a576000876002018381548110612053576120526127d6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080886002018381548110612097576120966127d6565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b8660020180548061213e5761213d613645565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000823b9050600081118290612211576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122089190613439565b60405180910390fd5b50505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6122608161222b565b811461226b57600080fd5b50565b60008135905061227d81612257565b92915050565b60006020828403121561229957612298612221565b5b60006122a78482850161226e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122db826122b0565b9050919050565b6122eb816122d0565b82525050565b600060208201905061230660008301846122e2565b92915050565b60008115159050919050565b6123218161230c565b82525050565b600060208201905061233c6000830184612318565b92915050565b61234b816122d0565b811461235657600080fd5b50565b60008135905061236881612342565b92915050565b60006020828403121561238457612383612221565b5b600061239284828501612359565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123e9826123a0565b810181811067ffffffffffffffff82111715612408576124076123b1565b5b80604052505050565b600061241b612217565b905061242782826123e0565b919050565b600067ffffffffffffffff821115612447576124466123b1565b5b602082029050602081019050919050565b600080fd5b600061247061246b8461242c565b612411565b9050808382526020820190506020840283018581111561249357612492612458565b5b835b818110156124bc57806124a8888261226e565b845260208401935050602081019050612495565b5050509392505050565b600082601f8301126124db576124da61239b565b5b81356124eb84826020860161245d565b91505092915050565b600067ffffffffffffffff82111561250f5761250e6123b1565b5b602082029050602081019050919050565b6125298161230c565b811461253457600080fd5b50565b60008135905061254681612520565b92915050565b600061255f61255a846124f4565b612411565b9050808382526020820190506020840283018581111561258257612581612458565b5b835b818110156125ab57806125978882612537565b845260208401935050602081019050612584565b5050509392505050565b600082601f8301126125ca576125c961239b565b5b81356125da84826020860161254c565b91505092915050565b600080604083850312156125fa576125f9612221565b5b600083013567ffffffffffffffff81111561261857612617612226565b5b612624858286016124c6565b925050602083013567ffffffffffffffff81111561264557612644612226565b5b612651858286016125b5565b9150509250929050565b600082825260208201905092915050565b7f50726f746f636f6c557067726164653a207061757365642e0000000000000000600082015250565b60006126a260188361265b565b91506126ad8261266c565b602082019050919050565b600060208201905081810360008301526126d181612695565b9050919050565b7f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f74206578697374600082015250565b600061270e60208361265b565b9150612719826126d8565b602082019050919050565b6000602082019050818103600083015261273d81612701565b9050919050565b7f43616e27742070726f706f7365206f6e6573656c66206173206120636f6e747260008201527f61637420706175736541646d696e000000000000000000000000000000000000602082015250565b60006127a0602e8361265b565b91506127ab82612744565b604082019050919050565b600060208201905081810360008301526127cf81612793565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f54686520756e70617573652829206d6574686f64206d7573742062652061766160008201527f696c61626c6520647572696e6720746865207061757365642073746174652e00602082015250565b6000612861603f8361265b565b915061286c82612805565b604082019050919050565b6000602082019050818103600083015261289081612854565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006128db826128c6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361290d5761290c612897565b5b600182019050919050565b7f4f6e6c7920612070726f706f73656420757365722063616e206163636570742060008201527f6f776e6572736869700000000000000000000000000000000000000000000000602082015250565b600061297460298361265b565b915061297f82612918565b604082019050919050565b600060208201905081810360008301526129a381612967565b9050919050565b7f43616e27742070726f706f7365206f6e6573656c66206173206120636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612a0660298361265b565b9150612a11826129aa565b604082019050919050565b60006020820190508181036000830152612a35816129f9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4469616d6f6e6453746f726167654c69624375743a20496e636f72726563742060008201527f4661636574437574416374696f6e000000000000000000000000000000000000602082015250565b6000612ac7602e8361265b565b9150612ad282612a6b565b604082019050919050565b60006020820190508181036000830152612af681612aba565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612b32816122d0565b82525050565b60038110612b4957612b48612a3c565b5b50565b6000819050612b5a82612b38565b919050565b6000612b6a82612b4c565b9050919050565b612b7a81612b5f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612bb58161222b565b82525050565b6000612bc78383612bac565b60208301905092915050565b6000602082019050919050565b6000612beb82612b80565b612bf58185612b8b565b9350612c0083612b9c565b8060005b83811015612c31578151612c188882612bbb565b9750612c2383612bd3565b925050600181019050612c04565b5085935050505092915050565b6000606083016000830151612c566000860182612b29565b506020830151612c696020860182612b71565b5060408301518482036040860152612c818282612be0565b9150508091505092915050565b6000612c9a8383612c3e565b905092915050565b6000602082019050919050565b6000612cba82612afd565b612cc48185612b08565b935083602082028501612cd685612b19565b8060005b85811015612d125784840389528151612cf38582612c8e565b9450612cfe83612ca2565b925060208a01995050600181019050612cda565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612d5e578082015181840152602081019050612d43565b60008484015250505050565b6000612d7582612d24565b612d7f8185612d2f565b9350612d8f818560208601612d40565b612d98816123a0565b840191505092915050565b60006060820190508181036000830152612dbd8186612caf565b9050612dcc60208301856122e2565b8181036040830152612dde8184612d6a565b9050949350505050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f61637420706175736541646d696e000000000000000000000000000000000000602082015250565b6000612e44602e8361265b565b9150612e4f82612de8565b604082019050919050565b60006020820190508181036000830152612e7381612e37565b9050919050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612ed660298361265b565b9150612ee182612e7a565b604082019050919050565b60006020820190508181036000830152612f0581612ec9565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a204e6f2073656c6563746f60008201527f727320696e20666163657420746f206375740000000000000000000000000000602082015250565b6000612f6860328361265b565b9150612f7382612f0c565b604082019050919050565b60006020820190508181036000830152612f9781612f5b565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a204164642066616365742060008201527f63616e2774206265206164647265737328302900000000000000000000000000602082015250565b6000612ffa60338361265b565b915061300582612f9e565b604082019050919050565b6000602082019050818103600083015261302981612fed565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e2774206164642060008201527f66756e6374696f6e207468617420616c72656164792065786973747300000000602082015250565b600061308c603c8361265b565b915061309782613030565b604082019050919050565b600060208201905081810360008301526130bb8161307f565b9050919050565b60006bffffffffffffffffffffffff82169050919050565b60006130e5826130c2565b91506bffffffffffffffffffffffff820361310357613102612897565b5b600182019050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e2774207265706c60008201527f6163652066756e6374696f6e20776974682073616d652066756e6374696f6e00602082015250565b600061316a603f8361265b565b91506131758261310e565b604082019050919050565b600060208201905081810360008301526131998161315d565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2052656d6f76652066616360008201527f65742061646472657373206d7573742062652061646472657373283029000000602082015250565b60006131fc603d8361265b565b9150613207826131a0565b604082019050919050565b6000602082019050818103600083015261322b816131ef565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a205f696e6974206973206160008201527f646472657373283029206275745f63616c6c64617461206973206e6f7420656d60208201527f7074790000000000000000000000000000000000000000000000000000000000604082015250565b60006132b460438361265b565b91506132bf82613232565b606082019050919050565b600060208201905081810360008301526132e3816132a7565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a205f63616c6c646174612060008201527f697320656d70747920627574205f696e6974206973206e6f742061646472657360208201527f7328302900000000000000000000000000000000000000000000000000000000604082015250565b600061336c60448361265b565b9150613377826132ea565b606082019050919050565b6000602082019050818103600083015261339b8161335f565b9050919050565b600081905092915050565b60006133b882612d24565b6133c281856133a2565b93506133d2818560208601612d40565b80840191505092915050565b60006133ea82846133ad565b915081905092915050565b600081519050919050565b600061340b826133f5565b613415818561265b565b9350613425818560208601612d40565b61342e816123a0565b840191505092915050565b600060208201905081810360008301526134538184613400565b905092915050565b7f4469616d6f6e6453746f726167654c69624375743a205f696e69742066756e6360008201527f74696f6e20726576657274656400000000000000000000000000000000000000602082015250565b60006134b7602d8361265b565b91506134c28261345b565b604082019050919050565b600060208201905081810360008301526134e6816134aa565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e27742072656d6f60008201527f76652066756e6374696f6e207468617420646f65736e27742065786973740000602082015250565b6000613549603e8361265b565b9150613554826134ed565b604082019050919050565b600060208201905081810360008301526135788161353c565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e27742072656d6f60008201527f766520696d6d757461626c652066756e6374696f6e0000000000000000000000602082015250565b60006135db60358361265b565b91506135e68261357f565b604082019050919050565b6000602082019050818103600083015261360a816135ce565b9050919050565b600061361c826128c6565b9150613627836128c6565b925082820390508181111561363f5761363e612897565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe4469616d6f6e6453746f726167654c69624375743a204e657720666163657420686173206e6f20636f64654469616d6f6e6453746f726167654c69624375743a205f696e6974206164647265737320686173206e6f20636f6465a2646970667358221220254803049a174d5e5b026c3b0baf7f619ed3a10cd708b20cc42c57f5044b7ddc64736f6c634300081100334469616d6f6e6453746f726167654c69624375743a204e657720666163657420686173206e6f20636f64654469616d6f6e6453746f726167654c69624375743a205f696e6974206164647265737320686173206e6f20636f6465",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80638865752311610059578063886575231461019e578063b9e75c67146101c7578063c83b58a0146101de578063df499fa514610207578063edad03791461021e5761008b565b80630d741577146100e25780634e69d5601461011f5780635c60da1b1461014a5780637aa071c0146101755761008b565b5b60006100ba6000357fffffffff000000000000000000000000000000000000000000000000000000001661025b565b90503660008037600080366000845af43d6000803e80600081146100dd573d6000f35b3d6000fd5b3480156100ee57600080fd5b5061010960048036038101906101049190612283565b61025b565b60405161011691906122f1565b60405180910390f35b34801561012b57600080fd5b50610134610441565b6040516101419190612327565b60405180910390f35b34801561015657600080fd5b5061015f610466565b60405161016c91906122f1565b60405180910390f35b34801561018157600080fd5b5061019c6004803603810190610197919061236e565b61046e565b005b3480156101aa57600080fd5b506101c560048036038101906101c091906125e3565b61054a565b005b3480156101d357600080fd5b506101dc6106cf565b005b3480156101ea57600080fd5b506102056004803603810190610200919061236e565b61079c565b005b34801561021357600080fd5b5061021c610878565b005b34801561022a57600080fd5b5061024560048036038101906102409190612283565b610945565b6040516102529190612327565b60405180910390f35b6000816000610268610d34565b90508060050160019054906101000a900460ff1661032157806004016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16610320576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610317906126b8565b60405180910390fd5b5b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091506000826000016000887bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042b90612724565b60405180910390fd5b8095505050505050919050565b60008061044c610d34565b90508060050160019054906101000a900460ff1691505090565b600030905090565b610476610d61565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104db906127b6565b60405180910390fd5b6104ed81610dfc565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4df3b7624b06f776b815d2fefcdc202767d1b527b1449c2657d8f6951db44ddf60405160405180910390a350565b610552610e4f565b600061055c610d34565b905060005b83518110156106c957633f4ba83a60e01b848281518110610585576105846127d6565b5b60200260200101517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480156105d75750600015158382815181106105cb576105ca6127d6565b5b60200260200101511515145b15610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90612877565b60405180910390fd5b82818151811061062a576106296127d6565b5b602002602001015182600401600086848151811061064b5761064a6127d6565b5b60200260200101517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555080806106c1906128d0565b915050610561565b50505050565b3373ffffffffffffffffffffffffffffffffffffffff166106ee610eea565b73ffffffffffffffffffffffffffffffffffffffff1614610744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073b9061298a565b60405180910390fd5b61074d33610957565b6107576000610f1d565b3373ffffffffffffffffffffffffffffffffffffffff167fd3c0f3a3e3f95e42614af3ba6af04f6a6df312e675ce644bf876e1ae420e3cc660405160405180910390a2565b6107a4610e4f565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080990612a1c565b60405180910390fd5b61081b81610f1d565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f21deb7d724608c01da3d0b07a81834ec56f01dbf1263c6c878d360adf7b5f3dd60405160405180910390a350565b3373ffffffffffffffffffffffffffffffffffffffff16610897610f70565b73ffffffffffffffffffffffffffffffffffffffff16146108ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e49061298a565b60405180910390fd5b6108f633610a2e565b6109006000610dfc565b3373ffffffffffffffffffffffffffffffffffffffff167fe50a4f4f7511acadcc7bdb023559c8cc80d15be0d87fe6f7f6d28cceb1d3b7f860405160405180910390a2565b600061095082610fa3565b9050919050565b6000610961611019565b905060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b6000610a38611019565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fa9b6c2526b044187e4744e292867fd1f6b7e6be882e40ec94d7949b26f8088b260405160405180910390a3505050565b60005b8351811015610ce9576000848281518110610b2657610b256127d6565b5b602002602001015160200151905060006002811115610b4857610b47612a3c565b5b816002811115610b5b57610b5a612a3c565b5b03610bab57610ba6858381518110610b7657610b756127d6565b5b602002602001015160000151868481518110610b9557610b946127d6565b5b602002602001015160400151611046565b610cd5565b60016002811115610bbf57610bbe612a3c565b5b816002811115610bd257610bd1612a3c565b5b03610c2257610c1d858381518110610bed57610bec6127d6565b5b602002602001015160000151868481518110610c0c57610c0b6127d6565b5b6020026020010151604001516112bd565b610cd4565b600280811115610c3557610c34612a3c565b5b816002811115610c4857610c47612a3c565b5b03610c9857610c93858381518110610c6357610c626127d6565b5b602002602001015160000151868481518110610c8257610c816127d6565b5b60200260200101516040015161153e565b610cd3565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cca90612add565b60405180910390fd5b5b5b508080610ce1906128d0565b915050610b08565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673838383604051610d1d93929190612da3565b60405180910390a1610d2f82826116c9565b505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b610d69611019565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df190612e5a565b60405180910390fd5b565b6000610e06611019565b9050818160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610e57611019565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edf90612eec565b60405180910390fd5b565b6000610ef4611019565b60020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610f27611019565b9050818160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000610f7a611019565b60030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610fae610d34565b9050806004016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16915050919050565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b600081511161108a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108190612f7e565b60405180910390fd5b6000611094610d34565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611105576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fc90613010565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff16036111725761117182856118db565b5b60005b83518110156112b6576000848281518110611193576111926127d6565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127e906130a2565b60405180910390fd5b6112938583868a6119b6565b838061129e906130da565b945050505080806112ae906128d0565b915050611175565b5050505050565b6000815111611301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f890612f7e565b60405180910390fd5b600061130b610d34565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361137c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137390613010565b60405180910390fd5b60008160010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054905090506000816bffffffffffffffffffffffff16036113e9576113e882856118db565b5b60005b835181101561153757600084828151811061140a576114096127d6565b5b602002602001015190506000846000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f490613180565b60405180910390fd5b611508858284611b63565b6115148583868a6119b6565b838061151f906130da565b9450505050808061152f906128d0565b9150506113ec565b5050505050565b6000815111611582576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157990612f7e565b60405180910390fd5b600061158c610d34565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146115fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f490613212565b60405180910390fd5b60005b82518110156116c357600083828151811061161e5761161d6127d6565b5b602002602001015190506000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506116ae848284611b63565b505080806116bb906128d0565b915050611600565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611746576000815114611741576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611738906132ca565b60405180910390fd5b6118d7565b600081511161178a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178190613382565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146117e0576117df826040518060600160405280602f81526020016136a0602f91396121c5565b5b6000808373ffffffffffffffffffffffffffffffffffffffff168360405161180891906133de565b600060405180830381855af49150503d8060008114611843576040519150601f19603f3d011682016040523d82523d6000602084013e611848565b606091505b5091509150816118d45760008151111561189957806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118909190613439565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cb906134cd565b60405180910390fd5b50505b5050565b6118fd816040518060600160405280602b8152602001613675602b91396121c5565b81600201805490508260010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b81846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508360010160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908360e01c021790555080846000016000857bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611bd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc99061355f565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c37906135f1565b60405180910390fd5b6000836000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050600060018560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050611d179190613611565b9050808214611eab5760008560010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018281548110611d7857611d776127d6565b5b90600052602060002090600891828204019190066004029054906101000a900460e01b9050808660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018481548110611df457611df36127d6565b5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c021790555082866000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505b8460010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805480611eff57611efe613645565b5b60019003818190600052602060002090600891828204019190066004026101000a81549063ffffffff02191690559055846000016000847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff02191690555050600081036121be57600060018660020180549050611fe99190613611565b905060008660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905081811461212a576000876002018381548110612053576120526127d6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080886002018381548110612097576120966127d6565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818860010160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550505b8660020180548061213e5761213d613645565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558660010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000905550505b5050505050565b6000823b9050600081118290612211576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122089190613439565b60405180910390fd5b50505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6122608161222b565b811461226b57600080fd5b50565b60008135905061227d81612257565b92915050565b60006020828403121561229957612298612221565b5b60006122a78482850161226e565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122db826122b0565b9050919050565b6122eb816122d0565b82525050565b600060208201905061230660008301846122e2565b92915050565b60008115159050919050565b6123218161230c565b82525050565b600060208201905061233c6000830184612318565b92915050565b61234b816122d0565b811461235657600080fd5b50565b60008135905061236881612342565b92915050565b60006020828403121561238457612383612221565b5b600061239284828501612359565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123e9826123a0565b810181811067ffffffffffffffff82111715612408576124076123b1565b5b80604052505050565b600061241b612217565b905061242782826123e0565b919050565b600067ffffffffffffffff821115612447576124466123b1565b5b602082029050602081019050919050565b600080fd5b600061247061246b8461242c565b612411565b9050808382526020820190506020840283018581111561249357612492612458565b5b835b818110156124bc57806124a8888261226e565b845260208401935050602081019050612495565b5050509392505050565b600082601f8301126124db576124da61239b565b5b81356124eb84826020860161245d565b91505092915050565b600067ffffffffffffffff82111561250f5761250e6123b1565b5b602082029050602081019050919050565b6125298161230c565b811461253457600080fd5b50565b60008135905061254681612520565b92915050565b600061255f61255a846124f4565b612411565b9050808382526020820190506020840283018581111561258257612581612458565b5b835b818110156125ab57806125978882612537565b845260208401935050602081019050612584565b5050509392505050565b600082601f8301126125ca576125c961239b565b5b81356125da84826020860161254c565b91505092915050565b600080604083850312156125fa576125f9612221565b5b600083013567ffffffffffffffff81111561261857612617612226565b5b612624858286016124c6565b925050602083013567ffffffffffffffff81111561264557612644612226565b5b612651858286016125b5565b9150509250929050565b600082825260208201905092915050565b7f50726f746f636f6c557067726164653a207061757365642e0000000000000000600082015250565b60006126a260188361265b565b91506126ad8261266c565b602082019050919050565b600060208201905081810360008301526126d181612695565b9050919050565b7f4469616d6f6e643a2046756e6374696f6e20646f6573206e6f74206578697374600082015250565b600061270e60208361265b565b9150612719826126d8565b602082019050919050565b6000602082019050818103600083015261273d81612701565b9050919050565b7f43616e27742070726f706f7365206f6e6573656c66206173206120636f6e747260008201527f61637420706175736541646d696e000000000000000000000000000000000000602082015250565b60006127a0602e8361265b565b91506127ab82612744565b604082019050919050565b600060208201905081810360008301526127cf81612793565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f54686520756e70617573652829206d6574686f64206d7573742062652061766160008201527f696c61626c6520647572696e6720746865207061757365642073746174652e00602082015250565b6000612861603f8361265b565b915061286c82612805565b604082019050919050565b6000602082019050818103600083015261289081612854565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006128db826128c6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361290d5761290c612897565b5b600182019050919050565b7f4f6e6c7920612070726f706f73656420757365722063616e206163636570742060008201527f6f776e6572736869700000000000000000000000000000000000000000000000602082015250565b600061297460298361265b565b915061297f82612918565b604082019050919050565b600060208201905081810360008301526129a381612967565b9050919050565b7f43616e27742070726f706f7365206f6e6573656c66206173206120636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612a0660298361265b565b9150612a11826129aa565b604082019050919050565b60006020820190508181036000830152612a35816129f9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4469616d6f6e6453746f726167654c69624375743a20496e636f72726563742060008201527f4661636574437574416374696f6e000000000000000000000000000000000000602082015250565b6000612ac7602e8361265b565b9150612ad282612a6b565b604082019050919050565b60006020820190508181036000830152612af681612aba565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612b32816122d0565b82525050565b60038110612b4957612b48612a3c565b5b50565b6000819050612b5a82612b38565b919050565b6000612b6a82612b4c565b9050919050565b612b7a81612b5f565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612bb58161222b565b82525050565b6000612bc78383612bac565b60208301905092915050565b6000602082019050919050565b6000612beb82612b80565b612bf58185612b8b565b9350612c0083612b9c565b8060005b83811015612c31578151612c188882612bbb565b9750612c2383612bd3565b925050600181019050612c04565b5085935050505092915050565b6000606083016000830151612c566000860182612b29565b506020830151612c696020860182612b71565b5060408301518482036040860152612c818282612be0565b9150508091505092915050565b6000612c9a8383612c3e565b905092915050565b6000602082019050919050565b6000612cba82612afd565b612cc48185612b08565b935083602082028501612cd685612b19565b8060005b85811015612d125784840389528151612cf38582612c8e565b9450612cfe83612ca2565b925060208a01995050600181019050612cda565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612d5e578082015181840152602081019050612d43565b60008484015250505050565b6000612d7582612d24565b612d7f8185612d2f565b9350612d8f818560208601612d40565b612d98816123a0565b840191505092915050565b60006060820190508181036000830152612dbd8186612caf565b9050612dcc60208301856122e2565b8181036040830152612dde8184612d6a565b9050949350505050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f61637420706175736541646d696e000000000000000000000000000000000000602082015250565b6000612e44602e8361265b565b9150612e4f82612de8565b604082019050919050565b60006020820190508181036000830152612e7381612e37565b9050919050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612ed660298361265b565b9150612ee182612e7a565b604082019050919050565b60006020820190508181036000830152612f0581612ec9565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a204e6f2073656c6563746f60008201527f727320696e20666163657420746f206375740000000000000000000000000000602082015250565b6000612f6860328361265b565b9150612f7382612f0c565b604082019050919050565b60006020820190508181036000830152612f9781612f5b565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a204164642066616365742060008201527f63616e2774206265206164647265737328302900000000000000000000000000602082015250565b6000612ffa60338361265b565b915061300582612f9e565b604082019050919050565b6000602082019050818103600083015261302981612fed565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e2774206164642060008201527f66756e6374696f6e207468617420616c72656164792065786973747300000000602082015250565b600061308c603c8361265b565b915061309782613030565b604082019050919050565b600060208201905081810360008301526130bb8161307f565b9050919050565b60006bffffffffffffffffffffffff82169050919050565b60006130e5826130c2565b91506bffffffffffffffffffffffff820361310357613102612897565b5b600182019050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e2774207265706c60008201527f6163652066756e6374696f6e20776974682073616d652066756e6374696f6e00602082015250565b600061316a603f8361265b565b91506131758261310e565b604082019050919050565b600060208201905081810360008301526131998161315d565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2052656d6f76652066616360008201527f65742061646472657373206d7573742062652061646472657373283029000000602082015250565b60006131fc603d8361265b565b9150613207826131a0565b604082019050919050565b6000602082019050818103600083015261322b816131ef565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a205f696e6974206973206160008201527f646472657373283029206275745f63616c6c64617461206973206e6f7420656d60208201527f7074790000000000000000000000000000000000000000000000000000000000604082015250565b60006132b460438361265b565b91506132bf82613232565b606082019050919050565b600060208201905081810360008301526132e3816132a7565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a205f63616c6c646174612060008201527f697320656d70747920627574205f696e6974206973206e6f742061646472657360208201527f7328302900000000000000000000000000000000000000000000000000000000604082015250565b600061336c60448361265b565b9150613377826132ea565b606082019050919050565b6000602082019050818103600083015261339b8161335f565b9050919050565b600081905092915050565b60006133b882612d24565b6133c281856133a2565b93506133d2818560208601612d40565b80840191505092915050565b60006133ea82846133ad565b915081905092915050565b600081519050919050565b600061340b826133f5565b613415818561265b565b9350613425818560208601612d40565b61342e816123a0565b840191505092915050565b600060208201905081810360008301526134538184613400565b905092915050565b7f4469616d6f6e6453746f726167654c69624375743a205f696e69742066756e6360008201527f74696f6e20726576657274656400000000000000000000000000000000000000602082015250565b60006134b7602d8361265b565b91506134c28261345b565b604082019050919050565b600060208201905081810360008301526134e6816134aa565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e27742072656d6f60008201527f76652066756e6374696f6e207468617420646f65736e27742065786973740000602082015250565b6000613549603e8361265b565b9150613554826134ed565b604082019050919050565b600060208201905081810360008301526135788161353c565b9050919050565b7f4469616d6f6e6453746f726167654c69624375743a2043616e27742072656d6f60008201527f766520696d6d757461626c652066756e6374696f6e0000000000000000000000602082015250565b60006135db60358361265b565b91506135e68261357f565b604082019050919050565b6000602082019050818103600083015261360a816135ce565b9050919050565b600061361c826128c6565b9150613627836128c6565b925082820390508181111561363f5761363e612897565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe4469616d6f6e6453746f726167654c69624375743a204e657720666163657420686173206e6f20636f64654469616d6f6e6453746f726167654c69624375743a205f696e6974206164647265737320686173206e6f20636f6465a2646970667358221220254803049a174d5e5b026c3b0baf7f619ed3a10cd708b20cc42c57f5044b7ddc64736f6c63430008110033",
  "libraries": {},
  "devdoc": {
    "events": {
      "OwnershipProposalAccepted(address)": {
        "details": "emitted after accepting a ownership transfer proposal by the new owner",
        "params": {
          "newOwner": "address of the new owner*"
        }
      },
      "OwnershipProposalCreated(address,address)": {
        "details": "emitted after creating a ownership transfer proposal by the owner",
        "params": {
          "owner": "address of the current owner",
          "proposed": "address of the proposed owner*"
        }
      },
      "PauseAdminOwnershipProposalAccepted(address)": {
        "details": "emitted after accepting a pauseAdmin transfer proposal by the new pauseAdmin",
        "params": {
          "newPauseAdmin": "address of the new pauseAdmin*"
        }
      },
      "PauseAdminOwnershipProposalCreated(address,address)": {
        "details": "emitted after creating a pauseAdmin transfer proposal by the pauseAdmin",
        "params": {
          "pauseAdmin": "address of the current pauseAdmin",
          "proposed": "address of the proposed pauseAdmin*"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "title": "SmartLoanDiamondBeacon A contract that is authorised to borrow funds using delegated credit. It maintains solvency calculating the current value of assets and borrowings. In case the value of assets held drops below certain level, part of the funds may be forcibly repaid. It permits only a limited and safe token transfer.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}