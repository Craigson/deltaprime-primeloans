{
  "address": "0x2A634bD4c21DD01793668F03E2fAd28980b26A30",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deployPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x87a834e7f69d5f9cdeb75a4e47743ba2188524f689ca9ed42fec97616e5ae3a4",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x2A634bD4c21DD01793668F03E2fAd28980b26A30",
    "transactionIndex": 0,
    "gasUsed": "5228224",
    "logsBloom": "0x
    "blockHash": "0xa58c14b98cfd20ed765c99ad46a2b3c3df9cb857123d5c0f03347c84bf0a3687",
    "transactionHash": "0x87a834e7f69d5f9cdeb75a4e47743ba2188524f689ca9ed42fec97616e5ae3a4",
    "logs": [],
    "blockNumber": 23431094,
    "cumulativeGasUsed": "5228224",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b749be0f7dd7c27b94defec5fbf306fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deployPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract factory allowing anyone to deploy a pool contract\",\"events\":{\"PoolDeployed(address,address,uint256)\":{\"details\":\"emitted after pool is deployed by any user\",\"params\":{\"poolAddress\":\"of deployed pool\",\"timestamp\":\"of the deployment*\",\"user\":\"the address initiating the deployment\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"WavaxPoolFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deployment/avalanche/WavaxPoolFactory.sol\":\"WavaxPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * The interest rates calculation is delegated to an external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n    using TransferHelper for address payable;\\n\\n    uint256 public constant MAX_POOL_UTILISATION_FOR_BORROWING = 0.90e18;\\n    uint256 public totalSupplyCap;\\n\\n    mapping(address => mapping(address => uint256)) private _allowed;\\n    mapping(address => uint256) internal _deposited;\\n\\n    mapping(address => uint256) public borrowed;\\n\\n    IRatesCalculator public ratesCalculator;\\n    IBorrowersRegistry public borrowersRegistry;\\n    IPoolRewarder public poolRewarder;\\n\\n    IIndex public depositIndex;\\n    IIndex public borrowIndex;\\n\\n    address payable public tokenAddress;\\n\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        ratesCalculator = ratesCalculator_;\\n        depositIndex = depositIndex_;\\n        borrowIndex = borrowIndex_;\\n        poolRewarder = poolRewarder_;\\n        tokenAddress = tokenAddress_;\\n        totalSupplyCap = _totalSupplyCap;\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _updateRates();\\n    }\\n\\n    /* ========== SETTERS ========== */\\n\\n    /**\\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _newTotalSupplyCap new deposit cap\\n    **/\\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\\n        totalSupplyCap = _newTotalSupplyCap;\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\\n        poolRewarder = _poolRewarder;\\n\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new rate calculator.\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev ratesCalculator the address of rates calculator\\n     **/\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n        // setting address(0) ratesCalculator_ freezes the pool\\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\\n        ratesCalculator = ratesCalculator_;\\n        if (address(ratesCalculator_) != address(0)) {\\n            _updateRates();\\n        }\\n\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new borrowers registry contract.\\n     * The borrowers registry decides if an account can borrow funds.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev borrowersRegistry the address of borrowers registry\\n     **/\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(_deposited[msg.sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[msg.sender]);\\n\\n        // (this is verified in \\\"require\\\" above)\\n        unchecked {\\n            _deposited[msg.sender] -= amount;\\n        }\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, msg.sender);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 currentAllowance = _allowed[msg.sender][spender];\\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\\n\\n        uint256 newAllowance = currentAllowance - subtractedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        _allowed[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\\n\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        _accumulateDepositInterest(sender);\\n\\n        if(_deposited[sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[sender]);\\n\\n\\n        _deposited[sender] -= amount;\\n        _allowed[sender][msg.sender] -= amount;\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * Deposits the amount\\n     * It updates user deposited balance, total deposited and rates\\n     **/\\n    function deposit(uint256 _amount) public virtual nonReentrant {\\n        if(_amount == 0) revert ZeroDepositAmount();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(totalSupplyCap != 0){\\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\\n        }\\n\\n        _transferToPool(msg.sender, _amount);\\n\\n        _mint(msg.sender, _amount);\\n        _deposited[address(this)] += _amount;\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.stakeFor(_amount, msg.sender);\\n        }\\n\\n        emit Deposit(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\n        tokenAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * Withdraws selected amount from the user deposits\\n     * @dev _amount the amount to be withdrawn\\n     **/\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[address(this)] -= _amount;\\n        }\\n        _burn(msg.sender, _amount);\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\n        }\\n\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Borrows the specified amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev _amount the amount to be borrowed\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        borrowed[msg.sender] += _amount;\\n        borrowed[address(this)] += _amount;\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Repays the amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function repay(uint256 amount) external nonReentrant {\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\\n        _transferToPool(msg.sender, amount);\\n\\n        borrowed[msg.sender] -= amount;\\n        borrowed[address(this)] -= amount;\\n\\n        _updateRates();\\n\\n        emit Repayment(msg.sender, amount, block.timestamp);\\n    }\\n\\n    /* =========\\n\\n\\n    /**\\n     * Returns the current borrowed amount for the given user\\n     * The value includes the interest rates owned at the current moment\\n     * @dev _user the address of queried borrower\\n    **/\\n    function getBorrowed(address _user) public view returns (uint256) {\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n\\n    function totalBorrowed() public view returns (uint256) {\\n        return getBorrowed(address(this));\\n    }\\n\\n\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\n    function getRewards() external {\\n        poolRewarder.getRewardsFor(msg.sender);\\n    }\\n\\n    // Returns number of pending rewards for msg.sender\\n    function checkRewards() external view returns (uint256) {\\n        return poolRewarder.earned(msg.sender);\\n    }\\n\\n    /**\\n     * Returns the current deposited amount for the given user\\n     * The value includes the interest rates earned at the current moment\\n     * @dev _user the address of queried depositor\\n     **/\\n    function balanceOf(address user) public view override returns (uint256) {\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\n    }\\n\\n    /**\\n     * Returns the current interest rate for deposits\\n     **/\\n    function getDepositRate() public view returns (uint256) {\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns the current interest rate for borrowings\\n     **/\\n    function getBorrowingRate() public view returns (uint256) {\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n     **/\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\n\\n        if(amount > balance) revert InsufficientPoolFunds();\\n        if(surplus < amount) revert InsufficientSurplus();\\n\\n        _transferFromPool(account, amount);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _mint(address to, uint256 amount) internal {\\n        if(to == address(0)) revert MintToAddressZero();\\n\\n        _deposited[to] += amount;\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\\n\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[account] -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _updateRates() internal {\\n        uint256 _totalBorrowed = totalBorrowed();\\n        uint256 _totalSupply = totalSupply();\\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\n    }\\n\\n    function _accumulateDepositInterest(address user) internal {\\n        uint256 interest = balanceOf(user) - _deposited[user];\\n\\n        _mint(user, interest);\\n        _deposited[address(this)] = balanceOf(address(this));\\n\\n        emit InterestCollected(user, interest, block.timestamp);\\n\\n        depositIndex.updateUser(user);\\n        depositIndex.updateUser(address(this));\\n    }\\n\\n    function _accumulateBorrowingInterest(address user) internal {\\n        borrowed[user] = getBorrowed(user);\\n        borrowed[address(this)] = getBorrowed(address(this));\\n\\n        borrowIndex.updateUser(user);\\n        borrowIndex.updateUser(address(this));\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier canBorrow() {\\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\\n        _;\\n        if((totalBorrowed() * 1e18) / totalSupply() > MAX_POOL_UTILISATION_FOR_BORROWING) revert MaxPoolUtilisationBreached();\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after the user deposits funds\\n     * @param user the address performing the deposit\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user withdraws funds\\n     * @param user the address performing the withdrawal\\n     * @param value the amount withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user borrows funds\\n     * @param user the address that borrows\\n     * @param value the amount borrowed\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user repays debt\\n     * @param user the address that repays debt\\n     * @param value the amount repaid\\n     * @param timestamp of the repayment\\n     **/\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after accumulating deposit interest\\n     * @param user the address that the deposit interest is accumulated for\\n     * @param value the amount that interest is calculated from\\n     * @param timestamp of the interest accumulation\\n     **/\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing borrowers registry\\n    * @param registry an address of the newly set borrowers registry\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing rates calculator\\n    * @param calculator an address of the newly set rates calculator\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing pool rewarder\\n    * @param poolRewarder an address of the newly set pool rewarder\\n    * @param timestamp of the pool rewarder change\\n    **/\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\n\\n    /* ========== ERRORS ========== */\\n\\n    // Only authorized accounts may borrow\\n    error NotAuthorizedToBorrow();\\n\\n    // Borrowers registry is not configured\\n    error BorrowersRegistryNotConfigured();\\n\\n    // Pool is frozen\\n    error PoolFrozen();\\n\\n    // Not enough funds in the pool.\\n    error InsufficientPoolFunds();\\n\\n    // Insufficient pool surplus to cover the requested recover amount\\n    error InsufficientSurplus();\\n\\n    // Address (`target`) must be a contract\\n    // @param target target address that must be a contract\\n    error NotAContract(address target);\\n\\n    //  ERC20: Spender cannot be a zero address\\n    error SpenderZeroAddress();\\n\\n    //  ERC20: cannot transfer to the zero address\\n    error TransferToZeroAddress();\\n\\n    //  ERC20: cannot transfer to the pool address\\n    error TransferToPoolAddress();\\n\\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\\n    /// @param amount transfer amount\\n    /// @param balance available balance\\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\n\\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\\n    /// @param requested requested transfer amount\\n    /// @param allowance current allowance\\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\\n\\n    //  This deposit operation would result in a breach of the totalSupplyCap\\n    error TotalSupplyCapBreached();\\n\\n    // The deposit amount must be > 0\\n    error ZeroDepositAmount();\\n\\n    // ERC20: cannot mint to the zero address\\n    error MintToAddressZero();\\n\\n    // ERC20: burn amount exceeds current pool indexed balance\\n    error BurnAmountExceedsBalance();\\n\\n    // Trying to repay more than was borrowed\\n    error RepayingMoreThanWasBorrowed();\\n\\n    // MAX_POOL_UTILISATION_FOR_BORROWING was breached\\n    error MaxPoolUtilisationBreached();\\n}\",\"keccak256\":\"0x56683705568bc2c0dae5b2f61371474ebed2b5326a7ac8bdefaee4f0f3a82e65\",\"license\":\"BUSL-1.1\"},\"contracts/WrappedNativeTokenPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\npragma solidity 0.8.17;\\n\\nimport \\\"./Pool.sol\\\";\\nimport \\\"./interfaces/IWrappedNativeToken.sol\\\";\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit to and borrow from a single pot\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * Rates are compounded every second and getters always return the current deposit and borrowing balance.\\n * The interest rates calculation is delegated to the external calculator contract.\\n */\\ncontract WrappedNativeTokenPool is Pool {\\n    using TransferHelper for address payable;\\n    using TransferHelper for address;\\n\\n    /**\\n     * Wraps and deposits amount attached to the transaction\\n     **/\\n    function depositNativeToken() public payable virtual {\\n        if(msg.value == 0) revert ZeroDepositAmount();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(totalSupplyCap != 0){\\n            if(_deposited[address(this)] + msg.value > totalSupplyCap) revert TotalSupplyCapBreached();\\n        }\\n\\n        IWrappedNativeToken(tokenAddress).deposit{value : msg.value}();\\n\\n        _mint(msg.sender, msg.value);\\n        _deposited[address(this)] += msg.value;\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.stakeFor(msg.value, msg.sender);\\n        }\\n\\n        emit Deposit(msg.sender, msg.value, block.timestamp);\\n    }\\n\\n    /**\\n     * Unwraps and withdraws selected amount from the user deposits\\n     * @dev _amount the amount to be withdrawn\\n     **/\\n    function withdrawNativeToken(uint256 _amount) external nonReentrant {\\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[address(this)] -= _amount;\\n        }\\n        _burn(msg.sender, _amount);\\n\\n        IWrappedNativeToken(tokenAddress).withdraw(_amount);\\n        payable(msg.sender).safeTransferETH(_amount);\\n\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\n        }\\n\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /* ========== RECEIVE AVAX FUNCTION ========== */\\n    //needed for withdrawNativeToken\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x91b1bfd45a594a218e5c3d4a7673964e83228f5cd9db5c0cd498831c871ab4a8\",\"license\":\"BUSL-1.1\"},\"contracts/deployment/avalanche/WavaxPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\npragma solidity 0.8.17;\\n\\nimport \\\"../../WrappedNativeTokenPool.sol\\\";\\n\\n\\n/**\\n * @title WavaxPool\\n * @dev Contract allowing user to deposit to and borrow WAVAX from a dedicated user account\\n */\\ncontract WavaxPool is WrappedNativeTokenPool {\\n}\",\"keccak256\":\"0x088ecadc075edad0f5b04777230eaf8c26ce739c14e33532d4ff0d8db91c4fe3\",\"license\":\"BUSL-1.1\"},\"contracts/deployment/avalanche/WavaxPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\npragma solidity 0.8.17;\\n\\nimport \\\"./WavaxPool.sol\\\";\\n\\n\\n/**\\n * @title WavaxPoolFactory\\n * @dev Contract factory allowing anyone to deploy a pool contract\\n */\\ncontract WavaxPoolFactory {\\n    function deployPool() public {\\n        WavaxPool pool = new WavaxPool();\\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\\n    }\\n\\n    /**\\n     * @dev emitted after pool is deployed by any user\\n     * @param user the address initiating the deployment\\n     * @param poolAddress of deployed pool\\n     * @param timestamp of the deployment\\n     **/\\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\\n}\",\"keccak256\":\"0x4b6ad07555956eadd13add9f51717eb6c25ab5267154e184d7735995ee1a2401\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n    function canBorrow(address _account) external view returns (bool);\\n\\n    function getLoanForOwner(address _owner) external view returns (address);\\n\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05ce704e795295743b6e2da563f4572e43f890f4214fed9ff3e6792bb7ec2f83\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity 0.8.17;\\n\\ninterface IIndex {\\n\\n    function setRate(uint256 _rate) external;\\n\\n    function updateUser(address user) external;\\n\\n    function getIndex() external view returns (uint256);\\n\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xece2b3edf8b15e90d99c2aeeb4ac40c60d50b20932f0c983d27cf46a38bc4979\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IPoolRewarder {\\n\\n    function stakeFor(uint _amount, address _stakeFor) external;\\n\\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\\n\\n    function getRewardsFor(address _user) external;\\n\\n    function earned(address _account) external view returns (uint);\\n\\n    function balanceOf(address _account) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf6ae92c67c618dfb6a80cbf153b2aa8e5d93b8cec6444dc7e0db4dce959fbefd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b134bca4918b4e379fcb312eada2385e815cd13ef1fbee2fcdc7028cc45d754\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWrappedNativeToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\ninterface IWrappedNativeToken {\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint wad) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function approve(address guy, uint wad) external returns (bool);\\n\\n    function transfer(address dst, uint wad) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\\n\\n}\",\"keccak256\":\"0xda3d2a135faa6e2ae9b10fa2727a498fdd64e26ebf1e367e2b031e7d35647196\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615e01806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806314d5275114610030575b600080fd5b61003861003a565b005b6000604051610048906100a4565b604051809103906000f080158015610064573d6000803e3d6000fd5b5090507ee86aef36bbfe981da97c8fa8694fcb8feba220190e5f528c1eb4d1a26591883382426040516100999392919061010b565b60405180910390a150565b615c898061014383390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dc826100b1565b9050919050565b6100ec816100d1565b82525050565b6000819050919050565b610105816100f2565b82525050565b600060608201905061012060008301866100e3565b61012d60208301856100e3565b61013a60408301846100fc565b94935050505056fe608060405234801561001057600080fd5b50615c6880620000216000396000f3fe6080604052600436106102295760003560e01c8063715018a611610123578063b6b55f25116100ab578063dd62ed3e1161006f578063dd62ed3e146107f3578063ee61bd6e14610830578063f2fde38b1461085b578063f36b242514610884578063fc68f661146108af57610230565b8063b6b55f2514610720578063b790634e14610749578063bb102aea14610774578063c5ebeaec1461079f578063d06dca89146107c857610230565b80639d76ea58116100f25780639d76ea58146106255780639dcee9a414610650578063a457c2d71461067b578063a9059cbb146106b8578063aa5af0fd146106f557610230565b8063715018a6146105ae57806379433d8b146105c55780637b898939146105cf5780638da5cb5b146105fa57610230565b80632aeaa291116101b15780634c19386c116101755780634c19386c146104b55780636011163e146104e05780636ca6d5d01461051d57806370a082311461054857806370d4cea01461058557610230565b80632aeaa291146103d25780632e1a7d4d146103fd57806331d05b1114610426578063371fd8e61461044f578063395093511461047857610230565b80631457db34116101f85780631457db34146102ef5780631460e3901461031857806317e0f2521461034157806318160ddd1461036a57806323b872dd1461039557610230565b80630572b0cc146102355780630790ef9a1461024c5780630941cb3d14610275578063095ea7b3146102b257610230565b3661023057005b600080fd5b34801561024157600080fd5b5061024a6108d8565b005b34801561025857600080fd5b50610273600480360381019061026e9190614e86565b610967565b005b34801561028157600080fd5b5061029c60048036038101906102979190614ec6565b610b85565b6040516102a99190614f02565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d49190614f1d565b610b9d565b6040516102e69190614f78565b60405180910390f35b3480156102fb57600080fd5b5061031660048036038101906103119190614fd1565b610cf4565b005b34801561032457600080fd5b5061033f600480360381019061033a91906150f6565b610ea9565b005b34801561034d57600080fd5b5061036860048036038101906103639190615198565b6111fc565b005b34801561037657600080fd5b5061037f611608565b60405161038c9190614f02565b60405180910390f35b3480156103a157600080fd5b506103bc60048036038101906103b791906151c5565b611618565b6040516103c99190614f78565b60405180910390f35b3480156103de57600080fd5b506103e7611c4e565b6040516103f49190614f02565b60405180910390f35b34801561040957600080fd5b50610424600480360381019061041f9190615198565b611cf0565b005b34801561043257600080fd5b5061044d60048036038101906104489190615198565b612050565b005b34801561045b57600080fd5b5061047660048036038101906104719190615198565b6120d6565b005b34801561048457600080fd5b5061049f600480360381019061049a9190614f1d565b6122be565b6040516104ac9190614f78565b60405180910390f35b3480156104c157600080fd5b506104ca6124a2565b6040516104d79190614f02565b60405180910390f35b3480156104ec57600080fd5b5061050760048036038101906105029190614ec6565b6124b2565b6040516105149190614f02565b60405180910390f35b34801561052957600080fd5b50610532612598565b60405161053f9190615277565b60405180910390f35b34801561055457600080fd5b5061056f600480360381019061056a9190614ec6565b6125be565b60405161057c9190614f02565b60405180910390f35b34801561059157600080fd5b506105ac60048036038101906105a79190615292565b6126a4565b005b3480156105ba57600080fd5b506105c3612874565b005b6105cd612876565b005b3480156105db57600080fd5b506105e4612b6d565b6040516105f191906152e0565b60405180910390f35b34801561060657600080fd5b5061060f612b93565b60405161061c919061530a565b60405180910390f35b34801561063157600080fd5b5061063a612bbd565b6040516106479190615334565b60405180910390f35b34801561065c57600080fd5b50610665612be3565b6040516106729190614f02565b60405180910390f35b34801561068757600080fd5b506106a2600480360381019061069d9190614f1d565b612bef565b6040516106af9190614f78565b60405180910390f35b3480156106c457600080fd5b506106df60048036038101906106da9190614f1d565b612e20565b6040516106ec9190614f78565b60405180910390f35b34801561070157600080fd5b5061070a613279565b60405161071791906152e0565b60405180910390f35b34801561072c57600080fd5b5061074760048036038101906107429190615198565b61329f565b005b34801561075557600080fd5b5061075e613573565b60405161076b9190614f02565b60405180910390f35b34801561078057600080fd5b50610789613626565b6040516107969190614f02565b60405180910390f35b3480156107ab57600080fd5b506107c660048036038101906107c19190615198565b61362c565b005b3480156107d457600080fd5b506107dd613a79565b6040516107ea9190615370565b60405180910390f35b3480156107ff57600080fd5b5061081a6004803603810190610815919061538b565b613a9f565b6040516108279190614f02565b60405180910390f35b34801561083c57600080fd5b50610845613b26565b60405161085291906153ec565b60405180910390f35b34801561086757600080fd5b50610882600480360381019061087d9190614ec6565b613b4c565b005b34801561089057600080fd5b50610899613c43565b6040516108a69190614f02565b60405180910390f35b3480156108bb57600080fd5b506108d660048036038101906108d19190615407565b613cf6565b005b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632260b83e336040518263ffffffff1660e01b8152600401610933919061530a565b600060405180830381600087803b15801561094d57600080fd5b505af1158015610961573d6000803e3d6000fd5b50505050565b61096f613e4e565b73ffffffffffffffffffffffffffffffffffffffff1661098d612b93565b73ffffffffffffffffffffffffffffffffffffffff16146109e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109da90615491565b60405180910390fd5b600260655403610a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1f906154fd565b60405180910390fd5b6002606581905550600060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a8d919061530a565b602060405180830381865afa158015610aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ace9190615532565b90506000610ada611608565b610ae26124a2565b83610aed919061558e565b610af791906155c2565b905081841115610b33576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83811015610b6d576040517f94290ab900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b778385613e56565b505060016065819055505050565b609a6020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c04576040517f7acc038e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610ce29190614f02565b60405180910390a36001905092915050565b610cfc613e4e565b73ffffffffffffffffffffffffffffffffffffffff16610d1a612b93565b73ffffffffffffffffffffffffffffffffffffffff1614610d70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6790615491565b60405180910390fd5b610d7981613ea7565b158015610db35750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15610e1757609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f8a8b41ec000000000000000000000000000000000000000000000000000000008152600401610e0e919061530a565b60405180910390fd5b80609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f85796821ee1d670b0fdb986f256b5c1a29b9019038831c7f09df2061879cf9e542604051610e9e9190614f02565b60405180910390a250565b600060019054906101000a900460ff16610ed15760008054906101000a900460ff1615610eda565b610ed9613eca565b5b610f19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1090615668565b60405180910390fd5b60008060019054906101000a900460ff161590508015610f69576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610f7288613ea7565b8015610f835750610f8287613ea7565b5b8015610f945750610f9386613ea7565b5b8015610fa55750610fa485613ea7565b5b8015610fed5750610fb583613ea7565b80610fec5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b5b61102c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611023906156d4565b60405180910390fd5b86609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085609e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084609f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360a060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816097819055506111c1613edb565b6111c9613f34565b6111d1613f8d565b80156111f25760008060016101000a81548160ff0219169083151502179055505b5050505050505050565b600260655403611241576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611238906154fd565b60405180910390fd5b600260658190555060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112a4919061530a565b602060405180830381865afa1580156112c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e59190615532565b81111561131e576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61132733614285565b609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156113a0576040517f177466fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506113f733826144a0565b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b81526004016114529190614f02565b600060405180830381600087803b15801561146c57600080fd5b505af1158015611480573d6000803e3d6000fd5b505050506114ad813373ffffffffffffffffffffffffffffffffffffffff166145d090919063ffffffff16565b6114b5613f8d565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115ad57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc82336040518363ffffffff1660e01b81526004016115689291906156f4565b6020604051808303816000875af1158015611587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ab9190615532565b505b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb82426040516115f592919061571d565b60405180910390a2600160658190555050565b6000611613306125be565b905090565b600081609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156117595781609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517f2a1b2dd800000000000000000000000000000000000000000000000000000000815260040161175092919061571d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036117bf576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611824576040517fed728e5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61182d84614285565b81609960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156118f25781609960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517fa1a48f3a0000000000000000000000000000000000000000000000000000000081526004016118e992919061571d565b60405180910390fd5b81609960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461194191906155c2565b9250508190555081609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119d491906155c2565b925050819055506119e483614285565b81609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a33919061558e565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015611a9a575060008214155b15611bde576000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc84876040518363ffffffff1660e01b8152600401611afe9291906156f4565b6020604051808303816000875af1158015611b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b419190615532565b90506000811115611bdc57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282866040518363ffffffff1660e01b8152600401611ba99291906156f4565b600060405180830381600087803b158015611bc357600080fd5b505af1158015611bd7573d6000803e3d6000fd5b505050505b505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611c3b9190614f02565b60405180910390a3600190509392505050565b6000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262336040518263ffffffff1660e01b8152600401611caa919061530a565b602060405180830381865afa158015611cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ceb9190615532565b905090565b600260655403611d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2c906154fd565b60405180910390fd5b600260658190555060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611d98919061530a565b602060405180830381865afa158015611db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd99190615532565b811115611e12576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611e1b33614285565b609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115611e94576040517f177466fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550611eeb33826144a0565b611ef53382613e56565b611efd613f8d565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ff557609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc82336040518363ffffffff1660e01b8152600401611fb09291906156f4565b6020604051808303816000875af1158015611fcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff39190615532565b505b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb824260405161203d92919061571d565b60405180910390a2600160658190555050565b612058613e4e565b73ffffffffffffffffffffffffffffffffffffffff16612076612b93565b73ffffffffffffffffffffffffffffffffffffffff16146120cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c390615491565b60405180910390fd5b8060978190555050565b60026065540361211b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612112906154fd565b60405180910390fd5b600260658190555061212c336146d0565b609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156121a5576040517f1b95a86600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6121af3382614885565b80609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121fe91906155c2565b9250508190555080609a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461225491906155c2565b92505081905550612263613f8d565b3373ffffffffffffffffffffffffffffffffffffffff167f24fcca58a997b1b2eff6db8107e860458544c09ddd3693b3b779e1df6c0d6c5d82426040516122ab92919061571d565b60405180910390a2600160658190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612325576040517f7acc038e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123af919061558e565b905080609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161248f9190614f02565b60405180910390a3600191505092915050565b60006124ad306124b2565b905090565b6000609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b81526004016125509291906156f4565b602060405180830381865afa15801561256d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125919190615532565b9050919050565b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b815260040161265c9291906156f4565b602060405180830381865afa158015612679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269d9190615532565b9050919050565b6126ac613e4e565b73ffffffffffffffffffffffffffffffffffffffff166126ca612b93565b73ffffffffffffffffffffffffffffffffffffffff1614612720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271790615491565b60405180910390fd5b61272981613ea7565b1580156127635750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b156127a557806040517f8a8b41ec00000000000000000000000000000000000000000000000000000000815260040161279c919061530a565b60405180910390fd5b80609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461282357612822613f8d565b5b8073ffffffffffffffffffffffffffffffffffffffff167fef1b7e9216e08b283cc613824ccb26ea505227777839a4f3c6810d64594e0182426040516128699190614f02565b60405180910390a250565b565b600034036128b0576040517f078e1d8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6128b933614285565b60006097541461294a5760975434609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612911919061558e565b1115612949576040517f3f27d61700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156129b457600080fd5b505af11580156129c8573d6000803e3d6000fd5b50505050506129d733346148d8565b34609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a26919061558e565b92505081905550612a35613f8d565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612b1b57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb234336040518363ffffffff1660e01b8152600401612ae89291906156f4565b600060405180830381600087803b158015612b0257600080fd5b505af1158015612b16573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a153442604051612b6392919061571d565b60405180910390a2565b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b670c7d713b49da000081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612c56576040517f7acc038e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015612d1e5782816040517f2a1b2dd8000000000000000000000000000000000000000000000000000000008152600401612d1592919061571d565b60405180910390fd5b60008382612d2c91906155c2565b905080609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051612e0c9190614f02565b60405180910390a360019250505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612e87576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612eec576040517fed728e5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ef533614285565b81609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612fba5781609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517fa1a48f3a000000000000000000000000000000000000000000000000000000008152600401612fb192919061571d565b60405180910390fd5b81609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555061301083614285565b81609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461305f919061558e565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156130c6575060008214155b1561320a576000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc84336040518363ffffffff1660e01b815260040161312a9291906156f4565b6020604051808303816000875af1158015613149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316d9190615532565b9050600081111561320857609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282866040518363ffffffff1660e01b81526004016131d59291906156f4565b600060405180830381600087803b1580156131ef57600080fd5b505af1158015613203573d6000803e3d6000fd5b505050505b505b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516132679190614f02565b60405180910390a36001905092915050565b609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002606554036132e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132db906154fd565b60405180910390fd5b600260658190555060008103613326576040517f078e1d8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61332f33614285565b6000609754146133c05760975481609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613387919061558e565b11156133bf576040517f3f27d61700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b6133ca3382614885565b6133d433826148d8565b80609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613423919061558e565b92505081905550613432613f8d565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461351857609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282336040518363ffffffff1660e01b81526004016134e59291906156f4565b600060405180830381600087803b1580156134ff57600080fd5b505af1158015613513573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15824260405161356092919061571d565b60405180910390a2600160658190555050565b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd083316135bb6124a2565b6135c3611608565b6040518363ffffffff1660e01b81526004016135e092919061571d565b602060405180830381865afa1580156135fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136219190615532565b905090565b60975481565b600073ffffffffffffffffffffffffffffffffffffffff16609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036136b4576040517f700e36ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e7fc864336040518263ffffffff1660e01b815260040161370f919061530a565b602060405180830381865afa15801561372c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137509190615772565b613786576040517feb05f53600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000613790611608565b036137c7576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026065540361380c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613803906154fd565b60405180910390fd5b600260658190555060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161386f919061530a565b602060405180830381865afa15801561388c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b09190615532565b8111156138e9576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6138f2336146d0565b80609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613941919061558e565b9250508190555080609a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613997919061558e565b925050819055506139a83382613e56565b6139b0613f8d565b3373ffffffffffffffffffffffffffffffffffffffff167fd6b37be10b58108f696d9ed067fedad0bff7cb417ef4c28d2f8a25d6d83c98d582426040516139f892919061571d565b60405180910390a26001606581905550670c7d713b49da0000613a19611608565b670de0b6b3a7640000613a2a6124a2565b613a34919061579f565b613a3e9190615810565b1115613a76576040517fe5739c7e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b613b54613e4e565b73ffffffffffffffffffffffffffffffffffffffff16613b72612b93565b73ffffffffffffffffffffffffffffffffffffffff1614613bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bbf90615491565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c2e906158b3565b60405180910390fd5b613c40816149fe565b50565b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec613c8b6124a2565b613c93611608565b6040518363ffffffff1660e01b8152600401613cb092919061571d565b602060405180830381865afa158015613ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf19190615532565b905090565b613cfe613e4e565b73ffffffffffffffffffffffffffffffffffffffff16613d1c612b93565b73ffffffffffffffffffffffffffffffffffffffff1614613d72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d6990615491565b60405180910390fd5b613d7b81613ea7565b613dbc57806040517f8a8b41ec000000000000000000000000000000000000000000000000000000008152600401613db3919061530a565b60405180910390fd5b80609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f04dce7d074f7e287a2e6e3516c802271d58d5c14e0dede83a49719eb6b92046942604051613e439190614f02565b60405180910390a250565b600033905090565b613ea3828260a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16614ac49092919063ffffffff16565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000613ed530613ea7565b15905090565b600060019054906101000a900460ff16613f2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f2190615945565b60405180910390fd5b613f32614bfa565b565b600060019054906101000a900460ff16613f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f7a90615945565b60405180910390fd5b613f8b614c5b565b565b6000613f976124a2565b90506000613fa3611608565b9050600073ffffffffffffffffffffffffffffffffffffffff16609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361402d576040517ffd4851e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd0833185856040518363ffffffff1660e01b81526004016140c892919061571d565b602060405180830381865afa1580156140e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141099190615532565b6040518263ffffffff1660e01b81526004016141259190614f02565b600060405180830381600087803b15801561413f57600080fd5b505af1158015614153573d6000803e3d6000fd5b50505050609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec85856040518363ffffffff1660e01b81526004016141f292919061571d565b602060405180830381865afa15801561420f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142339190615532565b6040518263ffffffff1660e01b815260040161424f9190614f02565b600060405180830381600087803b15801561426957600080fd5b505af115801561427d573d6000803e3d6000fd5b505050505050565b6000609960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546142d0836125be565b6142da91906155c2565b90506142e682826148d8565b6142ef306125be565b609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e2161824260405161437a92919061571d565b60405180910390a2609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336836040518263ffffffff1660e01b81526004016143dd919061530a565b600060405180830381600087803b1580156143f757600080fd5b505af115801561440b573d6000803e3d6000fd5b50505050609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b815260040161446a919061530a565b600060405180830381600087803b15801561448457600080fd5b505af1158015614498573d6000803e3d6000fd5b505050505050565b609960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115614519576040517f177466fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516145c49190614f02565b60405180910390a35050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81111561460557614604615965565b5b6040519080825280601f01601f1916602001820160405280156146375781602001600182028036833780820191505090505b506040516146459190615a05565b60006040518083038185875af1925050503d8060008114614682576040519150601f19603f3d011682016040523d82523d6000602084013e614687565b606091505b50509050806146cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016146c290615a8e565b60405180910390fd5b505050565b6146d9816124b2565b609a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614725306124b2565b609a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336826040518263ffffffff1660e01b81526004016147c3919061530a565b600060405180830381600087803b1580156147dd57600080fd5b505af11580156147f1573d6000803e3d6000fd5b50505050609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b8152600401614850919061530a565b600060405180830381600087803b15801561486a57600080fd5b505af115801561487e573d6000803e3d6000fd5b5050505050565b6148d482308360a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16614cb4909392919063ffffffff16565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361493e576040517f8db7f6da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461498d919061558e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516149f29190614f02565b60405180910390a35050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401614af6929190615aae565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051614b449190615a05565b6000604051808303816000865af19150503d8060008114614b81576040519150601f19603f3d011682016040523d82523d6000602084013e614b86565b606091505b5091509150818015614bb45750600081511480614bb3575080806020019051810190614bb29190615772565b5b5b614bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614bea90615b49565b60405180910390fd5b5050505050565b600060019054906101000a900460ff16614c49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614c4090615945565b60405180910390fd5b614c59614c54613e4e565b6149fe565b565b600060019054906101000a900460ff16614caa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614ca190615945565b60405180910390fd5b6001606581905550565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401614ce893929190615b69565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051614d369190615a05565b6000604051808303816000865af19150503d8060008114614d73576040519150601f19603f3d011682016040523d82523d6000602084013e614d78565b606091505b5091509150818015614da65750600081511480614da5575080806020019051810190614da49190615772565b5b5b614de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614ddc90615c12565b60405180910390fd5b505050505050565b600080fd5b6000819050919050565b614e0581614df2565b8114614e1057600080fd5b50565b600081359050614e2281614dfc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614e5382614e28565b9050919050565b614e6381614e48565b8114614e6e57600080fd5b50565b600081359050614e8081614e5a565b92915050565b60008060408385031215614e9d57614e9c614ded565b5b6000614eab85828601614e13565b9250506020614ebc85828601614e71565b9150509250929050565b600060208284031215614edc57614edb614ded565b5b6000614eea84828501614e71565b91505092915050565b614efc81614df2565b82525050565b6000602082019050614f176000830184614ef3565b92915050565b60008060408385031215614f3457614f33614ded565b5b6000614f4285828601614e71565b9250506020614f5385828601614e13565b9150509250929050565b60008115159050919050565b614f7281614f5d565b82525050565b6000602082019050614f8d6000830184614f69565b92915050565b6000614f9e82614e48565b9050919050565b614fae81614f93565b8114614fb957600080fd5b50565b600081359050614fcb81614fa5565b92915050565b600060208284031215614fe757614fe6614ded565b5b6000614ff584828501614fbc565b91505092915050565b600061500982614e48565b9050919050565b61501981614ffe565b811461502457600080fd5b50565b60008135905061503681615010565b92915050565b600061504782614e48565b9050919050565b6150578161503c565b811461506257600080fd5b50565b6000813590506150748161504e565b92915050565b600061508582614e48565b9050919050565b6150958161507a565b81146150a057600080fd5b50565b6000813590506150b28161508c565b92915050565b60006150c382614e28565b9050919050565b6150d3816150b8565b81146150de57600080fd5b50565b6000813590506150f0816150ca565b92915050565b600080600080600080600060e0888a03121561511557615114614ded565b5b60006151238a828b01615027565b97505060206151348a828b01615065565b96505060406151458a828b016150a3565b95505060606151568a828b016150a3565b94505060806151678a828b016150e1565b93505060a06151788a828b01614fbc565b92505060c06151898a828b01614e13565b91505092959891949750929550565b6000602082840312156151ae576151ad614ded565b5b60006151bc84828501614e13565b91505092915050565b6000806000606084860312156151de576151dd614ded565b5b60006151ec86828701614e71565b93505060206151fd86828701614e71565b925050604061520e86828701614e13565b9150509250925092565b6000819050919050565b600061523d61523861523384614e28565b615218565b614e28565b9050919050565b600061524f82615222565b9050919050565b600061526182615244565b9050919050565b61527181615256565b82525050565b600060208201905061528c6000830184615268565b92915050565b6000602082840312156152a8576152a7614ded565b5b60006152b684828501615027565b91505092915050565b60006152ca82615244565b9050919050565b6152da816152bf565b82525050565b60006020820190506152f560008301846152d1565b92915050565b61530481614e48565b82525050565b600060208201905061531f60008301846152fb565b92915050565b61532e816150b8565b82525050565b60006020820190506153496000830184615325565b92915050565b600061535a82615244565b9050919050565b61536a8161534f565b82525050565b60006020820190506153856000830184615361565b92915050565b600080604083850312156153a2576153a1614ded565b5b60006153b085828601614e71565b92505060206153c185828601614e71565b9150509250929050565b60006153d682615244565b9050919050565b6153e6816153cb565b82525050565b600060208201905061540160008301846153dd565b92915050565b60006020828403121561541d5761541c614ded565b5b600061542b84828501615065565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061547b602083615434565b915061548682615445565b602082019050919050565b600060208201905081810360008301526154aa8161546e565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006154e7601f83615434565b91506154f2826154b1565b602082019050919050565b60006020820190508181036000830152615516816154da565b9050919050565b60008151905061552c81614dfc565b92915050565b60006020828403121561554857615547614ded565b5b60006155568482850161551d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061559982614df2565b91506155a483614df2565b92508282019050808211156155bc576155bb61555f565b5b92915050565b60006155cd82614df2565b91506155d883614df2565b92508282039050818111156155f0576155ef61555f565b5b92915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000615652602e83615434565b915061565d826155f6565b604082019050919050565b6000602082019050818103600083015261568181615645565b9050919050565b7f57726f6e6720696e697420617267756d656e7473000000000000000000000000600082015250565b60006156be601483615434565b91506156c982615688565b602082019050919050565b600060208201905081810360008301526156ed816156b1565b9050919050565b60006040820190506157096000830185614ef3565b61571660208301846152fb565b9392505050565b60006040820190506157326000830185614ef3565b61573f6020830184614ef3565b9392505050565b61574f81614f5d565b811461575a57600080fd5b50565b60008151905061576c81615746565b92915050565b60006020828403121561578857615787614ded565b5b60006157968482850161575d565b91505092915050565b60006157aa82614df2565b91506157b583614df2565b92508282026157c381614df2565b915082820484148315176157da576157d961555f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061581b82614df2565b915061582683614df2565b925082615836576158356157e1565b5b828204905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061589d602683615434565b91506158a882615841565b604082019050919050565b600060208201905081810360008301526158cc81615890565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061592f602b83615434565b915061593a826158d3565b604082019050919050565b6000602082019050818103600083015261595e81615922565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600081905092915050565b60005b838110156159c85780820151818401526020810190506159ad565b60008484015250505050565b60006159df82615994565b6159e9818561599f565b93506159f98185602086016159aa565b80840191505092915050565b6000615a1182846159d4565b915081905092915050565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b6000615a78603483615434565b9150615a8382615a1c565b604082019050919050565b60006020820190508181036000830152615aa781615a6b565b9050919050565b6000604082019050615ac360008301856152fb565b615ad06020830184614ef3565b9392505050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6000615b33602d83615434565b9150615b3e82615ad7565b604082019050919050565b60006020820190508181036000830152615b6281615b26565b9050919050565b6000606082019050615b7e60008301866152fb565b615b8b60208301856152fb565b615b986040830184614ef3565b949350505050565b7f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260008201527f616e7366657246726f6d206661696c6564000000000000000000000000000000602082015250565b6000615bfc603183615434565b9150615c0782615ba0565b604082019050919050565b60006020820190508181036000830152615c2b81615bef565b905091905056fea26469706673582212202ce0f2820ea48f16bf054c467823e6270bdba12cc11971ccadeb48eb53efee1864736f6c63430008110033a26469706673582212205fb885ae71189b9fbb5d292ac21060e098152f84a6b4901a39e8d10fc5ae67be64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806314d5275114610030575b600080fd5b61003861003a565b005b6000604051610048906100a4565b604051809103906000f080158015610064573d6000803e3d6000fd5b5090507ee86aef36bbfe981da97c8fa8694fcb8feba220190e5f528c1eb4d1a26591883382426040516100999392919061010b565b60405180910390a150565b615c898061014383390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dc826100b1565b9050919050565b6100ec816100d1565b82525050565b6000819050919050565b610105816100f2565b82525050565b600060608201905061012060008301866100e3565b61012d60208301856100e3565b61013a60408301846100fc565b94935050505056fe608060405234801561001057600080fd5b50615c6880620000216000396000f3fe6080604052600436106102295760003560e01c8063715018a611610123578063b6b55f25116100ab578063dd62ed3e1161006f578063dd62ed3e146107f3578063ee61bd6e14610830578063f2fde38b1461085b578063f36b242514610884578063fc68f661146108af57610230565b8063b6b55f2514610720578063b790634e14610749578063bb102aea14610774578063c5ebeaec1461079f578063d06dca89146107c857610230565b80639d76ea58116100f25780639d76ea58146106255780639dcee9a414610650578063a457c2d71461067b578063a9059cbb146106b8578063aa5af0fd146106f557610230565b8063715018a6146105ae57806379433d8b146105c55780637b898939146105cf5780638da5cb5b146105fa57610230565b80632aeaa291116101b15780634c19386c116101755780634c19386c146104b55780636011163e146104e05780636ca6d5d01461051d57806370a082311461054857806370d4cea01461058557610230565b80632aeaa291146103d25780632e1a7d4d146103fd57806331d05b1114610426578063371fd8e61461044f578063395093511461047857610230565b80631457db34116101f85780631457db34146102ef5780631460e3901461031857806317e0f2521461034157806318160ddd1461036a57806323b872dd1461039557610230565b80630572b0cc146102355780630790ef9a1461024c5780630941cb3d14610275578063095ea7b3146102b257610230565b3661023057005b600080fd5b34801561024157600080fd5b5061024a6108d8565b005b34801561025857600080fd5b50610273600480360381019061026e9190614e86565b610967565b005b34801561028157600080fd5b5061029c60048036038101906102979190614ec6565b610b85565b6040516102a99190614f02565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d49190614f1d565b610b9d565b6040516102e69190614f78565b60405180910390f35b3480156102fb57600080fd5b5061031660048036038101906103119190614fd1565b610cf4565b005b34801561032457600080fd5b5061033f600480360381019061033a91906150f6565b610ea9565b005b34801561034d57600080fd5b5061036860048036038101906103639190615198565b6111fc565b005b34801561037657600080fd5b5061037f611608565b60405161038c9190614f02565b60405180910390f35b3480156103a157600080fd5b506103bc60048036038101906103b791906151c5565b611618565b6040516103c99190614f78565b60405180910390f35b3480156103de57600080fd5b506103e7611c4e565b6040516103f49190614f02565b60405180910390f35b34801561040957600080fd5b50610424600480360381019061041f9190615198565b611cf0565b005b34801561043257600080fd5b5061044d60048036038101906104489190615198565b612050565b005b34801561045b57600080fd5b5061047660048036038101906104719190615198565b6120d6565b005b34801561048457600080fd5b5061049f600480360381019061049a9190614f1d565b6122be565b6040516104ac9190614f78565b60405180910390f35b3480156104c157600080fd5b506104ca6124a2565b6040516104d79190614f02565b60405180910390f35b3480156104ec57600080fd5b5061050760048036038101906105029190614ec6565b6124b2565b6040516105149190614f02565b60405180910390f35b34801561052957600080fd5b50610532612598565b60405161053f9190615277565b60405180910390f35b34801561055457600080fd5b5061056f600480360381019061056a9190614ec6565b6125be565b60405161057c9190614f02565b60405180910390f35b34801561059157600080fd5b506105ac60048036038101906105a79190615292565b6126a4565b005b3480156105ba57600080fd5b506105c3612874565b005b6105cd612876565b005b3480156105db57600080fd5b506105e4612b6d565b6040516105f191906152e0565b60405180910390f35b34801561060657600080fd5b5061060f612b93565b60405161061c919061530a565b60405180910390f35b34801561063157600080fd5b5061063a612bbd565b6040516106479190615334565b60405180910390f35b34801561065c57600080fd5b50610665612be3565b6040516106729190614f02565b60405180910390f35b34801561068757600080fd5b506106a2600480360381019061069d9190614f1d565b612bef565b6040516106af9190614f78565b60405180910390f35b3480156106c457600080fd5b506106df60048036038101906106da9190614f1d565b612e20565b6040516106ec9190614f78565b60405180910390f35b34801561070157600080fd5b5061070a613279565b60405161071791906152e0565b60405180910390f35b34801561072c57600080fd5b5061074760048036038101906107429190615198565b61329f565b005b34801561075557600080fd5b5061075e613573565b60405161076b9190614f02565b60405180910390f35b34801561078057600080fd5b50610789613626565b6040516107969190614f02565b60405180910390f35b3480156107ab57600080fd5b506107c660048036038101906107c19190615198565b61362c565b005b3480156107d457600080fd5b506107dd613a79565b6040516107ea9190615370565b60405180910390f35b3480156107ff57600080fd5b5061081a6004803603810190610815919061538b565b613a9f565b6040516108279190614f02565b60405180910390f35b34801561083c57600080fd5b50610845613b26565b60405161085291906153ec565b60405180910390f35b34801561086757600080fd5b50610882600480360381019061087d9190614ec6565b613b4c565b005b34801561089057600080fd5b50610899613c43565b6040516108a69190614f02565b60405180910390f35b3480156108bb57600080fd5b506108d660048036038101906108d19190615407565b613cf6565b005b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632260b83e336040518263ffffffff1660e01b8152600401610933919061530a565b600060405180830381600087803b15801561094d57600080fd5b505af1158015610961573d6000803e3d6000fd5b50505050565b61096f613e4e565b73ffffffffffffffffffffffffffffffffffffffff1661098d612b93565b73ffffffffffffffffffffffffffffffffffffffff16146109e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109da90615491565b60405180910390fd5b600260655403610a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1f906154fd565b60405180910390fd5b6002606581905550600060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a8d919061530a565b602060405180830381865afa158015610aaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ace9190615532565b90506000610ada611608565b610ae26124a2565b83610aed919061558e565b610af791906155c2565b905081841115610b33576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83811015610b6d576040517f94290ab900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b778385613e56565b505060016065819055505050565b609a6020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c04576040517f7acc038e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610ce29190614f02565b60405180910390a36001905092915050565b610cfc613e4e565b73ffffffffffffffffffffffffffffffffffffffff16610d1a612b93565b73ffffffffffffffffffffffffffffffffffffffff1614610d70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6790615491565b60405180910390fd5b610d7981613ea7565b158015610db35750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15610e1757609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f8a8b41ec000000000000000000000000000000000000000000000000000000008152600401610e0e919061530a565b60405180910390fd5b80609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f85796821ee1d670b0fdb986f256b5c1a29b9019038831c7f09df2061879cf9e542604051610e9e9190614f02565b60405180910390a250565b600060019054906101000a900460ff16610ed15760008054906101000a900460ff1615610eda565b610ed9613eca565b5b610f19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1090615668565b60405180910390fd5b60008060019054906101000a900460ff161590508015610f69576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610f7288613ea7565b8015610f835750610f8287613ea7565b5b8015610f945750610f9386613ea7565b5b8015610fa55750610fa485613ea7565b5b8015610fed5750610fb583613ea7565b80610fec5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b5b61102c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611023906156d4565b60405180910390fd5b86609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085609e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084609f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360a060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816097819055506111c1613edb565b6111c9613f34565b6111d1613f8d565b80156111f25760008060016101000a81548160ff0219169083151502179055505b5050505050505050565b600260655403611241576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611238906154fd565b60405180910390fd5b600260658190555060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112a4919061530a565b602060405180830381865afa1580156112c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e59190615532565b81111561131e576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61132733614285565b609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156113a0576040517f177466fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506113f733826144a0565b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b81526004016114529190614f02565b600060405180830381600087803b15801561146c57600080fd5b505af1158015611480573d6000803e3d6000fd5b505050506114ad813373ffffffffffffffffffffffffffffffffffffffff166145d090919063ffffffff16565b6114b5613f8d565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115ad57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc82336040518363ffffffff1660e01b81526004016115689291906156f4565b6020604051808303816000875af1158015611587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ab9190615532565b505b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb82426040516115f592919061571d565b60405180910390a2600160658190555050565b6000611613306125be565b905090565b600081609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156117595781609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517f2a1b2dd800000000000000000000000000000000000000000000000000000000815260040161175092919061571d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036117bf576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611824576040517fed728e5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61182d84614285565b81609960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156118f25781609960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517fa1a48f3a0000000000000000000000000000000000000000000000000000000081526004016118e992919061571d565b60405180910390fd5b81609960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461194191906155c2565b9250508190555081609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119d491906155c2565b925050819055506119e483614285565b81609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a33919061558e565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015611a9a575060008214155b15611bde576000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc84876040518363ffffffff1660e01b8152600401611afe9291906156f4565b6020604051808303816000875af1158015611b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b419190615532565b90506000811115611bdc57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282866040518363ffffffff1660e01b8152600401611ba99291906156f4565b600060405180830381600087803b158015611bc357600080fd5b505af1158015611bd7573d6000803e3d6000fd5b505050505b505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611c3b9190614f02565b60405180910390a3600190509392505050565b6000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262336040518263ffffffff1660e01b8152600401611caa919061530a565b602060405180830381865afa158015611cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ceb9190615532565b905090565b600260655403611d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2c906154fd565b60405180910390fd5b600260658190555060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611d98919061530a565b602060405180830381865afa158015611db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd99190615532565b811115611e12576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611e1b33614285565b609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115611e94576040517f177466fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550611eeb33826144a0565b611ef53382613e56565b611efd613f8d565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ff557609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc82336040518363ffffffff1660e01b8152600401611fb09291906156f4565b6020604051808303816000875af1158015611fcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff39190615532565b505b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb824260405161203d92919061571d565b60405180910390a2600160658190555050565b612058613e4e565b73ffffffffffffffffffffffffffffffffffffffff16612076612b93565b73ffffffffffffffffffffffffffffffffffffffff16146120cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c390615491565b60405180910390fd5b8060978190555050565b60026065540361211b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612112906154fd565b60405180910390fd5b600260658190555061212c336146d0565b609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548111156121a5576040517f1b95a86600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6121af3382614885565b80609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121fe91906155c2565b9250508190555080609a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461225491906155c2565b92505081905550612263613f8d565b3373ffffffffffffffffffffffffffffffffffffffff167f24fcca58a997b1b2eff6db8107e860458544c09ddd3693b3b779e1df6c0d6c5d82426040516122ab92919061571d565b60405180910390a2600160658190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612325576040517f7acc038e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546123af919061558e565b905080609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161248f9190614f02565b60405180910390a3600191505092915050565b60006124ad306124b2565b905090565b6000609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b81526004016125509291906156f4565b602060405180830381865afa15801561256d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125919190615532565b9050919050565b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b815260040161265c9291906156f4565b602060405180830381865afa158015612679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269d9190615532565b9050919050565b6126ac613e4e565b73ffffffffffffffffffffffffffffffffffffffff166126ca612b93565b73ffffffffffffffffffffffffffffffffffffffff1614612720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271790615491565b60405180910390fd5b61272981613ea7565b1580156127635750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b156127a557806040517f8a8b41ec00000000000000000000000000000000000000000000000000000000815260040161279c919061530a565b60405180910390fd5b80609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461282357612822613f8d565b5b8073ffffffffffffffffffffffffffffffffffffffff167fef1b7e9216e08b283cc613824ccb26ea505227777839a4f3c6810d64594e0182426040516128699190614f02565b60405180910390a250565b565b600034036128b0576040517f078e1d8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6128b933614285565b60006097541461294a5760975434609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612911919061558e565b1115612949576040517f3f27d61700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156129b457600080fd5b505af11580156129c8573d6000803e3d6000fd5b50505050506129d733346148d8565b34609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a26919061558e565b92505081905550612a35613f8d565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612b1b57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb234336040518363ffffffff1660e01b8152600401612ae89291906156f4565b600060405180830381600087803b158015612b0257600080fd5b505af1158015612b16573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a153442604051612b6392919061571d565b60405180910390a2565b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b670c7d713b49da000081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612c56576040517f7acc038e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015612d1e5782816040517f2a1b2dd8000000000000000000000000000000000000000000000000000000008152600401612d1592919061571d565b60405180910390fd5b60008382612d2c91906155c2565b905080609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051612e0c9190614f02565b60405180910390a360019250505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612e87576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612eec576040517fed728e5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ef533614285565b81609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612fba5781609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517fa1a48f3a000000000000000000000000000000000000000000000000000000008152600401612fb192919061571d565b60405180910390fd5b81609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555061301083614285565b81609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461305f919061558e565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156130c6575060008214155b1561320a576000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc84336040518363ffffffff1660e01b815260040161312a9291906156f4565b6020604051808303816000875af1158015613149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316d9190615532565b9050600081111561320857609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282866040518363ffffffff1660e01b81526004016131d59291906156f4565b600060405180830381600087803b1580156131ef57600080fd5b505af1158015613203573d6000803e3d6000fd5b505050505b505b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516132679190614f02565b60405180910390a36001905092915050565b609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002606554036132e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132db906154fd565b60405180910390fd5b600260658190555060008103613326576040517f078e1d8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61332f33614285565b6000609754146133c05760975481609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613387919061558e565b11156133bf576040517f3f27d61700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b6133ca3382614885565b6133d433826148d8565b80609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613423919061558e565b92505081905550613432613f8d565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461351857609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282336040518363ffffffff1660e01b81526004016134e59291906156f4565b600060405180830381600087803b1580156134ff57600080fd5b505af1158015613513573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15824260405161356092919061571d565b60405180910390a2600160658190555050565b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd083316135bb6124a2565b6135c3611608565b6040518363ffffffff1660e01b81526004016135e092919061571d565b602060405180830381865afa1580156135fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136219190615532565b905090565b60975481565b600073ffffffffffffffffffffffffffffffffffffffff16609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036136b4576040517f700e36ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e7fc864336040518263ffffffff1660e01b815260040161370f919061530a565b602060405180830381865afa15801561372c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137509190615772565b613786576040517feb05f53600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000613790611608565b036137c7576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026065540361380c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613803906154fd565b60405180910390fd5b600260658190555060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161386f919061530a565b602060405180830381865afa15801561388c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138b09190615532565b8111156138e9576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6138f2336146d0565b80609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613941919061558e565b9250508190555080609a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613997919061558e565b925050819055506139a83382613e56565b6139b0613f8d565b3373ffffffffffffffffffffffffffffffffffffffff167fd6b37be10b58108f696d9ed067fedad0bff7cb417ef4c28d2f8a25d6d83c98d582426040516139f892919061571d565b60405180910390a26001606581905550670c7d713b49da0000613a19611608565b670de0b6b3a7640000613a2a6124a2565b613a34919061579f565b613a3e9190615810565b1115613a76576040517fe5739c7e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b613b54613e4e565b73ffffffffffffffffffffffffffffffffffffffff16613b72612b93565b73ffffffffffffffffffffffffffffffffffffffff1614613bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bbf90615491565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c2e906158b3565b60405180910390fd5b613c40816149fe565b50565b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec613c8b6124a2565b613c93611608565b6040518363ffffffff1660e01b8152600401613cb092919061571d565b602060405180830381865afa158015613ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf19190615532565b905090565b613cfe613e4e565b73ffffffffffffffffffffffffffffffffffffffff16613d1c612b93565b73ffffffffffffffffffffffffffffffffffffffff1614613d72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d6990615491565b60405180910390fd5b613d7b81613ea7565b613dbc57806040517f8a8b41ec000000000000000000000000000000000000000000000000000000008152600401613db3919061530a565b60405180910390fd5b80609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f04dce7d074f7e287a2e6e3516c802271d58d5c14e0dede83a49719eb6b92046942604051613e439190614f02565b60405180910390a250565b600033905090565b613ea3828260a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16614ac49092919063ffffffff16565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000613ed530613ea7565b15905090565b600060019054906101000a900460ff16613f2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f2190615945565b60405180910390fd5b613f32614bfa565b565b600060019054906101000a900460ff16613f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f7a90615945565b60405180910390fd5b613f8b614c5b565b565b6000613f976124a2565b90506000613fa3611608565b9050600073ffffffffffffffffffffffffffffffffffffffff16609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361402d576040517ffd4851e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd0833185856040518363ffffffff1660e01b81526004016140c892919061571d565b602060405180830381865afa1580156140e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141099190615532565b6040518263ffffffff1660e01b81526004016141259190614f02565b600060405180830381600087803b15801561413f57600080fd5b505af1158015614153573d6000803e3d6000fd5b50505050609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec85856040518363ffffffff1660e01b81526004016141f292919061571d565b602060405180830381865afa15801561420f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142339190615532565b6040518263ffffffff1660e01b815260040161424f9190614f02565b600060405180830381600087803b15801561426957600080fd5b505af115801561427d573d6000803e3d6000fd5b505050505050565b6000609960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546142d0836125be565b6142da91906155c2565b90506142e682826148d8565b6142ef306125be565b609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e2161824260405161437a92919061571d565b60405180910390a2609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336836040518263ffffffff1660e01b81526004016143dd919061530a565b600060405180830381600087803b1580156143f757600080fd5b505af115801561440b573d6000803e3d6000fd5b50505050609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b815260040161446a919061530a565b600060405180830381600087803b15801561448457600080fd5b505af1158015614498573d6000803e3d6000fd5b505050505050565b609960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115614519576040517f177466fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516145c49190614f02565b60405180910390a35050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81111561460557614604615965565b5b6040519080825280601f01601f1916602001820160405280156146375781602001600182028036833780820191505090505b506040516146459190615a05565b60006040518083038185875af1925050503d8060008114614682576040519150601f19603f3d011682016040523d82523d6000602084013e614687565b606091505b50509050806146cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016146c290615a8e565b60405180910390fd5b505050565b6146d9816124b2565b609a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614725306124b2565b609a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336826040518263ffffffff1660e01b81526004016147c3919061530a565b600060405180830381600087803b1580156147dd57600080fd5b505af11580156147f1573d6000803e3d6000fd5b50505050609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b8152600401614850919061530a565b600060405180830381600087803b15801561486a57600080fd5b505af115801561487e573d6000803e3d6000fd5b5050505050565b6148d482308360a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16614cb4909392919063ffffffff16565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361493e576040517f8db7f6da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461498d919061558e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516149f29190614f02565b60405180910390a35050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401614af6929190615aae565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051614b449190615a05565b6000604051808303816000865af19150503d8060008114614b81576040519150601f19603f3d011682016040523d82523d6000602084013e614b86565b606091505b5091509150818015614bb45750600081511480614bb3575080806020019051810190614bb29190615772565b5b5b614bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614bea90615b49565b60405180910390fd5b5050505050565b600060019054906101000a900460ff16614c49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614c4090615945565b60405180910390fd5b614c59614c54613e4e565b6149fe565b565b600060019054906101000a900460ff16614caa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614ca190615945565b60405180910390fd5b6001606581905550565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401614ce893929190615b69565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051614d369190615a05565b6000604051808303816000865af19150503d8060008114614d73576040519150601f19603f3d011682016040523d82523d6000602084013e614d78565b606091505b5091509150818015614da65750600081511480614da5575080806020019051810190614da49190615772565b5b5b614de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614ddc90615c12565b60405180910390fd5b505050505050565b600080fd5b6000819050919050565b614e0581614df2565b8114614e1057600080fd5b50565b600081359050614e2281614dfc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614e5382614e28565b9050919050565b614e6381614e48565b8114614e6e57600080fd5b50565b600081359050614e8081614e5a565b92915050565b60008060408385031215614e9d57614e9c614ded565b5b6000614eab85828601614e13565b9250506020614ebc85828601614e71565b9150509250929050565b600060208284031215614edc57614edb614ded565b5b6000614eea84828501614e71565b91505092915050565b614efc81614df2565b82525050565b6000602082019050614f176000830184614ef3565b92915050565b60008060408385031215614f3457614f33614ded565b5b6000614f4285828601614e71565b9250506020614f5385828601614e13565b9150509250929050565b60008115159050919050565b614f7281614f5d565b82525050565b6000602082019050614f8d6000830184614f69565b92915050565b6000614f9e82614e48565b9050919050565b614fae81614f93565b8114614fb957600080fd5b50565b600081359050614fcb81614fa5565b92915050565b600060208284031215614fe757614fe6614ded565b5b6000614ff584828501614fbc565b91505092915050565b600061500982614e48565b9050919050565b61501981614ffe565b811461502457600080fd5b50565b60008135905061503681615010565b92915050565b600061504782614e48565b9050919050565b6150578161503c565b811461506257600080fd5b50565b6000813590506150748161504e565b92915050565b600061508582614e48565b9050919050565b6150958161507a565b81146150a057600080fd5b50565b6000813590506150b28161508c565b92915050565b60006150c382614e28565b9050919050565b6150d3816150b8565b81146150de57600080fd5b50565b6000813590506150f0816150ca565b92915050565b600080600080600080600060e0888a03121561511557615114614ded565b5b60006151238a828b01615027565b97505060206151348a828b01615065565b96505060406151458a828b016150a3565b95505060606151568a828b016150a3565b94505060806151678a828b016150e1565b93505060a06151788a828b01614fbc565b92505060c06151898a828b01614e13565b91505092959891949750929550565b6000602082840312156151ae576151ad614ded565b5b60006151bc84828501614e13565b91505092915050565b6000806000606084860312156151de576151dd614ded565b5b60006151ec86828701614e71565b93505060206151fd86828701614e71565b925050604061520e86828701614e13565b9150509250925092565b6000819050919050565b600061523d61523861523384614e28565b615218565b614e28565b9050919050565b600061524f82615222565b9050919050565b600061526182615244565b9050919050565b61527181615256565b82525050565b600060208201905061528c6000830184615268565b92915050565b6000602082840312156152a8576152a7614ded565b5b60006152b684828501615027565b91505092915050565b60006152ca82615244565b9050919050565b6152da816152bf565b82525050565b60006020820190506152f560008301846152d1565b92915050565b61530481614e48565b82525050565b600060208201905061531f60008301846152fb565b92915050565b61532e816150b8565b82525050565b60006020820190506153496000830184615325565b92915050565b600061535a82615244565b9050919050565b61536a8161534f565b82525050565b60006020820190506153856000830184615361565b92915050565b600080604083850312156153a2576153a1614ded565b5b60006153b085828601614e71565b92505060206153c185828601614e71565b9150509250929050565b60006153d682615244565b9050919050565b6153e6816153cb565b82525050565b600060208201905061540160008301846153dd565b92915050565b60006020828403121561541d5761541c614ded565b5b600061542b84828501615065565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061547b602083615434565b915061548682615445565b602082019050919050565b600060208201905081810360008301526154aa8161546e565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006154e7601f83615434565b91506154f2826154b1565b602082019050919050565b60006020820190508181036000830152615516816154da565b9050919050565b60008151905061552c81614dfc565b92915050565b60006020828403121561554857615547614ded565b5b60006155568482850161551d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061559982614df2565b91506155a483614df2565b92508282019050808211156155bc576155bb61555f565b5b92915050565b60006155cd82614df2565b91506155d883614df2565b92508282039050818111156155f0576155ef61555f565b5b92915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000615652602e83615434565b915061565d826155f6565b604082019050919050565b6000602082019050818103600083015261568181615645565b9050919050565b7f57726f6e6720696e697420617267756d656e7473000000000000000000000000600082015250565b60006156be601483615434565b91506156c982615688565b602082019050919050565b600060208201905081810360008301526156ed816156b1565b9050919050565b60006040820190506157096000830185614ef3565b61571660208301846152fb565b9392505050565b60006040820190506157326000830185614ef3565b61573f6020830184614ef3565b9392505050565b61574f81614f5d565b811461575a57600080fd5b50565b60008151905061576c81615746565b92915050565b60006020828403121561578857615787614ded565b5b60006157968482850161575d565b91505092915050565b60006157aa82614df2565b91506157b583614df2565b92508282026157c381614df2565b915082820484148315176157da576157d961555f565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061581b82614df2565b915061582683614df2565b925082615836576158356157e1565b5b828204905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061589d602683615434565b91506158a882615841565b604082019050919050565b600060208201905081810360008301526158cc81615890565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061592f602b83615434565b915061593a826158d3565b604082019050919050565b6000602082019050818103600083015261595e81615922565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600081905092915050565b60005b838110156159c85780820151818401526020810190506159ad565b60008484015250505050565b60006159df82615994565b6159e9818561599f565b93506159f98185602086016159aa565b80840191505092915050565b6000615a1182846159d4565b915081905092915050565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b6000615a78603483615434565b9150615a8382615a1c565b604082019050919050565b60006020820190508181036000830152615aa781615a6b565b9050919050565b6000604082019050615ac360008301856152fb565b615ad06020830184614ef3565b9392505050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6000615b33602d83615434565b9150615b3e82615ad7565b604082019050919050565b60006020820190508181036000830152615b6281615b26565b9050919050565b6000606082019050615b7e60008301866152fb565b615b8b60208301856152fb565b615b986040830184614ef3565b949350505050565b7f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260008201527f616e7366657246726f6d206661696c6564000000000000000000000000000000602082015250565b6000615bfc603183615434565b9150615c0782615ba0565b604082019050919050565b60006020820190508181036000830152615c2b81615bef565b905091905056fea26469706673582212202ce0f2820ea48f16bf054c467823e6270bdba12cc11971ccadeb48eb53efee1864736f6c63430008110033a26469706673582212205fb885ae71189b9fbb5d292ac21060e098152f84a6b4901a39e8d10fc5ae67be64736f6c63430008110033",
  "devdoc": {
    "details": "Contract factory allowing anyone to deploy a pool contract",
    "events": {
      "PoolDeployed(address,address,uint256)": {
        "details": "emitted after pool is deployed by any user",
        "params": {
          "poolAddress": "of deployed pool",
          "timestamp": "of the deployment*",
          "user": "the address initiating the deployment"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "title": "WavaxPoolFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}