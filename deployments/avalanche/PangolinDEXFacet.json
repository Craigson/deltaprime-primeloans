{
  "address": "0x61FF2aF3ff697D60817f9E5d76d8241Ed174680e",
  "abi": [
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receviedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "ProxyCalldataFailedWithCustomError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ProxyCalldataFailedWithStringMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProxyCalldataFailedWithoutErrMsg",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "firstAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "secondAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "secondAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "firstAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "secondAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "secondAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "soldAsset",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "boughtAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maximumSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumBought",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "assetsToRepay",
          "type": "bytes32[]"
        }
      ],
      "name": "_getAllPricesForLiquidation",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "ownedAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "debtAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "stakedPositionsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "assetsToRepayPrices",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SolvencyFacetProd.CachedPrices",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getHealthRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "ownedAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "debtAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "stakedPositionsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "assetsToRepayPrices",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SolvencyFacetProd.CachedPrices",
          "name": "cachedPrices",
          "type": "tuple"
        }
      ],
      "name": "_getHealthRatioWithPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_resetPrimeAccountAssetsExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_setPrimeAccountAssetsExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_firstAsset",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_secondAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityPangolin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_bytes32",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchangeIntermediaryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "symbol",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "symbols",
          "type": "bytes32[]"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_firstAsset",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_secondAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityPangolin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        }
      ],
      "name": "stringToBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_soldAsset",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_boughtAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_exactSold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumBought",
          "type": "uint256"
        }
      ],
      "name": "swapPangolin",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6705d73853fd7376fb765fc92b27b2ec55dd59070d1d2d4e49856f4491ae7bd1",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x61FF2aF3ff697D60817f9E5d76d8241Ed174680e",
    "transactionIndex": 0,
    "gasUsed": "3631177",
    "logsBloom": "0x
    "blockHash": "0x9e0fbcde09d40611f568cfd1c05fee9220734a5143c6adbd9f6af447cde40cf4",
    "transactionHash": "0x6705d73853fd7376fb765fc92b27b2ec55dd59070d1d2d4e49856f4491ae7bd1",
    "logs": [],
    "blockNumber": 24759114,
    "cumulativeGasUsed": "3631177",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "bb91896e53489a50d2501e35092f78c3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receviedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"ProxyCalldataFailedWithCustomError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ProxyCalldataFailedWithStringMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProxyCalldataFailedWithoutErrMsg\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"soldAsset\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"boughtAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximumSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"assetsToRepay\",\"type\":\"bytes32[]\"}],\"name\":\"_getAllPricesForLiquidation\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"assetsToRepayPrices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SolvencyFacetProd.CachedPrices\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getHealthRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"assetsToRepayPrices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SolvencyFacetProd.CachedPrices\",\"name\":\"cachedPrices\",\"type\":\"tuple\"}],\"name\":\"_getHealthRatioWithPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_resetPrimeAccountAssetsExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_setPrimeAccountAssetsExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_firstAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"addLiquidityPangolin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeIntermediaryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"symbols\",\"type\":\"bytes32[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_firstAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityPangolin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_soldAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_boughtAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exactSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBought\",\"type\":\"uint256\"}],\"name\":\"swapPangolin\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swapPangolin(bytes32,bytes32,uint256,uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"_boughtAsset\":\"asset to be bought\",\"_exactSold\":\"exact amount of asset to be sold\",\"_minimumBought\":\"minimum amount of asset to be bought*\",\"_soldAsset\":\"asset to be sold\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExchangeIntermediaryContract()\":{\"notice\":\"Returns address of UniswapV2-like exchange*\"},\"swapPangolin(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Swaps one asset to another\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/avalanche/PangolinDEXFacet.sol\":\"PangolinDEXFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n  using SafeMath for uint256;\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSGINED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return dataPackagesCount;\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 calldataNegativeOffsetForDataPackage,\\n    uint256 defaultDataPointValueByteSize,\\n    uint256 dataPointIndex\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\\n    );\\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0xa96eced2521c637867c670f7f86f3a719e40f210d8a802124f322876bdf013df\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\n\\n/**\\n * @title The base contract for forwarding redstone payload to other contracts\\n * @author The Redstone Oracles team\\n */\\ncontract ProxyConnector is RedstoneConstants, CalldataExtractor {\\n  error ProxyCalldataFailedWithoutErrMsg();\\n  error ProxyCalldataFailedWithStringMessage(string message);\\n  error ProxyCalldataFailedWithCustomError(bytes result);\\n\\n  function proxyCalldata(\\n    address contractAddress,\\n    bytes memory encodedFunction,\\n    bool forwardValue\\n  ) internal returns (bytes memory) {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n\\n    (bool success, bytes memory result) =\\n      contractAddress.call{value: forwardValue ? msg.value : 0}(message);\\n\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyDelegateCalldata(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.delegatecall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyCalldataView(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.staticcall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function _prepareMessage(bytes memory encodedFunction) private pure returns (bytes memory) {\\n    uint256 encodedFunctionBytesCount = encodedFunction.length;\\n    uint256 redstonePayloadByteSize = _getRedstonePayloadByteSize();\\n    uint256 resultMessageByteSize = encodedFunctionBytesCount + redstonePayloadByteSize;\\n\\n    if (redstonePayloadByteSize > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n\\n    bytes memory message;\\n\\n    assembly {\\n      message := mload(FREE_MEMORY_PTR) // sets message pointer to first free place in memory\\n\\n      // Saving the byte size of the result message (it's a standard in EVM)\\n      mstore(message, resultMessageByteSize)\\n\\n      // Copying function and its arguments\\n      for {\\n        let from := add(BYTES_ARR_LEN_VAR_BS, encodedFunction)\\n        let fromEnd := add(from, encodedFunctionBytesCount)\\n        let to := add(BYTES_ARR_LEN_VAR_BS, message)\\n      } lt (from, fromEnd) {\\n        from := add(from, STANDARD_SLOT_BS)\\n        to := add(to, STANDARD_SLOT_BS)\\n      } {\\n        // Copying data from encodedFunction to message (32 bytes at a time)\\n        mstore(to, mload(from))\\n      }\\n\\n      // Copying redstone payload to the message bytes\\n      calldatacopy(\\n        add(message, add(BYTES_ARR_LEN_VAR_BS, encodedFunctionBytesCount)), // address\\n        sub(calldatasize(), redstonePayloadByteSize), // offset\\n        redstonePayloadByteSize // bytes length to copy\\n      )\\n\\n      // Updating free memory pointer\\n      mstore(\\n        FREE_MEMORY_PTR,\\n        add(\\n          add(message, add(redstonePayloadByteSize, encodedFunctionBytesCount)),\\n          BYTES_ARR_LEN_VAR_BS\\n        )\\n      )\\n    }\\n\\n    return message;\\n  }\\n\\n  function _getRedstonePayloadByteSize() private pure returns (uint256) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n\\n    return calldataNegativeOffset;\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) private pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n\\n  function _prepareReturnValue(bool success, bytes memory result)\\n    internal\\n    pure\\n    returns (bytes memory)\\n  {\\n    if (!success) {\\n\\n      if (result.length == 0) {\\n        revert ProxyCalldataFailedWithoutErrMsg();\\n      } else {\\n        bool isStringErrorMessage;\\n        assembly {\\n          let first32BytesOfResult := mload(add(result, BYTES_ARR_LEN_VAR_BS))\\n          isStringErrorMessage := eq(first32BytesOfResult, STRING_ERR_MESSAGE_MASK)\\n        }\\n\\n        if (isStringErrorMessage) {\\n          string memory receivedErrMsg;\\n          assembly {\\n            receivedErrMsg := add(result, REVERT_MSG_OFFSET)\\n          }\\n          revert ProxyCalldataFailedWithStringMessage(receivedErrMsg);\\n        } else {\\n          revert ProxyCalldataFailedWithCustomError(result);\\n        }\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x4630299916b145de0c392f390e77f75a7b1cec762bbd374f745abcdbcfdb5e8c\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSGINED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receviedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n}\\n\",\"keccak256\":\"0xc9a73986f5a12a28f74d98e8f028ca47c79909f317a38be02820e421d0723b30\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./RedstoneDefaultsLib.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\nimport \\\"../libs/BitmapLib.sol\\\";\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n/**\\n * @title The base contract with the main Redstone logic\\n * @author The Redstone Oracles team\\n * @dev Do not use this contract directly in consumer contracts, take a\\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\\n */\\nabstract contract RedstoneConsumerBase is CalldataExtractor {\\n  using SafeMath for uint256;\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return a unique index for a given signer address if the signer\\n   * is authorised, otherwise it should revert\\n   * @param receviedSigner The address of a signer, recovered from ECDSA signature\\n   * @return Unique index for a signer in the range [0..255]\\n   */\\n  function getAuthorisedSignerIndex(address receviedSigner) public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overriden by the child consumer contract.\\n   * It should validate the timestamp against the current time (block.timestamp)\\n   * It should revert with a helpful message if the timestamp is not valid\\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n  }\\n\\n  /**\\n   * @dev This function should be overriden by the child consumer contract.\\n   * @return The minimum required value of unique authorised signers\\n   */\\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev This function may be overriden by the child consumer contract.\\n   * It should aggregate values from different signers to a single uint value.\\n   * By default, it calculates the median value\\n   * @param values An array of uint256 values from different signers\\n   * @return Result of the aggregation in the form of a single number\\n   */\\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\\n    return RedstoneDefaultsLib.aggregateValues(values);\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  /**\\n   * @dev This is an internal helpful function for secure extraction oracle values\\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\\n   * validation, and aggregating values from different authorised signers into a\\n   * single numeric value. If any of the required conditions (e.g. too old timestamp or\\n   * insufficient number of autorised signers) do not match, the function will revert.\\n   *\\n   * Note! You should not call this function in a consumer contract. You can use\\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n   *\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in dataFeedIds array\\n   */\\n  function _securelyExtractOracleValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    // Initializing helpful variables and allocating memory\\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n    for (uint256 i = 0; i < dataFeedIds.length; i++) {\\n      // The line below is commented because newly allocated arrays are filled with zeros\\n      // But we left it for better readability\\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\\n    }\\n\\n    // Extracting the number of data packages from calldata\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n\\n    // Saving current free memory pointer\\n    uint256 freeMemPtr;\\n    assembly {\\n      freeMemPtr := mload(FREE_MEMORY_PTR)\\n    }\\n\\n    // Data packages extraction in a loop\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      // Extract data package details and update calldata offset\\n      uint256 dataPackageByteSize = _extractDataPackage(\\n        dataFeedIds,\\n        uniqueSignerCountForDataFeedIds,\\n        signersBitmapForDataFeedIds,\\n        valuesForDataFeeds,\\n        calldataNegativeOffset\\n      );\\n      calldataNegativeOffset += dataPackageByteSize;\\n\\n      // Shifting memory pointer back to the \\\"safe\\\" value\\n      assembly {\\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\\n      }\\n    }\\n\\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n    return _getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which extracts data for a data package based\\n   * on the given negative calldata offset, verifies them, and in the case of successful\\n   * verification updates the corresponding data package values in memory\\n   *\\n   * @param dataFeedIds an array of unique data feed identifiers\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   * @param signersBitmapForDataFeedIds an array of sginers bitmaps for data feeds\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param calldataNegativeOffset negative calldata offset for the given data package\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _extractDataPackage(\\n    bytes32[] memory dataFeedIds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds,\\n    uint256[] memory signersBitmapForDataFeedIds,\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256 calldataNegativeOffset\\n  ) private view returns (uint256) {\\n    uint256 signerIndex;\\n\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    // We use scopes to resolve problem with too deep stack\\n    {\\n      uint48 extractedTimestamp;\\n      address signerAddress;\\n      bytes32 signedHash;\\n      bytes memory signedMessage;\\n      uint256 signedMessageBytesCount;\\n\\n      signedMessageBytesCount = dataPointsCount.mul(eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS;\\n\\n      uint256 timestampCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n\\n      uint256 signedMessageCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\\n\\n      assembly {\\n        // Extracting the signed message\\n        signedMessage := extractBytesFromCalldata(\\n          signedMessageCalldataOffset,\\n          signedMessageBytesCount\\n        )\\n\\n        // Hashing the signed message\\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n        // Extracting timestamp\\n        extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n        function initByteArray(bytesCount) -> ptr {\\n          ptr := mload(FREE_MEMORY_PTR)\\n          mstore(ptr, bytesCount)\\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n        }\\n\\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n          let extractedBytesStartPtr := initByteArray(bytesCount)\\n          calldatacopy(\\n            extractedBytesStartPtr,\\n            offset,\\n            bytesCount\\n          )\\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n        }\\n      }\\n\\n      // Validating timestamp\\n      validateTimestamp(extractedTimestamp);\\n\\n      // Verifying the off-chain signature against on-chain hashed data\\n      signerAddress = SignatureLib.recoverSignerAddress(\\n        signedHash,\\n        calldataNegativeOffset + SIG_BS\\n      );\\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\\n    }\\n\\n    // Updating helpful arrays\\n    {\\n      bytes32 dataPointDataFeedId;\\n      uint256 dataPointValue;\\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount; dataPointIndex++) {\\n        // Extracting data feed id and value for the current data point\\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n          calldataNegativeOffset,\\n          eachDataPointValueByteSize,\\n          dataPointIndex\\n        );\\n\\n        for (\\n          uint256 dataFeedIdIndex = 0;\\n          dataFeedIdIndex < dataFeedIds.length;\\n          dataFeedIdIndex++\\n        ) {\\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n            if (\\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n            ) {\\n              // Increase unique signer counter\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n              // Add new value\\n              valuesForDataFeeds[dataFeedIdIndex][\\n                uniqueSignerCountForDataFeedIds[dataFeedIdIndex] - 1\\n              ] = dataPointValue;\\n\\n              // Update signers bitmap\\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                bitmapSignersForDataFeedId,\\n                signerIndex\\n              );\\n            }\\n\\n            // Breaking, as there couldn't be several indexes for the same feed ID\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Return total data package byte size\\n    return\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS +\\n      (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) *\\n      dataPointsCount;\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which aggregates values from different\\n   * authorised signers for the given arrays of values for each data feed\\n   *\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _getAggregatedValues(\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds\\n  ) private view returns (uint256[] memory) {\\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n        revert InsufficientNumberOfUniqueSigners(\\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n          uniqueSignersThreshold);\\n      }\\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n    }\\n\\n    return aggregatedValues;\\n  }\\n}\\n\",\"keccak256\":\"0x202fada6c6efd72d2c57574f52ca1af65149c926b0e99a53503be3af6ad1864c\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConsumerBase.sol\\\";\\n\\n/**\\n * @title The base contract for Redstone consumers' contracts that allows to\\n * securely calculate numeric redstone oracle values\\n * @author The Redstone Oracles team\\n * @dev This contract can extend other contracts to allow them\\n * securely fetch Redstone oracle data from transactions calldata\\n */\\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract an\\n   * oracle value for a given data feed id. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n   * @return Extracted and verified numeric oracle value for the given data feed id\\n   */\\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    bytes32[] memory dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = dataFeedId;\\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array\\n   */\\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n  {\\n    return _securelyExtractOracleValuesFromTxMsg(dataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\\n   * only difference that it allows to request oracle data for an array of data feeds\\n   * that may contain duplicates\\n   * \\n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIdsWithDuplicates array\\n   */\\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\\n    // Building an array without duplicates\\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\\n    bool alreadyIncluded;\\n    uint256 uniqueDataFeedIdsCount = 0;\\n\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\\n      alreadyIncluded = false;\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < uniqueDataFeedIdsCount; indexWithoutDup++) {\\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\\n          alreadyIncluded = true;\\n          break;\\n        }\\n      }\\n\\n      // Adding if not included\\n      if (!alreadyIncluded) {\\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\\n        uniqueDataFeedIdsCount++;\\n      }\\n    }\\n\\n    // Overriding dataFeedIdsWithoutDuplicates.length\\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\\n    assembly {\\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\\n    }\\n\\n    // Requesting oracle values (without duplicates)\\n    uint256[] memory valuesWithoutDuplicates = getOracleNumericValuesFromTxMsg(dataFeedIdsWithoutDuplicates);\\n\\n    // Preparing result values array\\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\\n          break;\\n        }\\n      }\\n    }\\n\\n    return valuesWithDuplicates;\\n  }\\n}\\n\",\"keccak256\":\"0xe8e70ed8bb3efc527dccaf5919587c7ff3980836256d7d8db8f632721a3cf956\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n\\n    if (block.timestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n      }\\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0xe39ee1618d15944d6f44918f02f71d0d604fb678dbdbf36ca1eeecc86858ff25\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/RedstoneConsumerNumericBase.sol\\\";\\n\\ncontract AvalancheDataServiceConsumerBase is RedstoneConsumerNumericBase {\\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n    return 3;\\n  }\\n\\n  function getAuthorisedSignerIndex(\\n    address signerAddress\\n  ) public view virtual override returns (uint8) {\\n    if (signerAddress == 0x1eA62d73EdF8AC05DfceA1A34b9796E937a29EfF) {\\n      return 0;\\n    } else if (signerAddress == 0x2c59617248994D12816EE1Fa77CE0a64eEB456BF) {\\n      return 1;\\n    } else if (signerAddress == 0x12470f7aBA85c8b81D63137DD5925D6EE114952b) {\\n      return 2;\\n    } else if (signerAddress == 0x109B4a318A4F5ddcbCA6349B45f881B4137deaFB) {\\n      return 3;\\n    } else if (signerAddress == 0x83cbA8c619fb629b81A65C2e67fE15cf3E3C9747) {\\n      return 4;\\n    } else {\\n      revert SignerNotAuthorised(signerAddress);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x816269b87f6d7fdbac50710b9bd7ecbea0afc660ed4ea8a4441d5f3d163f9e61\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9762198cae997eebad303a7a43a6133908646ed30811285085c9ea9cbd2a5e07\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = SafeMath.add(arr[middleIndex - 1], arr[middleIndex]);\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9b1a3a433a450cbe90e85801ddf891ab26deeda02d45a2d67e24443cdc33e764\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    return ecrecover(signedHash, v, r, s);\\n  }\\n}\\n\",\"keccak256\":\"0x06037b440e5eab52d550718543c463da00ac7231f303a503178ad5191e154310\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/DiamondHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 97d6cc3cb60bfd6feda4ea784b13bf0e7daac710;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./interfaces/IDiamondBeacon.sol\\\";\\r\\n\\r\\n//This path is updated during deployment\\r\\nimport \\\"./lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\n/**\\r\\n * DiamondHelper\\r\\n * Helper methods\\r\\n **/\\r\\ncontract DiamondHelper {\\r\\n    function _getFacetAddress(bytes4 methodSelector) internal view returns (address solvencyFacetAddress) {\\r\\n        solvencyFacetAddress = IDiamondBeacon(payable(DeploymentConstants.getDiamondAddress())).implementation(methodSelector);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1260e163609ca1f1b7508e0cf0b3b11ed45f844659f1720460000203de90d634\",\"license\":\"BUSL-1.1\"},\"contracts/OnlyOwnerOrInsolvent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Modified version of Openzeppelin (OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)) ReentrancyGuard\\r\\n// contract that uses keccak slots instead of the standard storage layout.\\r\\n\\r\\nimport {DiamondStorageLib} from \\\"./lib/DiamondStorageLib.sol\\\";\\r\\nimport \\\"./lib/SolvencyMethods.sol\\\";\\r\\nimport \\\"./facets/SmartLoanLiquidationFacet.sol\\\";\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Enforces ownership only if there is no liquidation ongoing\\r\\n */\\r\\nabstract contract OnlyOwnerOrInsolvent is SolvencyMethods {\\r\\n\\r\\n    /**\\r\\n     * @dev Enforces ownership only if there is no liquidation ongoing\\r\\n     */\\r\\n    modifier onlyOwnerOrInsolvent() {\\r\\n        bool wasSolvent = _isSolvent();\\r\\n        if (wasSolvent) {\\r\\n            DiamondStorageLib.enforceIsContractOwner();\\r\\n        } else {\\r\\n            require(SmartLoanLiquidationFacet(DeploymentConstants.getDiamondAddress()).isLiquidatorWhitelisted(msg.sender), \\\"Only whitelisted accounts can perform this action\\\");\\r\\n        }\\r\\n\\r\\n        _;\\r\\n\\r\\n        if (wasSolvent) {\\r\\n            require(_isSolvent(), \\\"Must stay solvent\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x75a1e0561347ced053527f828c91e9f8ce4ea07af0d80d1d274413b96455252e\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 5bae95ca244e96444fe80078195944f6637e72d8;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./interfaces/IIndex.sol\\\";\\r\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\r\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Pool\\r\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\r\\n * Depositors are rewarded with the interest rates collected from borrowers.\\r\\n * The interest rates calculation is delegated to an external calculator contract.\\r\\n */\\r\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\r\\n    using TransferHelper for address payable;\\r\\n\\r\\n    uint256 public totalSupplyCap;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowed;\\r\\n    mapping(address => uint256) internal _deposited;\\r\\n\\r\\n    mapping(address => uint256) public borrowed;\\r\\n\\r\\n    IRatesCalculator public ratesCalculator;\\r\\n    IBorrowersRegistry public borrowersRegistry;\\r\\n    IPoolRewarder public poolRewarder;\\r\\n\\r\\n    IIndex public depositIndex;\\r\\n    IIndex public borrowIndex;\\r\\n\\r\\n    address payable public tokenAddress;\\r\\n\\r\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\\r\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\r\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\r\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\r\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\r\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\r\\n\\r\\n        borrowersRegistry = borrowersRegistry_;\\r\\n        ratesCalculator = ratesCalculator_;\\r\\n        depositIndex = depositIndex_;\\r\\n        borrowIndex = borrowIndex_;\\r\\n        poolRewarder = poolRewarder_;\\r\\n        tokenAddress = tokenAddress_;\\r\\n        totalSupplyCap = _totalSupplyCap;\\r\\n\\r\\n        __Ownable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n        _updateRates();\\r\\n    }\\r\\n\\r\\n    /* ========== SETTERS ========== */\\r\\n\\r\\n    /**\\r\\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev _newTotalSupplyCap new deposit cap\\r\\n    **/\\r\\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\\r\\n        totalSupplyCap = _newTotalSupplyCap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new Pool Rewarder.\\r\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev _poolRewarder the address of PoolRewarder\\r\\n    **/\\r\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\r\\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\\r\\n        poolRewarder = _poolRewarder;\\r\\n\\r\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new rate calculator.\\r\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev ratesCalculator the address of rates calculator\\r\\n     **/\\r\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\r\\n        // setting address(0) ratesCalculator_ freezes the pool\\r\\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\\r\\n        ratesCalculator = ratesCalculator_;\\r\\n        if (address(ratesCalculator_) != address(0)) {\\r\\n            _updateRates();\\r\\n        }\\r\\n\\r\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new borrowers registry contract.\\r\\n     * The borrowers registry decides if an account can borrow funds.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev borrowersRegistry the address of borrowers registry\\r\\n     **/\\r\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\r\\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\\r\\n\\r\\n        borrowersRegistry = borrowersRegistry_;\\r\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(_deposited[msg.sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[msg.sender]);\\r\\n\\r\\n        // (this is verified in \\\"require\\\" above)\\r\\n        unchecked {\\r\\n            _deposited[msg.sender] -= amount;\\r\\n        }\\r\\n\\r\\n        _accumulateDepositInterest(recipient);\\r\\n        _deposited[recipient] += amount;\\r\\n\\r\\n        // Handle rewards\\r\\n        if(address(poolRewarder) != address(0) && amount != 0){\\r\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, msg.sender);\\r\\n            if(unstaked > 0) {\\r\\n                poolRewarder.stakeFor(unstaked, recipient);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(msg.sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\r\\n        return _allowed[owner][spender];\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\r\\n        _allowed[msg.sender][spender] = newAllowance;\\r\\n\\r\\n        emit Approval(msg.sender, spender, newAllowance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        uint256 currentAllowance = _allowed[msg.sender][spender];\\r\\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\\r\\n\\r\\n        uint256 newAllowance = currentAllowance - subtractedValue;\\r\\n        _allowed[msg.sender][spender] = newAllowance;\\r\\n\\r\\n        emit Approval(msg.sender, spender, newAllowance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        _allowed[msg.sender][spender] = amount;\\r\\n\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\\r\\n\\r\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\r\\n\\r\\n        _accumulateDepositInterest(sender);\\r\\n\\r\\n        if(_deposited[sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[sender]);\\r\\n\\r\\n\\r\\n        _deposited[sender] -= amount;\\r\\n        _allowed[sender][msg.sender] -= amount;\\r\\n\\r\\n        _accumulateDepositInterest(recipient);\\r\\n        _deposited[recipient] += amount;\\r\\n\\r\\n        // Handle rewards\\r\\n        if(address(poolRewarder) != address(0) && amount != 0){\\r\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\\r\\n            if(unstaked > 0) {\\r\\n                poolRewarder.stakeFor(unstaked, recipient);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Deposits the amount\\r\\n     * It updates user deposited balance, total deposited and rates\\r\\n     **/\\r\\n    function deposit(uint256 _amount) public virtual nonReentrant {\\r\\n        if(_amount == 0) revert ZeroDepositAmount();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(totalSupplyCap != 0){\\r\\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\\r\\n        }\\r\\n\\r\\n        _transferToPool(msg.sender, _amount);\\r\\n\\r\\n        _mint(msg.sender, _amount);\\r\\n        _deposited[address(this)] += _amount;\\r\\n        _updateRates();\\r\\n\\r\\n        if (address(poolRewarder) != address(0)) {\\r\\n            poolRewarder.stakeFor(_amount, msg.sender);\\r\\n        }\\r\\n\\r\\n        emit Deposit(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\r\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\r\\n        tokenAddress.safeTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws selected amount from the user deposits\\r\\n     * @dev _amount the amount to be withdrawn\\r\\n     **/\\r\\n    function withdraw(uint256 _amount) external nonReentrant {\\r\\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\r\\n        // verified in \\\"require\\\" above\\r\\n        unchecked {\\r\\n            _deposited[address(this)] -= _amount;\\r\\n        }\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        _transferFromPool(msg.sender, _amount);\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        if (address(poolRewarder) != address(0)) {\\r\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\r\\n        }\\r\\n\\r\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Borrows the specified amount\\r\\n     * It updates user borrowed balance, total borrowed amount and rates\\r\\n     * @dev _amount the amount to be borrowed\\r\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\r\\n     **/\\r\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\r\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\r\\n\\r\\n        _accumulateBorrowingInterest(msg.sender);\\r\\n\\r\\n        borrowed[msg.sender] += _amount;\\r\\n        borrowed[address(this)] += _amount;\\r\\n\\r\\n        _transferFromPool(msg.sender, _amount);\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Repays the amount\\r\\n     * It updates user borrowed balance, total borrowed amount and rates\\r\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\r\\n     **/\\r\\n    function repay(uint256 amount) external nonReentrant {\\r\\n        _accumulateBorrowingInterest(msg.sender);\\r\\n\\r\\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\\r\\n        _transferToPool(msg.sender, amount);\\r\\n\\r\\n        borrowed[msg.sender] -= amount;\\r\\n        borrowed[address(this)] -= amount;\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        emit Repayment(msg.sender, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /* =========\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the current borrowed amount for the given user\\r\\n     * The value includes the interest rates owned at the current moment\\r\\n     * @dev _user the address of queried borrower\\r\\n    **/\\r\\n    function getBorrowed(address _user) public view returns (uint256) {\\r\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function totalBorrowed() public view returns (uint256) {\\r\\n        return getBorrowed(address(this));\\r\\n    }\\r\\n\\r\\n\\r\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\r\\n    function getRewards() external {\\r\\n        poolRewarder.getRewardsFor(msg.sender);\\r\\n    }\\r\\n\\r\\n    // Returns number of pending rewards for msg.sender\\r\\n    function checkRewards() external view returns (uint256) {\\r\\n        return poolRewarder.earned(msg.sender);\\r\\n    }\\r\\n\\r\\n    // Returns max. acceptable pool utilisation after borrow action\\r\\n    function getMaxPoolUtilisationForBorrowing() virtual public view returns (uint256) {\\r\\n        return 0.9e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current deposited amount for the given user\\r\\n     * The value includes the interest rates earned at the current moment\\r\\n     * @dev _user the address of queried depositor\\r\\n     **/\\r\\n    function balanceOf(address user) public view override returns (uint256) {\\r\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current interest rate for deposits\\r\\n     **/\\r\\n    function getDepositRate() public view returns (uint256) {\\r\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current interest rate for borrowings\\r\\n     **/\\r\\n    function getBorrowingRate() public view returns (uint256) {\\r\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\r\\n     **/\\r\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\r\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\r\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\r\\n\\r\\n        if(amount > balance) revert InsufficientPoolFunds();\\r\\n        if(surplus < amount) revert InsufficientSurplus();\\r\\n\\r\\n        _transferFromPool(account, amount);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    function _mint(address to, uint256 amount) internal {\\r\\n        if(to == address(0)) revert MintToAddressZero();\\r\\n\\r\\n        _deposited[to] += amount;\\r\\n\\r\\n        emit Transfer(address(0), to, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\\r\\n\\r\\n        // verified in \\\"require\\\" above\\r\\n        unchecked {\\r\\n            _deposited[account] -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _updateRates() internal {\\r\\n        uint256 _totalBorrowed = totalBorrowed();\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\\r\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\r\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\r\\n    }\\r\\n\\r\\n    function _accumulateDepositInterest(address user) internal {\\r\\n        uint256 interest = balanceOf(user) - _deposited[user];\\r\\n\\r\\n        _mint(user, interest);\\r\\n        _deposited[address(this)] = balanceOf(address(this));\\r\\n\\r\\n        emit InterestCollected(user, interest, block.timestamp);\\r\\n\\r\\n        depositIndex.updateUser(user);\\r\\n        depositIndex.updateUser(address(this));\\r\\n    }\\r\\n\\r\\n    function _accumulateBorrowingInterest(address user) internal {\\r\\n        borrowed[user] = getBorrowed(user);\\r\\n        borrowed[address(this)] = getBorrowed(address(this));\\r\\n\\r\\n        borrowIndex.updateUser(user);\\r\\n        borrowIndex.updateUser(address(this));\\r\\n    }\\r\\n\\r\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\r\\n\\r\\n    function renounceOwnership() public virtual override {}\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier canBorrow() {\\r\\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\\r\\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\\r\\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\\r\\n        _;\\r\\n        if((totalBorrowed() * 1e18) / totalSupply() > getMaxPoolUtilisationForBorrowing()) revert MaxPoolUtilisationBreached();\\r\\n    }\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user deposits funds\\r\\n     * @param user the address performing the deposit\\r\\n     * @param value the amount deposited\\r\\n     * @param timestamp of the deposit\\r\\n     **/\\r\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user withdraws funds\\r\\n     * @param user the address performing the withdrawal\\r\\n     * @param value the amount withdrawn\\r\\n     * @param timestamp of the withdrawal\\r\\n     **/\\r\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user borrows funds\\r\\n     * @param user the address that borrows\\r\\n     * @param value the amount borrowed\\r\\n     * @param timestamp time of the borrowing\\r\\n     **/\\r\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user repays debt\\r\\n     * @param user the address that repays debt\\r\\n     * @param value the amount repaid\\r\\n     * @param timestamp of the repayment\\r\\n     **/\\r\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after accumulating deposit interest\\r\\n     * @param user the address that the deposit interest is accumulated for\\r\\n     * @param value the amount that interest is calculated from\\r\\n     * @param timestamp of the interest accumulation\\r\\n     **/\\r\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing borrowers registry\\r\\n    * @param registry an address of the newly set borrowers registry\\r\\n    * @param timestamp of the borrowers registry change\\r\\n    **/\\r\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing rates calculator\\r\\n    * @param calculator an address of the newly set rates calculator\\r\\n    * @param timestamp of the borrowers registry change\\r\\n    **/\\r\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing pool rewarder\\r\\n    * @param poolRewarder an address of the newly set pool rewarder\\r\\n    * @param timestamp of the pool rewarder change\\r\\n    **/\\r\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\r\\n\\r\\n    /* ========== ERRORS ========== */\\r\\n\\r\\n    // Only authorized accounts may borrow\\r\\n    error NotAuthorizedToBorrow();\\r\\n\\r\\n    // Borrowers registry is not configured\\r\\n    error BorrowersRegistryNotConfigured();\\r\\n\\r\\n    // Pool is frozen\\r\\n    error PoolFrozen();\\r\\n\\r\\n    // Not enough funds in the pool.\\r\\n    error InsufficientPoolFunds();\\r\\n\\r\\n    // Insufficient pool surplus to cover the requested recover amount\\r\\n    error InsufficientSurplus();\\r\\n\\r\\n    // Address (`target`) must be a contract\\r\\n    // @param target target address that must be a contract\\r\\n    error NotAContract(address target);\\r\\n\\r\\n    //  ERC20: Spender cannot be a zero address\\r\\n    error SpenderZeroAddress();\\r\\n\\r\\n    //  ERC20: cannot transfer to the zero address\\r\\n    error TransferToZeroAddress();\\r\\n\\r\\n    //  ERC20: cannot transfer to the pool address\\r\\n    error TransferToPoolAddress();\\r\\n\\r\\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\\r\\n    /// @param amount transfer amount\\r\\n    /// @param balance available balance\\r\\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\r\\n\\r\\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\\r\\n    /// @param requested requested transfer amount\\r\\n    /// @param allowance current allowance\\r\\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\\r\\n\\r\\n    //  This deposit operation would result in a breach of the totalSupplyCap\\r\\n    error TotalSupplyCapBreached();\\r\\n\\r\\n    // The deposit amount must be > 0\\r\\n    error ZeroDepositAmount();\\r\\n\\r\\n    // ERC20: cannot mint to the zero address\\r\\n    error MintToAddressZero();\\r\\n\\r\\n    // ERC20: burn amount exceeds current pool indexed balance\\r\\n    error BurnAmountExceedsBalance();\\r\\n\\r\\n    // Trying to repay more than was borrowed\\r\\n    error RepayingMoreThanWasBorrowed();\\r\\n\\r\\n    // getMaxPoolUtilisationForBorrowing was breached\\r\\n    error MaxPoolUtilisationBreached();\\r\\n}\",\"keccak256\":\"0xd59448147e759ba73843ca7a8c5a85549a2152601ab3577f80681835c41ecd54\",\"license\":\"BUSL-1.1\"},\"contracts/ReentrancyGuardKeccak.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Modified version of Openzeppelin (OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)) ReentrancyGuard\\r\\n// contract that uses keccak slots instead of the standard storage layout.\\r\\n\\r\\nimport {DiamondStorageLib} from \\\"./lib/DiamondStorageLib.sol\\\";\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n */\\r\\nabstract contract ReentrancyGuardKeccak {\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        DiamondStorageLib.ReentrancyGuardStorage storage rgs = DiamondStorageLib.reentrancyGuardStorage();\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(rgs._status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        rgs._status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        rgs._status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x10cf073a638c2bd869485bfe43d40720a1f65bb7521c5d780853c13baec74e19\",\"license\":\"MIT\"},\"contracts/SmartLoanDiamondBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport {DiamondStorageLib} from \\\"./lib/DiamondStorageLib.sol\\\";\\r\\nimport {IDiamondCut} from \\\"./interfaces/IDiamondCut.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SmartLoanDiamondBeacon\\r\\n * A contract that is authorised to borrow funds using delegated credit.\\r\\n * It maintains solvency calculating the current value of assets and borrowings.\\r\\n * In case the value of assets held drops below certain level, part of the funds may be forcibly repaid.\\r\\n * It permits only a limited and safe token transfer.\\r\\n *\\r\\n */\\r\\n\\r\\ncontract SmartLoanDiamondBeacon {\\r\\n    constructor(address _contractOwner, address _diamondCutFacet) payable {\\r\\n        DiamondStorageLib.setContractOwner(_contractOwner);\\r\\n        DiamondStorageLib.setContractPauseAdmin(_contractOwner);\\r\\n\\r\\n        // Add the diamondCut external function from the diamondCutFacet\\r\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\r\\n        bytes4[] memory functionSelectors = new bytes4[](3);\\r\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\r\\n        functionSelectors[1] = IDiamondCut.pause.selector;\\r\\n        functionSelectors[2] = IDiamondCut.unpause.selector;\\r\\n        cut[0] = IDiamondCut.FacetCut({\\r\\n        facetAddress : _diamondCutFacet,\\r\\n        action : IDiamondCut.FacetCutAction.Add,\\r\\n        functionSelectors : functionSelectors\\r\\n        });\\r\\n        DiamondStorageLib.diamondCut(cut, address(0), \\\"\\\");\\r\\n\\r\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\r\\n        // diamondCut(); unpause()\\r\\n        ds.canBeExecutedWhenPaused[0x1f931c1c] = true;\\r\\n        ds.canBeExecutedWhenPaused[0x3f4ba83a] = true;\\r\\n    }\\r\\n\\r\\n    function implementation() public view returns (address) {\\r\\n        return address(this);\\r\\n    }\\r\\n\\r\\n    function canBeExecutedWhenPaused(bytes4 methodSig) external view returns (bool) {\\r\\n        return DiamondStorageLib.getPausedMethodExemption(methodSig);\\r\\n    }\\r\\n\\r\\n    function setPausedMethodExemptions(bytes4[] memory methodSigs, bool[] memory values) public {\\r\\n        DiamondStorageLib.enforceIsContractOwner();\\r\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\r\\n\\r\\n        for(uint i; i<methodSigs.length; i++){\\r\\n            require(!(methodSigs[i] == 0x3f4ba83a && values[i] == false), \\\"The unpause() method must be available during the paused state.\\\");\\r\\n            ds.canBeExecutedWhenPaused[methodSigs[i]] = values[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getStatus() public view returns(bool) {\\r\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\r\\n        return ds._active;\\r\\n    }\\r\\n\\r\\n    function implementation(bytes4 funcSignature) public view notPausedOrUpgrading(funcSignature) returns (address) {\\r\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\r\\n        // get facet from function selector\\r\\n        address facet = ds.selectorToFacetAndPosition[funcSignature].facetAddress;\\r\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\r\\n        // Execute external function from facet using delegatecall and return any value.\\r\\n        return facet;\\r\\n    }\\r\\n\\r\\n\\r\\n    // Find facet for function that is called and execute the\\r\\n    // function if a facet is found and return any value.\\r\\n    fallback() external payable {\\r\\n        address facet = implementation(msg.sig);\\r\\n        // Execute external function from facet using delegatecall and return any value.\\r\\n        assembly {\\r\\n        // copy function selector and any arguments\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n        // execute function call using the facet\\r\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\r\\n        // get any return value\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n        // return any return value or error back to the caller\\r\\n            switch result\\r\\n            case 0 {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            default {\\r\\n                return (0, returndatasize())\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function proposeBeaconOwnershipTransfer(address _newOwner) external {\\r\\n        DiamondStorageLib.enforceIsContractOwner();\\r\\n        require(_newOwner != msg.sender, \\\"Can't propose oneself as a contract owner\\\");\\r\\n        DiamondStorageLib.setProposedOwner(_newOwner);\\r\\n\\r\\n        emit OwnershipProposalCreated(msg.sender, _newOwner);\\r\\n    }\\r\\n\\r\\n    function proposeBeaconPauseAdminOwnershipTransfer(address _newPauseAdmin) external {\\r\\n        DiamondStorageLib.enforceIsPauseAdmin();\\r\\n        require(_newPauseAdmin != msg.sender, \\\"Can't propose oneself as a contract pauseAdmin\\\");\\r\\n        DiamondStorageLib.setProposedPauseAdmin(_newPauseAdmin);\\r\\n\\r\\n        emit PauseAdminOwnershipProposalCreated(msg.sender, _newPauseAdmin);\\r\\n    }\\r\\n\\r\\n    function acceptBeaconOwnership() external {\\r\\n        require(DiamondStorageLib.proposedOwner() == msg.sender, \\\"Only a proposed user can accept ownership\\\");\\r\\n        DiamondStorageLib.setContractOwner(msg.sender);\\r\\n        DiamondStorageLib.setProposedOwner(address(0));\\r\\n\\r\\n        emit OwnershipProposalAccepted(msg.sender);\\r\\n    }\\r\\n\\r\\n    function acceptBeaconPauseAdminOwnership() external {\\r\\n        require(DiamondStorageLib.proposedPauseAdmin() == msg.sender, \\\"Only a proposed user can accept ownership\\\");\\r\\n        DiamondStorageLib.setContractPauseAdmin(msg.sender);\\r\\n        DiamondStorageLib.setProposedPauseAdmin(address(0));\\r\\n\\r\\n        emit PauseAdminOwnershipProposalAccepted(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier notPausedOrUpgrading(bytes4 funcSignature) {\\r\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\r\\n        if(!ds._active){\\r\\n            if(!ds.canBeExecutedWhenPaused[funcSignature]){\\r\\n                revert(\\\"ProtocolUpgrade: paused.\\\");\\r\\n            }\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after creating a pauseAdmin transfer proposal by the pauseAdmin\\r\\n     * @param pauseAdmin address of the current pauseAdmin\\r\\n     * @param proposed address of the proposed pauseAdmin\\r\\n     **/\\r\\n    event PauseAdminOwnershipProposalCreated(address indexed pauseAdmin, address indexed proposed);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after accepting a pauseAdmin transfer proposal by the new pauseAdmin\\r\\n     * @param newPauseAdmin address of the new pauseAdmin\\r\\n     **/\\r\\n    event PauseAdminOwnershipProposalAccepted(address indexed newPauseAdmin);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after creating a ownership transfer proposal by the owner\\r\\n     * @param owner address of the current owner\\r\\n     * @param proposed address of the proposed owner\\r\\n     **/\\r\\n    event OwnershipProposalCreated(address indexed owner, address indexed proposed);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after accepting a ownership transfer proposal by the new owner\\r\\n     * @param newOwner address of the new owner\\r\\n     **/\\r\\n    event OwnershipProposalAccepted(address indexed newOwner);\\r\\n}\",\"keccak256\":\"0x01299559c1303eaef0599712aa627974c17f44da2305284a40495cdf2e05bfaa\",\"license\":\"BUSL-1.1\"},\"contracts/facets/AssetsExposureController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\r\\n\\r\\n//This path is updated during deployment\\r\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\ncontract AssetsExposureController {\\r\\n\\r\\n    function resetPrimeAccountAssetsExposure() external {\\r\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n        for(uint i=0; i<ownedAssets.length; i++){\\r\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssets[i], true));\\r\\n            tokenManager.decreaseProtocolExposure(ownedAssets[i], token.balanceOf(address(this)) * 1e18 / 10**token.decimals());\\r\\n        }\\r\\n        for(uint i=0; i<positions.length; i++){\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\\r\\n                tokenManager.decreaseProtocolExposure(positions[i].identifier, balance * 1e18 / 10**decimals);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setPrimeAccountAssetsExposure() external {\\r\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n        for(uint i=0; i<ownedAssets.length; i++){\\r\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssets[i], true));\\r\\n            tokenManager.increaseProtocolExposure(ownedAssets[i], token.balanceOf(address(this)) * 1e18 / 10**token.decimals());\\r\\n        }\\r\\n        for(uint i=0; i<positions.length; i++){\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\\r\\n                tokenManager.increaseProtocolExposure(positions[i].identifier, balance * 1e18 / 10**decimals);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1a596ec4476c5f9798427c5bc82bf5d0206f09b5ac7bedb88b7e6b83f5817504\",\"license\":\"BUSL-1.1\"},\"contracts/facets/SmartLoanLiquidationFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 591f922090d65eb220427875697663e2d05267f6;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"../ReentrancyGuardKeccak.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"../lib/SolvencyMethods.sol\\\";\\r\\nimport \\\"../Pool.sol\\\";\\r\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\r\\n\\r\\n//This path is updated during deployment\\r\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\nimport \\\"./SolvencyFacetProd.sol\\\";\\r\\nimport \\\"../SmartLoanDiamondBeacon.sol\\\";\\r\\n\\r\\ncontract SmartLoanLiquidationFacet is ReentrancyGuardKeccak, SolvencyMethods {\\r\\n    //IMPORTANT: KEEP IT IDENTICAL ACROSS FACETS TO BE PROPERLY UPDATED BY DEPLOYMENT SCRIPTS\\r\\n    uint256 private constant _MAX_HEALTH_AFTER_LIQUIDATION = 1.042e18;\\r\\n\\r\\n    //IMPORTANT: KEEP IT IDENTICAL ACROSS FACETS TO BE PROPERLY UPDATED BY DEPLOYMENT SCRIPTS\\r\\n    uint256 private constant _MAX_LIQUIDATION_BONUS = 100;\\r\\n\\r\\n    using TransferHelper for address payable;\\r\\n    using TransferHelper for address;\\r\\n\\r\\n    /** @param assetsToRepay names of tokens to be repaid to pools\\r\\n    /** @param amountsToRepay amounts of tokens to be repaid to pools\\r\\n      * @param liquidationBonus per mille bonus for liquidator. Must be smaller or equal to getMaxLiquidationBonus(). Defined for\\r\\n      * liquidating loans where debt ~ total value\\r\\n      * @param allowUnprofitableLiquidation allows performing liquidation of bankrupt loans (total value smaller than debt)\\r\\n    **/\\r\\n\\r\\n    struct LiquidationConfig {\\r\\n        bytes32[] assetsToRepay;\\r\\n        uint256[] amountsToRepay;\\r\\n        uint256 liquidationBonusPercent;\\r\\n        bool allowUnprofitableLiquidation;\\r\\n    }\\r\\n\\r\\n    /* ========== VIEW FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n      * Returns maximum acceptable health ratio after liquidation\\r\\n      **/\\r\\n    function getMaxHealthAfterLiquidation() public pure returns (uint256) {\\r\\n        return _MAX_HEALTH_AFTER_LIQUIDATION;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns maximum acceptable liquidation bonus (bonus is provided by a liquidator)\\r\\n      **/\\r\\n    function getMaxLiquidationBonus() public pure returns (uint256) {\\r\\n        return _MAX_LIQUIDATION_BONUS;\\r\\n    }\\r\\n\\r\\n    /* ========== PUBLIC AND EXTERNAL MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n    function whitelistLiquidators(address[] memory _liquidators) external onlyOwner {\\r\\n        DiamondStorageLib.LiquidationStorage storage ls = DiamondStorageLib.liquidationStorage();\\r\\n\\r\\n        for(uint i; i<_liquidators.length; i++){\\r\\n            ls.canLiquidate[_liquidators[i]] = true;\\r\\n            emit LiquidatorWhitelisted(_liquidators[i], msg.sender, block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function delistLiquidators(address[] memory _liquidators) external onlyOwner {\\r\\n        DiamondStorageLib.LiquidationStorage storage ls = DiamondStorageLib.liquidationStorage();\\r\\n        for(uint i; i<_liquidators.length; i++){\\r\\n            ls.canLiquidate[_liquidators[i]] = false;\\r\\n            emit LiquidatorDelisted(_liquidators[i], msg.sender, block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isLiquidatorWhitelisted(address _liquidator) public view returns(bool){\\r\\n        DiamondStorageLib.LiquidationStorage storage ls = DiamondStorageLib.liquidationStorage();\\r\\n        return ls.canLiquidate[_liquidator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * This function can be accessed by any user when Prime Account is insolvent or bankrupt and repay part of the loan\\r\\n    * with his approved tokens.\\r\\n    * BE CAREFUL: in contrast to liquidateLoan() method, this one doesn't necessarily return tokens to liquidator, nor give him\\r\\n    * a bonus. It's purpose is to bring the loan to a solvent position even if it's unprofitable for liquidator.\\r\\n    * @dev This function uses the redstone-evm-connector\\r\\n    * @param assetsToRepay bytes32[] names of tokens provided by liquidator for repayment\\r\\n    * @param amountsToRepay utin256[] amounts of tokens provided by liquidator for repayment\\r\\n    * @param _liquidationBonusPercent per mille bonus for liquidator. Must be lower than or equal to getMaxliquidationBonus()\\r\\n    **/\\r\\n    function unsafeLiquidateLoan(bytes32[] memory assetsToRepay, uint256[] memory amountsToRepay, uint256 _liquidationBonusPercent) external payable onlyWhitelistedLiquidators nonReentrant {\\r\\n        liquidate(\\r\\n            LiquidationConfig({\\r\\n                assetsToRepay : assetsToRepay,\\r\\n                amountsToRepay : amountsToRepay,\\r\\n                liquidationBonusPercent : _liquidationBonusPercent,\\r\\n                allowUnprofitableLiquidation : true\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * This function can be accessed by any user when Prime Account is insolvent and liquidate part of the loan\\r\\n    * with his approved tokens.\\r\\n    * A liquidator has to approve adequate amount of tokens to repay debts to liquidity pools if\\r\\n    * there is not enough of them in a SmartLoan. For that he will receive the corresponding amount from SmartLoan\\r\\n    * with the same USD value + bonus.\\r\\n    * @dev This function uses the redstone-evm-connector\\r\\n    * @param assetsToRepay bytes32[] names of tokens provided by liquidator for repayment\\r\\n    * @param amountsToRepay utin256[] amounts of tokens provided by liquidator for repayment\\r\\n    * @param _liquidationBonusPercent per mille bonus for liquidator. Must be lower than or equal to  getMaxLiquidationBonus()\\r\\n    **/\\r\\n    function liquidateLoan(bytes32[] memory assetsToRepay, uint256[] memory amountsToRepay, uint256 _liquidationBonusPercent) external payable onlyWhitelistedLiquidators nonReentrant {\\r\\n        liquidate(\\r\\n            LiquidationConfig({\\r\\n                assetsToRepay : assetsToRepay,\\r\\n                amountsToRepay : amountsToRepay,\\r\\n                liquidationBonusPercent : _liquidationBonusPercent,\\r\\n                allowUnprofitableLiquidation : false\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * This function can be accessed when Prime Account is insolvent and perform a partial liquidation of the loan\\r\\n    * (selling assets, closing positions and repaying debts) to bring the account back to a solvent state. At the end\\r\\n    * of liquidation resulting solvency of account is checked to make sure that the account is between maximum and minimum\\r\\n    * solvency.\\r\\n    * To diminish the potential effect of manipulation of liquidity pools by a liquidator, there are no swaps performed\\r\\n    * during liquidation.\\r\\n    * @dev This function uses the redstone-evm-connector\\r\\n    * @param config configuration for liquidation\\r\\n    **/\\r\\n    function liquidate(LiquidationConfig memory config) internal recalculateAssetsExposure{\\r\\n        SolvencyFacetProd.CachedPrices memory cachedPrices = _getAllPricesForLiquidation(config.assetsToRepay);\\r\\n        \\r\\n        uint256 initialTotal = _getTotalValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices); \\r\\n        uint256 initialDebt = _getDebtWithPrices(cachedPrices.debtAssetsPrices); \\r\\n\\r\\n        require(config.liquidationBonusPercent <= getMaxLiquidationBonus(), \\\"Defined liquidation bonus higher than max. value\\\");\\r\\n        require(!_isSolventWithPrices(cachedPrices), \\\"Cannot sellout a solvent account\\\");\\r\\n\\r\\n        //healing means bringing a bankrupt loan to a state when debt is smaller than total value again\\r\\n        bool healingLoan = initialDebt > initialTotal;\\r\\n        require(!healingLoan || config.allowUnprofitableLiquidation, \\\"Trying to liquidate bankrupt loan\\\");\\r\\n\\r\\n\\r\\n        uint256 suppliedInUSD;\\r\\n        uint256 repaidInUSD;\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n        for (uint256 i = 0; i < config.assetsToRepay.length; i++) {\\r\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(config.assetsToRepay[i], true));\\r\\n\\r\\n            uint256 balance = token.balanceOf(address(this));\\r\\n            uint256 supplyAmount;\\r\\n\\r\\n            if (balance < config.amountsToRepay[i]) {\\r\\n                supplyAmount = config.amountsToRepay[i] - balance;\\r\\n            }\\r\\n\\r\\n            if (supplyAmount > 0) {\\r\\n                address(token).safeTransferFrom(msg.sender, address(this), supplyAmount);\\r\\n                // supplyAmount is denominated in token.decimals(). Price is denominated in 1e8. To achieve 1e18 decimals we need to multiply by 1e10.\\r\\n                suppliedInUSD += supplyAmount * cachedPrices.assetsToRepayPrices[i].price * 10 ** 10 / 10 ** token.decimals();\\r\\n            }\\r\\n\\r\\n            Pool pool = Pool(tokenManager.getPoolAddress(config.assetsToRepay[i]));\\r\\n\\r\\n            uint256 repayAmount = Math.min(pool.getBorrowed(address(this)), config.amountsToRepay[i]);\\r\\n\\r\\n            address(token).safeApprove(address(pool), 0);\\r\\n            address(token).safeApprove(address(pool), repayAmount);\\r\\n\\r\\n            // repayAmount is denominated in token.decimals(). Price is denominated in 1e8. To achieve 1e18 decimals we need to multiply by 1e10.\\r\\n            repaidInUSD += repayAmount * cachedPrices.assetsToRepayPrices[i].price * 10 ** 10 / 10 ** token.decimals();\\r\\n\\r\\n            pool.repay(repayAmount);\\r\\n\\r\\n            if (token.balanceOf(address(this)) == 0) {\\r\\n                DiamondStorageLib.removeOwnedAsset(config.assetsToRepay[i]);\\r\\n            }\\r\\n\\r\\n            emit LiquidationRepay(msg.sender, config.assetsToRepay[i], repayAmount, block.timestamp);\\r\\n        }\\r\\n\\r\\n        bytes32[] memory assetsOwned = DeploymentConstants.getAllOwnedAssets();\\r\\n        uint256 bonusInUSD;\\r\\n\\r\\n        //after healing bankrupt loan (debt > total value), no tokens are returned to liquidator\\r\\n\\r\\n        bonusInUSD = repaidInUSD * config.liquidationBonusPercent / DeploymentConstants.getPercentagePrecision();\\r\\n\\r\\n        //meaning returning all tokens\\r\\n        uint256 partToReturn = 10 ** 18; // 1\\r\\n        uint256 assetsValue = _getTotalValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\r\\n\\r\\n        if (!healingLoan && assetsValue >= suppliedInUSD + bonusInUSD) {\\r\\n            //in that scenario we calculate how big part of token to return\\r\\n            partToReturn = (suppliedInUSD + bonusInUSD) * 10 ** 18 / assetsValue;\\r\\n        }\\r\\n\\r\\n        if(partToReturn > 0){\\r\\n            // Native token transfer\\r\\n            if (address(this).balance > 0) {\\r\\n                payable(msg.sender).safeTransferETH(address(this).balance * partToReturn / 10 ** 18);\\r\\n            }\\r\\n\\r\\n            for (uint256 i; i < assetsOwned.length; i++) {\\r\\n                IERC20Metadata token = getERC20TokenInstance(assetsOwned[i], true);\\r\\n                uint256 balance = token.balanceOf(address(this));\\r\\n\\r\\n                address(token).safeTransfer(msg.sender, balance * partToReturn / 10 ** 18);\\r\\n                emit LiquidationTransfer(msg.sender, assetsOwned[i], balance * partToReturn / 10 ** 18, block.timestamp);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 health = _getHealthRatioWithPrices(cachedPrices);\\r\\n\\r\\n        if (healingLoan) {\\r\\n            require(_getDebtWithPrices(cachedPrices.debtAssetsPrices) == 0, \\\"Healing a loan must end up with 0 debt\\\");\\r\\n            require(_getTotalValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices) == 0, \\\"Healing a loan must end up with 0 total value\\\");\\r\\n        } else {\\r\\n            require(health <= getMaxHealthAfterLiquidation(), \\\"This operation would result in a loan with health ratio higher than Maxium Health Ratio which would put loan's owner in a risk of an unnecessarily high loss\\\");\\r\\n        }\\r\\n\\r\\n        require(health >= 1e18, \\\"This operation would not result in bringing the loan back to a solvent state\\\");\\r\\n\\r\\n        //TODO: include final debt and tv\\r\\n        emit Liquidated(msg.sender, healingLoan, initialTotal, initialDebt, repaidInUSD, bonusInUSD, health, block.timestamp);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        DiamondStorageLib.enforceIsContractOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyWhitelistedLiquidators() {\\r\\n        // External call in order to execute this method in the SmartLoanDiamondBeacon contract storage\\r\\n        require(SmartLoanLiquidationFacet(DeploymentConstants.getDiamondAddress()).isLiquidatorWhitelisted(msg.sender), \\\"Only whitelisted liquidators can execute this method\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after a successful liquidation operation\\r\\n     * @param liquidator the address that initiated the liquidation operation\\r\\n     * @param healing was the liquidation covering the bad debt (unprofitable liquidation)\\r\\n     * @param initialTotal total value of assets before the liquidation\\r\\n     * @param initialDebt sum of all debts before the liquidation\\r\\n     * @param repayAmount requested amount (USD) of liquidation\\r\\n     * @param bonusInUSD an amount of bonus (USD) received by the liquidator\\r\\n     * @param health a new health ratio after the liquidation operation\\r\\n     * @param timestamp a time of the liquidation\\r\\n     **/\\r\\n    event Liquidated(address indexed liquidator, bool indexed healing, uint256 initialTotal, uint256 initialDebt, uint256 repayAmount, uint256 bonusInUSD, uint256 health, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when funds are repaid to the pool during a liquidation\\r\\n     * @param liquidator the address initiating repayment\\r\\n     * @param asset asset repaid by a liquidator\\r\\n     * @param amount of repaid funds\\r\\n     * @param timestamp of the repayment\\r\\n     **/\\r\\n    event LiquidationRepay(address indexed liquidator, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when funds are sent to liquidator during liquidation\\r\\n     * @param liquidator the address initiating repayment\\r\\n     * @param asset token sent to a liquidator\\r\\n     * @param amount of sent funds\\r\\n     * @param timestamp of the transfer\\r\\n     **/\\r\\n    event LiquidationTransfer(address indexed liquidator, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when a new liquidator gets whitelisted\\r\\n     * @param liquidator the address being whitelisted\\r\\n     * @param performer the address initiating whitelisting\\r\\n     * @param timestamp of the whitelisting\\r\\n     **/\\r\\n    event LiquidatorWhitelisted(address indexed liquidator, address performer, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when a liquidator gets delisted\\r\\n     * @param liquidator the address being delisted\\r\\n     * @param performer the address initiating delisting\\r\\n     * @param timestamp of the delisting\\r\\n     **/\\r\\n    event LiquidatorDelisted(address indexed liquidator, address performer, uint256 timestamp);\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x2cd939bfe65381fa4f714b67a5e4a96aa5857a102d3143cc6e5df30335862be1\",\"license\":\"BUSL-1.1\"},\"contracts/facets/SolvencyFacetProd.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\\\";\\r\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\r\\nimport \\\"../Pool.sol\\\";\\r\\nimport \\\"../DiamondHelper.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\r\\n\\r\\n//This path is updated during deployment\\r\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\ncontract SolvencyFacetProd is AvalancheDataServiceConsumerBase, DiamondHelper {\\r\\n    struct AssetPrice {\\r\\n        bytes32 asset;\\r\\n        uint256 price;\\r\\n    }\\r\\n\\r\\n    // Struct used in the liquidation process to obtain necessary prices only once\\r\\n    struct CachedPrices {\\r\\n        AssetPrice[] ownedAssetsPrices;\\r\\n        AssetPrice[] debtAssetsPrices;\\r\\n        AssetPrice[] stakedPositionsPrices;\\r\\n        AssetPrice[] assetsToRepayPrices;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Checks if the loan is solvent.\\r\\n      * It means that the Health Ratio is greater than 1e18.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function isSolvent() public view returns (bool) {\\r\\n        return getHealthRatio() >= 1e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Checks if the loan is solvent.\\r\\n      * It means that the Health Ratio is greater than 1e18.\\r\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n      * @param cachedPrices Struct containing arrays of Asset/Price structs used to calculate value of owned assets, debt and staked positions\\r\\n    **/\\r\\n    function isSolventWithPrices(CachedPrices memory cachedPrices) public view returns (bool) {\\r\\n        return getHealthRatioWithPrices(cachedPrices) >= 1e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of Asset/Price structs of staked positions.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getStakedPositionsPrices() public view returns(AssetPrice[] memory result) {\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n\\r\\n        bytes32[] memory symbols = new bytes32[](positions.length);\\r\\n        for(uint256 i=0; i<positions.length; i++) {\\r\\n            symbols[i] = positions[i].symbol;\\r\\n        }\\r\\n\\r\\n        uint256[] memory stakedPositionsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(symbols);\\r\\n        result = new AssetPrice[](stakedPositionsPrices.length);\\r\\n\\r\\n        for(uint i; i<stakedPositionsPrices.length; i++){\\r\\n            result[i] = AssetPrice({\\r\\n                asset: symbols[i],\\r\\n                price: stakedPositionsPrices[i]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of bytes32[] symbols of debt (borrowable) assets.\\r\\n    **/\\r\\n    function getDebtAssets() public view returns(bytes32[] memory result) {\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        result = tokenManager.getAllPoolAssets();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of Asset/Price structs of debt (borrowable) assets.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getDebtAssetsPrices() public view returns(AssetPrice[] memory result) {\\r\\n        bytes32[] memory debtAssets = getDebtAssets();\\r\\n\\r\\n        uint256[] memory debtAssetsPrices = getOracleNumericValuesFromTxMsg(debtAssets);\\r\\n        result = new AssetPrice[](debtAssetsPrices.length);\\r\\n\\r\\n        for(uint i; i<debtAssetsPrices.length; i++){\\r\\n            result[i] = AssetPrice({\\r\\n                asset: debtAssets[i],\\r\\n                price: debtAssetsPrices[i]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getOwnedAssetsWithNativePrices() public view returns(AssetPrice[] memory result) {\\r\\n        bytes32[] memory assetsEnriched = getOwnedAssetsWithNative();\\r\\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(assetsEnriched);\\r\\n\\r\\n        result = new AssetPrice[](assetsEnriched.length);\\r\\n\\r\\n        for(uint i; i<assetsEnriched.length; i++){\\r\\n            result[i] = AssetPrice({\\r\\n                asset: assetsEnriched[i],\\r\\n                price: prices[i]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of bytes32[] symbols of staked positions.\\r\\n    **/\\r\\n    function getStakedAssets() internal view returns (bytes32[] memory result) {\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n        result = new bytes32[](positions.length);\\r\\n        for(uint i; i<positions.length; i++) {\\r\\n            result[i] = positions[i].symbol;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function copyToArray(bytes32[] memory target, bytes32[] memory source, uint256 offset, uint256 numberOfItems) pure internal {\\r\\n        require(numberOfItems <= source.length, \\\"numberOfItems > target array length\\\");\\r\\n        require(offset + numberOfItems <= target.length, \\\"offset + numberOfItems > target array length\\\");\\r\\n\\r\\n        for(uint i; i<numberOfItems; i++){\\r\\n            target[i + offset] = source[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function copyToAssetPriceArray(AssetPrice[] memory target, bytes32[] memory sourceAssets, uint256[] memory sourcePrices, uint256 offset, uint256 numberOfItems) pure internal {\\r\\n        require(numberOfItems <= sourceAssets.length, \\\"numberOfItems > sourceAssets array length\\\");\\r\\n        require(numberOfItems <= sourcePrices.length, \\\"numberOfItems > sourcePrices array length\\\");\\r\\n        require(offset + numberOfItems <= sourceAssets.length, \\\"offset + numberOfItems > sourceAssets array length\\\");\\r\\n        require(offset + numberOfItems <= sourcePrices.length, \\\"offset + numberOfItems > sourcePrices array length\\\");\\r\\n\\r\\n        for(uint i; i<numberOfItems; i++){\\r\\n            target[i] = AssetPrice({\\r\\n                asset: sourceAssets[i+offset],\\r\\n                price: sourcePrices[i+offset]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns CachedPrices struct consisting of Asset/Price arrays for ownedAssets, debtAssets, stakedPositions and assetsToRepay.\\r\\n      * Used during the liquidation process in order to obtain all necessary prices from calldata only once.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public view returns (CachedPrices memory result) {\\r\\n        bytes32[] memory ownedAssetsEnriched = getOwnedAssetsWithNative();\\r\\n        bytes32[] memory debtAssets = getDebtAssets();\\r\\n        bytes32[] memory stakedAssets = getStakedAssets();\\r\\n\\r\\n        bytes32[] memory allAssetsSymbols = new bytes32[](ownedAssetsEnriched.length + debtAssets.length + stakedAssets.length + assetsToRepay.length);\\r\\n        uint256 offset;\\r\\n\\r\\n        // Populate allAssetsSymbols with owned assets symbols\\r\\n        copyToArray(allAssetsSymbols, ownedAssetsEnriched, offset, ownedAssetsEnriched.length);\\r\\n        offset += ownedAssetsEnriched.length;\\r\\n\\r\\n        // Populate allAssetsSymbols with debt assets symbols\\r\\n        copyToArray(allAssetsSymbols, debtAssets, offset, debtAssets.length);\\r\\n        offset += debtAssets.length;\\r\\n\\r\\n        // Populate allAssetsSymbols with staked assets symbols\\r\\n        copyToArray(allAssetsSymbols, stakedAssets, offset, stakedAssets.length);\\r\\n        offset += stakedAssets.length;\\r\\n\\r\\n        // Populate allAssetsSymbols with assets to repay symbols\\r\\n        copyToArray(allAssetsSymbols, assetsToRepay, offset, assetsToRepay.length);\\r\\n\\r\\n        uint256[] memory allAssetsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(allAssetsSymbols);\\r\\n\\r\\n        offset = 0;\\r\\n\\r\\n        // Populate ownedAssetsPrices struct\\r\\n        AssetPrice[] memory ownedAssetsPrices = new AssetPrice[](ownedAssetsEnriched.length);\\r\\n        copyToAssetPriceArray(ownedAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, ownedAssetsEnriched.length);\\r\\n        offset += ownedAssetsEnriched.length;\\r\\n\\r\\n        // Populate debtAssetsPrices struct\\r\\n        AssetPrice[] memory debtAssetsPrices = new AssetPrice[](debtAssets.length);\\r\\n        copyToAssetPriceArray(debtAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, debtAssets.length);\\r\\n        offset += debtAssetsPrices.length;\\r\\n\\r\\n        // Populate stakedPositionsPrices struct\\r\\n        AssetPrice[] memory stakedPositionsPrices = new AssetPrice[](stakedAssets.length);\\r\\n        copyToAssetPriceArray(stakedPositionsPrices, allAssetsSymbols, allAssetsPrices, offset, stakedAssets.length);\\r\\n        offset += stakedAssets.length;\\r\\n\\r\\n        // Populate assetsToRepayPrices struct\\r\\n        // Stack too deep :F\\r\\n        AssetPrice[] memory assetsToRepayPrices = new AssetPrice[](assetsToRepay.length);\\r\\n        for(uint i=0; i<assetsToRepay.length; i++){\\r\\n            assetsToRepayPrices[i] = AssetPrice({\\r\\n            asset: allAssetsSymbols[i+offset],\\r\\n            price: allAssetsPrices[i+offset]\\r\\n            });\\r\\n        }\\r\\n\\r\\n        result = CachedPrices({\\r\\n        ownedAssetsPrices: ownedAssetsPrices,\\r\\n        debtAssetsPrices: debtAssetsPrices,\\r\\n        stakedPositionsPrices: stakedPositionsPrices,\\r\\n        assetsToRepayPrices: assetsToRepayPrices\\r\\n        });\\r\\n    }\\r\\n\\r\\n    // Check whether there is enough debt-denominated tokens to fully repaid what was previously borrowed\\r\\n    function canRepayDebtFully() external view returns(bool) {\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        bytes32[] memory poolAssets = tokenManager.getAllPoolAssets();\\r\\n\\r\\n        for(uint i; i< poolAssets.length; i++) {\\r\\n            Pool pool = Pool(DeploymentConstants.getTokenManager().getPoolAddress(poolAssets[i]));\\r\\n            IERC20 token = IERC20(pool.tokenAddress());\\r\\n            if(token.balanceOf(address(this)) < pool.getBorrowed(address(this))) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValuesFromTxMsg() method.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getPrices(bytes32[] memory symbols) external view returns (uint256[] memory) {\\r\\n        return getOracleNumericValuesFromTxMsg(symbols);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValueFromTxMsg() method.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getPrice(bytes32 symbol) external view returns (uint256) {\\r\\n        return getOracleNumericValueFromTxMsg(symbol);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns TotalWeightedValue of OwnedAssets in USD based on the supplied array of Asset/Price struct, tokenBalance and debtCoverage\\r\\n    **/\\r\\n    function _getTWVOwnedAssets(AssetPrice[] memory ownedAssetsPrices) internal view returns (uint256) {\\r\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n        uint256 weightedValueOfTokens = ownedAssetsPrices[0].price * address(this).balance * tokenManager.debtCoverage(tokenManager.getAssetAddress(nativeTokenSymbol, true)) / (10 ** 26);\\r\\n\\r\\n        if (ownedAssetsPrices.length > 0) {\\r\\n\\r\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\r\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\r\\n                weightedValueOfTokens = weightedValueOfTokens + (ownedAssetsPrices[i].price * token.balanceOf(address(this)) * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\\r\\n            }\\r\\n        }\\r\\n        return weightedValueOfTokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns TotalWeightedValue of StakedPositions in USD based on the supplied array of Asset/Price struct, positionBalance and debtCoverage\\r\\n    **/\\r\\n    function _getTWVStakedPositions(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n\\r\\n        uint256 weightedValueOfStaked;\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\r\\n\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n\\r\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\r\\n\\r\\n                weightedValueOfStaked += stakedPositionsPrices[i].price * balance * tokenManager.debtCoverageStaked(positions[i].identifier) / (10 ** token.decimals() * 10**8);\\r\\n            }\\r\\n\\r\\n\\r\\n        }\\r\\n        return weightedValueOfStaked;\\r\\n    }\\r\\n\\r\\n    function _getThresholdWeightedValueBase(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) internal view virtual returns (uint256) {\\r\\n        return _getTWVOwnedAssets(ownedAssetsPrices) + _getTWVStakedPositions(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getThresholdWeightedValue() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\\r\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\r\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\r\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getThresholdWeightedValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\r\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt denominated in USD\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getDebtBase(AssetPrice[] memory debtAssetsPrices) internal view returns (uint256){\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        uint256 debt;\\r\\n\\r\\n        for (uint256 i; i < debtAssetsPrices.length; i++) {\\r\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(debtAssetsPrices[i].asset, true));\\r\\n\\r\\n            Pool pool = Pool(tokenManager.getPoolAddress(debtAssetsPrices[i].asset));\\r\\n            //10**18 (wei in eth) / 10**8 (precision of oracle feed) = 10**10\\r\\n            debt = debt + pool.getBorrowed(address(this)) * debtAssetsPrices[i].price * 10 ** 10\\r\\n            / 10 ** token.decimals();\\r\\n        }\\r\\n\\r\\n        return debt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt denominated in USD\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getDebt() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory debtAssetsPrices = getDebtAssetsPrices();\\r\\n        return getDebtBase(debtAssetsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt denominated in USD\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getDebtWithPrices(AssetPrice[] memory debtAssetsPrices) public view virtual returns (uint256) {\\r\\n        return getDebtBase(debtAssetsPrices);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function _getTotalAssetsValueBase(AssetPrice[] memory ownedAssetsPrices) public view returns (uint256) {\\r\\n        if (ownedAssetsPrices.length > 0) {\\r\\n            ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n            uint256 total = address(this).balance * ownedAssetsPrices[0].price / 10 ** 8;\\r\\n\\r\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\r\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\r\\n                uint256 assetBalance = token.balanceOf(address(this));\\r\\n\\r\\n                total = total + (ownedAssetsPrices[i].price * 10 ** 10 * assetBalance / (10 ** token.decimals()));\\r\\n            }\\r\\n            return total;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n     **/\\r\\n    function getTotalAssetsValue() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\\r\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getTotalAssetsValueWithPrices(AssetPrice[] memory ownedAssetsPrices) public view virtual returns (uint256) {\\r\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns list of owned assets that always included NativeToken at index 0\\r\\n    **/\\r\\n    function getOwnedAssetsWithNative() public view returns(bytes32[] memory){\\r\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\r\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\r\\n\\r\\n        // If account already owns the native token the use ownedAssets.length; Otherwise add one element to account for additional native token.\\r\\n        uint256 numberOfAssets = DiamondStorageLib.hasAsset(nativeTokenSymbol) ? ownedAssets.length : ownedAssets.length + 1;\\r\\n        bytes32[] memory assetsWithNative = new bytes32[](numberOfAssets);\\r\\n\\r\\n        uint256 lastUsedIndex;\\r\\n        assetsWithNative[0] = nativeTokenSymbol; // First asset = NativeToken\\r\\n\\r\\n        for(uint i=0; i< ownedAssets.length; i++){\\r\\n            if(ownedAssets[i] != nativeTokenSymbol){\\r\\n                lastUsedIndex += 1;\\r\\n                assetsWithNative[lastUsedIndex] = ownedAssets[i];\\r\\n            }\\r\\n        }\\r\\n        return assetsWithNative;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of staked positions in USD.\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function _getStakedValueBase(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n\\r\\n        uint256 usdValue;\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\r\\n\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\r\\n                usdValue += stakedPositionsPrices[i].price * 10 ** 10 * balance / (10 ** token.decimals());\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return usdValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of staked positions in USD.\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getStakedValueWithPrices(AssetPrice[] memory stakedPositionsPrices) public view returns (uint256) {\\r\\n        return _getStakedValueBase(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of staked positions in USD.\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getStakedValue() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\r\\n        return _getStakedValueBase(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getTotalValue() public view virtual returns (uint256) {\\r\\n        return getTotalAssetsValue() + getStakedValue();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getTotalValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\r\\n        return getTotalAssetsValueWithPrices(ownedAssetsPrices) + getStakedValueWithPrices(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    function getFullLoanStatus() public view returns (uint256[5] memory) {\\r\\n        return [getTotalValue(), getDebt(), getThresholdWeightedValue(), getHealthRatio(), isSolvent() ? uint256(1) : uint256(0)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\r\\n     * by current debt\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n     **/\\r\\n    function getHealthRatio() public view virtual returns (uint256) {\\r\\n        CachedPrices memory cachedPrices = getAllPricesForLiquidation(new bytes32[](0));\\r\\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\\r\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\r\\n\\r\\n        if (debt == 0) {\\r\\n            return type(uint256).max;\\r\\n        } else {\\r\\n            return thresholdWeightedValue * 1e18 / debt;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\r\\n     * by current debt\\r\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n     **/\\r\\n    function getHealthRatioWithPrices(CachedPrices memory cachedPrices) public view virtual returns (uint256) {\\r\\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\\r\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\r\\n\\r\\n        if (debt == 0) {\\r\\n            return type(uint256).max;\\r\\n        } else {\\r\\n            return thresholdWeightedValue * 1e18 / debt;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb5bdb172ee6bd5549baa8764acbf330a605b3a663c490b65c7d74eb6a3cc93e\",\"license\":\"BUSL-1.1\"},\"contracts/facets/UniswapV2DEXFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"../ReentrancyGuardKeccak.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"../lib/SolvencyMethods.sol\\\";\\r\\nimport {DiamondStorageLib} from \\\"../lib/DiamondStorageLib.sol\\\";\\r\\nimport \\\"../OnlyOwnerOrInsolvent.sol\\\";\\r\\n\\r\\n//This path is updated during deployment\\r\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\r\\nimport \\\"../interfaces/IAssetsExchange.sol\\\";\\r\\n\\r\\ncontract UniswapV2DEXFacet is ReentrancyGuardKeccak, SolvencyMethods, OnlyOwnerOrInsolvent {\\r\\n    using TransferHelper for address payable;\\r\\n    using TransferHelper for address;\\r\\n\\r\\n    function getProtocolID() pure internal virtual returns (bytes32) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\\r\\n        bytes memory tempEmptyStringTest = bytes(source);\\r\\n        if (tempEmptyStringTest.length == 0) {\\r\\n            return 0x0;\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            result := mload(add(source, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\\r\\n        uint8 i = 0;\\r\\n        while(i < 32 && _bytes32[i] != 0) {\\r\\n            i++;\\r\\n        }\\r\\n        bytes memory bytesArray = new bytes(i);\\r\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\r\\n            bytesArray[i] = _bytes32[i];\\r\\n        }\\r\\n        return string(bytesArray);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Swaps one asset with another\\r\\n    * @param _soldAsset asset to be sold\\r\\n    * @param _boughtAsset asset to be bought\\r\\n    * @param _exactSold exact amount of asset to be sold\\r\\n    * @param _minimumBought minimum amount of asset to be bought\\r\\n    **/\\r\\n    function swapAssets(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) internal recalculateAssetsExposure remainsSolvent returns (uint256[] memory) {\\r\\n        IERC20Metadata soldToken = getERC20TokenInstance(_soldAsset, true);\\r\\n        IERC20Metadata boughtToken = getERC20TokenInstance(_boughtAsset, false);\\r\\n\\r\\n        require(soldToken.balanceOf(address(this)) >= _exactSold, \\\"Not enough token to sell\\\");\\r\\n        address(soldToken).safeTransfer(getExchangeIntermediaryContract(), _exactSold);\\r\\n\\r\\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\\r\\n\\r\\n        uint256[] memory amounts = exchange.swap(address(soldToken), address(boughtToken), _exactSold, _minimumBought);\\r\\n\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        // Add asset to ownedAssets\\r\\n        address boughtAssetAddress = tokenManager.getAssetAddress(_boughtAsset, false);\\r\\n\\r\\n        if (boughtToken.balanceOf(address(this)) > 0) {\\r\\n            DiamondStorageLib.addOwnedAsset(_boughtAsset, boughtAssetAddress);\\r\\n        }\\r\\n\\r\\n        // Remove asset from ownedAssets if the asset balance is 0 after the swap\\r\\n        if (soldToken.balanceOf(address(this)) == 0) {\\r\\n            DiamondStorageLib.removeOwnedAsset(_soldAsset);\\r\\n        }\\r\\n\\r\\n        emit Swap(msg.sender, _soldAsset, _boughtAsset, amounts[0], amounts[amounts.length - 1], block.timestamp);\\r\\n\\r\\n        return amounts;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Adds liquidity\\r\\n    **/\\r\\n    function addLiquidity(bytes32 _assetA, bytes32 _assetB, uint amountA, uint amountB, uint amountAMin, uint amountBMin) internal recalculateAssetsExposure remainsSolvent {\\r\\n        IERC20Metadata tokenA = getERC20TokenInstance(_assetA, false);\\r\\n        IERC20Metadata tokenB = getERC20TokenInstance(_assetB, false);\\r\\n\\r\\n        require(tokenA.balanceOf(address(this)) >= amountA, \\\"Not enough tokenA to provide\\\");\\r\\n        require(tokenB.balanceOf(address(this)) >= amountB, \\\"Not enough tokenB to provide\\\");\\r\\n\\r\\n        address(tokenA).safeTransfer(getExchangeIntermediaryContract(), amountA);\\r\\n        address(tokenB).safeTransfer(getExchangeIntermediaryContract(), amountB);\\r\\n\\r\\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\\r\\n\\r\\n        address lpTokenAddress;\\r\\n        uint liquidity;\\r\\n\\r\\n        (lpTokenAddress, amountA, amountB, liquidity)\\r\\n          = exchange.addLiquidity(address(tokenA), address(tokenB), amountA, amountB, amountAMin, amountBMin);\\r\\n\\r\\n        if (IERC20Metadata(lpTokenAddress).balanceOf(address(this)) > 0) {\\r\\n            bytes32 lpToken = calculateLpTokenSymbol(_assetA, _assetB);\\r\\n            DiamondStorageLib.addOwnedAsset(lpToken, lpTokenAddress);\\r\\n        }\\r\\n\\r\\n        // Remove asset from ownedAssets if the asset balance is 0 after the LP\\r\\n        if (tokenA.balanceOf(address(this)) == 0) {\\r\\n            DiamondStorageLib.removeOwnedAsset(_assetA);\\r\\n        }\\r\\n\\r\\n        if (tokenB.balanceOf(address(this)) == 0) {\\r\\n            DiamondStorageLib.removeOwnedAsset(_assetB);\\r\\n        }\\r\\n\\r\\n        emit AddLiquidity(msg.sender, lpTokenAddress, _assetA, _assetB, liquidity, amountA, amountB, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Removes liquidity\\r\\n    **/\\r\\n    function removeLiquidity(bytes32 _assetA, bytes32 _assetB, uint liquidity, uint amountAMin, uint amountBMin) internal recalculateAssetsExposure onlyOwnerOrInsolvent{\\r\\n        IERC20Metadata tokenA = getERC20TokenInstance(_assetA, true);\\r\\n        IERC20Metadata tokenB = getERC20TokenInstance(_assetB, true);\\r\\n\\r\\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\\r\\n\\r\\n        address lpTokenAddress = exchange.getPair(address(tokenA), address(tokenB));\\r\\n        liquidity = Math.min(liquidity, IERC20(lpTokenAddress).balanceOf(address(this)));\\r\\n\\r\\n        lpTokenAddress.safeTransfer(getExchangeIntermediaryContract(), liquidity);\\r\\n\\r\\n        (uint amountA, uint amountB) = exchange.removeLiquidity(address(tokenA), address(tokenB), liquidity, amountAMin, amountBMin);\\r\\n\\r\\n        // Remove asset from ownedAssets if the asset balance is 0 after the LP\\r\\n        if (IERC20Metadata(lpTokenAddress).balanceOf(address(this)) == 0) {\\r\\n            DiamondStorageLib.removeOwnedAsset(calculateLpTokenSymbol(_assetA, _assetB));\\r\\n        }\\r\\n        DiamondStorageLib.addOwnedAsset(_assetA, address(tokenA));\\r\\n        DiamondStorageLib.addOwnedAsset(_assetB, address(tokenB));\\r\\n\\r\\n        emit RemoveLiquidity(msg.sender, lpTokenAddress, _assetA, _assetB, liquidity, amountA, amountB, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function calculateLpTokenSymbol(bytes32 _assetA, bytes32 _assetB) internal pure returns (bytes32 name) {\\r\\n        (bytes32 token0, bytes32 token1) = _assetA < _assetB ? (_assetA, _assetB) : (_assetB, _assetA);\\r\\n        name = stringToBytes32(string.concat(\\r\\n                bytes32ToString(getProtocolID()),\\r\\n                '_',\\r\\n                bytes32ToString(token0),\\r\\n                '_',\\r\\n                bytes32ToString(token1),\\r\\n                '_LP'\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns address of DeltaPrime intermediary contract of UniswapV2-like exchange\\r\\n     **/\\r\\n    //TO BE OVERRIDDEN\\r\\n    function getExchangeIntermediaryContract() public virtual returns (address) {\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        DiamondStorageLib.enforceIsContractOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier noBorrowInTheSameBlock() {\\r\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\r\\n        require(ds._lastBorrowTimestamp != block.timestamp, \\\"Borrowing must happen in a standalone transaction\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after a swap of assets\\r\\n     * @param user the address of user making the purchase\\r\\n     * @param soldAsset sold by the user\\r\\n     * @param boughtAsset bought by the user\\r\\n     * @param maximumSold maximum to be sold\\r\\n     * @param minimumBought minimum to be bought\\r\\n     * @param timestamp time of the swap\\r\\n     **/\\r\\n    event Swap(address indexed user, bytes32 indexed soldAsset, bytes32 indexed boughtAsset, uint256 maximumSold, uint256 minimumBought, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after providing liquidity\\r\\n     * @param user the address of user providing liquidity\\r\\n     * @param lpToken the address LP token\\r\\n     * @param firstAsset first asset provided for liquidity\\r\\n     * @param secondAsset second asset provided for liquidity\\r\\n     * @param liquidity amount of liquidity (LP token) added\\r\\n     * @param firstAmount amount of the first asset used\\r\\n     * @param secondAmount amount of the second asset used\\r\\n     * @param timestamp time of the transaction\\r\\n     **/\\r\\n    event AddLiquidity(address indexed user, address indexed lpToken, bytes32 firstAsset, bytes32 secondAsset, uint liquidity, uint firstAmount, uint secondAmount, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after removing liquidity\\r\\n     * @param user the address of user providing liquidity\\r\\n     * @param lpToken the address LP token\\r\\n     * @param firstAsset first asset from LP position\\r\\n     * @param secondAsset second asset from LP position\\r\\n     * @param liquidity amount of liquidity (LP token) removed\\r\\n     * @param firstAmount amount of the first asset obtained\\r\\n     * @param secondAmount amount of the second asset obtained\\r\\n     * @param timestamp time of the transaction\\r\\n     **/\\r\\n    event RemoveLiquidity(address indexed user, address indexed lpToken, bytes32 firstAsset, bytes32 secondAsset, uint liquidity, uint firstAmount, uint secondAmount, uint256 timestamp);\\r\\n}\",\"keccak256\":\"0xe428fc1aedd57ae9c188cb3ec17d88973f31c85cc28f614082aa3c0fe3c6f234\",\"license\":\"BUSL-1.1\"},\"contracts/facets/avalanche/PangolinDEXFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 71813826f564de63a2462d95b5c15944fcdf686e;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../UniswapV2DEXFacet.sol\\\";\\r\\n\\r\\ncontract PangolinDEXFacet is UniswapV2DEXFacet {\\r\\n    function getProtocolID() pure internal override returns (bytes32) {\\r\\n        return \\\"PNG\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Swaps one asset to another\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n      * @param _soldAsset asset to be sold\\r\\n      * @param _boughtAsset asset to be bought\\r\\n      * @param _exactSold exact amount of asset to be sold\\r\\n      * @param _minimumBought minimum amount of asset to be bought\\r\\n    **/\\r\\n    function swapPangolin(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) public noBorrowInTheSameBlock onlyOwner returns (uint256[] memory) {\\r\\n        return swapAssets(_soldAsset, _boughtAsset, _exactSold, _minimumBought);\\r\\n    }\\r\\n\\r\\n    function addLiquidityPangolin(bytes32 _firstAsset, bytes32 _secondAsset, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) public onlyOwner {\\r\\n        addLiquidity(_firstAsset, _secondAsset, amountADesired, amountBDesired, amountAMin, amountBMin);\\r\\n    }\\r\\n\\r\\n    //onlOwnerOrInsolvent inside UniswapDexFacet\\r\\n    function removeLiquidityPangolin(bytes32 _firstAsset, bytes32 _secondAsset, uint liquidity, uint amountAMin, uint amountBMin) public {\\r\\n        removeLiquidity(_firstAsset, _secondAsset, liquidity, amountAMin, amountBMin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns address of UniswapV2-like exchange\\r\\n     **/\\r\\n    function getExchangeIntermediaryContract() public override returns (address) {\\r\\n        return 0xdB5D94B8Ed491B058F3e74D029775A14477cF7fA;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xdbdc43b634e493bf275f6a90f2a5cdb2d578ff446bed208058f15955a7585a57\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IAssetsExchange.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IAssetExchange\\r\\n * @dev Basic interface for investing into assets\\r\\n * It could be linked either to DEX or to a synthetic assets platform\\r\\n */\\r\\ninterface IAssetsExchange {\\r\\n\\r\\n    /*\\r\\n     * Swaps selected ERC20 token with other ERC20 token\\r\\n     * @param soldToken_ sold ERC20 token's address\\r\\n     * @param boughtToken_ bought ERC20 token's address\\r\\n     * @param _amountSold exact amount of ERC20 token to be sold\\r\\n     * @param _amountBought minimum amount of ERC20 token to be bought\\r\\n     **/\\r\\n    function swap(address soldToken_, address boughtToken_, uint256 _exactAmountIn, uint256 _minAmountOut) external returns (uint256[] memory);\\r\\n\\r\\n    /*\\r\\n     * Adds liquidity of ERC20 tokens\\r\\n     */\\r\\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) external returns (address, uint, uint, uint);\\r\\n\\r\\n    /*\\r\\n     * Removes liquidity of ERC20 tokens\\r\\n     */\\r\\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin) external returns (uint, uint);\\r\\n\\r\\n    /**\\r\\n     * Returns the minimum _soldToken amount that is required to be sold to receive _exactAmountOut of a _boughtToken.\\r\\n     **/\\r\\n    function getMinimumTokensNeeded(uint256 _exactAmountOut, address _soldToken, address _boughtToken) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * Returns the maximum _boughtToken amount that will be obtained in the event of selling _amountIn of _soldToken token.\\r\\n     **/\\r\\n    function getMaximumTokensReceived(uint256 _amountIn, address _soldToken, address _boughtToken) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * getPair\\r\\n     **/\\r\\n    function getPair(address _tokenA, address _tokenB) external returns (address);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xcd066153720681eacc37cf89a3465817d0967354be7927292679ebde7c79a034\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IBorrowersRegistry\\r\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\r\\n */\\r\\ninterface IBorrowersRegistry {\\r\\n    function canBorrow(address _account) external view returns (bool);\\r\\n\\r\\n    function getLoanForOwner(address _owner) external view returns (address);\\r\\n\\r\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xb8aaf225432273e91887b0ecda730ad062eaeef212cfd099e322393d1c3f56e3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\r\\n */\\r\\ninterface IDiamondBeacon {\\r\\n\\r\\n    function implementation() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Must return an address that can be used as a delegate call target.\\r\\n     *\\r\\n     * {SmartLoanDiamondProxy} will check that this address is a contract.\\r\\n     */\\r\\n    function implementation(bytes4) external view returns (address);\\r\\n\\r\\n    function getStatus() external view returns (bool);\\r\\n\\r\\n    function proposeBeaconOwnershipTransfer(address _newOwner) external;\\r\\n\\r\\n    function acceptBeaconOwnership() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9ebb1752fb7c26826cf3cccd2fb54a4db53d76a8d16dfa7614d772c3e92dd6cf\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\",\"keccak256\":\"0x98b528120c0598f550cf85472f8dd759952a41505d1c7c5a2f07ed03c18c87a7\",\"license\":\"MIT\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IIndex {\\r\\n\\r\\n    function setRate(uint256 _rate) external;\\r\\n\\r\\n    function updateUser(address user) external;\\r\\n\\r\\n    function getIndex() external view returns (uint256);\\r\\n\\r\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x0f06bd722f4574e6296b2e55a393e8b2abe81411ae1ec8598d761e5a8565390a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IPoolRewarder {\\r\\n\\r\\n    function stakeFor(uint _amount, address _stakeFor) external;\\r\\n\\r\\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\\r\\n\\r\\n    function getRewardsFor(address _user) external;\\r\\n\\r\\n    function earned(address _account) external view returns (uint);\\r\\n\\r\\n    function balanceOf(address _account) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xe5ff460a400055a73324bb2b6661e47bb5227c6bce4adec8befa541ded0b252d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IRatesCalculator\\r\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\r\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\r\\n */\\r\\ninterface IRatesCalculator {\\r\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\r\\n\\r\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc6f00bcba86f3aa78e79bec4943c8f47daf4b85698ce6686b4b2457a92f06bc8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IStakingPositions\\r\\n * Types for staking\\r\\n */\\r\\ninterface IStakingPositions {\\r\\n    struct StakedPosition {\\r\\n        // Asset is either the token (symbol) address being staked or the address of the PTP LP token in case where a pool for that token (symbol) already exists within the VectorFinance\\r\\n        address asset;\\r\\n        bytes32 symbol;\\r\\n        bytes32 identifier;\\r\\n        bytes4 balanceSelector;\\r\\n        bytes4 unstakeSelector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xce66179b8d802e46a03c412a23e2cb59fa4bc228cf475ca091b0425aecd0f16b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenManager.sol\":{\"content\":\"interface ITokenManager {\\r\\n    struct poolAsset {\\r\\n        bytes32 asset;\\r\\n        address poolAddress;\\r\\n    }\\r\\n\\r\\n    struct Asset {\\r\\n        bytes32 asset;\\r\\n        address assetAddress;\\r\\n        uint256 debtCoverage;\\r\\n    }\\r\\n\\r\\n    function activateToken ( address token ) external;\\r\\n    function addPoolAssets ( poolAsset[] memory poolAssets ) external;\\r\\n    function addTokenAssets ( Asset[] memory tokenAssets ) external;\\r\\n    function deactivateToken ( address token ) external;\\r\\n    function debtCoverage ( address ) external view returns ( uint256 );\\r\\n    function debtCoverageStaked ( bytes32 ) external view returns ( uint256 );\\r\\n    function getAllPoolAssets (  ) external view returns ( bytes32[] memory result );\\r\\n    function getAllTokenAssets (  ) external view returns ( bytes32[] memory result );\\r\\n    function getAssetAddress ( bytes32 _asset, bool allowInactive ) external view returns ( address );\\r\\n    function getPoolAddress ( bytes32 _asset ) external view returns ( address );\\r\\n    function getSupportedTokensAddresses (  ) external view returns ( address[] memory);\\r\\n    function initialize ( Asset[] memory tokenAssets, poolAsset[] memory poolAssets ) external;\\r\\n    function increaseProtocolExposure ( bytes32 assetIdentifier, uint256 exposureIncrease ) external;\\r\\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) external;\\r\\n    function isTokenAssetActive ( address token ) external view returns ( bool );\\r\\n    function owner (  ) external view returns ( address );\\r\\n    function removePoolAssets ( bytes32[] memory _poolAssets ) external;\\r\\n    function removeTokenAssets ( bytes32[] memory _tokenAssets ) external;\\r\\n    function renounceOwnership (  ) external;\\r\\n    function setDebtCoverage ( address token, uint256 coverage ) external;\\r\\n    function setDebtCoverageStaked ( bytes32 stakedAsset, uint256 coverage ) external;\\r\\n    function supportedTokensList ( uint256 ) external view returns ( address );\\r\\n    function tokenAddressToSymbol ( address ) external view returns ( bytes32 );\\r\\n    function tokenToStatus ( address ) external view returns ( uint256 );\\r\\n    function transferOwnership ( address newOwner ) external;\\r\\n}\",\"keccak256\":\"0x11244baa1d2c247ef14bf9c7fbb6e447d405f2020df59293cf1cd88b012e3f06\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\r\\n\\r\\n/**\\r\\n * @dev Library for managing an enumerable variant of Solidity's\\r\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\r\\n * type.\\r\\n *\\r\\n * Maps have the following properties:\\r\\n *\\r\\n * - Entries are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n */\\r\\nlibrary EnumerableMap {\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Map type with\\r\\n    // bytes32 keys and values.\\r\\n    // The Map implementation uses private functions, and user-facing\\r\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\r\\n    // the underlying Map.\\r\\n    // This means that we can only create new EnumerableMaps for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Map {\\r\\n        // Storage of keys\\r\\n        EnumerableSet.Bytes32Set _keys;\\r\\n        mapping(bytes32 => bytes32) _values;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _set(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        bytes32 value\\r\\n    ) private returns (bool) {\\r\\n        map._values[key] = value;\\r\\n        return map._keys.add(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a key-value pair from a map. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\r\\n        delete map._values[key];\\r\\n        return map._keys.remove(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\r\\n        return map._keys.contains(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\r\\n     */\\r\\n    function _length(Map storage map) private view returns (uint256) {\\r\\n        return map._keys.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of entries inside the\\r\\n     * array, and it may change when more entries are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\r\\n        bytes32 key = map._keys.at(index);\\r\\n        return (key, map._values[key]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     */\\r\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        if (value == bytes32(0)) {\\r\\n            return (_contains(map, key), bytes32(0));\\r\\n        } else {\\r\\n            return (true, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\r\\n     */\\r\\n    function _get(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), errorMessage);\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    // Bytes32ToAddressMap\\r\\n\\r\\n    struct Bytes32ToAddressMap {\\r\\n        Map _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function set(\\r\\n        Bytes32ToAddressMap storage map,\\r\\n        bytes32 key,\\r\\n        address value\\r\\n    ) internal returns (bool) {\\r\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\r\\n        return _remove(map._inner, key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\r\\n        return _contains(map._inner, key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of elements in the map. O(1).\\r\\n     */\\r\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\r\\n        return _length(map._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\r\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\r\\n        return (key, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\r\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\r\\n        return (success, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, key))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\r\\n     */\\r\\n    function get(\\r\\n        Bytes32ToAddressMap storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c9de7c7f3406d29dc518366c68a88cb29aaf36907b95422cceac140959c2463\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\r\\n\\r\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\r\\n// The loupe functions are required by the EIP2535 Diamonds standard\\r\\n\\r\\nlibrary DiamondStorageLib {\\r\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\r\\n\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n    bytes32 constant LIQUIDATION_STORAGE_POSITION = keccak256(\\\"diamond.standard.liquidation.storage\\\");\\r\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\r\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\r\\n\\r\\n    struct FacetAddressAndPosition {\\r\\n        address facetAddress;\\r\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\r\\n    }\\r\\n\\r\\n    struct FacetFunctionSelectors {\\r\\n        bytes4[] functionSelectors;\\r\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\r\\n    }\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\r\\n        // maps function selector to the facet address and\\r\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\r\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\r\\n        // maps facet addresses to function selectors\\r\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\r\\n        // facet addresses\\r\\n        address[] facetAddresses;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // Used to select methods that can be executed even when Diamond is paused\\r\\n        mapping(bytes4 => bool) canBeExecutedWhenPaused;\\r\\n\\r\\n        bool _initialized;\\r\\n        bool _active;\\r\\n\\r\\n        uint256 _lastBorrowTimestamp;\\r\\n    }\\r\\n\\r\\n    struct SmartLoanStorage {\\r\\n        // PauseAdmin has the power to pause/unpause the contract without the timelock delay in case of a critical bug/exploit\\r\\n        address pauseAdmin;\\r\\n        // Owner of the contract\\r\\n        address contractOwner;\\r\\n        // Proposed owner of the contract\\r\\n        address proposedOwner;\\r\\n        // Proposed pauseAdmin of the contract\\r\\n        address proposedPauseAdmin;\\r\\n        // Is contract initialized?\\r\\n        bool _initialized;\\r\\n        // TODO: mock staking tokens until redstone oracle supports them\\r\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\r\\n        // Staked positions of the contract\\r\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\r\\n    }\\r\\n\\r\\n    struct LiquidationStorage {\\r\\n        // Mapping controlling addresses that can execute the liquidation methods\\r\\n        mapping(address=>bool) canLiquidate;\\r\\n    }\\r\\n\\r\\n    struct ReentrancyGuardStorage {\\r\\n        uint256 _status;\\r\\n    }\\r\\n\\r\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\r\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            rgs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function liquidationStorage() internal pure returns (LiquidationStorage storage ls) {\\r\\n        bytes32 position = LIQUIDATION_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ls.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\r\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            sls.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    event PauseAdminOwnershipTransferred(address indexed previousPauseAdmin, address indexed newPauseAdmin);\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        address previousOwner = sls.contractOwner;\\r\\n        sls.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function setContractPauseAdmin(address _newPauseAdmin) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        address previousPauseAdmin = sls.pauseAdmin;\\r\\n        sls.pauseAdmin = _newPauseAdmin;\\r\\n        emit PauseAdminOwnershipTransferred(previousPauseAdmin, _newPauseAdmin);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = smartLoanStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function pauseAdmin() internal view returns (address pauseAdmin) {\\r\\n        pauseAdmin = smartLoanStorage().pauseAdmin;\\r\\n    }\\r\\n\\r\\n    function setProposedOwner(address _newOwner) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        sls.proposedOwner = _newOwner;\\r\\n    }\\r\\n\\r\\n    function setProposedPauseAdmin(address _newPauseAdmin) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        sls.proposedPauseAdmin = _newPauseAdmin;\\r\\n    }\\r\\n\\r\\n    function getPausedMethodExemption(bytes4 _methodSig) internal view returns (bool) {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        return ds.canBeExecutedWhenPaused[_methodSig];\\r\\n    }\\r\\n\\r\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\r\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\r\\n    }\\r\\n\\r\\n    function proposedPauseAdmin() internal view returns (address proposedPauseAdmin) {\\r\\n        proposedPauseAdmin = smartLoanStorage().proposedPauseAdmin;\\r\\n    }\\r\\n\\r\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\r\\n        _positions = smartLoanStorage().currentStakedPositions;\\r\\n    }\\r\\n\\r\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\r\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\r\\n\\r\\n        bool found;\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            if (positions[i].identifier == position.identifier) {\\r\\n                found = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!found) {\\r\\n            positions.push(position);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeStakedPosition(bytes32 identifier) internal {\\r\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            if (positions[i].identifier == identifier) {\\r\\n                positions[i] = positions[positions.length - 1];\\r\\n                positions.pop();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\r\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\r\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\r\\n    }\\r\\n\\r\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        return sls.ownedAssets.contains(_symbol);\\r\\n    }\\r\\n\\r\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\r\\n    }\\r\\n\\r\\n    function enforceIsPauseAdmin() internal view {\\r\\n        require(msg.sender == smartLoanStorage().pauseAdmin, \\\"DiamondStorageLib: Must be contract pauseAdmin\\\");\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\r\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\r\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\r\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\r\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\r\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else {\\r\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\r\\n            }\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        // if function does not exist then do nothing and return\\r\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\r\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\r\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\r\\n        ds.facetAddresses.push(_facetAddress);\\r\\n    }\\r\\n\\r\\n\\r\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\r\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\r\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\r\\n    }\\r\\n\\r\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\r\\n        // an immutable function is a function defined directly in a diamond\\r\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\r\\n        // replace selector with last selector, then delete last selector\\r\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\r\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\r\\n        // if not the same then replace _selector with lastSelector\\r\\n        if (selectorPosition != lastSelectorPosition) {\\r\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\r\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\r\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\r\\n        }\\r\\n        // delete the last selector\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\r\\n        delete ds.selectorToFacetAndPosition[_selector];\\r\\n\\r\\n        // if no more selectors for facet address then delete the facet address\\r\\n        if (lastSelectorPosition == 0) {\\r\\n            // replace facet address with last facet address and delete last facet address\\r\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\r\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\r\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\r\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\r\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\r\\n            }\\r\\n            ds.facetAddresses.pop();\\r\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (_init == address(0)) {\\r\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\r\\n        } else {\\r\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\r\\n            if (_init != address(this)) {\\r\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\r\\n            }\\r\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n            if (!success) {\\r\\n                if (error.length > 0) {\\r\\n                    // bubble up the error\\r\\n                    revert(string(error));\\r\\n                } else {\\r\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\r\\n        uint256 contractSize;\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4b0e53f952c3f8716cdda77a08f22018249081a9d450a1d51510b0a24f77e237\",\"license\":\"MIT\"},\"contracts/lib/SolvencyMethods.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\\\";\\r\\nimport \\\"../facets/SolvencyFacetProd.sol\\\";\\r\\nimport \\\"../facets/AssetsExposureController.sol\\\";\\r\\nimport \\\"../DiamondHelper.sol\\\";\\r\\n\\r\\n// TODO Rename to contract instead of lib\\r\\ncontract SolvencyMethods is DiamondHelper, ProxyConnector {\\r\\n    // This function executes SolvencyFacetProd.getDebt()\\r\\n    function _getDebt() internal virtual returns (uint256 debt) {\\r\\n        debt = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebt.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebt.selector)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getDebtWithPrices()\\r\\n    function _getDebtWithPrices(SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) internal virtual returns (uint256 debt) {\\r\\n        debt = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtWithPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtWithPrices.selector, debtAssetsPrices)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.isSolventWithPrices()\\r\\n    function _isSolventWithPrices(SolvencyFacetProd.CachedPrices memory cachedPrices) internal virtual returns (bool solvent){\\r\\n        solvent = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolventWithPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.isSolventWithPrices.selector, cachedPrices)\\r\\n            ),\\r\\n            (bool)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.isSolvent()\\r\\n    function _isSolvent() internal virtual returns (bool solvent){\\r\\n        solvent = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolvent.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.isSolvent.selector)\\r\\n            ),\\r\\n            (bool)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.canRepayDebtFully()\\r\\n    function _canRepayDebtFully() internal virtual returns (bool solvent){\\r\\n        solvent = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.canRepayDebtFully.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.canRepayDebtFully.selector)\\r\\n            ),\\r\\n            (bool)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getTotalValue()\\r\\n    function _getTotalValue() internal virtual returns (uint256 totalValue) {\\r\\n        totalValue = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValue.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValue.selector)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getTotalAssetsValue()\\r\\n    function _getTotalAssetsValue() internal virtual returns (uint256 assetsValue) {\\r\\n        assetsValue = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalAssetsValue.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalAssetsValue.selector)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getHealthRatioWithPrices()\\r\\n    function _getHealthRatioWithPrices(SolvencyFacetProd.CachedPrices memory cachedPrices) public virtual returns (uint256 health) {\\r\\n        health = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatioWithPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatioWithPrices.selector, cachedPrices)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getHealthRatio()\\r\\n    function _getHealthRatio() public virtual returns (uint256 health) {\\r\\n        health = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatio.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatio.selector)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getPrices()\\r\\n    function getPrices(bytes32[] memory symbols) public virtual returns (uint256[] memory prices) {\\r\\n        prices = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getPrices.selector, symbols)\\r\\n            ),\\r\\n            (uint256[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getPrices()\\r\\n    function _getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public virtual returns (SolvencyFacetProd.CachedPrices memory result) {\\r\\n        result = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getAllPricesForLiquidation.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getAllPricesForLiquidation.selector, assetsToRepay)\\r\\n            ),\\r\\n            (SolvencyFacetProd.CachedPrices)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getOwnedAssetsWithNativePrices()\\r\\n    function _getOwnedAssetsWithNativePrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices) {\\r\\n        ownedAssetsPrices = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getOwnedAssetsWithNativePrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getOwnedAssetsWithNativePrices.selector)\\r\\n            ),\\r\\n            (SolvencyFacetProd.AssetPrice[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getDebtAssetsPrices()\\r\\n    function _getDebtAssetsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) {\\r\\n        debtAssetsPrices = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtAssetsPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtAssetsPrices.selector)\\r\\n            ),\\r\\n            (SolvencyFacetProd.AssetPrice[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getStakedPositionsPrices()\\r\\n    function _getStakedPositionsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) {\\r\\n        stakedPositionsPrices = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getStakedPositionsPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getStakedPositionsPrices.selector)\\r\\n            ),\\r\\n            (SolvencyFacetProd.AssetPrice[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getTotalAssetsValueWithPrices()\\r\\n    function _getTotalValueWithPrices(SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices, SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) internal virtual returns (uint256 totalValue) {\\r\\n        totalValue = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValueWithPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValueWithPrices.selector, ownedAssetsPrices, stakedPositionsPrices)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getPrices()\\r\\n    function getPrice(bytes32 symbol) public virtual returns (uint256 price) {\\r\\n        price = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrice.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getPrice.selector, symbol)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes AssetsExposureController.decreaseAssetsExposure()\\r\\n    function _resetPrimeAccountAssetsExposure() public {\\r\\n        proxyDelegateCalldata(\\r\\n            DiamondHelper._getFacetAddress(AssetsExposureController.resetPrimeAccountAssetsExposure.selector),\\r\\n            abi.encodeWithSelector(AssetsExposureController.resetPrimeAccountAssetsExposure.selector)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes AssetsExposureController.increaseAssetsExposure()\\r\\n    function _setPrimeAccountAssetsExposure() public {\\r\\n        proxyDelegateCalldata(\\r\\n            DiamondHelper._getFacetAddress(AssetsExposureController.setPrimeAccountAssetsExposure.selector),\\r\\n            abi.encodeWithSelector(AssetsExposureController.setPrimeAccountAssetsExposure.selector)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns IERC20Metadata instance of a token\\r\\n     * @param _asset the code of an asset\\r\\n     **/\\r\\n    function getERC20TokenInstance(bytes32 _asset, bool allowInactive) internal view returns (IERC20Metadata) {\\r\\n        return IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(_asset, allowInactive));\\r\\n    }\\r\\n\\r\\n    modifier recalculateAssetsExposure() {\\r\\n        _resetPrimeAccountAssetsExposure();\\r\\n        _;\\r\\n        _setPrimeAccountAssetsExposure();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Checks whether account is solvent (health higher than 1)\\r\\n    * @dev This modifier uses the redstone-evm-connector\\r\\n    **/\\r\\n    modifier remainsSolvent() {\\r\\n        _;\\r\\n\\r\\n        require(_isSolvent(), \\\"The action may cause an account to become insolvent\\\");\\r\\n    }\\r\\n\\r\\n    modifier canRepayDebtFully() {\\r\\n        _;\\r\\n        require(_canRepayDebtFully(), \\\"Insufficient assets to fully repay the debt\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3035057cd12aa8147270b52117517db4a585baa15cf8ca24c2c7b052dd1226b1\",\"license\":\"BUSL-1.1\"},\"contracts/lib/avalanche/DeploymentConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../../interfaces/ITokenManager.sol\\\";\\r\\nimport {DiamondStorageLib} from \\\"../../lib/DiamondStorageLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * DeploymentConstants\\r\\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\\r\\n * to decrease gas costs. Not meant to be updated unless really necessary.\\r\\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\\r\\n **/\\r\\nlibrary DeploymentConstants {\\r\\n\\r\\n    // Used for LiquidationBonus calculations\\r\\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\\r\\n\\r\\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\\r\\n\\r\\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\r\\n\\r\\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x2916B3bf7C35bd21e63D01C93C62FB0d4994e56D;\\r\\n\\r\\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x3Ea9D480295A73fd2aF95b4D96c2afF88b21B03D;\\r\\n\\r\\n    address private constant _TOKEN_MANAGER_ADDRESS = 0xF3978209B7cfF2b90100C6F87CEC77dE928Ed58e;\\r\\n\\r\\n    //implementation-specific\\r\\n\\r\\n    function getPercentagePrecision() internal pure returns (uint256) {\\r\\n        return _PERCENTAGE_PRECISION;\\r\\n    }\\r\\n\\r\\n    //blockchain-specific\\r\\n\\r\\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\\r\\n        return _NATIVE_TOKEN_SYMBOL;\\r\\n    }\\r\\n\\r\\n    function getNativeToken() internal pure returns (address payable) {\\r\\n        return payable(_NATIVE_ADDRESS);\\r\\n    }\\r\\n\\r\\n    //deployment-specific\\r\\n\\r\\n    function getDiamondAddress() internal pure returns (address) {\\r\\n        return _DIAMOND_BEACON_ADDRESS;\\r\\n    }\\r\\n\\r\\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\\r\\n        return _SMART_LOANS_FACTORY_ADDRESS;\\r\\n    }\\r\\n\\r\\n    function getTokenManager() internal pure returns (ITokenManager) {\\r\\n        return ITokenManager(_TOKEN_MANAGER_ADDRESS);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Returns all owned assets keys\\r\\n    **/\\r\\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\\r\\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\\r\\n        return sls.ownedAssets._inner._keys._inner._values;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf019b3600c687707821c088c11c02df81e157e4e0c66827ce4c3ac66aba0bf9f\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600081905550614089806100286000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636e3bfe9f1161008c5780639201de55116100665780639201de5514610212578063b2d40e7314610242578063cfb5192814610272578063f8f18553146102a2576100cf565b80636e3bfe9f146101aa5780637fe65943146101da578063838986f8146101f6576100cf565b806326ee4836146100d457806331d98b3f1461010457806339e2719e146101345780634e543900146101525780635b4fad9c14610182578063640adf781461018c575b600080fd5b6100ee60048036038101906100e9919061264b565b6102ac565b6040516100fb919061275c565b60405180910390f35b61011e6004803603810190610119919061277e565b610356565b60405161012b91906127ba565b60405180910390f35b61013c610400565b60405161014991906127ba565b60405180910390f35b61016c60048036038101906101679190612801565b61049d565b604051610179919061275c565b60405180910390f35b61018a610510565b005b610194610596565b6040516101a191906128a9565b60405180910390f35b6101c460048036038101906101bf9190612ac9565b6105b2565b6040516101d191906127ba565b60405180910390f35b6101f460048036038101906101ef9190612b12565b61065c565b005b610210600480360381019061020b9190612b8d565b610670565b005b61022c6004803603810190610227919061277e565b61068e565b6040516102399190612c99565b60405180910390f35b61025c6004803603810190610257919061264b565b610829565b6040516102699190612e20565b60405180910390f35b61028c60048036038101906102879190612ef7565b6108d9565b6040516102999190612f4f565b60405180910390f35b6102aa610902565b005b606061033c6102c16326ee483660e01b610988565b6326ee483660e01b846040516024016102da9190613019565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b80602001905181019061034f9190613113565b9050919050565b60006103e661036b6331d98b3f60e01b610988565b6331d98b3f60e01b846040516024016103849190612f4f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b8060200190518101906103f9919061315c565b9050919050565b6000610485610415637914334f60e01b610988565b637914334f60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b806020019051810190610498919061315c565b905090565b606060006104a9610aa3565b9050428160060154036104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e8906131fb565b60405180910390fd5b6104f9610ad0565b61050586868686610b6b565b915050949350505050565b61059361052363b1c9fbc160e01b610988565b63b1c9fbc160e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b50565b600073db5d94b8ed491b058f3e74d029775a14477cf7fa905090565b60006106426105c763360398a360e01b610988565b63360398a360e01b846040516024016105e09190612e20565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b806020019051810190610655919061315c565b9050919050565b6106698585858585610fb3565b5050505050565b610678610ad0565b610686868686868686611403565b505050505050565b606060005b60208160ff161080156106e55750600060f81b838260ff16602081106106bc576106bb61321b565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156106fd5780806106f590613286565b915050610693565b60008160ff1667ffffffffffffffff81111561071c5761071b6124d2565b5b6040519080825280601f01601f19166020018201604052801561074e5781602001600182028036833780820191505090505b509050600091505b60208260ff161080156107a85750600060f81b848360ff166020811061077f5761077e61321b565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561081f57838260ff16602081106107c3576107c261321b565b5b1a60f81b818360ff16815181106107dd576107dc61321b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818061081790613286565b925050610756565b8092505050919050565b610831612480565b6108bf61084463a3aa8d1e60e01b610988565b63a3aa8d1e60e01b8460405160240161085d9190613019565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b8060200190518101906108d29190613493565b9050919050565b60008082905060008151036108f4576000801b9150506108fd565b60208301519150505b919050565b61098561091563e017e12560e01b610988565b63e017e12560e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b50565b6000610992611927565b73ffffffffffffffffffffffffffffffffffffffff16630d741577836040518263ffffffff1660e01b81526004016109ca9190613517565b602060405180830381865afa1580156109e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0b919061355e565b9050919050565b60606000610a1f83611943565b90506000808573ffffffffffffffffffffffffffffffffffffffff1683604051610a4991906135d2565b600060405180830381855af49150503d8060008114610a84576040519150601f19603f3d011682016040523d82523d6000602084013e610a89565b606091505b5091509150610a9882826119fd565b935050505092915050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b610ad8611afd565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b609061365b565b60405180910390fd5b565b6060610b75610510565b6000610b82866001611b2a565b90506000610b91866000611b2a565b9050848273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bcd91906128a9565b602060405180830381865afa158015610bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0e919061315c565b1015610c4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c46906136c7565b60405180910390fd5b610c81610c5a610596565b868473ffffffffffffffffffffffffffffffffffffffff16611bb79092919063ffffffff16565b6000610c8b610596565b905060008173ffffffffffffffffffffffffffffffffffffffff1663fe02915685858a8a6040518563ffffffff1660e01b8152600401610cce94939291906136e7565b6000604051808303816000875af1158015610ced573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d169190613113565b90506000610d22611ced565b905060008173ffffffffffffffffffffffffffffffffffffffff166325eb876f8b60006040518363ffffffff1660e01b8152600401610d62929190613747565b602060405180830381865afa158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da3919061355e565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610de091906128a9565b602060405180830381865afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e21919061315c565b1115610e3257610e318a82611d09565b5b60008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e6d91906128a9565b602060405180830381865afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae919061315c565b03610ebd57610ebc8b611ddb565b5b898b3373ffffffffffffffffffffffffffffffffffffffff167f4cb7ea834525f7e7be14143ffc68be9c6735559e936d23502fff335d39a2e8e286600081518110610f0b57610f0a61321b565b5b60200260200101518760018951610f229190613770565b81518110610f3357610f3261321b565b5b602002602001015142604051610f4b939291906137a4565b60405180910390a4829650505050505050610f64611df9565b610fa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9a9061384d565b60405180910390fd5b610fab610902565b949350505050565b610fbb610510565b6000610fc5611df9565b90508015610fda57610fd5610ad0565b61109b565b610fe2611927565b73ffffffffffffffffffffffffffffffffffffffff1663e319fccc336040518263ffffffff1660e01b815260040161101a91906128a9565b602060405180830381865afa158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b9190613899565b61109a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109190613938565b60405180910390fd5b5b60006110a8876001611b2a565b905060006110b7876001611b2a565b905060006110c3610596565b905060008173ffffffffffffffffffffffffffffffffffffffff1663e6a4390585856040518363ffffffff1660e01b8152600401611102929190613958565b6020604051808303816000875af1158015611121573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611145919061355e565b90506111ca888273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161118491906128a9565b602060405180830381865afa1580156111a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c5919061315c565b611e96565b97506111fe6111d7610596565b898373ffffffffffffffffffffffffffffffffffffffff16611bb79092919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e2dc85dc87878d8d8d6040518663ffffffff1660e01b8152600401611242959493929190613981565b60408051808303816000875af1158015611260573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128491906139d4565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112c391906128a9565b602060405180830381865afa1580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611304919061315c565b0361131c5761131b6113168d8d611eaf565b611ddb565b5b6113268c87611d09565b6113308b86611d09565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f60d6d04a69b63b07bc4612079adf2399fcc2b9da68fe609fe66ffbe16fca76f48e8e8e87874260405161139796959493929190613a14565b60405180910390a350505050505080156113f3576113b3611df9565b6113f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e990613ac1565b60405180910390fd5b5b506113fc610902565b5050505050565b61140b610510565b6000611418876000611b2a565b90506000611427876000611b2a565b9050858273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161146391906128a9565b602060405180830381865afa158015611480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a4919061315c565b10156114e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dc90613b2d565b60405180910390fd5b848173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161151f91906128a9565b602060405180830381865afa15801561153c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611560919061315c565b10156115a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159890613b99565b60405180910390fd5b6115d36115ac610596565b878473ffffffffffffffffffffffffffffffffffffffff16611bb79092919063ffffffff16565b6116056115de610596565b868373ffffffffffffffffffffffffffffffffffffffff16611bb79092919063ffffffff16565b600061160f610596565b90506000808273ffffffffffffffffffffffffffffffffffffffff16633351733f86868c8c8c8c6040518763ffffffff1660e01b815260040161165796959493929190613bb9565b6080604051808303816000875af1158015611676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169a9190613c1a565b809450819b50829c508395505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116e591906128a9565b602060405180830381865afa158015611702573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611726919061315c565b11156117465760006117388c8c611eaf565b90506117448184611d09565b505b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161178191906128a9565b602060405180830381865afa15801561179e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c2919061315c565b036117d1576117d08b611ddb565b5b60008473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161180c91906128a9565b602060405180830381865afa158015611829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184d919061315c565b0361185c5761185b8a611ddb565b5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fee6437c12e66102495172228742a18765355debe1f046d82bcd14f8dc66f11678d8d858e8e426040516118c396959493929190613a14565b60405180910390a350505050506118d8611df9565b611917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190e9061384d565b60405180910390fd5b61191f610902565b505050505050565b6000732916b3bf7c35bd21e63d01c93c62fb0d4994e56d905090565b60606000825190506000611955611f1e565b9050600081836119659190613c81565b905060003690508211156119a5576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060604051905081815285602001848101826020015b818310156119d857825181526020830192506020810190506119bb565b5050508283360385602001830137602084840182010160405280945050505050919050565b606082611af4576000825103611a3f576040517f567fe27a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208301517f08c379a00000000000000000000000000000000000000000000000000000000081149150508015611ab7576060604484019050806040517f0f7e8278000000000000000000000000000000000000000000000000000000008152600401611aae9190612c99565b60405180910390fd5b826040517ffd36fde3000000000000000000000000000000000000000000000000000000008152600401611aeb9190613cff565b60405180910390fd5b81905092915050565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b6000611b34611ced565b73ffffffffffffffffffffffffffffffffffffffff166325eb876f84846040518363ffffffff1660e01b8152600401611b6e929190613747565b602060405180830381865afa158015611b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baf919061355e565b905092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401611be9929190613d21565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611c3791906135d2565b6000604051808303816000865af19150503d8060008114611c74576040519150601f19603f3d011682016040523d82523d6000602084013e611c79565b606091505b5091509150818015611ca75750600081511480611ca6575080806020019051810190611ca59190613899565b5b5b611ce6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdd90613dbc565b60405180910390fd5b5050505050565b600073f3978209b7cff2b90100c6f87cec77de928ed58e905090565b60008203611d4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4390613e28565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611dbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db290613e94565b60405180910390fd5b6000611dc5611afd565b9050611dd5816004018484611f8e565b50505050565b6000611de5611afd565b9050611df48160040183611fc0565b505050565b6000611e7e611e0e635ce2395060e01b610988565b635ce2395060e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b806020019051810190611e919190613899565b905090565b6000818310611ea55781611ea7565b825b905092915050565b6000806000838510611ec2578385611ec5565b84845b91509150611f14611edc611ed7611fd7565b61068e565b611ee58461068e565b611eee8461068e565b604051602001611f0093929190613f3c565b6040516020818303038152906040526108d9565b9250505092915050565b600080611f29611fff565b90506000611f3682612110565b61ffff169050600282611f499190613c81565b915060005b81811015611f85576000611f618461216c565b90508084611f6f9190613c81565b9350508080611f7d90613f9a565b915050611f4e565b50819250505090565b6000611fb784600001848473ffffffffffffffffffffffffffffffffffffffff1660001b6121ab565b90509392505050565b6000611fcf83600001836121e6565b905092915050565b60007f504e470000000000000000000000000000000000000000000000000000000000905090565b60008060203603356602ed57011e000081166602ed57011e00001491505080612054576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008036905060291115612094576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602936033590506000600960038362ffffff166120b19190613c81565b6120bb9190613c81565b905060003690506002826120cf9190613c81565b1115612107576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80935050505090565b6000806020836121209190613c81565b90506000369050811115612160576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80360335915050919050565b600080600061217a8461221f565b91509150604e81602061218d9190613c81565b836121989190613fe2565b6121a29190613c81565b92505050919050565b600081846002016000858152602001908152602001600020819055506121dd838560000161229590919063ffffffff16565b90509392505050565b60008260020160008381526020019081526020016000206000905561221782846000016122ac90919063ffffffff16565b905092915050565b60008060008060006041866122349190613c81565b9050600061225b6020836122489190613c81565b60003690506122c390919063ffffffff16565b9050803593506122756003826122c390919063ffffffff16565b9050803592508362ffffff1695508263ffffffff16945050505050915091565b60006122a483600001836122d9565b905092915050565b60006122bb8360000183612349565b905092915050565b600081836122d19190613770565b905092915050565b60006122e5838361245d565b61233e578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612343565b600090505b92915050565b6000808360010160008481526020019081526020016000205490506000811461245157600060018261237b9190613770565b90506000600186600001805490506123939190613770565b90508181146124025760008660000182815481106123b4576123b361321b565b5b90600052602060002001549050808760000184815481106123d8576123d761321b565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061241657612415614024565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612457565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61250a826124c1565b810181811067ffffffffffffffff82111715612529576125286124d2565b5b80604052505050565b600061253c6124a8565b90506125488282612501565b919050565b600067ffffffffffffffff821115612568576125676124d2565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6125918161257e565b811461259c57600080fd5b50565b6000813590506125ae81612588565b92915050565b60006125c76125c28461254d565b612532565b905080838252602082019050602084028301858111156125ea576125e9612579565b5b835b8181101561261357806125ff888261259f565b8452602084019350506020810190506125ec565b5050509392505050565b600082601f830112612632576126316124bc565b5b81356126428482602086016125b4565b91505092915050565b600060208284031215612661576126606124b2565b5b600082013567ffffffffffffffff81111561267f5761267e6124b7565b5b61268b8482850161261d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6126d3816126c0565b82525050565b60006126e583836126ca565b60208301905092915050565b6000602082019050919050565b600061270982612694565b612713818561269f565b935061271e836126b0565b8060005b8381101561274f57815161273688826126d9565b9750612741836126f1565b925050600181019050612722565b5085935050505092915050565b6000602082019050818103600083015261277681846126fe565b905092915050565b600060208284031215612794576127936124b2565b5b60006127a28482850161259f565b91505092915050565b6127b4816126c0565b82525050565b60006020820190506127cf60008301846127ab565b92915050565b6127de816126c0565b81146127e957600080fd5b50565b6000813590506127fb816127d5565b92915050565b6000806000806080858703121561281b5761281a6124b2565b5b60006128298782880161259f565b945050602061283a8782880161259f565b935050604061284b878288016127ec565b925050606061285c878288016127ec565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061289382612868565b9050919050565b6128a381612888565b82525050565b60006020820190506128be600083018461289a565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156128e9576128e86124d2565b5b602082029050602081019050919050565b6000604082840312156129105761290f6128c4565b5b61291a6040612532565b9050600061292a8482850161259f565b600083015250602061293e848285016127ec565b60208301525092915050565b600061295d612958846128ce565b612532565b905080838252602082019050604084028301858111156129805761297f612579565b5b835b818110156129a9578061299588826128fa565b845260208401935050604081019050612982565b5050509392505050565b600082601f8301126129c8576129c76124bc565b5b81356129d884826020860161294a565b91505092915050565b6000608082840312156129f7576129f66128c4565b5b612a016080612532565b9050600082013567ffffffffffffffff811115612a2157612a206128c9565b5b612a2d848285016129b3565b600083015250602082013567ffffffffffffffff811115612a5157612a506128c9565b5b612a5d848285016129b3565b602083015250604082013567ffffffffffffffff811115612a8157612a806128c9565b5b612a8d848285016129b3565b604083015250606082013567ffffffffffffffff811115612ab157612ab06128c9565b5b612abd848285016129b3565b60608301525092915050565b600060208284031215612adf57612ade6124b2565b5b600082013567ffffffffffffffff811115612afd57612afc6124b7565b5b612b09848285016129e1565b91505092915050565b600080600080600060a08688031215612b2e57612b2d6124b2565b5b6000612b3c8882890161259f565b9550506020612b4d8882890161259f565b9450506040612b5e888289016127ec565b9350506060612b6f888289016127ec565b9250506080612b80888289016127ec565b9150509295509295909350565b60008060008060008060c08789031215612baa57612ba96124b2565b5b6000612bb889828a0161259f565b9650506020612bc989828a0161259f565b9550506040612bda89828a016127ec565b9450506060612beb89828a016127ec565b9350506080612bfc89828a016127ec565b92505060a0612c0d89828a016127ec565b9150509295509295509295565b600081519050919050565b600082825260208201905092915050565b60005b83811015612c54578082015181840152602081019050612c39565b60008484015250505050565b6000612c6b82612c1a565b612c758185612c25565b9350612c85818560208601612c36565b612c8e816124c1565b840191505092915050565b60006020820190508181036000830152612cb38184612c60565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612cf08161257e565b82525050565b604082016000820151612d0c6000850182612ce7565b506020820151612d1f60208501826126ca565b50505050565b6000612d318383612cf6565b60408301905092915050565b6000602082019050919050565b6000612d5582612cbb565b612d5f8185612cc6565b9350612d6a83612cd7565b8060005b83811015612d9b578151612d828882612d25565b9750612d8d83612d3d565b925050600181019050612d6e565b5085935050505092915050565b60006080830160008301518482036000860152612dc58282612d4a565b91505060208301518482036020860152612ddf8282612d4a565b91505060408301518482036040860152612df98282612d4a565b91505060608301518482036060860152612e138282612d4a565b9150508091505092915050565b60006020820190508181036000830152612e3a8184612da8565b905092915050565b600080fd5b600067ffffffffffffffff821115612e6257612e616124d2565b5b612e6b826124c1565b9050602081019050919050565b82818337600083830152505050565b6000612e9a612e9584612e47565b612532565b905082815260208101848484011115612eb657612eb5612e42565b5b612ec1848285612e78565b509392505050565b600082601f830112612ede57612edd6124bc565b5b8135612eee848260208601612e87565b91505092915050565b600060208284031215612f0d57612f0c6124b2565b5b600082013567ffffffffffffffff811115612f2b57612f2a6124b7565b5b612f3784828501612ec9565b91505092915050565b612f498161257e565b82525050565b6000602082019050612f646000830184612f40565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612fa28383612ce7565b60208301905092915050565b6000602082019050919050565b6000612fc682612f6a565b612fd08185612f75565b9350612fdb83612f86565b8060005b8381101561300c578151612ff38882612f96565b9750612ffe83612fae565b925050600181019050612fdf565b5085935050505092915050565b600060208201905081810360008301526130338184612fbb565b905092915050565b600067ffffffffffffffff821115613056576130556124d2565b5b602082029050602081019050919050565b600081519050613076816127d5565b92915050565b600061308f61308a8461303b565b612532565b905080838252602082019050602084028301858111156130b2576130b1612579565b5b835b818110156130db57806130c78882613067565b8452602084019350506020810190506130b4565b5050509392505050565b600082601f8301126130fa576130f96124bc565b5b815161310a84826020860161307c565b91505092915050565b600060208284031215613129576131286124b2565b5b600082015167ffffffffffffffff811115613147576131466124b7565b5b613153848285016130e5565b91505092915050565b600060208284031215613172576131716124b2565b5b600061318084828501613067565b91505092915050565b7f426f72726f77696e67206d7573742068617070656e20696e2061207374616e6460008201527f616c6f6e65207472616e73616374696f6e000000000000000000000000000000602082015250565b60006131e5603183612c25565b91506131f082613189565b604082019050919050565b60006020820190508181036000830152613214816131d8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600061329182613279565b915060ff82036132a4576132a361324a565b5b600182019050919050565b6000815190506132be81612588565b92915050565b6000604082840312156132da576132d96128c4565b5b6132e46040612532565b905060006132f4848285016132af565b600083015250602061330884828501613067565b60208301525092915050565b6000613327613322846128ce565b612532565b9050808382526020820190506040840283018581111561334a57613349612579565b5b835b81811015613373578061335f88826132c4565b84526020840193505060408101905061334c565b5050509392505050565b600082601f830112613392576133916124bc565b5b81516133a2848260208601613314565b91505092915050565b6000608082840312156133c1576133c06128c4565b5b6133cb6080612532565b9050600082015167ffffffffffffffff8111156133eb576133ea6128c9565b5b6133f78482850161337d565b600083015250602082015167ffffffffffffffff81111561341b5761341a6128c9565b5b6134278482850161337d565b602083015250604082015167ffffffffffffffff81111561344b5761344a6128c9565b5b6134578482850161337d565b604083015250606082015167ffffffffffffffff81111561347b5761347a6128c9565b5b6134878482850161337d565b60608301525092915050565b6000602082840312156134a9576134a86124b2565b5b600082015167ffffffffffffffff8111156134c7576134c66124b7565b5b6134d3848285016133ab565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613511816134dc565b82525050565b600060208201905061352c6000830184613508565b92915050565b61353b81612888565b811461354657600080fd5b50565b60008151905061355881613532565b92915050565b600060208284031215613574576135736124b2565b5b600061358284828501613549565b91505092915050565b600081519050919050565b600081905092915050565b60006135ac8261358b565b6135b68185613596565b93506135c6818560208601612c36565b80840191505092915050565b60006135de82846135a1565b915081905092915050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613645602983612c25565b9150613650826135e9565b604082019050919050565b6000602082019050818103600083015261367481613638565b9050919050565b7f4e6f7420656e6f75676820746f6b656e20746f2073656c6c0000000000000000600082015250565b60006136b1601883612c25565b91506136bc8261367b565b602082019050919050565b600060208201905081810360008301526136e0816136a4565b9050919050565b60006080820190506136fc600083018761289a565b613709602083018661289a565b61371660408301856127ab565b61372360608301846127ab565b95945050505050565b60008115159050919050565b6137418161372c565b82525050565b600060408201905061375c6000830185612f40565b6137696020830184613738565b9392505050565b600061377b826126c0565b9150613786836126c0565b925082820390508181111561379e5761379d61324a565b5b92915050565b60006060820190506137b960008301866127ab565b6137c660208301856127ab565b6137d360408301846127ab565b949350505050565b7f54686520616374696f6e206d617920636175736520616e206163636f756e742060008201527f746f206265636f6d6520696e736f6c76656e7400000000000000000000000000602082015250565b6000613837603383612c25565b9150613842826137db565b604082019050919050565b600060208201905081810360008301526138668161382a565b9050919050565b6138768161372c565b811461388157600080fd5b50565b6000815190506138938161386d565b92915050565b6000602082840312156138af576138ae6124b2565b5b60006138bd84828501613884565b91505092915050565b7f4f6e6c792077686974656c6973746564206163636f756e74732063616e20706560008201527f72666f726d207468697320616374696f6e000000000000000000000000000000602082015250565b6000613922603183612c25565b915061392d826138c6565b604082019050919050565b6000602082019050818103600083015261395181613915565b9050919050565b600060408201905061396d600083018561289a565b61397a602083018461289a565b9392505050565b600060a082019050613996600083018861289a565b6139a3602083018761289a565b6139b060408301866127ab565b6139bd60608301856127ab565b6139ca60808301846127ab565b9695505050505050565b600080604083850312156139eb576139ea6124b2565b5b60006139f985828601613067565b9250506020613a0a85828601613067565b9150509250929050565b600060c082019050613a296000830189612f40565b613a366020830188612f40565b613a4360408301876127ab565b613a5060608301866127ab565b613a5d60808301856127ab565b613a6a60a08301846127ab565b979650505050505050565b7f4d757374207374617920736f6c76656e74000000000000000000000000000000600082015250565b6000613aab601183612c25565b9150613ab682613a75565b602082019050919050565b60006020820190508181036000830152613ada81613a9e565b9050919050565b7f4e6f7420656e6f75676820746f6b656e4120746f2070726f7669646500000000600082015250565b6000613b17601c83612c25565b9150613b2282613ae1565b602082019050919050565b60006020820190508181036000830152613b4681613b0a565b9050919050565b7f4e6f7420656e6f75676820746f6b656e4220746f2070726f7669646500000000600082015250565b6000613b83601c83612c25565b9150613b8e82613b4d565b602082019050919050565b60006020820190508181036000830152613bb281613b76565b9050919050565b600060c082019050613bce600083018961289a565b613bdb602083018861289a565b613be860408301876127ab565b613bf560608301866127ab565b613c0260808301856127ab565b613c0f60a08301846127ab565b979650505050505050565b60008060008060808587031215613c3457613c336124b2565b5b6000613c4287828801613549565b9450506020613c5387828801613067565b9350506040613c6487828801613067565b9250506060613c7587828801613067565b91505092959194509250565b6000613c8c826126c0565b9150613c97836126c0565b9250828201905080821115613caf57613cae61324a565b5b92915050565b600082825260208201905092915050565b6000613cd18261358b565b613cdb8185613cb5565b9350613ceb818560208601612c36565b613cf4816124c1565b840191505092915050565b60006020820190508181036000830152613d198184613cc6565b905092915050565b6000604082019050613d36600083018561289a565b613d4360208301846127ab565b9392505050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6000613da6602d83612c25565b9150613db182613d4a565b604082019050919050565b60006020820190508181036000830152613dd581613d99565b9050919050565b7f53796d626f6c2063616e6e6f7420626520656d70747900000000000000000000600082015250565b6000613e12601683612c25565b9150613e1d82613ddc565b602082019050919050565b60006020820190508181036000830152613e4181613e05565b9050919050565b7f496e76616c696420416464726573735a65726f00000000000000000000000000600082015250565b6000613e7e601383612c25565b9150613e8982613e48565b602082019050919050565b60006020820190508181036000830152613ead81613e71565b9050919050565b600081905092915050565b6000613eca82612c1a565b613ed48185613eb4565b9350613ee4818560208601612c36565b80840191505092915050565b7f5f00000000000000000000000000000000000000000000000000000000000000815250565b7f5f4c500000000000000000000000000000000000000000000000000000000000815250565b6000613f488286613ebf565b9150613f5382613ef0565b600182019150613f638285613ebf565b9150613f6e82613ef0565b600182019150613f7e8284613ebf565b9150613f8982613f16565b600382019150819050949350505050565b6000613fa5826126c0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613fd757613fd661324a565b5b600182019050919050565b6000613fed826126c0565b9150613ff8836126c0565b9250828202614006816126c0565b9150828204841483151761401d5761401c61324a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220b3a9f99db114c3028d8221c98cf0728fbc961a4ff2dd2e82e7b01286a0a07b7164736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636e3bfe9f1161008c5780639201de55116100665780639201de5514610212578063b2d40e7314610242578063cfb5192814610272578063f8f18553146102a2576100cf565b80636e3bfe9f146101aa5780637fe65943146101da578063838986f8146101f6576100cf565b806326ee4836146100d457806331d98b3f1461010457806339e2719e146101345780634e543900146101525780635b4fad9c14610182578063640adf781461018c575b600080fd5b6100ee60048036038101906100e9919061264b565b6102ac565b6040516100fb919061275c565b60405180910390f35b61011e6004803603810190610119919061277e565b610356565b60405161012b91906127ba565b60405180910390f35b61013c610400565b60405161014991906127ba565b60405180910390f35b61016c60048036038101906101679190612801565b61049d565b604051610179919061275c565b60405180910390f35b61018a610510565b005b610194610596565b6040516101a191906128a9565b60405180910390f35b6101c460048036038101906101bf9190612ac9565b6105b2565b6040516101d191906127ba565b60405180910390f35b6101f460048036038101906101ef9190612b12565b61065c565b005b610210600480360381019061020b9190612b8d565b610670565b005b61022c6004803603810190610227919061277e565b61068e565b6040516102399190612c99565b60405180910390f35b61025c6004803603810190610257919061264b565b610829565b6040516102699190612e20565b60405180910390f35b61028c60048036038101906102879190612ef7565b6108d9565b6040516102999190612f4f565b60405180910390f35b6102aa610902565b005b606061033c6102c16326ee483660e01b610988565b6326ee483660e01b846040516024016102da9190613019565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b80602001905181019061034f9190613113565b9050919050565b60006103e661036b6331d98b3f60e01b610988565b6331d98b3f60e01b846040516024016103849190612f4f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b8060200190518101906103f9919061315c565b9050919050565b6000610485610415637914334f60e01b610988565b637914334f60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b806020019051810190610498919061315c565b905090565b606060006104a9610aa3565b9050428160060154036104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e8906131fb565b60405180910390fd5b6104f9610ad0565b61050586868686610b6b565b915050949350505050565b61059361052363b1c9fbc160e01b610988565b63b1c9fbc160e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b50565b600073db5d94b8ed491b058f3e74d029775a14477cf7fa905090565b60006106426105c763360398a360e01b610988565b63360398a360e01b846040516024016105e09190612e20565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b806020019051810190610655919061315c565b9050919050565b6106698585858585610fb3565b5050505050565b610678610ad0565b610686868686868686611403565b505050505050565b606060005b60208160ff161080156106e55750600060f81b838260ff16602081106106bc576106bb61321b565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156106fd5780806106f590613286565b915050610693565b60008160ff1667ffffffffffffffff81111561071c5761071b6124d2565b5b6040519080825280601f01601f19166020018201604052801561074e5781602001600182028036833780820191505090505b509050600091505b60208260ff161080156107a85750600060f81b848360ff166020811061077f5761077e61321b565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561081f57838260ff16602081106107c3576107c261321b565b5b1a60f81b818360ff16815181106107dd576107dc61321b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818061081790613286565b925050610756565b8092505050919050565b610831612480565b6108bf61084463a3aa8d1e60e01b610988565b63a3aa8d1e60e01b8460405160240161085d9190613019565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b8060200190518101906108d29190613493565b9050919050565b60008082905060008151036108f4576000801b9150506108fd565b60208301519150505b919050565b61098561091563e017e12560e01b610988565b63e017e12560e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b50565b6000610992611927565b73ffffffffffffffffffffffffffffffffffffffff16630d741577836040518263ffffffff1660e01b81526004016109ca9190613517565b602060405180830381865afa1580156109e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0b919061355e565b9050919050565b60606000610a1f83611943565b90506000808573ffffffffffffffffffffffffffffffffffffffff1683604051610a4991906135d2565b600060405180830381855af49150503d8060008114610a84576040519150601f19603f3d011682016040523d82523d6000602084013e610a89565b606091505b5091509150610a9882826119fd565b935050505092915050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b610ad8611afd565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b609061365b565b60405180910390fd5b565b6060610b75610510565b6000610b82866001611b2a565b90506000610b91866000611b2a565b9050848273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bcd91906128a9565b602060405180830381865afa158015610bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0e919061315c565b1015610c4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c46906136c7565b60405180910390fd5b610c81610c5a610596565b868473ffffffffffffffffffffffffffffffffffffffff16611bb79092919063ffffffff16565b6000610c8b610596565b905060008173ffffffffffffffffffffffffffffffffffffffff1663fe02915685858a8a6040518563ffffffff1660e01b8152600401610cce94939291906136e7565b6000604051808303816000875af1158015610ced573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d169190613113565b90506000610d22611ced565b905060008173ffffffffffffffffffffffffffffffffffffffff166325eb876f8b60006040518363ffffffff1660e01b8152600401610d62929190613747565b602060405180830381865afa158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da3919061355e565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610de091906128a9565b602060405180830381865afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e21919061315c565b1115610e3257610e318a82611d09565b5b60008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e6d91906128a9565b602060405180830381865afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae919061315c565b03610ebd57610ebc8b611ddb565b5b898b3373ffffffffffffffffffffffffffffffffffffffff167f4cb7ea834525f7e7be14143ffc68be9c6735559e936d23502fff335d39a2e8e286600081518110610f0b57610f0a61321b565b5b60200260200101518760018951610f229190613770565b81518110610f3357610f3261321b565b5b602002602001015142604051610f4b939291906137a4565b60405180910390a4829650505050505050610f64611df9565b610fa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9a9061384d565b60405180910390fd5b610fab610902565b949350505050565b610fbb610510565b6000610fc5611df9565b90508015610fda57610fd5610ad0565b61109b565b610fe2611927565b73ffffffffffffffffffffffffffffffffffffffff1663e319fccc336040518263ffffffff1660e01b815260040161101a91906128a9565b602060405180830381865afa158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b9190613899565b61109a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109190613938565b60405180910390fd5b5b60006110a8876001611b2a565b905060006110b7876001611b2a565b905060006110c3610596565b905060008173ffffffffffffffffffffffffffffffffffffffff1663e6a4390585856040518363ffffffff1660e01b8152600401611102929190613958565b6020604051808303816000875af1158015611121573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611145919061355e565b90506111ca888273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161118491906128a9565b602060405180830381865afa1580156111a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c5919061315c565b611e96565b97506111fe6111d7610596565b898373ffffffffffffffffffffffffffffffffffffffff16611bb79092919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e2dc85dc87878d8d8d6040518663ffffffff1660e01b8152600401611242959493929190613981565b60408051808303816000875af1158015611260573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128491906139d4565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112c391906128a9565b602060405180830381865afa1580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611304919061315c565b0361131c5761131b6113168d8d611eaf565b611ddb565b5b6113268c87611d09565b6113308b86611d09565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f60d6d04a69b63b07bc4612079adf2399fcc2b9da68fe609fe66ffbe16fca76f48e8e8e87874260405161139796959493929190613a14565b60405180910390a350505050505080156113f3576113b3611df9565b6113f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e990613ac1565b60405180910390fd5b5b506113fc610902565b5050505050565b61140b610510565b6000611418876000611b2a565b90506000611427876000611b2a565b9050858273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161146391906128a9565b602060405180830381865afa158015611480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a4919061315c565b10156114e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dc90613b2d565b60405180910390fd5b848173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161151f91906128a9565b602060405180830381865afa15801561153c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611560919061315c565b10156115a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159890613b99565b60405180910390fd5b6115d36115ac610596565b878473ffffffffffffffffffffffffffffffffffffffff16611bb79092919063ffffffff16565b6116056115de610596565b868373ffffffffffffffffffffffffffffffffffffffff16611bb79092919063ffffffff16565b600061160f610596565b90506000808273ffffffffffffffffffffffffffffffffffffffff16633351733f86868c8c8c8c6040518763ffffffff1660e01b815260040161165796959493929190613bb9565b6080604051808303816000875af1158015611676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169a9190613c1a565b809450819b50829c508395505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116e591906128a9565b602060405180830381865afa158015611702573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611726919061315c565b11156117465760006117388c8c611eaf565b90506117448184611d09565b505b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161178191906128a9565b602060405180830381865afa15801561179e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c2919061315c565b036117d1576117d08b611ddb565b5b60008473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161180c91906128a9565b602060405180830381865afa158015611829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184d919061315c565b0361185c5761185b8a611ddb565b5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fee6437c12e66102495172228742a18765355debe1f046d82bcd14f8dc66f11678d8d858e8e426040516118c396959493929190613a14565b60405180910390a350505050506118d8611df9565b611917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190e9061384d565b60405180910390fd5b61191f610902565b505050505050565b6000732916b3bf7c35bd21e63d01c93c62fb0d4994e56d905090565b60606000825190506000611955611f1e565b9050600081836119659190613c81565b905060003690508211156119a5576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060604051905081815285602001848101826020015b818310156119d857825181526020830192506020810190506119bb565b5050508283360385602001830137602084840182010160405280945050505050919050565b606082611af4576000825103611a3f576040517f567fe27a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208301517f08c379a00000000000000000000000000000000000000000000000000000000081149150508015611ab7576060604484019050806040517f0f7e8278000000000000000000000000000000000000000000000000000000008152600401611aae9190612c99565b60405180910390fd5b826040517ffd36fde3000000000000000000000000000000000000000000000000000000008152600401611aeb9190613cff565b60405180910390fd5b81905092915050565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b6000611b34611ced565b73ffffffffffffffffffffffffffffffffffffffff166325eb876f84846040518363ffffffff1660e01b8152600401611b6e929190613747565b602060405180830381865afa158015611b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baf919061355e565b905092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401611be9929190613d21565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611c3791906135d2565b6000604051808303816000865af19150503d8060008114611c74576040519150601f19603f3d011682016040523d82523d6000602084013e611c79565b606091505b5091509150818015611ca75750600081511480611ca6575080806020019051810190611ca59190613899565b5b5b611ce6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdd90613dbc565b60405180910390fd5b5050505050565b600073f3978209b7cff2b90100c6f87cec77de928ed58e905090565b60008203611d4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4390613e28565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611dbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db290613e94565b60405180910390fd5b6000611dc5611afd565b9050611dd5816004018484611f8e565b50505050565b6000611de5611afd565b9050611df48160040183611fc0565b505050565b6000611e7e611e0e635ce2395060e01b610988565b635ce2395060e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a12565b806020019051810190611e919190613899565b905090565b6000818310611ea55781611ea7565b825b905092915050565b6000806000838510611ec2578385611ec5565b84845b91509150611f14611edc611ed7611fd7565b61068e565b611ee58461068e565b611eee8461068e565b604051602001611f0093929190613f3c565b6040516020818303038152906040526108d9565b9250505092915050565b600080611f29611fff565b90506000611f3682612110565b61ffff169050600282611f499190613c81565b915060005b81811015611f85576000611f618461216c565b90508084611f6f9190613c81565b9350508080611f7d90613f9a565b915050611f4e565b50819250505090565b6000611fb784600001848473ffffffffffffffffffffffffffffffffffffffff1660001b6121ab565b90509392505050565b6000611fcf83600001836121e6565b905092915050565b60007f504e470000000000000000000000000000000000000000000000000000000000905090565b60008060203603356602ed57011e000081166602ed57011e00001491505080612054576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008036905060291115612094576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602936033590506000600960038362ffffff166120b19190613c81565b6120bb9190613c81565b905060003690506002826120cf9190613c81565b1115612107576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80935050505090565b6000806020836121209190613c81565b90506000369050811115612160576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80360335915050919050565b600080600061217a8461221f565b91509150604e81602061218d9190613c81565b836121989190613fe2565b6121a29190613c81565b92505050919050565b600081846002016000858152602001908152602001600020819055506121dd838560000161229590919063ffffffff16565b90509392505050565b60008260020160008381526020019081526020016000206000905561221782846000016122ac90919063ffffffff16565b905092915050565b60008060008060006041866122349190613c81565b9050600061225b6020836122489190613c81565b60003690506122c390919063ffffffff16565b9050803593506122756003826122c390919063ffffffff16565b9050803592508362ffffff1695508263ffffffff16945050505050915091565b60006122a483600001836122d9565b905092915050565b60006122bb8360000183612349565b905092915050565b600081836122d19190613770565b905092915050565b60006122e5838361245d565b61233e578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612343565b600090505b92915050565b6000808360010160008481526020019081526020016000205490506000811461245157600060018261237b9190613770565b90506000600186600001805490506123939190613770565b90508181146124025760008660000182815481106123b4576123b361321b565b5b90600052602060002001549050808760000184815481106123d8576123d761321b565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061241657612415614024565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612457565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61250a826124c1565b810181811067ffffffffffffffff82111715612529576125286124d2565b5b80604052505050565b600061253c6124a8565b90506125488282612501565b919050565b600067ffffffffffffffff821115612568576125676124d2565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6125918161257e565b811461259c57600080fd5b50565b6000813590506125ae81612588565b92915050565b60006125c76125c28461254d565b612532565b905080838252602082019050602084028301858111156125ea576125e9612579565b5b835b8181101561261357806125ff888261259f565b8452602084019350506020810190506125ec565b5050509392505050565b600082601f830112612632576126316124bc565b5b81356126428482602086016125b4565b91505092915050565b600060208284031215612661576126606124b2565b5b600082013567ffffffffffffffff81111561267f5761267e6124b7565b5b61268b8482850161261d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6126d3816126c0565b82525050565b60006126e583836126ca565b60208301905092915050565b6000602082019050919050565b600061270982612694565b612713818561269f565b935061271e836126b0565b8060005b8381101561274f57815161273688826126d9565b9750612741836126f1565b925050600181019050612722565b5085935050505092915050565b6000602082019050818103600083015261277681846126fe565b905092915050565b600060208284031215612794576127936124b2565b5b60006127a28482850161259f565b91505092915050565b6127b4816126c0565b82525050565b60006020820190506127cf60008301846127ab565b92915050565b6127de816126c0565b81146127e957600080fd5b50565b6000813590506127fb816127d5565b92915050565b6000806000806080858703121561281b5761281a6124b2565b5b60006128298782880161259f565b945050602061283a8782880161259f565b935050604061284b878288016127ec565b925050606061285c878288016127ec565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061289382612868565b9050919050565b6128a381612888565b82525050565b60006020820190506128be600083018461289a565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156128e9576128e86124d2565b5b602082029050602081019050919050565b6000604082840312156129105761290f6128c4565b5b61291a6040612532565b9050600061292a8482850161259f565b600083015250602061293e848285016127ec565b60208301525092915050565b600061295d612958846128ce565b612532565b905080838252602082019050604084028301858111156129805761297f612579565b5b835b818110156129a9578061299588826128fa565b845260208401935050604081019050612982565b5050509392505050565b600082601f8301126129c8576129c76124bc565b5b81356129d884826020860161294a565b91505092915050565b6000608082840312156129f7576129f66128c4565b5b612a016080612532565b9050600082013567ffffffffffffffff811115612a2157612a206128c9565b5b612a2d848285016129b3565b600083015250602082013567ffffffffffffffff811115612a5157612a506128c9565b5b612a5d848285016129b3565b602083015250604082013567ffffffffffffffff811115612a8157612a806128c9565b5b612a8d848285016129b3565b604083015250606082013567ffffffffffffffff811115612ab157612ab06128c9565b5b612abd848285016129b3565b60608301525092915050565b600060208284031215612adf57612ade6124b2565b5b600082013567ffffffffffffffff811115612afd57612afc6124b7565b5b612b09848285016129e1565b91505092915050565b600080600080600060a08688031215612b2e57612b2d6124b2565b5b6000612b3c8882890161259f565b9550506020612b4d8882890161259f565b9450506040612b5e888289016127ec565b9350506060612b6f888289016127ec565b9250506080612b80888289016127ec565b9150509295509295909350565b60008060008060008060c08789031215612baa57612ba96124b2565b5b6000612bb889828a0161259f565b9650506020612bc989828a0161259f565b9550506040612bda89828a016127ec565b9450506060612beb89828a016127ec565b9350506080612bfc89828a016127ec565b92505060a0612c0d89828a016127ec565b9150509295509295509295565b600081519050919050565b600082825260208201905092915050565b60005b83811015612c54578082015181840152602081019050612c39565b60008484015250505050565b6000612c6b82612c1a565b612c758185612c25565b9350612c85818560208601612c36565b612c8e816124c1565b840191505092915050565b60006020820190508181036000830152612cb38184612c60565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612cf08161257e565b82525050565b604082016000820151612d0c6000850182612ce7565b506020820151612d1f60208501826126ca565b50505050565b6000612d318383612cf6565b60408301905092915050565b6000602082019050919050565b6000612d5582612cbb565b612d5f8185612cc6565b9350612d6a83612cd7565b8060005b83811015612d9b578151612d828882612d25565b9750612d8d83612d3d565b925050600181019050612d6e565b5085935050505092915050565b60006080830160008301518482036000860152612dc58282612d4a565b91505060208301518482036020860152612ddf8282612d4a565b91505060408301518482036040860152612df98282612d4a565b91505060608301518482036060860152612e138282612d4a565b9150508091505092915050565b60006020820190508181036000830152612e3a8184612da8565b905092915050565b600080fd5b600067ffffffffffffffff821115612e6257612e616124d2565b5b612e6b826124c1565b9050602081019050919050565b82818337600083830152505050565b6000612e9a612e9584612e47565b612532565b905082815260208101848484011115612eb657612eb5612e42565b5b612ec1848285612e78565b509392505050565b600082601f830112612ede57612edd6124bc565b5b8135612eee848260208601612e87565b91505092915050565b600060208284031215612f0d57612f0c6124b2565b5b600082013567ffffffffffffffff811115612f2b57612f2a6124b7565b5b612f3784828501612ec9565b91505092915050565b612f498161257e565b82525050565b6000602082019050612f646000830184612f40565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612fa28383612ce7565b60208301905092915050565b6000602082019050919050565b6000612fc682612f6a565b612fd08185612f75565b9350612fdb83612f86565b8060005b8381101561300c578151612ff38882612f96565b9750612ffe83612fae565b925050600181019050612fdf565b5085935050505092915050565b600060208201905081810360008301526130338184612fbb565b905092915050565b600067ffffffffffffffff821115613056576130556124d2565b5b602082029050602081019050919050565b600081519050613076816127d5565b92915050565b600061308f61308a8461303b565b612532565b905080838252602082019050602084028301858111156130b2576130b1612579565b5b835b818110156130db57806130c78882613067565b8452602084019350506020810190506130b4565b5050509392505050565b600082601f8301126130fa576130f96124bc565b5b815161310a84826020860161307c565b91505092915050565b600060208284031215613129576131286124b2565b5b600082015167ffffffffffffffff811115613147576131466124b7565b5b613153848285016130e5565b91505092915050565b600060208284031215613172576131716124b2565b5b600061318084828501613067565b91505092915050565b7f426f72726f77696e67206d7573742068617070656e20696e2061207374616e6460008201527f616c6f6e65207472616e73616374696f6e000000000000000000000000000000602082015250565b60006131e5603183612c25565b91506131f082613189565b604082019050919050565b60006020820190508181036000830152613214816131d8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600061329182613279565b915060ff82036132a4576132a361324a565b5b600182019050919050565b6000815190506132be81612588565b92915050565b6000604082840312156132da576132d96128c4565b5b6132e46040612532565b905060006132f4848285016132af565b600083015250602061330884828501613067565b60208301525092915050565b6000613327613322846128ce565b612532565b9050808382526020820190506040840283018581111561334a57613349612579565b5b835b81811015613373578061335f88826132c4565b84526020840193505060408101905061334c565b5050509392505050565b600082601f830112613392576133916124bc565b5b81516133a2848260208601613314565b91505092915050565b6000608082840312156133c1576133c06128c4565b5b6133cb6080612532565b9050600082015167ffffffffffffffff8111156133eb576133ea6128c9565b5b6133f78482850161337d565b600083015250602082015167ffffffffffffffff81111561341b5761341a6128c9565b5b6134278482850161337d565b602083015250604082015167ffffffffffffffff81111561344b5761344a6128c9565b5b6134578482850161337d565b604083015250606082015167ffffffffffffffff81111561347b5761347a6128c9565b5b6134878482850161337d565b60608301525092915050565b6000602082840312156134a9576134a86124b2565b5b600082015167ffffffffffffffff8111156134c7576134c66124b7565b5b6134d3848285016133ab565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613511816134dc565b82525050565b600060208201905061352c6000830184613508565b92915050565b61353b81612888565b811461354657600080fd5b50565b60008151905061355881613532565b92915050565b600060208284031215613574576135736124b2565b5b600061358284828501613549565b91505092915050565b600081519050919050565b600081905092915050565b60006135ac8261358b565b6135b68185613596565b93506135c6818560208601612c36565b80840191505092915050565b60006135de82846135a1565b915081905092915050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613645602983612c25565b9150613650826135e9565b604082019050919050565b6000602082019050818103600083015261367481613638565b9050919050565b7f4e6f7420656e6f75676820746f6b656e20746f2073656c6c0000000000000000600082015250565b60006136b1601883612c25565b91506136bc8261367b565b602082019050919050565b600060208201905081810360008301526136e0816136a4565b9050919050565b60006080820190506136fc600083018761289a565b613709602083018661289a565b61371660408301856127ab565b61372360608301846127ab565b95945050505050565b60008115159050919050565b6137418161372c565b82525050565b600060408201905061375c6000830185612f40565b6137696020830184613738565b9392505050565b600061377b826126c0565b9150613786836126c0565b925082820390508181111561379e5761379d61324a565b5b92915050565b60006060820190506137b960008301866127ab565b6137c660208301856127ab565b6137d360408301846127ab565b949350505050565b7f54686520616374696f6e206d617920636175736520616e206163636f756e742060008201527f746f206265636f6d6520696e736f6c76656e7400000000000000000000000000602082015250565b6000613837603383612c25565b9150613842826137db565b604082019050919050565b600060208201905081810360008301526138668161382a565b9050919050565b6138768161372c565b811461388157600080fd5b50565b6000815190506138938161386d565b92915050565b6000602082840312156138af576138ae6124b2565b5b60006138bd84828501613884565b91505092915050565b7f4f6e6c792077686974656c6973746564206163636f756e74732063616e20706560008201527f72666f726d207468697320616374696f6e000000000000000000000000000000602082015250565b6000613922603183612c25565b915061392d826138c6565b604082019050919050565b6000602082019050818103600083015261395181613915565b9050919050565b600060408201905061396d600083018561289a565b61397a602083018461289a565b9392505050565b600060a082019050613996600083018861289a565b6139a3602083018761289a565b6139b060408301866127ab565b6139bd60608301856127ab565b6139ca60808301846127ab565b9695505050505050565b600080604083850312156139eb576139ea6124b2565b5b60006139f985828601613067565b9250506020613a0a85828601613067565b9150509250929050565b600060c082019050613a296000830189612f40565b613a366020830188612f40565b613a4360408301876127ab565b613a5060608301866127ab565b613a5d60808301856127ab565b613a6a60a08301846127ab565b979650505050505050565b7f4d757374207374617920736f6c76656e74000000000000000000000000000000600082015250565b6000613aab601183612c25565b9150613ab682613a75565b602082019050919050565b60006020820190508181036000830152613ada81613a9e565b9050919050565b7f4e6f7420656e6f75676820746f6b656e4120746f2070726f7669646500000000600082015250565b6000613b17601c83612c25565b9150613b2282613ae1565b602082019050919050565b60006020820190508181036000830152613b4681613b0a565b9050919050565b7f4e6f7420656e6f75676820746f6b656e4220746f2070726f7669646500000000600082015250565b6000613b83601c83612c25565b9150613b8e82613b4d565b602082019050919050565b60006020820190508181036000830152613bb281613b76565b9050919050565b600060c082019050613bce600083018961289a565b613bdb602083018861289a565b613be860408301876127ab565b613bf560608301866127ab565b613c0260808301856127ab565b613c0f60a08301846127ab565b979650505050505050565b60008060008060808587031215613c3457613c336124b2565b5b6000613c4287828801613549565b9450506020613c5387828801613067565b9350506040613c6487828801613067565b9250506060613c7587828801613067565b91505092959194509250565b6000613c8c826126c0565b9150613c97836126c0565b9250828201905080821115613caf57613cae61324a565b5b92915050565b600082825260208201905092915050565b6000613cd18261358b565b613cdb8185613cb5565b9350613ceb818560208601612c36565b613cf4816124c1565b840191505092915050565b60006020820190508181036000830152613d198184613cc6565b905092915050565b6000604082019050613d36600083018561289a565b613d4360208301846127ab565b9392505050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6000613da6602d83612c25565b9150613db182613d4a565b604082019050919050565b60006020820190508181036000830152613dd581613d99565b9050919050565b7f53796d626f6c2063616e6e6f7420626520656d70747900000000000000000000600082015250565b6000613e12601683612c25565b9150613e1d82613ddc565b602082019050919050565b60006020820190508181036000830152613e4181613e05565b9050919050565b7f496e76616c696420416464726573735a65726f00000000000000000000000000600082015250565b6000613e7e601383612c25565b9150613e8982613e48565b602082019050919050565b60006020820190508181036000830152613ead81613e71565b9050919050565b600081905092915050565b6000613eca82612c1a565b613ed48185613eb4565b9350613ee4818560208601612c36565b80840191505092915050565b7f5f00000000000000000000000000000000000000000000000000000000000000815250565b7f5f4c500000000000000000000000000000000000000000000000000000000000815250565b6000613f488286613ebf565b9150613f5382613ef0565b600182019150613f638285613ebf565b9150613f6e82613ef0565b600182019150613f7e8284613ebf565b9150613f8982613f16565b600382019150819050949350505050565b6000613fa5826126c0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613fd757613fd661324a565b5b600182019050919050565b6000613fed826126c0565b9150613ff8836126c0565b9250828202614006816126c0565b9150828204841483151761401d5761401c61324a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220b3a9f99db114c3028d8221c98cf0728fbc961a4ff2dd2e82e7b01286a0a07b7164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "swapPangolin(bytes32,bytes32,uint256,uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "_boughtAsset": "asset to be bought",
          "_exactSold": "exact amount of asset to be sold",
          "_minimumBought": "minimum amount of asset to be bought*",
          "_soldAsset": "asset to be sold"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getExchangeIntermediaryContract()": {
        "notice": "Returns address of UniswapV2-like exchange*"
      },
      "swapPangolin(bytes32,bytes32,uint256,uint256)": {
        "notice": "Swaps one asset to another"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6661,
        "contract": "contracts/facets/avalanche/PangolinDEXFacet.sol:PangolinDEXFacet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}