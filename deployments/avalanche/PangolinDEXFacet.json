{
  "address": "0xe29E0fC62dbACF84f6D14DfEA0C11FA44eed796E",
  "abi": [
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receviedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "ProxyCalldataFailedWithCustomError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ProxyCalldataFailedWithStringMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProxyCalldataFailedWithoutErrMsg",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "firstAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "secondAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "secondAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "firstAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "secondAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "secondAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "soldAsset",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "boughtAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maximumSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumBought",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "assetsToRepay",
          "type": "bytes32[]"
        }
      ],
      "name": "_getAllPricesForLiquidation",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "ownedAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "debtAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "stakedPositionsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "assetsToRepayPrices",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SolvencyFacetProd.CachedPrices",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getHealthRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "ownedAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "debtAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "stakedPositionsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "assetsToRepayPrices",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SolvencyFacetProd.CachedPrices",
          "name": "cachedPrices",
          "type": "tuple"
        }
      ],
      "name": "_getHealthRatioWithPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_firstAsset",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_secondAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityPangolin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_bytes32",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchangeIntermediaryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "symbol",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "symbols",
          "type": "bytes32[]"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_firstAsset",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_secondAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityPangolin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        }
      ],
      "name": "stringToBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_soldAsset",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_boughtAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_exactSold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumBought",
          "type": "uint256"
        }
      ],
      "name": "swapPangolin",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x02deb688ec29efc8aa703dd8fa1829495c4ed0f768beb68b52215a1988484a1b",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0xe29E0fC62dbACF84f6D14DfEA0C11FA44eed796E",
    "transactionIndex": 0,
    "gasUsed": "3420546",
    "logsBloom": "0x
    "blockHash": "0xd5948aa257883ac45076e5715451bc969e655540e123d0013a0f2acedbd0baec",
    "transactionHash": "0x02deb688ec29efc8aa703dd8fa1829495c4ed0f768beb68b52215a1988484a1b",
    "logs": [],
    "blockNumber": 23431241,
    "cumulativeGasUsed": "3420546",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "4189fcbc2823c20856a851b757c21c8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receviedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"ProxyCalldataFailedWithCustomError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ProxyCalldataFailedWithStringMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProxyCalldataFailedWithoutErrMsg\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"soldAsset\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"boughtAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximumSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"assetsToRepay\",\"type\":\"bytes32[]\"}],\"name\":\"_getAllPricesForLiquidation\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"assetsToRepayPrices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SolvencyFacetProd.CachedPrices\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getHealthRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"assetsToRepayPrices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SolvencyFacetProd.CachedPrices\",\"name\":\"cachedPrices\",\"type\":\"tuple\"}],\"name\":\"_getHealthRatioWithPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_firstAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"addLiquidityPangolin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeIntermediaryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"symbols\",\"type\":\"bytes32[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_firstAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityPangolin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_soldAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_boughtAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exactSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBought\",\"type\":\"uint256\"}],\"name\":\"swapPangolin\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swapPangolin(bytes32,bytes32,uint256,uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"_boughtAsset\":\"asset to be bought\",\"_exactSold\":\"exact amount of asset to be sold\",\"_minimumBought\":\"minimum amount of asset to be bought*\",\"_soldAsset\":\"asset to be sold\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExchangeIntermediaryContract()\":{\"notice\":\"Returns address of UniswapV2-like exchange*\"},\"swapPangolin(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Swaps one asset to another\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/avalanche/PangolinDEXFacet.sol\":\"PangolinDEXFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n  using SafeMath for uint256;\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSGINED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return dataPackagesCount;\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 calldataNegativeOffsetForDataPackage,\\n    uint256 defaultDataPointValueByteSize,\\n    uint256 dataPointIndex\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\\n    );\\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0xa96eced2521c637867c670f7f86f3a719e40f210d8a802124f322876bdf013df\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\n\\n/**\\n * @title The base contract for forwarding redstone payload to other contracts\\n * @author The Redstone Oracles team\\n */\\ncontract ProxyConnector is RedstoneConstants, CalldataExtractor {\\n  error ProxyCalldataFailedWithoutErrMsg();\\n  error ProxyCalldataFailedWithStringMessage(string message);\\n  error ProxyCalldataFailedWithCustomError(bytes result);\\n\\n  function proxyCalldata(\\n    address contractAddress,\\n    bytes memory encodedFunction,\\n    bool forwardValue\\n  ) internal returns (bytes memory) {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n\\n    (bool success, bytes memory result) =\\n      contractAddress.call{value: forwardValue ? msg.value : 0}(message);\\n\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyDelegateCalldata(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.delegatecall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyCalldataView(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.staticcall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function _prepareMessage(bytes memory encodedFunction) private pure returns (bytes memory) {\\n    uint256 encodedFunctionBytesCount = encodedFunction.length;\\n    uint256 redstonePayloadByteSize = _getRedstonePayloadByteSize();\\n    uint256 resultMessageByteSize = encodedFunctionBytesCount + redstonePayloadByteSize;\\n\\n    if (redstonePayloadByteSize > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n\\n    bytes memory message;\\n\\n    assembly {\\n      message := mload(FREE_MEMORY_PTR) // sets message pointer to first free place in memory\\n\\n      // Saving the byte size of the result message (it's a standard in EVM)\\n      mstore(message, resultMessageByteSize)\\n\\n      // Copying function and its arguments\\n      for {\\n        let from := add(BYTES_ARR_LEN_VAR_BS, encodedFunction)\\n        let fromEnd := add(from, encodedFunctionBytesCount)\\n        let to := add(BYTES_ARR_LEN_VAR_BS, message)\\n      } lt (from, fromEnd) {\\n        from := add(from, STANDARD_SLOT_BS)\\n        to := add(to, STANDARD_SLOT_BS)\\n      } {\\n        // Copying data from encodedFunction to message (32 bytes at a time)\\n        mstore(to, mload(from))\\n      }\\n\\n      // Copying redstone payload to the message bytes\\n      calldatacopy(\\n        add(message, add(BYTES_ARR_LEN_VAR_BS, encodedFunctionBytesCount)), // address\\n        sub(calldatasize(), redstonePayloadByteSize), // offset\\n        redstonePayloadByteSize // bytes length to copy\\n      )\\n\\n      // Updating free memory pointer\\n      mstore(\\n        FREE_MEMORY_PTR,\\n        add(\\n          add(message, add(redstonePayloadByteSize, encodedFunctionBytesCount)),\\n          BYTES_ARR_LEN_VAR_BS\\n        )\\n      )\\n    }\\n\\n    return message;\\n  }\\n\\n  function _getRedstonePayloadByteSize() private pure returns (uint256) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n\\n    return calldataNegativeOffset;\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) private pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n\\n  function _prepareReturnValue(bool success, bytes memory result)\\n    internal\\n    pure\\n    returns (bytes memory)\\n  {\\n    if (!success) {\\n\\n      if (result.length == 0) {\\n        revert ProxyCalldataFailedWithoutErrMsg();\\n      } else {\\n        bool isStringErrorMessage;\\n        assembly {\\n          let first32BytesOfResult := mload(add(result, BYTES_ARR_LEN_VAR_BS))\\n          isStringErrorMessage := eq(first32BytesOfResult, STRING_ERR_MESSAGE_MASK)\\n        }\\n\\n        if (isStringErrorMessage) {\\n          string memory receivedErrMsg;\\n          assembly {\\n            receivedErrMsg := add(result, REVERT_MSG_OFFSET)\\n          }\\n          revert ProxyCalldataFailedWithStringMessage(receivedErrMsg);\\n        } else {\\n          revert ProxyCalldataFailedWithCustomError(result);\\n        }\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x4630299916b145de0c392f390e77f75a7b1cec762bbd374f745abcdbcfdb5e8c\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSGINED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receviedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n}\\n\",\"keccak256\":\"0xc9a73986f5a12a28f74d98e8f028ca47c79909f317a38be02820e421d0723b30\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./RedstoneDefaultsLib.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\nimport \\\"../libs/BitmapLib.sol\\\";\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n/**\\n * @title The base contract with the main Redstone logic\\n * @author The Redstone Oracles team\\n * @dev Do not use this contract directly in consumer contracts, take a\\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\\n */\\nabstract contract RedstoneConsumerBase is CalldataExtractor {\\n  using SafeMath for uint256;\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return a unique index for a given signer address if the signer\\n   * is authorised, otherwise it should revert\\n   * @param receviedSigner The address of a signer, recovered from ECDSA signature\\n   * @return Unique index for a signer in the range [0..255]\\n   */\\n  function getAuthorisedSignerIndex(address receviedSigner) public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overriden by the child consumer contract.\\n   * It should validate the timestamp against the current time (block.timestamp)\\n   * It should revert with a helpful message if the timestamp is not valid\\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n  }\\n\\n  /**\\n   * @dev This function should be overriden by the child consumer contract.\\n   * @return The minimum required value of unique authorised signers\\n   */\\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev This function may be overriden by the child consumer contract.\\n   * It should aggregate values from different signers to a single uint value.\\n   * By default, it calculates the median value\\n   * @param values An array of uint256 values from different signers\\n   * @return Result of the aggregation in the form of a single number\\n   */\\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\\n    return RedstoneDefaultsLib.aggregateValues(values);\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  /**\\n   * @dev This is an internal helpful function for secure extraction oracle values\\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\\n   * validation, and aggregating values from different authorised signers into a\\n   * single numeric value. If any of the required conditions (e.g. too old timestamp or\\n   * insufficient number of autorised signers) do not match, the function will revert.\\n   *\\n   * Note! You should not call this function in a consumer contract. You can use\\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n   *\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in dataFeedIds array\\n   */\\n  function _securelyExtractOracleValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    // Initializing helpful variables and allocating memory\\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n    for (uint256 i = 0; i < dataFeedIds.length; i++) {\\n      // The line below is commented because newly allocated arrays are filled with zeros\\n      // But we left it for better readability\\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\\n    }\\n\\n    // Extracting the number of data packages from calldata\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n\\n    // Saving current free memory pointer\\n    uint256 freeMemPtr;\\n    assembly {\\n      freeMemPtr := mload(FREE_MEMORY_PTR)\\n    }\\n\\n    // Data packages extraction in a loop\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      // Extract data package details and update calldata offset\\n      uint256 dataPackageByteSize = _extractDataPackage(\\n        dataFeedIds,\\n        uniqueSignerCountForDataFeedIds,\\n        signersBitmapForDataFeedIds,\\n        valuesForDataFeeds,\\n        calldataNegativeOffset\\n      );\\n      calldataNegativeOffset += dataPackageByteSize;\\n\\n      // Shifting memory pointer back to the \\\"safe\\\" value\\n      assembly {\\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\\n      }\\n    }\\n\\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n    return _getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which extracts data for a data package based\\n   * on the given negative calldata offset, verifies them, and in the case of successful\\n   * verification updates the corresponding data package values in memory\\n   *\\n   * @param dataFeedIds an array of unique data feed identifiers\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   * @param signersBitmapForDataFeedIds an array of sginers bitmaps for data feeds\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param calldataNegativeOffset negative calldata offset for the given data package\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _extractDataPackage(\\n    bytes32[] memory dataFeedIds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds,\\n    uint256[] memory signersBitmapForDataFeedIds,\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256 calldataNegativeOffset\\n  ) private view returns (uint256) {\\n    uint256 signerIndex;\\n\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    // We use scopes to resolve problem with too deep stack\\n    {\\n      uint48 extractedTimestamp;\\n      address signerAddress;\\n      bytes32 signedHash;\\n      bytes memory signedMessage;\\n      uint256 signedMessageBytesCount;\\n\\n      signedMessageBytesCount = dataPointsCount.mul(eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS;\\n\\n      uint256 timestampCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n\\n      uint256 signedMessageCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\\n\\n      assembly {\\n        // Extracting the signed message\\n        signedMessage := extractBytesFromCalldata(\\n          signedMessageCalldataOffset,\\n          signedMessageBytesCount\\n        )\\n\\n        // Hashing the signed message\\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n        // Extracting timestamp\\n        extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n        function initByteArray(bytesCount) -> ptr {\\n          ptr := mload(FREE_MEMORY_PTR)\\n          mstore(ptr, bytesCount)\\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n        }\\n\\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n          let extractedBytesStartPtr := initByteArray(bytesCount)\\n          calldatacopy(\\n            extractedBytesStartPtr,\\n            offset,\\n            bytesCount\\n          )\\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n        }\\n      }\\n\\n      // Validating timestamp\\n      validateTimestamp(extractedTimestamp);\\n\\n      // Verifying the off-chain signature against on-chain hashed data\\n      signerAddress = SignatureLib.recoverSignerAddress(\\n        signedHash,\\n        calldataNegativeOffset + SIG_BS\\n      );\\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\\n    }\\n\\n    // Updating helpful arrays\\n    {\\n      bytes32 dataPointDataFeedId;\\n      uint256 dataPointValue;\\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount; dataPointIndex++) {\\n        // Extracting data feed id and value for the current data point\\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n          calldataNegativeOffset,\\n          eachDataPointValueByteSize,\\n          dataPointIndex\\n        );\\n\\n        for (\\n          uint256 dataFeedIdIndex = 0;\\n          dataFeedIdIndex < dataFeedIds.length;\\n          dataFeedIdIndex++\\n        ) {\\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n            if (\\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n            ) {\\n              // Increase unique signer counter\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n              // Add new value\\n              valuesForDataFeeds[dataFeedIdIndex][\\n                uniqueSignerCountForDataFeedIds[dataFeedIdIndex] - 1\\n              ] = dataPointValue;\\n\\n              // Update signers bitmap\\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                bitmapSignersForDataFeedId,\\n                signerIndex\\n              );\\n            }\\n\\n            // Breaking, as there couldn't be several indexes for the same feed ID\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Return total data package byte size\\n    return\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS +\\n      (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) *\\n      dataPointsCount;\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which aggregates values from different\\n   * authorised signers for the given arrays of values for each data feed\\n   *\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _getAggregatedValues(\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds\\n  ) private view returns (uint256[] memory) {\\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n        revert InsufficientNumberOfUniqueSigners(\\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n          uniqueSignersThreshold);\\n      }\\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n    }\\n\\n    return aggregatedValues;\\n  }\\n}\\n\",\"keccak256\":\"0x202fada6c6efd72d2c57574f52ca1af65149c926b0e99a53503be3af6ad1864c\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConsumerBase.sol\\\";\\n\\n/**\\n * @title The base contract for Redstone consumers' contracts that allows to\\n * securely calculate numeric redstone oracle values\\n * @author The Redstone Oracles team\\n * @dev This contract can extend other contracts to allow them\\n * securely fetch Redstone oracle data from transactions calldata\\n */\\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract an\\n   * oracle value for a given data feed id. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n   * @return Extracted and verified numeric oracle value for the given data feed id\\n   */\\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    bytes32[] memory dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = dataFeedId;\\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array\\n   */\\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n  {\\n    return _securelyExtractOracleValuesFromTxMsg(dataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\\n   * only difference that it allows to request oracle data for an array of data feeds\\n   * that may contain duplicates\\n   * \\n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIdsWithDuplicates array\\n   */\\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\\n    // Building an array without duplicates\\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\\n    bool alreadyIncluded;\\n    uint256 uniqueDataFeedIdsCount = 0;\\n\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\\n      alreadyIncluded = false;\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < uniqueDataFeedIdsCount; indexWithoutDup++) {\\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\\n          alreadyIncluded = true;\\n          break;\\n        }\\n      }\\n\\n      // Adding if not included\\n      if (!alreadyIncluded) {\\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\\n        uniqueDataFeedIdsCount++;\\n      }\\n    }\\n\\n    // Overriding dataFeedIdsWithoutDuplicates.length\\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\\n    assembly {\\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\\n    }\\n\\n    // Requesting oracle values (without duplicates)\\n    uint256[] memory valuesWithoutDuplicates = getOracleNumericValuesFromTxMsg(dataFeedIdsWithoutDuplicates);\\n\\n    // Preparing result values array\\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\\n          break;\\n        }\\n      }\\n    }\\n\\n    return valuesWithDuplicates;\\n  }\\n}\\n\",\"keccak256\":\"0xe8e70ed8bb3efc527dccaf5919587c7ff3980836256d7d8db8f632721a3cf956\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n\\n    if (block.timestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n      }\\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0xe39ee1618d15944d6f44918f02f71d0d604fb678dbdbf36ca1eeecc86858ff25\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/RedstoneConsumerNumericBase.sol\\\";\\n\\ncontract AvalancheDataServiceConsumerBase is RedstoneConsumerNumericBase {\\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n    return 3;\\n  }\\n\\n  function getAuthorisedSignerIndex(\\n    address signerAddress\\n  ) public view virtual override returns (uint8) {\\n    if (signerAddress == 0x1eA62d73EdF8AC05DfceA1A34b9796E937a29EfF) {\\n      return 0;\\n    } else if (signerAddress == 0x2c59617248994D12816EE1Fa77CE0a64eEB456BF) {\\n      return 1;\\n    } else if (signerAddress == 0x12470f7aBA85c8b81D63137DD5925D6EE114952b) {\\n      return 2;\\n    } else if (signerAddress == 0x109B4a318A4F5ddcbCA6349B45f881B4137deaFB) {\\n      return 3;\\n    } else if (signerAddress == 0x83cbA8c619fb629b81A65C2e67fE15cf3E3C9747) {\\n      return 4;\\n    } else {\\n      revert SignerNotAuthorised(signerAddress);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x816269b87f6d7fdbac50710b9bd7ecbea0afc660ed4ea8a4441d5f3d163f9e61\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9762198cae997eebad303a7a43a6133908646ed30811285085c9ea9cbd2a5e07\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = SafeMath.add(arr[middleIndex - 1], arr[middleIndex]);\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9b1a3a433a450cbe90e85801ddf891ab26deeda02d45a2d67e24443cdc33e764\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    return ecrecover(signedHash, v, r, s);\\n  }\\n}\\n\",\"keccak256\":\"0x06037b440e5eab52d550718543c463da00ac7231f303a503178ad5191e154310\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/DiamondHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 97d6cc3cb60bfd6feda4ea784b13bf0e7daac710;\\npragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/IDiamondBeacon.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"./lib/avalanche/DeploymentConstants.sol\\\";\\n\\n/**\\n * DiamondHelper\\n * Helper methods\\n **/\\ncontract DiamondHelper {\\n    function _getFacetAddress(bytes4 methodSelector) internal view returns (address solvencyFacetAddress) {\\n        solvencyFacetAddress = IDiamondBeacon(payable(DeploymentConstants.getDiamondAddress())).implementation(methodSelector);\\n    }\\n}\",\"keccak256\":\"0x3836f18acae7434ca2528eb5ddafc6cf76c237e1bb3ba458bdf859fb98c0582e\",\"license\":\"BUSL-1.1\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * The interest rates calculation is delegated to an external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n    using TransferHelper for address payable;\\n\\n    uint256 public constant MAX_POOL_UTILISATION_FOR_BORROWING = 0.90e18;\\n    uint256 public totalSupplyCap;\\n\\n    mapping(address => mapping(address => uint256)) private _allowed;\\n    mapping(address => uint256) internal _deposited;\\n\\n    mapping(address => uint256) public borrowed;\\n\\n    IRatesCalculator public ratesCalculator;\\n    IBorrowersRegistry public borrowersRegistry;\\n    IPoolRewarder public poolRewarder;\\n\\n    IIndex public depositIndex;\\n    IIndex public borrowIndex;\\n\\n    address payable public tokenAddress;\\n\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        ratesCalculator = ratesCalculator_;\\n        depositIndex = depositIndex_;\\n        borrowIndex = borrowIndex_;\\n        poolRewarder = poolRewarder_;\\n        tokenAddress = tokenAddress_;\\n        totalSupplyCap = _totalSupplyCap;\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _updateRates();\\n    }\\n\\n    /* ========== SETTERS ========== */\\n\\n    /**\\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _newTotalSupplyCap new deposit cap\\n    **/\\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\\n        totalSupplyCap = _newTotalSupplyCap;\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\\n        poolRewarder = _poolRewarder;\\n\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new rate calculator.\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev ratesCalculator the address of rates calculator\\n     **/\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n        // setting address(0) ratesCalculator_ freezes the pool\\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\\n        ratesCalculator = ratesCalculator_;\\n        if (address(ratesCalculator_) != address(0)) {\\n            _updateRates();\\n        }\\n\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new borrowers registry contract.\\n     * The borrowers registry decides if an account can borrow funds.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev borrowersRegistry the address of borrowers registry\\n     **/\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(_deposited[msg.sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[msg.sender]);\\n\\n        // (this is verified in \\\"require\\\" above)\\n        unchecked {\\n            _deposited[msg.sender] -= amount;\\n        }\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, msg.sender);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 currentAllowance = _allowed[msg.sender][spender];\\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\\n\\n        uint256 newAllowance = currentAllowance - subtractedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        _allowed[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\\n\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        _accumulateDepositInterest(sender);\\n\\n        if(_deposited[sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[sender]);\\n\\n\\n        _deposited[sender] -= amount;\\n        _allowed[sender][msg.sender] -= amount;\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * Deposits the amount\\n     * It updates user deposited balance, total deposited and rates\\n     **/\\n    function deposit(uint256 _amount) public virtual nonReentrant {\\n        if(_amount == 0) revert ZeroDepositAmount();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(totalSupplyCap != 0){\\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\\n        }\\n\\n        _transferToPool(msg.sender, _amount);\\n\\n        _mint(msg.sender, _amount);\\n        _deposited[address(this)] += _amount;\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.stakeFor(_amount, msg.sender);\\n        }\\n\\n        emit Deposit(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\n        tokenAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * Withdraws selected amount from the user deposits\\n     * @dev _amount the amount to be withdrawn\\n     **/\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[address(this)] -= _amount;\\n        }\\n        _burn(msg.sender, _amount);\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\n        }\\n\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Borrows the specified amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev _amount the amount to be borrowed\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        borrowed[msg.sender] += _amount;\\n        borrowed[address(this)] += _amount;\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Repays the amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function repay(uint256 amount) external nonReentrant {\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\\n        _transferToPool(msg.sender, amount);\\n\\n        borrowed[msg.sender] -= amount;\\n        borrowed[address(this)] -= amount;\\n\\n        _updateRates();\\n\\n        emit Repayment(msg.sender, amount, block.timestamp);\\n    }\\n\\n    /* =========\\n\\n\\n    /**\\n     * Returns the current borrowed amount for the given user\\n     * The value includes the interest rates owned at the current moment\\n     * @dev _user the address of queried borrower\\n    **/\\n    function getBorrowed(address _user) public view returns (uint256) {\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n\\n    function totalBorrowed() public view returns (uint256) {\\n        return getBorrowed(address(this));\\n    }\\n\\n\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\n    function getRewards() external {\\n        poolRewarder.getRewardsFor(msg.sender);\\n    }\\n\\n    // Returns number of pending rewards for msg.sender\\n    function checkRewards() external view returns (uint256) {\\n        return poolRewarder.earned(msg.sender);\\n    }\\n\\n    /**\\n     * Returns the current deposited amount for the given user\\n     * The value includes the interest rates earned at the current moment\\n     * @dev _user the address of queried depositor\\n     **/\\n    function balanceOf(address user) public view override returns (uint256) {\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\n    }\\n\\n    /**\\n     * Returns the current interest rate for deposits\\n     **/\\n    function getDepositRate() public view returns (uint256) {\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns the current interest rate for borrowings\\n     **/\\n    function getBorrowingRate() public view returns (uint256) {\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n     **/\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\n\\n        if(amount > balance) revert InsufficientPoolFunds();\\n        if(surplus < amount) revert InsufficientSurplus();\\n\\n        _transferFromPool(account, amount);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _mint(address to, uint256 amount) internal {\\n        if(to == address(0)) revert MintToAddressZero();\\n\\n        _deposited[to] += amount;\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\\n\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[account] -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _updateRates() internal {\\n        uint256 _totalBorrowed = totalBorrowed();\\n        uint256 _totalSupply = totalSupply();\\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\n    }\\n\\n    function _accumulateDepositInterest(address user) internal {\\n        uint256 interest = balanceOf(user) - _deposited[user];\\n\\n        _mint(user, interest);\\n        _deposited[address(this)] = balanceOf(address(this));\\n\\n        emit InterestCollected(user, interest, block.timestamp);\\n\\n        depositIndex.updateUser(user);\\n        depositIndex.updateUser(address(this));\\n    }\\n\\n    function _accumulateBorrowingInterest(address user) internal {\\n        borrowed[user] = getBorrowed(user);\\n        borrowed[address(this)] = getBorrowed(address(this));\\n\\n        borrowIndex.updateUser(user);\\n        borrowIndex.updateUser(address(this));\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier canBorrow() {\\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\\n        _;\\n        if((totalBorrowed() * 1e18) / totalSupply() > MAX_POOL_UTILISATION_FOR_BORROWING) revert MaxPoolUtilisationBreached();\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after the user deposits funds\\n     * @param user the address performing the deposit\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user withdraws funds\\n     * @param user the address performing the withdrawal\\n     * @param value the amount withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user borrows funds\\n     * @param user the address that borrows\\n     * @param value the amount borrowed\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user repays debt\\n     * @param user the address that repays debt\\n     * @param value the amount repaid\\n     * @param timestamp of the repayment\\n     **/\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after accumulating deposit interest\\n     * @param user the address that the deposit interest is accumulated for\\n     * @param value the amount that interest is calculated from\\n     * @param timestamp of the interest accumulation\\n     **/\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing borrowers registry\\n    * @param registry an address of the newly set borrowers registry\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing rates calculator\\n    * @param calculator an address of the newly set rates calculator\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing pool rewarder\\n    * @param poolRewarder an address of the newly set pool rewarder\\n    * @param timestamp of the pool rewarder change\\n    **/\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\n\\n    /* ========== ERRORS ========== */\\n\\n    // Only authorized accounts may borrow\\n    error NotAuthorizedToBorrow();\\n\\n    // Borrowers registry is not configured\\n    error BorrowersRegistryNotConfigured();\\n\\n    // Pool is frozen\\n    error PoolFrozen();\\n\\n    // Not enough funds in the pool.\\n    error InsufficientPoolFunds();\\n\\n    // Insufficient pool surplus to cover the requested recover amount\\n    error InsufficientSurplus();\\n\\n    // Address (`target`) must be a contract\\n    // @param target target address that must be a contract\\n    error NotAContract(address target);\\n\\n    //  ERC20: Spender cannot be a zero address\\n    error SpenderZeroAddress();\\n\\n    //  ERC20: cannot transfer to the zero address\\n    error TransferToZeroAddress();\\n\\n    //  ERC20: cannot transfer to the pool address\\n    error TransferToPoolAddress();\\n\\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\\n    /// @param amount transfer amount\\n    /// @param balance available balance\\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\n\\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\\n    /// @param requested requested transfer amount\\n    /// @param allowance current allowance\\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\\n\\n    //  This deposit operation would result in a breach of the totalSupplyCap\\n    error TotalSupplyCapBreached();\\n\\n    // The deposit amount must be > 0\\n    error ZeroDepositAmount();\\n\\n    // ERC20: cannot mint to the zero address\\n    error MintToAddressZero();\\n\\n    // ERC20: burn amount exceeds current pool indexed balance\\n    error BurnAmountExceedsBalance();\\n\\n    // Trying to repay more than was borrowed\\n    error RepayingMoreThanWasBorrowed();\\n\\n    // MAX_POOL_UTILISATION_FOR_BORROWING was breached\\n    error MaxPoolUtilisationBreached();\\n}\",\"keccak256\":\"0x56683705568bc2c0dae5b2f61371474ebed2b5326a7ac8bdefaee4f0f3a82e65\",\"license\":\"BUSL-1.1\"},\"contracts/ReentrancyGuardKeccak.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified version of Openzeppelin (OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)) ReentrancyGuard\\n// contract that uses keccak slots instead of the standard storage layout.\\n\\nimport {DiamondStorageLib} from \\\"./lib/DiamondStorageLib.sol\\\";\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n */\\nabstract contract ReentrancyGuardKeccak {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        DiamondStorageLib.ReentrancyGuardStorage storage rgs = DiamondStorageLib.reentrancyGuardStorage();\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(rgs._status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        rgs._status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        rgs._status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xff292b8761ea7ade758ddc700e6e8b8727210285859db6a48d7bba1778ab7e1a\",\"license\":\"MIT\"},\"contracts/TokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\npragma solidity 0.8.17;\\n\\nimport \\\"./lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract TokenManager is OwnableUpgradeable {\\n    /**\\n     * For adding supported assets\\n     **/\\n    struct Asset {\\n        bytes32 asset;\\n        address assetAddress;\\n        uint256 debtCoverage;\\n    }\\n\\n    /**\\n     * For adding supported lending pools\\n     **/\\n    struct poolAsset {\\n        bytes32 asset;\\n        address poolAddress;\\n    }\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    uint256 private constant _NOT_SUPPORTED = 0;\\n    uint256 private constant _INACTIVE = 1;\\n    uint256 private constant _ACTIVE = 2;\\n\\n    // Stores an asset's bytes32 symbol representation to pool's address mapping\\n    EnumerableMap.Bytes32ToAddressMap private assetToPoolAddress;\\n    // Stores an asset's bytes32 symbol representation to asset's address mapping\\n    EnumerableMap.Bytes32ToAddressMap private assetToTokenAddress;\\n    mapping(address => bytes32) public tokenAddressToSymbol;\\n    mapping(address => uint256) private tokenPositionInList;\\n    // used for defining different leverage ratios for tokens\\n    mapping(address => uint256) public debtCoverage;\\n    address[] public supportedTokensList;\\n\\n    mapping(address => uint256) public tokenToStatus;\\n\\n    function initialize(Asset[] memory tokenAssets, poolAsset[] memory poolAssets) external initializer {\\n        __Ownable_init();\\n\\n        addTokenAssets(tokenAssets);\\n        addPoolAssets(poolAssets);\\n    }\\n\\n    function getAllPoolAssets() public view returns (bytes32[] memory result) {\\n        return assetToPoolAddress._inner._keys._inner._values;\\n    }\\n\\n    function getSupportedTokensAddresses() public view returns (address[] memory) {\\n        return supportedTokensList;\\n    }\\n\\n    function getAllTokenAssets() public view returns (bytes32[] memory result) {\\n        return assetToTokenAddress._inner._keys._inner._values;\\n    }\\n\\n    /**\\n    * Returns address of an asset\\n    **/\\n    function getAssetAddress(bytes32 _asset, bool allowInactive) public view returns (address) {\\n        (, address assetAddress) = assetToTokenAddress.tryGet(_asset);\\n        require(assetAddress != address(0), \\\"Asset not supported.\\\");\\n        if (!allowInactive) {\\n            require(tokenToStatus[assetAddress] == _ACTIVE, \\\"Asset inactive\\\");\\n        }\\n\\n        return assetAddress;\\n    }\\n\\n    /**\\n    * Returns address of an asset's lending pool\\n    **/\\n    function getPoolAddress(bytes32 _asset) public view returns (address) {\\n        (, address assetAddress) = assetToPoolAddress.tryGet(_asset);\\n        require(assetAddress != address(0), \\\"Pool asset not supported.\\\");\\n\\n        return assetAddress;\\n    }\\n\\n    function addPoolAssets(poolAsset[] memory poolAssets) public onlyOwner {\\n        for (uint256 i = 0; i < poolAssets.length; i++) {\\n            _addPoolAsset(poolAssets[i].asset, poolAssets[i].poolAddress);\\n        }\\n    }\\n\\n    function _addPoolAsset(bytes32 _asset, address _poolAddress) internal {\\n        require(Address.isContract(_poolAddress), \\\"TokenManager: Pool must be a contract\\\");\\n        require(!assetToPoolAddress.contains(_asset), \\\"Asset's pool already exists\\\");\\n        assetToPoolAddress.set(_asset, _poolAddress);\\n        emit PoolAssetAdded(msg.sender, _asset, _poolAddress, block.timestamp);\\n    }\\n\\n    function addTokenAssets(Asset[] memory tokenAssets) public onlyOwner {\\n        for (uint256 i = 0; i < tokenAssets.length; i++) {\\n            _addTokenAsset(tokenAssets[i].asset, tokenAssets[i].assetAddress, tokenAssets[i].debtCoverage);\\n        }\\n    }\\n\\n    function isTokenAssetActive(address token) external view returns(bool) {\\n        return tokenToStatus[token] == 2;\\n    }\\n\\n    function activateToken(address token) public onlyOwner {\\n        require(tokenToStatus[token] == _INACTIVE, \\\"Must be inactive\\\");\\n        tokenToStatus[token] = _ACTIVE;\\n        emit TokenAssetActivated(msg.sender, token, block.timestamp);\\n    }\\n\\n    function deactivateToken(address token) public onlyOwner {\\n        require(tokenToStatus[token] == _ACTIVE, \\\"Must be active\\\");\\n        tokenToStatus[token] = _INACTIVE;\\n        emit TokenAssetDeactivated(msg.sender, token, block.timestamp);\\n    }\\n\\n    function _addTokenAsset(bytes32 _asset, address _tokenAddress, uint256 _debtCoverage) internal {\\n        require(_asset != \\\"\\\", \\\"Cannot set an empty string asset.\\\");\\n        require(_tokenAddress != address(0), \\\"Cannot set an empty address.\\\");\\n        require(!assetToTokenAddress.contains(_asset), \\\"Asset's token already exists\\\");\\n        require(tokenAddressToSymbol[_tokenAddress] == 0, \\\"Asset address is already in use\\\");\\n        setDebtCoverage(_tokenAddress, _debtCoverage);\\n\\n        assetToTokenAddress.set(_asset, _tokenAddress);\\n        tokenAddressToSymbol[_tokenAddress] = _asset;\\n        tokenToStatus[_tokenAddress] = _ACTIVE;\\n\\n        supportedTokensList.push(_tokenAddress);\\n        tokenPositionInList[_tokenAddress] = supportedTokensList.length - 1;\\n\\n        emit TokenAssetAdded(msg.sender, _asset, _tokenAddress, block.timestamp);\\n    }\\n\\n    function _removeTokenFromList(address tokenToRemove) internal {\\n        // Move last address token to the `tokenToRemoveIndex` position (index of an asset that is being removed) in the address[] supportedTokensList\\n        // and update map(address=>uint256) tokenPostitionInList if the token is not already the last element\\n        uint256 tokenToRemoveIndex = tokenPositionInList[tokenToRemove];\\n        if (tokenToRemoveIndex != (supportedTokensList.length - 1)) {\\n            address currentLastToken = supportedTokensList[supportedTokensList.length - 1];\\n            tokenPositionInList[currentLastToken] = tokenToRemoveIndex;\\n            supportedTokensList[tokenToRemoveIndex] = currentLastToken;\\n        }\\n        // Remove last element - that is either the token that is being removed (if was already at the end)\\n        // or some other asset that at this point was already copied to the `index` positon\\n        supportedTokensList.pop();\\n        tokenPositionInList[tokenToRemove] = 0;\\n    }\\n\\n    function removeTokenAssets(bytes32[] memory _tokenAssets) public onlyOwner {\\n        for (uint256 i = 0; i < _tokenAssets.length; i++) {\\n            _removeTokenAsset(_tokenAssets[i]);\\n        }\\n    }\\n\\n    function _removeTokenAsset(bytes32 _tokenAsset) internal {\\n        address tokenAddress = getAssetAddress(_tokenAsset, true);\\n        EnumerableMap.remove(assetToTokenAddress, _tokenAsset);\\n        tokenAddressToSymbol[tokenAddress] = 0;\\n        tokenToStatus[tokenAddress] = _NOT_SUPPORTED;\\n        debtCoverage[tokenAddress] = 0;\\n        _removeTokenFromList(tokenAddress);\\n        emit TokenAssetRemoved(msg.sender, _tokenAsset, block.timestamp);\\n    }\\n\\n    function removePoolAssets(bytes32[] memory _poolAssets) public onlyOwner {\\n        for (uint256 i = 0; i < _poolAssets.length; i++) {\\n            _removePoolAsset(_poolAssets[i]);\\n        }\\n    }\\n\\n    function _removePoolAsset(bytes32 _poolAsset) internal {\\n        address poolAddress = getPoolAddress(_poolAsset);\\n        EnumerableMap.remove(assetToPoolAddress, _poolAsset);\\n        emit PoolAssetRemoved(msg.sender, _poolAsset, poolAddress, block.timestamp);\\n    }\\n\\n    function setDebtCoverage(address token, uint256 coverage) public onlyOwner {\\n        //LTV must be lower than 5\\n        require(coverage <= 0.833333333333333333e18, 'Debt coverage higher than maximum acceptable');\\n        debtCoverage[token] = coverage;\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n\\n    /**\\n     * @dev emitted after adding a token asset\\n     * @param performer an address of the wallet adding a token asset\\n     * @param tokenAsset token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of adding a token asset\\n     **/\\n    event TokenAssetAdded(address indexed performer, bytes32 indexed tokenAsset, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after activating a token asset\\n     * @param performer an address of the wallet activating a token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of activating a token asset\\n     **/\\n    event TokenAssetActivated(address indexed performer, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after deactivating a token asset\\n     * @param performer an address of the wallet deactivating a token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of deactivating a token asset\\n     **/\\n    event TokenAssetDeactivated(address indexed performer, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after removing a token asset\\n     * @param performer an address of the wallet removing a token asset\\n     * @param tokenAsset token asset\\n     * @param timestamp time a token asset removal\\n     **/\\n    event TokenAssetRemoved(address indexed performer, bytes32 indexed tokenAsset, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after adding a pool asset\\n     * @param performer an address of wallet adding the pool asset\\n     * @param poolAsset pool asset\\n     * @param poolAddress an address of the pool asset\\n     * @param timestamp time of the pool asset addition\\n     **/\\n    event PoolAssetAdded(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after removing a pool asset\\n     * @param performer an address of wallet removing the pool asset\\n     * @param poolAsset pool asset\\n     * @param poolAddress an address of the pool asset\\n     * @param timestamp time of a pool asset removal\\n     **/\\n    event PoolAssetRemoved(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0x1801e902ae85981b7c3dfc110b462fef68c923aec1ed0ae0abf281170542d7ab\",\"license\":\"BUSL-1.1\"},\"contracts/facets/SolvencyFacetProd.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\\\";\\nimport \\\"../TokenManager.sol\\\";\\nimport \\\"../Pool.sol\\\";\\nimport \\\"../DiamondHelper.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\n\\ncontract SolvencyFacetProd is AvalancheDataServiceConsumerBase, DiamondHelper {\\n    struct AssetPrice {\\n        bytes32 asset;\\n        uint256 price;\\n    }\\n\\n    // Struct used in the liquidation process to obtain necessary prices only once\\n    struct CachedPrices {\\n        AssetPrice[] ownedAssetsPrices;\\n        AssetPrice[] debtAssetsPrices;\\n        AssetPrice[] stakedPositionsPrices;\\n        AssetPrice[] assetsToRepayPrices;\\n    }\\n\\n    /**\\n      * Checks if the loan is solvent.\\n      * It means that the Health Ratio is greater than 1e18.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function isSolvent() public view returns (bool) {\\n        return getHealthRatio() >= 1e18;\\n    }\\n\\n    /**\\n      * Checks if the loan is solvent.\\n      * It means that the Health Ratio is greater than 1e18.\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n      * @param cachedPrices Struct containing arrays of Asset/Price structs used to calculate value of owned assets, debt and staked positions\\n    **/\\n    function isSolventWithPrices(CachedPrices memory cachedPrices) public view returns (bool) {\\n        return getHealthRatioWithPrices(cachedPrices) >= 1e18;\\n    }\\n\\n    /**\\n      * Returns an array of Asset/Price structs of staked positions.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getStakedPositionsPrices() public view returns(AssetPrice[] memory result) {\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n\\n        bytes32[] memory symbols = new bytes32[](positions.length);\\n        for(uint256 i=0; i<positions.length; i++) {\\n            symbols[i] = positions[i].symbol;\\n        }\\n\\n        uint256[] memory stakedPositionsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(symbols);\\n        result = new AssetPrice[](stakedPositionsPrices.length);\\n\\n        for(uint i; i<stakedPositionsPrices.length; i++){\\n            result[i] = AssetPrice({\\n                asset: symbols[i],\\n                price: stakedPositionsPrices[i]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns an array of bytes32[] symbols of debt (borrowable) assets.\\n    **/\\n    function getDebtAssets() public view returns(bytes32[] memory result) {\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        result = tokenManager.getAllPoolAssets();\\n    }\\n\\n    /**\\n      * Returns an array of Asset/Price structs of debt (borrowable) assets.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getDebtAssetsPrices() public view returns(AssetPrice[] memory result) {\\n        bytes32[] memory debtAssets = getDebtAssets();\\n\\n        uint256[] memory debtAssetsPrices = getOracleNumericValuesFromTxMsg(debtAssets);\\n        result = new AssetPrice[](debtAssetsPrices.length);\\n\\n        for(uint i; i<debtAssetsPrices.length; i++){\\n            result[i] = AssetPrice({\\n                asset: debtAssets[i],\\n                price: debtAssetsPrices[i]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getOwnedAssetsWithNativePrices() public view returns(AssetPrice[] memory result) {\\n        bytes32[] memory assetsEnriched = getOwnedAssetsWithNative();\\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(assetsEnriched);\\n\\n        result = new AssetPrice[](assetsEnriched.length);\\n\\n        for(uint i; i<assetsEnriched.length; i++){\\n            result[i] = AssetPrice({\\n                asset: assetsEnriched[i],\\n                price: prices[i]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns an array of bytes32[] symbols of staked positions.\\n    **/\\n    function getStakedAssets() internal view returns (bytes32[] memory result) {\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n        result = new bytes32[](positions.length);\\n        for(uint i; i<positions.length; i++) {\\n            result[i] = positions[i].symbol;\\n        }\\n    }\\n\\n    function copyToArray(bytes32[] memory target, bytes32[] memory source, uint256 offset, uint256 numberOfItems) pure internal {\\n        require(numberOfItems <= source.length, \\\"numberOfItems > target array length\\\");\\n        require(offset + numberOfItems <= target.length, \\\"offset + numberOfItems > target array length\\\");\\n\\n        for(uint i; i<numberOfItems; i++){\\n            target[i + offset] = source[i];\\n        }\\n    }\\n\\n    function copyToAssetPriceArray(AssetPrice[] memory target, bytes32[] memory sourceAssets, uint256[] memory sourcePrices, uint256 offset, uint256 numberOfItems) pure internal {\\n        require(numberOfItems <= sourceAssets.length, \\\"numberOfItems > sourceAssets array length\\\");\\n        require(numberOfItems <= sourcePrices.length, \\\"numberOfItems > sourcePrices array length\\\");\\n        require(offset + numberOfItems <= sourceAssets.length, \\\"offset + numberOfItems > sourceAssets array length\\\");\\n        require(offset + numberOfItems <= sourcePrices.length, \\\"offset + numberOfItems > sourcePrices array length\\\");\\n\\n        for(uint i; i<numberOfItems; i++){\\n            target[i] = AssetPrice({\\n                asset: sourceAssets[i+offset],\\n                price: sourcePrices[i+offset]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns CachedPrices struct consisting of Asset/Price arrays for ownedAssets, debtAssets, stakedPositions and assetsToRepay.\\n      * Used during the liquidation process in order to obtain all necessary prices from calldata only once.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public view returns (CachedPrices memory result) {\\n        bytes32[] memory ownedAssetsEnriched = getOwnedAssetsWithNative();\\n        bytes32[] memory debtAssets = getDebtAssets();\\n        bytes32[] memory stakedAssets = getStakedAssets();\\n\\n        bytes32[] memory allAssetsSymbols = new bytes32[](ownedAssetsEnriched.length + debtAssets.length + stakedAssets.length + assetsToRepay.length);\\n        uint256 offset;\\n\\n        // Populate allAssetsSymbols with owned assets symbols\\n        copyToArray(allAssetsSymbols, ownedAssetsEnriched, offset, ownedAssetsEnriched.length);\\n        offset += ownedAssetsEnriched.length;\\n\\n        // Populate allAssetsSymbols with debt assets symbols\\n        copyToArray(allAssetsSymbols, debtAssets, offset, debtAssets.length);\\n        offset += debtAssets.length;\\n\\n        // Populate allAssetsSymbols with staked assets symbols\\n        copyToArray(allAssetsSymbols, stakedAssets, offset, stakedAssets.length);\\n        offset += stakedAssets.length;\\n\\n        // Populate allAssetsSymbols with assets to repay symbols\\n        copyToArray(allAssetsSymbols, assetsToRepay, offset, assetsToRepay.length);\\n\\n        uint256[] memory allAssetsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(allAssetsSymbols);\\n\\n        offset = 0;\\n\\n        // Populate ownedAssetsPrices struct\\n        AssetPrice[] memory ownedAssetsPrices = new AssetPrice[](ownedAssetsEnriched.length);\\n        copyToAssetPriceArray(ownedAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, ownedAssetsEnriched.length);\\n        offset += ownedAssetsEnriched.length;\\n\\n        // Populate debtAssetsPrices struct\\n        AssetPrice[] memory debtAssetsPrices = new AssetPrice[](debtAssets.length);\\n        copyToAssetPriceArray(debtAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, debtAssets.length);\\n        offset += debtAssetsPrices.length;\\n\\n        // Populate stakedPositionsPrices struct\\n        AssetPrice[] memory stakedPositionsPrices = new AssetPrice[](stakedAssets.length);\\n        copyToAssetPriceArray(stakedPositionsPrices, allAssetsSymbols, allAssetsPrices, offset, stakedAssets.length);\\n        offset += stakedAssets.length;\\n\\n        // Populate assetsToRepayPrices struct\\n        // Stack too deep :F\\n        AssetPrice[] memory assetsToRepayPrices = new AssetPrice[](assetsToRepay.length);\\n        for(uint i=0; i<assetsToRepay.length; i++){\\n            assetsToRepayPrices[i] = AssetPrice({\\n            asset: allAssetsSymbols[i+offset],\\n            price: allAssetsPrices[i+offset]\\n            });\\n        }\\n\\n        result = CachedPrices({\\n        ownedAssetsPrices: ownedAssetsPrices,\\n        debtAssetsPrices: debtAssetsPrices,\\n        stakedPositionsPrices: stakedPositionsPrices,\\n        assetsToRepayPrices: assetsToRepayPrices\\n        });\\n    }\\n\\n    // Check whether there is enough debt-denominated tokens to fully repaid what was previously borrowed\\n    function canRepayDebtFully() external view returns(bool) {\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        bytes32[] memory poolAssets = tokenManager.getAllPoolAssets();\\n\\n        for(uint i; i< poolAssets.length; i++) {\\n            Pool pool = Pool(DeploymentConstants.getTokenManager().getPoolAddress(poolAssets[i]));\\n            IERC20 token = IERC20(pool.tokenAddress());\\n            if(token.balanceOf(address(this)) < pool.getBorrowed(address(this))) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValuesFromTxMsg() method.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getPrices(bytes32[] memory symbols) external view returns (uint256[] memory) {\\n        return getOracleNumericValuesFromTxMsg(symbols);\\n    }\\n\\n    /**\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValueFromTxMsg() method.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getPrice(bytes32 symbol) external view returns (uint256) {\\n        return getOracleNumericValueFromTxMsg(symbol);\\n    }\\n\\n    /**\\n      * Returns TotalWeightedValue of OwnedAssets in USD based on the supplied array of Asset/Price struct, tokenBalance and debtCoverage\\n    **/\\n    function _getTWVOwnedAssets(AssetPrice[] memory ownedAssetsPrices) internal view returns (uint256) {\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\n\\n        uint256 weightedValueOfTokens = ownedAssetsPrices[0].price * address(this).balance * tokenManager.debtCoverage(tokenManager.getAssetAddress(nativeTokenSymbol, true)) / (10 ** 26);\\n\\n        if (ownedAssetsPrices.length > 0) {\\n\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\n                weightedValueOfTokens = weightedValueOfTokens + (ownedAssetsPrices[i].price * token.balanceOf(address(this)) * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\\n            }\\n        }\\n        return weightedValueOfTokens;\\n    }\\n\\n    /**\\n      * Returns TotalWeightedValue of StakedPositions in USD based on the supplied array of Asset/Price struct, positionBalance and debtCoverage\\n    **/\\n    function _getTWVStakedPositions(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n\\n        uint256 weightedValueOfStaked;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\n\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\n\\n            if (success) {\\n                uint256 balance = abi.decode(result, (uint256));\\n\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\n\\n                weightedValueOfStaked += stakedPositionsPrices[i].price * balance * tokenManager.debtCoverage(positions[i].vault) / (10 ** token.decimals() * 10**8);\\n            }\\n        }\\n        return weightedValueOfStaked;\\n    }\\n\\n    function _getThresholdWeightedValueBase(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) internal view virtual returns (uint256) {\\n        return _getTWVOwnedAssets(ownedAssetsPrices) + _getTWVStakedPositions(stakedPositionsPrices);\\n    }\\n\\n    /**\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getThresholdWeightedValue() public view virtual returns (uint256) {\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\n    }\\n\\n    /**\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getThresholdWeightedValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\n    }\\n\\n\\n    /**\\n     * Returns the current debt denominated in USD\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getDebtBase(AssetPrice[] memory debtAssetsPrices) internal view returns (uint256){\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        uint256 debt;\\n\\n        for (uint256 i; i < debtAssetsPrices.length; i++) {\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(debtAssetsPrices[i].asset, true));\\n\\n            Pool pool = Pool(tokenManager.getPoolAddress(debtAssetsPrices[i].asset));\\n            //10**18 (wei in eth) / 10**8 (precision of oracle feed) = 10**10\\n            debt = debt + pool.getBorrowed(address(this)) * debtAssetsPrices[i].price * 10 ** 10\\n            / 10 ** token.decimals();\\n        }\\n\\n        return debt;\\n    }\\n\\n    /**\\n     * Returns the current debt denominated in USD\\n     * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getDebt() public view virtual returns (uint256) {\\n        AssetPrice[] memory debtAssetsPrices = getDebtAssetsPrices();\\n        return getDebtBase(debtAssetsPrices);\\n    }\\n\\n    /**\\n     * Returns the current debt denominated in USD\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getDebtWithPrices(AssetPrice[] memory debtAssetsPrices) public view virtual returns (uint256) {\\n        return getDebtBase(debtAssetsPrices);\\n    }\\n\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function _getTotalAssetsValueBase(AssetPrice[] memory ownedAssetsPrices) public view returns (uint256) {\\n        if (ownedAssetsPrices.length > 0) {\\n            TokenManager tokenManager = DeploymentConstants.getTokenManager();\\n\\n            uint256 total = address(this).balance * ownedAssetsPrices[0].price / 10 ** 8;\\n\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\n                uint256 assetBalance = token.balanceOf(address(this));\\n\\n                total = total + (ownedAssetsPrices[i].price * 10 ** 10 * assetBalance / (10 ** token.decimals()));\\n            }\\n            return total;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * @dev This function uses the redstone-evm-connector\\n     **/\\n    function getTotalAssetsValue() public view virtual returns (uint256) {\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getTotalAssetsValueWithPrices(AssetPrice[] memory ownedAssetsPrices) public view virtual returns (uint256) {\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\n    }\\n\\n    /**\\n      * Returns list of owned assets that always included NativeToken at index 0\\n    **/\\n    function getOwnedAssetsWithNative() public view returns(bytes32[] memory){\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\n\\n        // If account already owns the native token the use ownedAssets.length; Otherwise add one element to account for additional native token.\\n        uint256 numberOfAssets = DiamondStorageLib.hasAsset(nativeTokenSymbol) ? ownedAssets.length : ownedAssets.length + 1;\\n        bytes32[] memory assetsWithNative = new bytes32[](numberOfAssets);\\n\\n        uint256 lastUsedIndex;\\n        assetsWithNative[0] = nativeTokenSymbol; // First asset = NativeToken\\n\\n        for(uint i=0; i< ownedAssets.length; i++){\\n            if(ownedAssets[i] != nativeTokenSymbol){\\n                lastUsedIndex += 1;\\n                assetsWithNative[lastUsedIndex] = ownedAssets[i];\\n            }\\n        }\\n        return assetsWithNative;\\n    }\\n\\n    /**\\n     * Returns the current value of staked positions in USD.\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function _getStakedValueBase(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n\\n        uint256 usdValue;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\n\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\n\\n            if (success) {\\n                uint256 balance = abi.decode(result, (uint256));\\n\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\n\\n                usdValue += stakedPositionsPrices[i].price * 10 ** 10 * balance / (10 ** token.decimals());\\n            }\\n        }\\n\\n        return usdValue;\\n    }\\n\\n    /**\\n     * Returns the current value of staked positions in USD.\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getStakedValueWithPrices(AssetPrice[] memory stakedPositionsPrices) public view returns (uint256) {\\n        return _getStakedValueBase(stakedPositionsPrices);\\n    }\\n\\n    /**\\n     * Returns the current value of staked positions in USD.\\n     * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getStakedValue() public view virtual returns (uint256) {\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\n        return _getStakedValueBase(stakedPositionsPrices);\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getTotalValue() public view virtual returns (uint256) {\\n        return getTotalAssetsValue() + getStakedValue();\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getTotalValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\n        return getTotalAssetsValueWithPrices(ownedAssetsPrices) + getStakedValueWithPrices(stakedPositionsPrices);\\n    }\\n\\n    function getFullLoanStatus() public view returns (uint256[5] memory) {\\n        return [getTotalValue(), getDebt(), getThresholdWeightedValue(), getHealthRatio(), isSolvent() ? uint256(1) : uint256(0)];\\n    }\\n\\n    /**\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\n     * by current debt\\n     * @dev This function uses the redstone-evm-connector\\n     **/\\n    function getHealthRatio() public view virtual returns (uint256) {\\n        CachedPrices memory cachedPrices = getAllPricesForLiquidation(new bytes32[](0));\\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\n\\n        if (debt == 0) {\\n            return type(uint256).max;\\n        } else {\\n            return thresholdWeightedValue * 1e18 / debt;\\n        }\\n    }\\n\\n    /**\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\n     * by current debt\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n     **/\\n    function getHealthRatioWithPrices(CachedPrices memory cachedPrices) public view virtual returns (uint256) {\\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\n\\n        if (debt == 0) {\\n            return type(uint256).max;\\n        } else {\\n            return thresholdWeightedValue * 1e18 / debt;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe8d382f15a17738578b948e7ce7ef83d197dc2417b21ee5983535c991207a52c\",\"license\":\"BUSL-1.1\"},\"contracts/facets/UniswapV2DEXFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../ReentrancyGuardKeccak.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../lib/SolvencyMethods.sol\\\";\\nimport {DiamondStorageLib} from \\\"../lib/DiamondStorageLib.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\nimport \\\"../interfaces/IAssetsExchange.sol\\\";\\n\\ncontract UniswapV2DEXFacet is ReentrancyGuardKeccak, SolvencyMethods {\\n    using TransferHelper for address payable;\\n    using TransferHelper for address;\\n\\n    function getProtocolID() pure internal virtual returns (bytes32) {\\n        return \\\"\\\";\\n    }\\n\\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\\n        bytes memory tempEmptyStringTest = bytes(source);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n\\n    function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\\n        uint8 i = 0;\\n        while(i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    /**\\n    * Swaps one asset with another\\n    * @param _soldAsset asset to be sold\\n    * @param _boughtAsset asset to be bought\\n    * @param _exactSold exact amount of asset to be sold\\n    * @param _minimumBought minimum amount of asset to be bought\\n    **/\\n    function swapAssets(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) internal remainsSolvent returns (uint256[] memory) {\\n        IERC20Metadata soldToken = getERC20TokenInstance(_soldAsset, true);\\n        IERC20Metadata boughtToken = getERC20TokenInstance(_boughtAsset, false);\\n\\n        require(soldToken.balanceOf(address(this)) >= _exactSold, \\\"Not enough token to sell\\\");\\n        address(soldToken).safeTransfer(getExchangeIntermediaryContract(), _exactSold);\\n\\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\\n\\n        uint256[] memory amounts = exchange.swap(address(soldToken), address(boughtToken), _exactSold, _minimumBought);\\n\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        // Add asset to ownedAssets\\n        address boughtAssetAddress = tokenManager.getAssetAddress(_boughtAsset, false);\\n\\n        if (boughtToken.balanceOf(address(this)) > 0) {\\n            DiamondStorageLib.addOwnedAsset(_boughtAsset, boughtAssetAddress);\\n        }\\n\\n        // Remove asset from ownedAssets if the asset balance is 0 after the swap\\n        if (soldToken.balanceOf(address(this)) == 0) {\\n            DiamondStorageLib.removeOwnedAsset(_soldAsset);\\n        }\\n\\n        emit Swap(msg.sender, _soldAsset, _boughtAsset, amounts[0], amounts[amounts.length - 1], block.timestamp);\\n\\n        return amounts;\\n    }\\n\\n    /**\\n    * Adds liquidity\\n    **/\\n    function addLiquidity(bytes32 _assetA, bytes32 _assetB, uint amountA, uint amountB, uint amountAMin, uint amountBMin) internal remainsSolvent {\\n        IERC20Metadata tokenA = getERC20TokenInstance(_assetA, false);\\n        IERC20Metadata tokenB = getERC20TokenInstance(_assetB, false);\\n\\n        require(tokenA.balanceOf(address(this)) >= amountA, \\\"Not enough tokenA to provide\\\");\\n        require(tokenB.balanceOf(address(this)) >= amountB, \\\"Not enough tokenB to provide\\\");\\n\\n        address(tokenA).safeTransfer(getExchangeIntermediaryContract(), amountA);\\n        address(tokenB).safeTransfer(getExchangeIntermediaryContract(), amountB);\\n\\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\\n\\n        address lpTokenAddress;\\n        uint liquidity;\\n\\n        (lpTokenAddress, amountA, amountB, liquidity)\\n          = exchange.addLiquidity(address(tokenA), address(tokenB), amountA, amountB, amountAMin, amountBMin);\\n\\n        if (IERC20Metadata(lpTokenAddress).balanceOf(address(this)) > 0) {\\n            (bytes32 token0, bytes32 token1) = _assetA < _assetB ? (_assetA, _assetB) : (_assetB, _assetA);\\n            bytes32 lpToken = calculateLpTokenSymbol(token0, token1);\\n            DiamondStorageLib.addOwnedAsset(lpToken, lpTokenAddress);\\n        }\\n\\n        // Remove asset from ownedAssets if the asset balance is 0 after the LP\\n        if (tokenA.balanceOf(address(this)) == 0) {\\n            DiamondStorageLib.removeOwnedAsset(_assetA);\\n        }\\n\\n        if (tokenB.balanceOf(address(this)) == 0) {\\n            DiamondStorageLib.removeOwnedAsset(_assetB);\\n        }\\n\\n        emit AddLiquidity(msg.sender, lpTokenAddress, _assetA, _assetB, liquidity, amountA, amountB, block.timestamp);\\n    }\\n\\n    /**\\n    * Removes liquidity\\n    **/\\n    function removeLiquidity(bytes32 _assetA, bytes32 _assetB, uint liquidity, uint amountAMin, uint amountBMin) internal remainsSolvent {\\n        IERC20Metadata tokenA = getERC20TokenInstance(_assetA, true);\\n        IERC20Metadata tokenB = getERC20TokenInstance(_assetB, true);\\n\\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\\n\\n        address lpTokenAddress = exchange.getPair(address(tokenA), address(tokenB));\\n\\n        lpTokenAddress.safeTransfer(getExchangeIntermediaryContract(), liquidity);\\n\\n        (uint amountA, uint amountB) = exchange.removeLiquidity(address(tokenA), address(tokenB), liquidity, amountAMin, amountBMin);\\n\\n        // Remove asset from ownedAssets if the asset balance is 0 after the LP\\n        if (IERC20Metadata(lpTokenAddress).balanceOf(address(this)) == 0) {\\n            (bytes32 token0, bytes32 token1) = _assetA < _assetB ? (_assetA, _assetB) : (_assetB, _assetA);\\n            bytes32 lpToken = calculateLpTokenSymbol(token0, token1);\\n            DiamondStorageLib.removeOwnedAsset(lpToken);\\n        }\\n        DiamondStorageLib.addOwnedAsset(_assetA, address(tokenA));\\n        DiamondStorageLib.addOwnedAsset(_assetB, address(tokenB));\\n\\n        emit RemoveLiquidity(msg.sender, lpTokenAddress, _assetA, _assetB, liquidity, amountA, amountB, block.timestamp);\\n    }\\n\\n    function calculateLpTokenSymbol(bytes32 token0, bytes32 token1) internal pure returns (bytes32 name) {\\n        name = stringToBytes32(string.concat(\\n                bytes32ToString(getProtocolID()),\\n                '_',\\n                bytes32ToString(token0),\\n                '_',\\n                bytes32ToString(token1),\\n                '_LP'\\n            )\\n        );\\n    }\\n\\n    /**\\n     * Returns address of DeltaPrime intermediary contract of UniswapV2-like exchange\\n     **/\\n    //TO BE OVERRIDDEN\\n    function getExchangeIntermediaryContract() public virtual returns (address) {\\n        return address(0);\\n    }\\n\\n    modifier onlyOwner() {\\n        DiamondStorageLib.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    modifier noBorrowInTheSameBlock() {\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n        require(ds._lastBorrowTimestamp != block.timestamp, \\\"Borrowing must happen in a standalone transaction\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev emitted after a swap of assets\\n     * @param user the address of user making the purchase\\n     * @param soldAsset sold by the user\\n     * @param boughtAsset bought by the user\\n     * @param maximumSold maximum to be sold\\n     * @param minimumBought minimum to be bought\\n     * @param timestamp time of the swap\\n     **/\\n    event Swap(address indexed user, bytes32 indexed soldAsset, bytes32 indexed boughtAsset, uint256 maximumSold, uint256 minimumBought, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after providing liquidity\\n     * @param user the address of user providing liquidity\\n     * @param lpToken the address LP token\\n     * @param firstAsset first asset provided for liquidity\\n     * @param secondAsset second asset provided for liquidity\\n     * @param liquidity amount of liquidity (LP token) added\\n     * @param firstAmount amount of the first asset used\\n     * @param secondAmount amount of the second asset used\\n     * @param timestamp time of the transaction\\n     **/\\n    event AddLiquidity(address indexed user, address indexed lpToken, bytes32 firstAsset, bytes32 secondAsset, uint liquidity, uint firstAmount, uint secondAmount, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after removing liquidity\\n     * @param user the address of user providing liquidity\\n     * @param lpToken the address LP token\\n     * @param firstAsset first asset from LP position\\n     * @param secondAsset second asset from LP position\\n     * @param liquidity amount of liquidity (LP token) removed\\n     * @param firstAmount amount of the first asset obtained\\n     * @param secondAmount amount of the second asset obtained\\n     * @param timestamp time of the transaction\\n     **/\\n    event RemoveLiquidity(address indexed user, address indexed lpToken, bytes32 firstAsset, bytes32 secondAsset, uint liquidity, uint firstAmount, uint secondAmount, uint256 timestamp);\\n}\",\"keccak256\":\"0xd417472ecc946c2b5666824da049afb1ae959f1e9c013adc3906acb834884a44\",\"license\":\"BUSL-1.1\"},\"contracts/facets/avalanche/PangolinDEXFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"../UniswapV2DEXFacet.sol\\\";\\n\\ncontract PangolinDEXFacet is UniswapV2DEXFacet {\\n    function getProtocolID() pure internal override returns (bytes32) {\\n        return \\\"PNG\\\";\\n    }\\n\\n    /**\\n      * Swaps one asset to another\\n      * @dev This function uses the redstone-evm-connector\\n      * @param _soldAsset asset to be sold\\n      * @param _boughtAsset asset to be bought\\n      * @param _exactSold exact amount of asset to be sold\\n      * @param _minimumBought minimum amount of asset to be bought\\n    **/\\n    function swapPangolin(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) public noBorrowInTheSameBlock onlyOwner returns (uint256[] memory) {\\n        return swapAssets(_soldAsset, _boughtAsset, _exactSold, _minimumBought);\\n    }\\n\\n    function addLiquidityPangolin(bytes32 _firstAsset, bytes32 _secondAsset, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) public onlyOwner {\\n        addLiquidity(_firstAsset, _secondAsset, amountADesired, amountBDesired, amountAMin, amountBMin);\\n    }\\n\\n    function removeLiquidityPangolin(bytes32 _firstAsset, bytes32 _secondAsset, uint liquidity, uint amountAMin, uint amountBMin) public onlyOwner {\\n        removeLiquidity(_firstAsset, _secondAsset, liquidity, amountAMin, amountBMin);\\n    }\\n\\n    /**\\n     * Returns address of UniswapV2-like exchange\\n     **/\\n    function getExchangeIntermediaryContract() public override returns (address) {\\n        return 0xdB5D94B8Ed491B058F3e74D029775A14477cF7fA;\\n    }\\n}\",\"keccak256\":\"0x8220a140c66c3bbf3fe5bed3542575f35933f4e35292715f9228f6c41f332a65\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IAssetsExchange.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title IAssetExchange\\n * @dev Basic interface for investing into assets\\n * It could be linked either to DEX or to a synthetic assets platform\\n */\\ninterface IAssetsExchange {\\n\\n    /*\\n     * Swaps selected ERC20 token with other ERC20 token\\n     * @param soldToken_ sold ERC20 token's address\\n     * @param boughtToken_ bought ERC20 token's address\\n     * @param _amountSold exact amount of ERC20 token to be sold\\n     * @param _amountBought minimum amount of ERC20 token to be bought\\n     **/\\n    function swap(address soldToken_, address boughtToken_, uint256 _exactAmountIn, uint256 _minAmountOut) external returns (uint256[] memory);\\n\\n    /*\\n     * Adds liquidity of ERC20 tokens\\n     */\\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) external returns (address, uint, uint, uint);\\n\\n    /*\\n     * Removes liquidity of ERC20 tokens\\n     */\\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin) external returns (uint, uint);\\n\\n    /**\\n     * Returns the minimum _soldToken amount that is required to be sold to receive _exactAmountOut of a _boughtToken.\\n     **/\\n    function getMinimumTokensNeeded(uint256 _exactAmountOut, address _soldToken, address _boughtToken) external returns (uint256);\\n\\n    /**\\n     * Returns the maximum _boughtToken amount that will be obtained in the event of selling _amountIn of _soldToken token.\\n     **/\\n    function getMaximumTokensReceived(uint256 _amountIn, address _soldToken, address _boughtToken) external returns (uint256);\\n\\n    /**\\n     * getPair\\n     **/\\n    function getPair(address _tokenA, address _tokenB) external returns (address);\\n\\n}\\n\",\"keccak256\":\"0x4842d61120bf154a22024bf31e7ee68cac0dee2353e8e53175372fc63447bbf8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n    function canBorrow(address _account) external view returns (bool);\\n\\n    function getLoanForOwner(address _owner) external view returns (address);\\n\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05ce704e795295743b6e2da563f4572e43f890f4214fed9ff3e6792bb7ec2f83\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IDiamondBeacon {\\n\\n    function implementation() external view returns (address);\\n\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {SmartLoanDiamondProxy} will check that this address is a contract.\\n     */\\n    function implementation(bytes4) external view returns (address);\\n\\n    function getStatus() external view returns (bool);\\n\\n    function proposeBeaconOwnershipTransfer(address _newOwner) external;\\n\\n    function acceptBeaconOwnership() external;\\n}\\n\",\"keccak256\":\"0xed5c84e80ef7559d35ce307d5e673496bf190b030cc0d67ac3f02776a9b659de\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\",\"keccak256\":\"0xdabe34201dcc6fd64a1cf484d16f031d6d64e39ebdcae7cc63e7c525c8beecc7\",\"license\":\"MIT\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity 0.8.17;\\n\\ninterface IIndex {\\n\\n    function setRate(uint256 _rate) external;\\n\\n    function updateUser(address user) external;\\n\\n    function getIndex() external view returns (uint256);\\n\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xece2b3edf8b15e90d99c2aeeb4ac40c60d50b20932f0c983d27cf46a38bc4979\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IPoolRewarder {\\n\\n    function stakeFor(uint _amount, address _stakeFor) external;\\n\\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\\n\\n    function getRewardsFor(address _user) external;\\n\\n    function earned(address _account) external view returns (uint);\\n\\n    function balanceOf(address _account) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf6ae92c67c618dfb6a80cbf153b2aa8e5d93b8cec6444dc7e0db4dce959fbefd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b134bca4918b4e379fcb312eada2385e815cd13ef1fbee2fcdc7028cc45d754\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IStakingPositions\\n * Types for staking\\n */\\ninterface IStakingPositions {\\n    struct StakedPosition {\\n        address vault;\\n        bytes32 symbol;\\n        bytes4 balanceSelector;\\n        bytes4 unstakeSelector;\\n    }\\n}\\n\",\"keccak256\":\"0xe617bf40dd2a59f4dbf9d24696fe931a0247a59dae1ba58ab26ff58518b2c846\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // Bytes32ToAddressMap\\n\\n    struct Bytes32ToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (key, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x74c86dcb231a31355e8947aea10f3c94eb5f1656b000ce90d18f5a48fcb98b4a\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary DiamondStorageLib {\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n    bytes32 constant LIQUIDATION_STORAGE_POSITION = keccak256(\\\"diamond.standard.liquidation.storage\\\");\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // Used to select methods that can be executed even when Diamond is paused\\n        mapping(bytes4 => bool) canBeExecutedWhenPaused;\\n\\n        bool _initialized;\\n        bool _active;\\n\\n        uint256 _lastBorrowTimestamp;\\n    }\\n\\n    struct SmartLoanStorage {\\n        // PauseAdmin has the power to pause/unpause the contract without the timelock delay in case of a critical bug/exploit\\n        address pauseAdmin;\\n        // Owner of the contract\\n        address contractOwner;\\n        // Proposed owner of the contract\\n        address proposedOwner;\\n        // Proposed pauseAdmin of the contract\\n        address proposedPauseAdmin;\\n        // Is contract initialized?\\n        bool _initialized;\\n        // TODO: mock staking tokens until redstone oracle supports them\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\n        // Staked positions of the contract\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\n    }\\n\\n    struct LiquidationStorage {\\n        // Mapping controlling addresses that can execute the liquidation methods\\n        mapping(address=>bool) canLiquidate;\\n    }\\n\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\n        assembly {\\n            rgs.slot := position\\n        }\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function liquidationStorage() internal pure returns (LiquidationStorage storage ls) {\\n        bytes32 position = LIQUIDATION_STORAGE_POSITION;\\n        assembly {\\n            ls.slot := position\\n        }\\n    }\\n\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\n        assembly {\\n            sls.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    event PauseAdminOwnershipTransferred(address indexed previousPauseAdmin, address indexed newPauseAdmin);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousOwner = sls.contractOwner;\\n        sls.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function setContractPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousPauseAdmin = sls.pauseAdmin;\\n        sls.pauseAdmin = _newPauseAdmin;\\n        emit PauseAdminOwnershipTransferred(previousPauseAdmin, _newPauseAdmin);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = smartLoanStorage().contractOwner;\\n    }\\n\\n    function pauseAdmin() internal view returns (address pauseAdmin) {\\n        pauseAdmin = smartLoanStorage().pauseAdmin;\\n    }\\n\\n    function setProposedOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedOwner = _newOwner;\\n    }\\n\\n    function setProposedPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedPauseAdmin = _newPauseAdmin;\\n    }\\n\\n    function getPausedMethodExemption(bytes4 _methodSig) internal view returns (bool) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.canBeExecutedWhenPaused[_methodSig];\\n    }\\n\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\n    }\\n\\n    function proposedPauseAdmin() internal view returns (address proposedPauseAdmin) {\\n        proposedPauseAdmin = smartLoanStorage().proposedPauseAdmin;\\n    }\\n\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\n        _positions = smartLoanStorage().currentStakedPositions;\\n    }\\n\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        bool found;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].balanceSelector == position.balanceSelector) {\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        if (!found) {\\n            positions.push(position);\\n        }\\n    }\\n\\n    function removeStakedPosition(bytes4 balanceSelector) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].balanceSelector == balanceSelector) {\\n                positions[i] = positions[positions.length - 1];\\n                positions.pop();\\n            }\\n        }\\n    }\\n\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\n    }\\n\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        return sls.ownedAssets.contains(_symbol);\\n    }\\n\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\n    }\\n\\n    function enforceIsPauseAdmin() internal view {\\n        require(msg.sender == smartLoanStorage().pauseAdmin, \\\"DiamondStorageLib: Must be contract pauseAdmin\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\",\"keccak256\":\"0x8fe9c65ddbd9a36ecedc5e2b436fc0852961b125136179dc6494695de36013ad\",\"license\":\"MIT\"},\"contracts/lib/SolvencyMethods.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\\\";\\nimport \\\"../facets/SolvencyFacetProd.sol\\\";\\nimport \\\"../DiamondHelper.sol\\\";\\n\\n// TODO Rename to contract instead of lib\\ncontract SolvencyMethods is DiamondHelper, ProxyConnector {\\n    // This function executes SolvencyFacetProd.getDebt()\\n    function _getDebt() internal virtual returns (uint256 debt) {\\n        debt = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebt.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebt.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getDebtWithPrices()\\n    function _getDebtWithPrices(SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) internal virtual returns (uint256 debt) {\\n        debt = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtWithPrices.selector, debtAssetsPrices)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.isSolventWithPrices()\\n    function _isSolventWithPrices(SolvencyFacetProd.CachedPrices memory cachedPrices) internal virtual returns (bool solvent){\\n        solvent = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolventWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.isSolventWithPrices.selector, cachedPrices)\\n            ),\\n            (bool)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.isSolvent()\\n    function _isSolvent() internal virtual returns (bool solvent){\\n        solvent = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolvent.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.isSolvent.selector)\\n            ),\\n            (bool)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.canRepayDebtFully()\\n    function _canRepayDebtFully() internal virtual returns (bool solvent){\\n        solvent = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.canRepayDebtFully.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.canRepayDebtFully.selector)\\n            ),\\n            (bool)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getTotalValue()\\n    function _getTotalValue() internal virtual returns (uint256 totalValue) {\\n        totalValue = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValue.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValue.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getTotalAssetsValue()\\n    function _getTotalAssetsValue() internal virtual returns (uint256 assetsValue) {\\n        assetsValue = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalAssetsValue.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalAssetsValue.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getHealthRatioWithPrices()\\n    function _getHealthRatioWithPrices(SolvencyFacetProd.CachedPrices memory cachedPrices) public virtual returns (uint256 health) {\\n        health = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatioWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatioWithPrices.selector, cachedPrices)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getHealthRatio()\\n    function _getHealthRatio() public virtual returns (uint256 health) {\\n        health = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatio.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatio.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getPrices()\\n    function getPrices(bytes32[] memory symbols) public virtual returns (uint256[] memory prices) {\\n        prices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getPrices.selector, symbols)\\n            ),\\n            (uint256[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getPrices()\\n    function _getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public virtual returns (SolvencyFacetProd.CachedPrices memory result) {\\n        result = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getAllPricesForLiquidation.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getAllPricesForLiquidation.selector, assetsToRepay)\\n            ),\\n            (SolvencyFacetProd.CachedPrices)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getOwnedAssetsWithNativePrices()\\n    function _getOwnedAssetsWithNativePrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices) {\\n        ownedAssetsPrices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getOwnedAssetsWithNativePrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getOwnedAssetsWithNativePrices.selector)\\n            ),\\n            (SolvencyFacetProd.AssetPrice[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getDebtAssetsPrices()\\n    function _getDebtAssetsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) {\\n        debtAssetsPrices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtAssetsPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtAssetsPrices.selector)\\n            ),\\n            (SolvencyFacetProd.AssetPrice[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getStakedPositionsPrices()\\n    function _getStakedPositionsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) {\\n        stakedPositionsPrices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getStakedPositionsPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getStakedPositionsPrices.selector)\\n            ),\\n            (SolvencyFacetProd.AssetPrice[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getTotalAssetsValueWithPrices()\\n    function _getTotalValueWithPrices(SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices, SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) internal virtual returns (uint256 totalValue) {\\n        totalValue = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValueWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValueWithPrices.selector, ownedAssetsPrices, stakedPositionsPrices)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getPrices()\\n    function getPrice(bytes32 symbol) public virtual returns (uint256 price) {\\n        price = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrice.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getPrice.selector, symbol)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    /**\\n     * Returns IERC20Metadata instance of a token\\n     * @param _asset the code of an asset\\n     **/\\n    function getERC20TokenInstance(bytes32 _asset, bool allowInactive) internal view returns (IERC20Metadata) {\\n        return IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(_asset, allowInactive));\\n    }\\n\\n    /**\\n    * Checks whether account is solvent (health higher than 1)\\n    * @dev This modifier uses the redstone-evm-connector\\n    **/\\n    modifier remainsSolvent() {\\n        _;\\n\\n        require(_isSolvent(), \\\"The action may cause an account to become insolvent\\\");\\n    }\\n\\n    modifier canRepayDebtFully() {\\n        _;\\n        require(_canRepayDebtFully(), \\\"Insufficient assets to fully repay the debt\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb1e76b0936d8ef20d28ecf800b786e1f6d29b7985ec460f068761ac7a0f588db\",\"license\":\"BUSL-1.1\"},\"contracts/lib/avalanche/DeploymentConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\npragma solidity 0.8.17;\\n\\nimport \\\"../../TokenManager.sol\\\";\\nimport {DiamondStorageLib} from \\\"../../lib/DiamondStorageLib.sol\\\";\\n\\n/**\\n * DeploymentConstants\\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\\n * to decrease gas costs. Not meant to be updated unless really necessary.\\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\\n **/\\nlibrary DeploymentConstants {\\n\\n    // Used for LiquidationBonus calculations\\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\\n\\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\\n\\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x2916B3bf7C35bd21e63D01C93C62FB0d4994e56D;\\n\\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x3Ea9D480295A73fd2aF95b4D96c2afF88b21B03D;\\n\\n    address private constant _TOKEN_MANAGER_ADDRESS = 0xF3978209B7cfF2b90100C6F87CEC77dE928Ed58e;\\n\\n    //implementation-specific\\n\\n    function getPercentagePrecision() internal pure returns (uint256) {\\n        return _PERCENTAGE_PRECISION;\\n    }\\n\\n    //blockchain-specific\\n\\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\\n        return _NATIVE_TOKEN_SYMBOL;\\n    }\\n\\n    function getNativeToken() internal pure returns (address payable) {\\n        return payable(_NATIVE_ADDRESS);\\n    }\\n\\n    //deployment-specific\\n\\n    function getDiamondAddress() internal pure returns (address) {\\n        return _DIAMOND_BEACON_ADDRESS;\\n    }\\n\\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\\n        return _SMART_LOANS_FACTORY_ADDRESS;\\n    }\\n\\n    function getTokenManager() internal pure returns (TokenManager) {\\n        return TokenManager(_TOKEN_MANAGER_ADDRESS);\\n    }\\n\\n    /**\\n    * Returns all owned assets keys\\n    **/\\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\\n        return sls.ownedAssets._inner._keys._inner._values;\\n    }\\n}\",\"keccak256\":\"0x2b84d744b2d19845f0557039299d4ca03cc4144a767e6d93f4250d6b4d499ca6\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600081905550613cb7806100286000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80636e3bfe9f116100715780636e3bfe9f1461017a5780637fe65943146101aa578063838986f8146101c65780639201de55146101e2578063b2d40e7314610212578063cfb5192814610242576100a9565b806326ee4836146100ae57806331d98b3f146100de57806339e2719e1461010e5780634e5439001461012c578063640adf781461015c575b600080fd5b6100c860048036038101906100c39190612377565b610272565b6040516100d59190612488565b60405180910390f35b6100f860048036038101906100f391906124aa565b61031c565b60405161010591906124e6565b60405180910390f35b6101166103c6565b60405161012391906124e6565b60405180910390f35b6101466004803603810190610141919061252d565b610463565b6040516101539190612488565b60405180910390f35b6101646104d6565b60405161017191906125d5565b60405180910390f35b610194600480360381019061018f91906127f5565b6104f2565b6040516101a191906124e6565b60405180910390f35b6101c460048036038101906101bf919061283e565b61059c565b005b6101e060048036038101906101db91906128b9565b6105b8565b005b6101fc60048036038101906101f791906124aa565b6105d6565b60405161020991906129c5565b60405180910390f35b61022c60048036038101906102279190612377565b610771565b6040516102399190612b4c565b60405180910390f35b61025c60048036038101906102579190612c23565b610821565b6040516102699190612c7b565b60405180910390f35b60606103026102876326ee483660e01b61084a565b6326ee483660e01b846040516024016102a09190612d45565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d4565b8060200190518101906103159190612e3f565b9050919050565b60006103ac6103316331d98b3f60e01b61084a565b6331d98b3f60e01b8460405160240161034a9190612c7b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d4565b8060200190518101906103bf9190612e88565b9050919050565b600061044b6103db637914334f60e01b61084a565b637914334f60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d4565b80602001905181019061045e9190612e88565b905090565b6060600061046f610965565b9050428160060154036104b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ae90612f27565b60405180910390fd5b6104bf610992565b6104cb86868686610a2d565b915050949350505050565b600073db5d94b8ed491b058f3e74d029775a14477cf7fa905090565b600061058261050763360398a360e01b61084a565b63360398a360e01b846040516024016105209190612b4c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d4565b8060200190518101906105959190612e88565b9050919050565b6105a4610992565b6105b18585858585610e65565b5050505050565b6105c0610992565b6105ce868686868686611158565b505050505050565b606060005b60208160ff1610801561062d5750600060f81b838260ff166020811061060457610603612f47565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561064557808061063d90612fb2565b9150506105db565b60008160ff1667ffffffffffffffff811115610664576106636121fe565b5b6040519080825280601f01601f1916602001820160405280156106965781602001600182028036833780820191505090505b509050600091505b60208260ff161080156106f05750600060f81b848360ff16602081106106c7576106c6612f47565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561076757838260ff166020811061070b5761070a612f47565b5b1a60f81b818360ff168151811061072557610724612f47565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818061075f90612fb2565b92505061069e565b8092505050919050565b6107796121ac565b61080761078c63a3aa8d1e60e01b61084a565b63a3aa8d1e60e01b846040516024016107a59190612d45565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d4565b80602001905181019061081a91906131bf565b9050919050565b600080829050600081510361083c576000801b915050610845565b60208301519150505b919050565b6000610854611686565b73ffffffffffffffffffffffffffffffffffffffff16630d741577836040518263ffffffff1660e01b815260040161088c9190613243565b602060405180830381865afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd919061328a565b9050919050565b606060006108e1836116a2565b90506000808573ffffffffffffffffffffffffffffffffffffffff168360405161090b91906132fe565b600060405180830381855af49150503d8060008114610946576040519150601f19603f3d011682016040523d82523d6000602084013e61094b565b606091505b509150915061095a828261175c565b935050505092915050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b61099a61185c565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2290613387565b60405180910390fd5b565b60606000610a3c866001611889565b90506000610a4b866000611889565b9050848273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a8791906125d5565b602060405180830381865afa158015610aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac89190612e88565b1015610b09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b00906133f3565b60405180910390fd5b610b3b610b146104d6565b868473ffffffffffffffffffffffffffffffffffffffff166119169092919063ffffffff16565b6000610b456104d6565b905060008173ffffffffffffffffffffffffffffffffffffffff1663fe02915685858a8a6040518563ffffffff1660e01b8152600401610b889493929190613413565b6000604051808303816000875af1158015610ba7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610bd09190612e3f565b90506000610bdc611a4c565b905060008173ffffffffffffffffffffffffffffffffffffffff166325eb876f8b60006040518363ffffffff1660e01b8152600401610c1c929190613473565b602060405180830381865afa158015610c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5d919061328a565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c9a91906125d5565b602060405180830381865afa158015610cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdb9190612e88565b1115610cec57610ceb8a82611a68565b5b60008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d2791906125d5565b602060405180830381865afa158015610d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d689190612e88565b03610d7757610d768b611b3a565b5b898b3373ffffffffffffffffffffffffffffffffffffffff167f4cb7ea834525f7e7be14143ffc68be9c6735559e936d23502fff335d39a2e8e286600081518110610dc557610dc4612f47565b5b60200260200101518760018951610ddc919061349c565b81518110610ded57610dec612f47565b5b602002602001015142604051610e05939291906134d0565b60405180910390a4829650505050505050610e1e611b58565b610e5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5490613579565b60405180910390fd5b949350505050565b6000610e72866001611889565b90506000610e81866001611889565b90506000610e8d6104d6565b905060008173ffffffffffffffffffffffffffffffffffffffff1663e6a4390585856040518363ffffffff1660e01b8152600401610ecc929190613599565b6020604051808303816000875af1158015610eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0f919061328a565b9050610f43610f1c6104d6565b888373ffffffffffffffffffffffffffffffffffffffff166119169092919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e2dc85dc87878c8c8c6040518663ffffffff1660e01b8152600401610f879594939291906135c2565b60408051808303816000875af1158015610fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190613615565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161100891906125d5565b602060405180830381865afa158015611025573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110499190612e88565b03611081576000808b8d1061105f578b8d611062565b8c8c5b9150915060006110728383611bf5565b905061107d81611b3a565b5050505b61108b8b87611a68565b6110958a86611a68565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f60d6d04a69b63b07bc4612079adf2399fcc2b9da68fe609fe66ffbe16fca76f48d8d8d8787426040516110fc96959493929190613655565b60405180910390a3505050505050611112611b58565b611151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114890613579565b60405180910390fd5b5050505050565b6000611165876000611889565b90506000611174876000611889565b9050858273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111b091906125d5565b602060405180830381865afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190612e88565b1015611232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122990613702565b60405180910390fd5b848173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161126c91906125d5565b602060405180830381865afa158015611289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad9190612e88565b10156112ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e59061376e565b60405180910390fd5b6113206112f96104d6565b878473ffffffffffffffffffffffffffffffffffffffff166119169092919063ffffffff16565b61135261132b6104d6565b868373ffffffffffffffffffffffffffffffffffffffff166119169092919063ffffffff16565b600061135c6104d6565b90506000808273ffffffffffffffffffffffffffffffffffffffff16633351733f86868c8c8c8c6040518763ffffffff1660e01b81526004016113a49695949392919061378e565b6080604051808303816000875af11580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e791906137ef565b809450819b50829c508395505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161143291906125d5565b602060405180830381865afa15801561144f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114739190612e88565b11156114ad576000808b8d1061148a578b8d61148d565b8c8c5b91509150600061149d8383611bf5565b90506114a98186611a68565b5050505b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114e891906125d5565b602060405180830381865afa158015611505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115299190612e88565b03611538576115378b611b3a565b5b60008473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161157391906125d5565b602060405180830381865afa158015611590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b49190612e88565b036115c3576115c28a611b3a565b5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fee6437c12e66102495172228742a18765355debe1f046d82bcd14f8dc66f11678d8d858e8e4260405161162a96959493929190613655565b60405180910390a3505050505061163f611b58565b61167e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167590613579565b60405180910390fd5b505050505050565b6000732916b3bf7c35bd21e63d01c93c62fb0d4994e56d905090565b606060008251905060006116b4611c4a565b9050600081836116c49190613856565b90506000369050821115611704576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060604051905081815285602001848101826020015b81831015611737578251815260208301925060208101905061171a565b5050508283360385602001830137602084840182010160405280945050505050919050565b60608261185357600082510361179e576040517f567fe27a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208301517f08c379a00000000000000000000000000000000000000000000000000000000081149150508015611816576060604484019050806040517f0f7e827800000000000000000000000000000000000000000000000000000000815260040161180d91906129c5565b60405180910390fd5b826040517ffd36fde300000000000000000000000000000000000000000000000000000000815260040161184a91906138d4565b60405180910390fd5b81905092915050565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b6000611893611a4c565b73ffffffffffffffffffffffffffffffffffffffff166325eb876f84846040518363ffffffff1660e01b81526004016118cd929190613473565b602060405180830381865afa1580156118ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190e919061328a565b905092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016119489291906138f6565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161199691906132fe565b6000604051808303816000865af19150503d80600081146119d3576040519150601f19603f3d011682016040523d82523d6000602084013e6119d8565b606091505b5091509150818015611a065750600081511480611a05575080806020019051810190611a04919061394b565b5b5b611a45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3c906139ea565b60405180910390fd5b5050505050565b600073f3978209b7cff2b90100c6f87cec77de928ed58e905090565b60008203611aab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa290613a56565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1190613ac2565b60405180910390fd5b6000611b2461185c565b9050611b34816004018484611cba565b50505050565b6000611b4461185c565b9050611b538160040183611cec565b505050565b6000611bdd611b6d635ce2395060e01b61084a565b635ce2395060e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d4565b806020019051810190611bf0919061394b565b905090565b6000611c42611c0a611c05611d03565b6105d6565b611c13856105d6565b611c1c856105d6565b604051602001611c2e93929190613b6a565b604051602081830303815290604052610821565b905092915050565b600080611c55611d2b565b90506000611c6282611e3c565b61ffff169050600282611c759190613856565b915060005b81811015611cb1576000611c8d84611e98565b90508084611c9b9190613856565b9350508080611ca990613bc8565b915050611c7a565b50819250505090565b6000611ce384600001848473ffffffffffffffffffffffffffffffffffffffff1660001b611ed7565b90509392505050565b6000611cfb8360000183611f12565b905092915050565b60007f504e470000000000000000000000000000000000000000000000000000000000905090565b60008060203603356602ed57011e000081166602ed57011e00001491505080611d80576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008036905060291115611dc0576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602936033590506000600960038362ffffff16611ddd9190613856565b611de79190613856565b90506000369050600282611dfb9190613856565b1115611e33576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80935050505090565b600080602083611e4c9190613856565b90506000369050811115611e8c576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80360335915050919050565b6000806000611ea684611f4b565b91509150604e816020611eb99190613856565b83611ec49190613c10565b611ece9190613856565b92505050919050565b60008184600201600085815260200190815260200160002081905550611f098385600001611fc190919063ffffffff16565b90509392505050565b600082600201600083815260200190815260200160002060009055611f438284600001611fd890919063ffffffff16565b905092915050565b6000806000806000604186611f609190613856565b90506000611f87602083611f749190613856565b6000369050611fef90919063ffffffff16565b905080359350611fa1600382611fef90919063ffffffff16565b9050803592508362ffffff1695508263ffffffff16945050505050915091565b6000611fd08360000183612005565b905092915050565b6000611fe78360000183612075565b905092915050565b60008183611ffd919061349c565b905092915050565b60006120118383612189565b61206a57826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061206f565b600090505b92915050565b6000808360010160008481526020019081526020016000205490506000811461217d5760006001826120a7919061349c565b90506000600186600001805490506120bf919061349c565b905081811461212e5760008660000182815481106120e0576120df612f47565b5b906000526020600020015490508087600001848154811061210457612103612f47565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061214257612141613c52565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612183565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612236826121ed565b810181811067ffffffffffffffff82111715612255576122546121fe565b5b80604052505050565b60006122686121d4565b9050612274828261222d565b919050565b600067ffffffffffffffff821115612294576122936121fe565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6122bd816122aa565b81146122c857600080fd5b50565b6000813590506122da816122b4565b92915050565b60006122f36122ee84612279565b61225e565b90508083825260208201905060208402830185811115612316576123156122a5565b5b835b8181101561233f578061232b88826122cb565b845260208401935050602081019050612318565b5050509392505050565b600082601f83011261235e5761235d6121e8565b5b813561236e8482602086016122e0565b91505092915050565b60006020828403121561238d5761238c6121de565b5b600082013567ffffffffffffffff8111156123ab576123aa6121e3565b5b6123b784828501612349565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6123ff816123ec565b82525050565b600061241183836123f6565b60208301905092915050565b6000602082019050919050565b6000612435826123c0565b61243f81856123cb565b935061244a836123dc565b8060005b8381101561247b5781516124628882612405565b975061246d8361241d565b92505060018101905061244e565b5085935050505092915050565b600060208201905081810360008301526124a2818461242a565b905092915050565b6000602082840312156124c0576124bf6121de565b5b60006124ce848285016122cb565b91505092915050565b6124e0816123ec565b82525050565b60006020820190506124fb60008301846124d7565b92915050565b61250a816123ec565b811461251557600080fd5b50565b60008135905061252781612501565b92915050565b60008060008060808587031215612547576125466121de565b5b6000612555878288016122cb565b9450506020612566878288016122cb565b935050604061257787828801612518565b925050606061258887828801612518565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125bf82612594565b9050919050565b6125cf816125b4565b82525050565b60006020820190506125ea60008301846125c6565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff821115612615576126146121fe565b5b602082029050602081019050919050565b60006040828403121561263c5761263b6125f0565b5b612646604061225e565b90506000612656848285016122cb565b600083015250602061266a84828501612518565b60208301525092915050565b6000612689612684846125fa565b61225e565b905080838252602082019050604084028301858111156126ac576126ab6122a5565b5b835b818110156126d557806126c18882612626565b8452602084019350506040810190506126ae565b5050509392505050565b600082601f8301126126f4576126f36121e8565b5b8135612704848260208601612676565b91505092915050565b600060808284031215612723576127226125f0565b5b61272d608061225e565b9050600082013567ffffffffffffffff81111561274d5761274c6125f5565b5b612759848285016126df565b600083015250602082013567ffffffffffffffff81111561277d5761277c6125f5565b5b612789848285016126df565b602083015250604082013567ffffffffffffffff8111156127ad576127ac6125f5565b5b6127b9848285016126df565b604083015250606082013567ffffffffffffffff8111156127dd576127dc6125f5565b5b6127e9848285016126df565b60608301525092915050565b60006020828403121561280b5761280a6121de565b5b600082013567ffffffffffffffff811115612829576128286121e3565b5b6128358482850161270d565b91505092915050565b600080600080600060a0868803121561285a576128596121de565b5b6000612868888289016122cb565b9550506020612879888289016122cb565b945050604061288a88828901612518565b935050606061289b88828901612518565b92505060806128ac88828901612518565b9150509295509295909350565b60008060008060008060c087890312156128d6576128d56121de565b5b60006128e489828a016122cb565b96505060206128f589828a016122cb565b955050604061290689828a01612518565b945050606061291789828a01612518565b935050608061292889828a01612518565b92505060a061293989828a01612518565b9150509295509295509295565b600081519050919050565b600082825260208201905092915050565b60005b83811015612980578082015181840152602081019050612965565b60008484015250505050565b600061299782612946565b6129a18185612951565b93506129b1818560208601612962565b6129ba816121ed565b840191505092915050565b600060208201905081810360008301526129df818461298c565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612a1c816122aa565b82525050565b604082016000820151612a386000850182612a13565b506020820151612a4b60208501826123f6565b50505050565b6000612a5d8383612a22565b60408301905092915050565b6000602082019050919050565b6000612a81826129e7565b612a8b81856129f2565b9350612a9683612a03565b8060005b83811015612ac7578151612aae8882612a51565b9750612ab983612a69565b925050600181019050612a9a565b5085935050505092915050565b60006080830160008301518482036000860152612af18282612a76565b91505060208301518482036020860152612b0b8282612a76565b91505060408301518482036040860152612b258282612a76565b91505060608301518482036060860152612b3f8282612a76565b9150508091505092915050565b60006020820190508181036000830152612b668184612ad4565b905092915050565b600080fd5b600067ffffffffffffffff821115612b8e57612b8d6121fe565b5b612b97826121ed565b9050602081019050919050565b82818337600083830152505050565b6000612bc6612bc184612b73565b61225e565b905082815260208101848484011115612be257612be1612b6e565b5b612bed848285612ba4565b509392505050565b600082601f830112612c0a57612c096121e8565b5b8135612c1a848260208601612bb3565b91505092915050565b600060208284031215612c3957612c386121de565b5b600082013567ffffffffffffffff811115612c5757612c566121e3565b5b612c6384828501612bf5565b91505092915050565b612c75816122aa565b82525050565b6000602082019050612c906000830184612c6c565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612cce8383612a13565b60208301905092915050565b6000602082019050919050565b6000612cf282612c96565b612cfc8185612ca1565b9350612d0783612cb2565b8060005b83811015612d38578151612d1f8882612cc2565b9750612d2a83612cda565b925050600181019050612d0b565b5085935050505092915050565b60006020820190508181036000830152612d5f8184612ce7565b905092915050565b600067ffffffffffffffff821115612d8257612d816121fe565b5b602082029050602081019050919050565b600081519050612da281612501565b92915050565b6000612dbb612db684612d67565b61225e565b90508083825260208201905060208402830185811115612dde57612ddd6122a5565b5b835b81811015612e075780612df38882612d93565b845260208401935050602081019050612de0565b5050509392505050565b600082601f830112612e2657612e256121e8565b5b8151612e36848260208601612da8565b91505092915050565b600060208284031215612e5557612e546121de565b5b600082015167ffffffffffffffff811115612e7357612e726121e3565b5b612e7f84828501612e11565b91505092915050565b600060208284031215612e9e57612e9d6121de565b5b6000612eac84828501612d93565b91505092915050565b7f426f72726f77696e67206d7573742068617070656e20696e2061207374616e6460008201527f616c6f6e65207472616e73616374696f6e000000000000000000000000000000602082015250565b6000612f11603183612951565b9150612f1c82612eb5565b604082019050919050565b60006020820190508181036000830152612f4081612f04565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b6000612fbd82612fa5565b915060ff8203612fd057612fcf612f76565b5b600182019050919050565b600081519050612fea816122b4565b92915050565b600060408284031215613006576130056125f0565b5b613010604061225e565b9050600061302084828501612fdb565b600083015250602061303484828501612d93565b60208301525092915050565b600061305361304e846125fa565b61225e565b90508083825260208201905060408402830185811115613076576130756122a5565b5b835b8181101561309f578061308b8882612ff0565b845260208401935050604081019050613078565b5050509392505050565b600082601f8301126130be576130bd6121e8565b5b81516130ce848260208601613040565b91505092915050565b6000608082840312156130ed576130ec6125f0565b5b6130f7608061225e565b9050600082015167ffffffffffffffff811115613117576131166125f5565b5b613123848285016130a9565b600083015250602082015167ffffffffffffffff811115613147576131466125f5565b5b613153848285016130a9565b602083015250604082015167ffffffffffffffff811115613177576131766125f5565b5b613183848285016130a9565b604083015250606082015167ffffffffffffffff8111156131a7576131a66125f5565b5b6131b3848285016130a9565b60608301525092915050565b6000602082840312156131d5576131d46121de565b5b600082015167ffffffffffffffff8111156131f3576131f26121e3565b5b6131ff848285016130d7565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61323d81613208565b82525050565b60006020820190506132586000830184613234565b92915050565b613267816125b4565b811461327257600080fd5b50565b6000815190506132848161325e565b92915050565b6000602082840312156132a05761329f6121de565b5b60006132ae84828501613275565b91505092915050565b600081519050919050565b600081905092915050565b60006132d8826132b7565b6132e281856132c2565b93506132f2818560208601612962565b80840191505092915050565b600061330a82846132cd565b915081905092915050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613371602983612951565b915061337c82613315565b604082019050919050565b600060208201905081810360008301526133a081613364565b9050919050565b7f4e6f7420656e6f75676820746f6b656e20746f2073656c6c0000000000000000600082015250565b60006133dd601883612951565b91506133e8826133a7565b602082019050919050565b6000602082019050818103600083015261340c816133d0565b9050919050565b600060808201905061342860008301876125c6565b61343560208301866125c6565b61344260408301856124d7565b61344f60608301846124d7565b95945050505050565b60008115159050919050565b61346d81613458565b82525050565b60006040820190506134886000830185612c6c565b6134956020830184613464565b9392505050565b60006134a7826123ec565b91506134b2836123ec565b92508282039050818111156134ca576134c9612f76565b5b92915050565b60006060820190506134e560008301866124d7565b6134f260208301856124d7565b6134ff60408301846124d7565b949350505050565b7f54686520616374696f6e206d617920636175736520616e206163636f756e742060008201527f746f206265636f6d6520696e736f6c76656e7400000000000000000000000000602082015250565b6000613563603383612951565b915061356e82613507565b604082019050919050565b6000602082019050818103600083015261359281613556565b9050919050565b60006040820190506135ae60008301856125c6565b6135bb60208301846125c6565b9392505050565b600060a0820190506135d760008301886125c6565b6135e460208301876125c6565b6135f160408301866124d7565b6135fe60608301856124d7565b61360b60808301846124d7565b9695505050505050565b6000806040838503121561362c5761362b6121de565b5b600061363a85828601612d93565b925050602061364b85828601612d93565b9150509250929050565b600060c08201905061366a6000830189612c6c565b6136776020830188612c6c565b61368460408301876124d7565b61369160608301866124d7565b61369e60808301856124d7565b6136ab60a08301846124d7565b979650505050505050565b7f4e6f7420656e6f75676820746f6b656e4120746f2070726f7669646500000000600082015250565b60006136ec601c83612951565b91506136f7826136b6565b602082019050919050565b6000602082019050818103600083015261371b816136df565b9050919050565b7f4e6f7420656e6f75676820746f6b656e4220746f2070726f7669646500000000600082015250565b6000613758601c83612951565b915061376382613722565b602082019050919050565b600060208201905081810360008301526137878161374b565b9050919050565b600060c0820190506137a360008301896125c6565b6137b060208301886125c6565b6137bd60408301876124d7565b6137ca60608301866124d7565b6137d760808301856124d7565b6137e460a08301846124d7565b979650505050505050565b60008060008060808587031215613809576138086121de565b5b600061381787828801613275565b945050602061382887828801612d93565b935050604061383987828801612d93565b925050606061384a87828801612d93565b91505092959194509250565b6000613861826123ec565b915061386c836123ec565b925082820190508082111561388457613883612f76565b5b92915050565b600082825260208201905092915050565b60006138a6826132b7565b6138b0818561388a565b93506138c0818560208601612962565b6138c9816121ed565b840191505092915050565b600060208201905081810360008301526138ee818461389b565b905092915050565b600060408201905061390b60008301856125c6565b61391860208301846124d7565b9392505050565b61392881613458565b811461393357600080fd5b50565b6000815190506139458161391f565b92915050565b600060208284031215613961576139606121de565b5b600061396f84828501613936565b91505092915050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b60006139d4602d83612951565b91506139df82613978565b604082019050919050565b60006020820190508181036000830152613a03816139c7565b9050919050565b7f53796d626f6c2063616e6e6f7420626520656d70747900000000000000000000600082015250565b6000613a40601683612951565b9150613a4b82613a0a565b602082019050919050565b60006020820190508181036000830152613a6f81613a33565b9050919050565b7f496e76616c696420416464726573735a65726f00000000000000000000000000600082015250565b6000613aac601383612951565b9150613ab782613a76565b602082019050919050565b60006020820190508181036000830152613adb81613a9f565b9050919050565b600081905092915050565b6000613af882612946565b613b028185613ae2565b9350613b12818560208601612962565b80840191505092915050565b7f5f00000000000000000000000000000000000000000000000000000000000000815250565b7f5f4c500000000000000000000000000000000000000000000000000000000000815250565b6000613b768286613aed565b9150613b8182613b1e565b600182019150613b918285613aed565b9150613b9c82613b1e565b600182019150613bac8284613aed565b9150613bb782613b44565b600382019150819050949350505050565b6000613bd3826123ec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c0557613c04612f76565b5b600182019050919050565b6000613c1b826123ec565b9150613c26836123ec565b9250828202613c34816123ec565b91508282048414831517613c4b57613c4a612f76565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212207e4f052e1fa7997c295385460a79c9434ea92a31726f01bc6f543cd3c8469ef264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80636e3bfe9f116100715780636e3bfe9f1461017a5780637fe65943146101aa578063838986f8146101c65780639201de55146101e2578063b2d40e7314610212578063cfb5192814610242576100a9565b806326ee4836146100ae57806331d98b3f146100de57806339e2719e1461010e5780634e5439001461012c578063640adf781461015c575b600080fd5b6100c860048036038101906100c39190612377565b610272565b6040516100d59190612488565b60405180910390f35b6100f860048036038101906100f391906124aa565b61031c565b60405161010591906124e6565b60405180910390f35b6101166103c6565b60405161012391906124e6565b60405180910390f35b6101466004803603810190610141919061252d565b610463565b6040516101539190612488565b60405180910390f35b6101646104d6565b60405161017191906125d5565b60405180910390f35b610194600480360381019061018f91906127f5565b6104f2565b6040516101a191906124e6565b60405180910390f35b6101c460048036038101906101bf919061283e565b61059c565b005b6101e060048036038101906101db91906128b9565b6105b8565b005b6101fc60048036038101906101f791906124aa565b6105d6565b60405161020991906129c5565b60405180910390f35b61022c60048036038101906102279190612377565b610771565b6040516102399190612b4c565b60405180910390f35b61025c60048036038101906102579190612c23565b610821565b6040516102699190612c7b565b60405180910390f35b60606103026102876326ee483660e01b61084a565b6326ee483660e01b846040516024016102a09190612d45565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d4565b8060200190518101906103159190612e3f565b9050919050565b60006103ac6103316331d98b3f60e01b61084a565b6331d98b3f60e01b8460405160240161034a9190612c7b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d4565b8060200190518101906103bf9190612e88565b9050919050565b600061044b6103db637914334f60e01b61084a565b637914334f60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d4565b80602001905181019061045e9190612e88565b905090565b6060600061046f610965565b9050428160060154036104b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ae90612f27565b60405180910390fd5b6104bf610992565b6104cb86868686610a2d565b915050949350505050565b600073db5d94b8ed491b058f3e74d029775a14477cf7fa905090565b600061058261050763360398a360e01b61084a565b63360398a360e01b846040516024016105209190612b4c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d4565b8060200190518101906105959190612e88565b9050919050565b6105a4610992565b6105b18585858585610e65565b5050505050565b6105c0610992565b6105ce868686868686611158565b505050505050565b606060005b60208160ff1610801561062d5750600060f81b838260ff166020811061060457610603612f47565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561064557808061063d90612fb2565b9150506105db565b60008160ff1667ffffffffffffffff811115610664576106636121fe565b5b6040519080825280601f01601f1916602001820160405280156106965781602001600182028036833780820191505090505b509050600091505b60208260ff161080156106f05750600060f81b848360ff16602081106106c7576106c6612f47565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b1561076757838260ff166020811061070b5761070a612f47565b5b1a60f81b818360ff168151811061072557610724612f47565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350818061075f90612fb2565b92505061069e565b8092505050919050565b6107796121ac565b61080761078c63a3aa8d1e60e01b61084a565b63a3aa8d1e60e01b846040516024016107a59190612d45565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d4565b80602001905181019061081a91906131bf565b9050919050565b600080829050600081510361083c576000801b915050610845565b60208301519150505b919050565b6000610854611686565b73ffffffffffffffffffffffffffffffffffffffff16630d741577836040518263ffffffff1660e01b815260040161088c9190613243565b602060405180830381865afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd919061328a565b9050919050565b606060006108e1836116a2565b90506000808573ffffffffffffffffffffffffffffffffffffffff168360405161090b91906132fe565b600060405180830381855af49150503d8060008114610946576040519150601f19603f3d011682016040523d82523d6000602084013e61094b565b606091505b509150915061095a828261175c565b935050505092915050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b61099a61185c565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2290613387565b60405180910390fd5b565b60606000610a3c866001611889565b90506000610a4b866000611889565b9050848273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a8791906125d5565b602060405180830381865afa158015610aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac89190612e88565b1015610b09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b00906133f3565b60405180910390fd5b610b3b610b146104d6565b868473ffffffffffffffffffffffffffffffffffffffff166119169092919063ffffffff16565b6000610b456104d6565b905060008173ffffffffffffffffffffffffffffffffffffffff1663fe02915685858a8a6040518563ffffffff1660e01b8152600401610b889493929190613413565b6000604051808303816000875af1158015610ba7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610bd09190612e3f565b90506000610bdc611a4c565b905060008173ffffffffffffffffffffffffffffffffffffffff166325eb876f8b60006040518363ffffffff1660e01b8152600401610c1c929190613473565b602060405180830381865afa158015610c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5d919061328a565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c9a91906125d5565b602060405180830381865afa158015610cb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdb9190612e88565b1115610cec57610ceb8a82611a68565b5b60008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d2791906125d5565b602060405180830381865afa158015610d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d689190612e88565b03610d7757610d768b611b3a565b5b898b3373ffffffffffffffffffffffffffffffffffffffff167f4cb7ea834525f7e7be14143ffc68be9c6735559e936d23502fff335d39a2e8e286600081518110610dc557610dc4612f47565b5b60200260200101518760018951610ddc919061349c565b81518110610ded57610dec612f47565b5b602002602001015142604051610e05939291906134d0565b60405180910390a4829650505050505050610e1e611b58565b610e5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5490613579565b60405180910390fd5b949350505050565b6000610e72866001611889565b90506000610e81866001611889565b90506000610e8d6104d6565b905060008173ffffffffffffffffffffffffffffffffffffffff1663e6a4390585856040518363ffffffff1660e01b8152600401610ecc929190613599565b6020604051808303816000875af1158015610eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0f919061328a565b9050610f43610f1c6104d6565b888373ffffffffffffffffffffffffffffffffffffffff166119169092919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e2dc85dc87878c8c8c6040518663ffffffff1660e01b8152600401610f879594939291906135c2565b60408051808303816000875af1158015610fa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc99190613615565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161100891906125d5565b602060405180830381865afa158015611025573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110499190612e88565b03611081576000808b8d1061105f578b8d611062565b8c8c5b9150915060006110728383611bf5565b905061107d81611b3a565b5050505b61108b8b87611a68565b6110958a86611a68565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f60d6d04a69b63b07bc4612079adf2399fcc2b9da68fe609fe66ffbe16fca76f48d8d8d8787426040516110fc96959493929190613655565b60405180910390a3505050505050611112611b58565b611151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114890613579565b60405180910390fd5b5050505050565b6000611165876000611889565b90506000611174876000611889565b9050858273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111b091906125d5565b602060405180830381865afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190612e88565b1015611232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122990613702565b60405180910390fd5b848173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161126c91906125d5565b602060405180830381865afa158015611289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad9190612e88565b10156112ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e59061376e565b60405180910390fd5b6113206112f96104d6565b878473ffffffffffffffffffffffffffffffffffffffff166119169092919063ffffffff16565b61135261132b6104d6565b868373ffffffffffffffffffffffffffffffffffffffff166119169092919063ffffffff16565b600061135c6104d6565b90506000808273ffffffffffffffffffffffffffffffffffffffff16633351733f86868c8c8c8c6040518763ffffffff1660e01b81526004016113a49695949392919061378e565b6080604051808303816000875af11580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e791906137ef565b809450819b50829c508395505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161143291906125d5565b602060405180830381865afa15801561144f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114739190612e88565b11156114ad576000808b8d1061148a578b8d61148d565b8c8c5b91509150600061149d8383611bf5565b90506114a98186611a68565b5050505b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114e891906125d5565b602060405180830381865afa158015611505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115299190612e88565b03611538576115378b611b3a565b5b60008473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161157391906125d5565b602060405180830381865afa158015611590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b49190612e88565b036115c3576115c28a611b3a565b5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fee6437c12e66102495172228742a18765355debe1f046d82bcd14f8dc66f11678d8d858e8e4260405161162a96959493929190613655565b60405180910390a3505050505061163f611b58565b61167e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167590613579565b60405180910390fd5b505050505050565b6000732916b3bf7c35bd21e63d01c93c62fb0d4994e56d905090565b606060008251905060006116b4611c4a565b9050600081836116c49190613856565b90506000369050821115611704576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060604051905081815285602001848101826020015b81831015611737578251815260208301925060208101905061171a565b5050508283360385602001830137602084840182010160405280945050505050919050565b60608261185357600082510361179e576040517f567fe27a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208301517f08c379a00000000000000000000000000000000000000000000000000000000081149150508015611816576060604484019050806040517f0f7e827800000000000000000000000000000000000000000000000000000000815260040161180d91906129c5565b60405180910390fd5b826040517ffd36fde300000000000000000000000000000000000000000000000000000000815260040161184a91906138d4565b60405180910390fd5b81905092915050565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b6000611893611a4c565b73ffffffffffffffffffffffffffffffffffffffff166325eb876f84846040518363ffffffff1660e01b81526004016118cd929190613473565b602060405180830381865afa1580156118ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190e919061328a565b905092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016119489291906138f6565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161199691906132fe565b6000604051808303816000865af19150503d80600081146119d3576040519150601f19603f3d011682016040523d82523d6000602084013e6119d8565b606091505b5091509150818015611a065750600081511480611a05575080806020019051810190611a04919061394b565b5b5b611a45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3c906139ea565b60405180910390fd5b5050505050565b600073f3978209b7cff2b90100c6f87cec77de928ed58e905090565b60008203611aab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa290613a56565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1190613ac2565b60405180910390fd5b6000611b2461185c565b9050611b34816004018484611cba565b50505050565b6000611b4461185c565b9050611b538160040183611cec565b505050565b6000611bdd611b6d635ce2395060e01b61084a565b635ce2395060e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108d4565b806020019051810190611bf0919061394b565b905090565b6000611c42611c0a611c05611d03565b6105d6565b611c13856105d6565b611c1c856105d6565b604051602001611c2e93929190613b6a565b604051602081830303815290604052610821565b905092915050565b600080611c55611d2b565b90506000611c6282611e3c565b61ffff169050600282611c759190613856565b915060005b81811015611cb1576000611c8d84611e98565b90508084611c9b9190613856565b9350508080611ca990613bc8565b915050611c7a565b50819250505090565b6000611ce384600001848473ffffffffffffffffffffffffffffffffffffffff1660001b611ed7565b90509392505050565b6000611cfb8360000183611f12565b905092915050565b60007f504e470000000000000000000000000000000000000000000000000000000000905090565b60008060203603356602ed57011e000081166602ed57011e00001491505080611d80576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008036905060291115611dc0576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602936033590506000600960038362ffffff16611ddd9190613856565b611de79190613856565b90506000369050600282611dfb9190613856565b1115611e33576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80935050505090565b600080602083611e4c9190613856565b90506000369050811115611e8c576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80360335915050919050565b6000806000611ea684611f4b565b91509150604e816020611eb99190613856565b83611ec49190613c10565b611ece9190613856565b92505050919050565b60008184600201600085815260200190815260200160002081905550611f098385600001611fc190919063ffffffff16565b90509392505050565b600082600201600083815260200190815260200160002060009055611f438284600001611fd890919063ffffffff16565b905092915050565b6000806000806000604186611f609190613856565b90506000611f87602083611f749190613856565b6000369050611fef90919063ffffffff16565b905080359350611fa1600382611fef90919063ffffffff16565b9050803592508362ffffff1695508263ffffffff16945050505050915091565b6000611fd08360000183612005565b905092915050565b6000611fe78360000183612075565b905092915050565b60008183611ffd919061349c565b905092915050565b60006120118383612189565b61206a57826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061206f565b600090505b92915050565b6000808360010160008481526020019081526020016000205490506000811461217d5760006001826120a7919061349c565b90506000600186600001805490506120bf919061349c565b905081811461212e5760008660000182815481106120e0576120df612f47565b5b906000526020600020015490508087600001848154811061210457612103612f47565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061214257612141613c52565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612183565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612236826121ed565b810181811067ffffffffffffffff82111715612255576122546121fe565b5b80604052505050565b60006122686121d4565b9050612274828261222d565b919050565b600067ffffffffffffffff821115612294576122936121fe565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6122bd816122aa565b81146122c857600080fd5b50565b6000813590506122da816122b4565b92915050565b60006122f36122ee84612279565b61225e565b90508083825260208201905060208402830185811115612316576123156122a5565b5b835b8181101561233f578061232b88826122cb565b845260208401935050602081019050612318565b5050509392505050565b600082601f83011261235e5761235d6121e8565b5b813561236e8482602086016122e0565b91505092915050565b60006020828403121561238d5761238c6121de565b5b600082013567ffffffffffffffff8111156123ab576123aa6121e3565b5b6123b784828501612349565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6123ff816123ec565b82525050565b600061241183836123f6565b60208301905092915050565b6000602082019050919050565b6000612435826123c0565b61243f81856123cb565b935061244a836123dc565b8060005b8381101561247b5781516124628882612405565b975061246d8361241d565b92505060018101905061244e565b5085935050505092915050565b600060208201905081810360008301526124a2818461242a565b905092915050565b6000602082840312156124c0576124bf6121de565b5b60006124ce848285016122cb565b91505092915050565b6124e0816123ec565b82525050565b60006020820190506124fb60008301846124d7565b92915050565b61250a816123ec565b811461251557600080fd5b50565b60008135905061252781612501565b92915050565b60008060008060808587031215612547576125466121de565b5b6000612555878288016122cb565b9450506020612566878288016122cb565b935050604061257787828801612518565b925050606061258887828801612518565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125bf82612594565b9050919050565b6125cf816125b4565b82525050565b60006020820190506125ea60008301846125c6565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff821115612615576126146121fe565b5b602082029050602081019050919050565b60006040828403121561263c5761263b6125f0565b5b612646604061225e565b90506000612656848285016122cb565b600083015250602061266a84828501612518565b60208301525092915050565b6000612689612684846125fa565b61225e565b905080838252602082019050604084028301858111156126ac576126ab6122a5565b5b835b818110156126d557806126c18882612626565b8452602084019350506040810190506126ae565b5050509392505050565b600082601f8301126126f4576126f36121e8565b5b8135612704848260208601612676565b91505092915050565b600060808284031215612723576127226125f0565b5b61272d608061225e565b9050600082013567ffffffffffffffff81111561274d5761274c6125f5565b5b612759848285016126df565b600083015250602082013567ffffffffffffffff81111561277d5761277c6125f5565b5b612789848285016126df565b602083015250604082013567ffffffffffffffff8111156127ad576127ac6125f5565b5b6127b9848285016126df565b604083015250606082013567ffffffffffffffff8111156127dd576127dc6125f5565b5b6127e9848285016126df565b60608301525092915050565b60006020828403121561280b5761280a6121de565b5b600082013567ffffffffffffffff811115612829576128286121e3565b5b6128358482850161270d565b91505092915050565b600080600080600060a0868803121561285a576128596121de565b5b6000612868888289016122cb565b9550506020612879888289016122cb565b945050604061288a88828901612518565b935050606061289b88828901612518565b92505060806128ac88828901612518565b9150509295509295909350565b60008060008060008060c087890312156128d6576128d56121de565b5b60006128e489828a016122cb565b96505060206128f589828a016122cb565b955050604061290689828a01612518565b945050606061291789828a01612518565b935050608061292889828a01612518565b92505060a061293989828a01612518565b9150509295509295509295565b600081519050919050565b600082825260208201905092915050565b60005b83811015612980578082015181840152602081019050612965565b60008484015250505050565b600061299782612946565b6129a18185612951565b93506129b1818560208601612962565b6129ba816121ed565b840191505092915050565b600060208201905081810360008301526129df818461298c565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612a1c816122aa565b82525050565b604082016000820151612a386000850182612a13565b506020820151612a4b60208501826123f6565b50505050565b6000612a5d8383612a22565b60408301905092915050565b6000602082019050919050565b6000612a81826129e7565b612a8b81856129f2565b9350612a9683612a03565b8060005b83811015612ac7578151612aae8882612a51565b9750612ab983612a69565b925050600181019050612a9a565b5085935050505092915050565b60006080830160008301518482036000860152612af18282612a76565b91505060208301518482036020860152612b0b8282612a76565b91505060408301518482036040860152612b258282612a76565b91505060608301518482036060860152612b3f8282612a76565b9150508091505092915050565b60006020820190508181036000830152612b668184612ad4565b905092915050565b600080fd5b600067ffffffffffffffff821115612b8e57612b8d6121fe565b5b612b97826121ed565b9050602081019050919050565b82818337600083830152505050565b6000612bc6612bc184612b73565b61225e565b905082815260208101848484011115612be257612be1612b6e565b5b612bed848285612ba4565b509392505050565b600082601f830112612c0a57612c096121e8565b5b8135612c1a848260208601612bb3565b91505092915050565b600060208284031215612c3957612c386121de565b5b600082013567ffffffffffffffff811115612c5757612c566121e3565b5b612c6384828501612bf5565b91505092915050565b612c75816122aa565b82525050565b6000602082019050612c906000830184612c6c565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612cce8383612a13565b60208301905092915050565b6000602082019050919050565b6000612cf282612c96565b612cfc8185612ca1565b9350612d0783612cb2565b8060005b83811015612d38578151612d1f8882612cc2565b9750612d2a83612cda565b925050600181019050612d0b565b5085935050505092915050565b60006020820190508181036000830152612d5f8184612ce7565b905092915050565b600067ffffffffffffffff821115612d8257612d816121fe565b5b602082029050602081019050919050565b600081519050612da281612501565b92915050565b6000612dbb612db684612d67565b61225e565b90508083825260208201905060208402830185811115612dde57612ddd6122a5565b5b835b81811015612e075780612df38882612d93565b845260208401935050602081019050612de0565b5050509392505050565b600082601f830112612e2657612e256121e8565b5b8151612e36848260208601612da8565b91505092915050565b600060208284031215612e5557612e546121de565b5b600082015167ffffffffffffffff811115612e7357612e726121e3565b5b612e7f84828501612e11565b91505092915050565b600060208284031215612e9e57612e9d6121de565b5b6000612eac84828501612d93565b91505092915050565b7f426f72726f77696e67206d7573742068617070656e20696e2061207374616e6460008201527f616c6f6e65207472616e73616374696f6e000000000000000000000000000000602082015250565b6000612f11603183612951565b9150612f1c82612eb5565b604082019050919050565b60006020820190508181036000830152612f4081612f04565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b6000612fbd82612fa5565b915060ff8203612fd057612fcf612f76565b5b600182019050919050565b600081519050612fea816122b4565b92915050565b600060408284031215613006576130056125f0565b5b613010604061225e565b9050600061302084828501612fdb565b600083015250602061303484828501612d93565b60208301525092915050565b600061305361304e846125fa565b61225e565b90508083825260208201905060408402830185811115613076576130756122a5565b5b835b8181101561309f578061308b8882612ff0565b845260208401935050604081019050613078565b5050509392505050565b600082601f8301126130be576130bd6121e8565b5b81516130ce848260208601613040565b91505092915050565b6000608082840312156130ed576130ec6125f0565b5b6130f7608061225e565b9050600082015167ffffffffffffffff811115613117576131166125f5565b5b613123848285016130a9565b600083015250602082015167ffffffffffffffff811115613147576131466125f5565b5b613153848285016130a9565b602083015250604082015167ffffffffffffffff811115613177576131766125f5565b5b613183848285016130a9565b604083015250606082015167ffffffffffffffff8111156131a7576131a66125f5565b5b6131b3848285016130a9565b60608301525092915050565b6000602082840312156131d5576131d46121de565b5b600082015167ffffffffffffffff8111156131f3576131f26121e3565b5b6131ff848285016130d7565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61323d81613208565b82525050565b60006020820190506132586000830184613234565b92915050565b613267816125b4565b811461327257600080fd5b50565b6000815190506132848161325e565b92915050565b6000602082840312156132a05761329f6121de565b5b60006132ae84828501613275565b91505092915050565b600081519050919050565b600081905092915050565b60006132d8826132b7565b6132e281856132c2565b93506132f2818560208601612962565b80840191505092915050565b600061330a82846132cd565b915081905092915050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613371602983612951565b915061337c82613315565b604082019050919050565b600060208201905081810360008301526133a081613364565b9050919050565b7f4e6f7420656e6f75676820746f6b656e20746f2073656c6c0000000000000000600082015250565b60006133dd601883612951565b91506133e8826133a7565b602082019050919050565b6000602082019050818103600083015261340c816133d0565b9050919050565b600060808201905061342860008301876125c6565b61343560208301866125c6565b61344260408301856124d7565b61344f60608301846124d7565b95945050505050565b60008115159050919050565b61346d81613458565b82525050565b60006040820190506134886000830185612c6c565b6134956020830184613464565b9392505050565b60006134a7826123ec565b91506134b2836123ec565b92508282039050818111156134ca576134c9612f76565b5b92915050565b60006060820190506134e560008301866124d7565b6134f260208301856124d7565b6134ff60408301846124d7565b949350505050565b7f54686520616374696f6e206d617920636175736520616e206163636f756e742060008201527f746f206265636f6d6520696e736f6c76656e7400000000000000000000000000602082015250565b6000613563603383612951565b915061356e82613507565b604082019050919050565b6000602082019050818103600083015261359281613556565b9050919050565b60006040820190506135ae60008301856125c6565b6135bb60208301846125c6565b9392505050565b600060a0820190506135d760008301886125c6565b6135e460208301876125c6565b6135f160408301866124d7565b6135fe60608301856124d7565b61360b60808301846124d7565b9695505050505050565b6000806040838503121561362c5761362b6121de565b5b600061363a85828601612d93565b925050602061364b85828601612d93565b9150509250929050565b600060c08201905061366a6000830189612c6c565b6136776020830188612c6c565b61368460408301876124d7565b61369160608301866124d7565b61369e60808301856124d7565b6136ab60a08301846124d7565b979650505050505050565b7f4e6f7420656e6f75676820746f6b656e4120746f2070726f7669646500000000600082015250565b60006136ec601c83612951565b91506136f7826136b6565b602082019050919050565b6000602082019050818103600083015261371b816136df565b9050919050565b7f4e6f7420656e6f75676820746f6b656e4220746f2070726f7669646500000000600082015250565b6000613758601c83612951565b915061376382613722565b602082019050919050565b600060208201905081810360008301526137878161374b565b9050919050565b600060c0820190506137a360008301896125c6565b6137b060208301886125c6565b6137bd60408301876124d7565b6137ca60608301866124d7565b6137d760808301856124d7565b6137e460a08301846124d7565b979650505050505050565b60008060008060808587031215613809576138086121de565b5b600061381787828801613275565b945050602061382887828801612d93565b935050604061383987828801612d93565b925050606061384a87828801612d93565b91505092959194509250565b6000613861826123ec565b915061386c836123ec565b925082820190508082111561388457613883612f76565b5b92915050565b600082825260208201905092915050565b60006138a6826132b7565b6138b0818561388a565b93506138c0818560208601612962565b6138c9816121ed565b840191505092915050565b600060208201905081810360008301526138ee818461389b565b905092915050565b600060408201905061390b60008301856125c6565b61391860208301846124d7565b9392505050565b61392881613458565b811461393357600080fd5b50565b6000815190506139458161391f565b92915050565b600060208284031215613961576139606121de565b5b600061396f84828501613936565b91505092915050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b60006139d4602d83612951565b91506139df82613978565b604082019050919050565b60006020820190508181036000830152613a03816139c7565b9050919050565b7f53796d626f6c2063616e6e6f7420626520656d70747900000000000000000000600082015250565b6000613a40601683612951565b9150613a4b82613a0a565b602082019050919050565b60006020820190508181036000830152613a6f81613a33565b9050919050565b7f496e76616c696420416464726573735a65726f00000000000000000000000000600082015250565b6000613aac601383612951565b9150613ab782613a76565b602082019050919050565b60006020820190508181036000830152613adb81613a9f565b9050919050565b600081905092915050565b6000613af882612946565b613b028185613ae2565b9350613b12818560208601612962565b80840191505092915050565b7f5f00000000000000000000000000000000000000000000000000000000000000815250565b7f5f4c500000000000000000000000000000000000000000000000000000000000815250565b6000613b768286613aed565b9150613b8182613b1e565b600182019150613b918285613aed565b9150613b9c82613b1e565b600182019150613bac8284613aed565b9150613bb782613b44565b600382019150819050949350505050565b6000613bd3826123ec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c0557613c04612f76565b5b600182019050919050565b6000613c1b826123ec565b9150613c26836123ec565b9250828202613c34816123ec565b91508282048414831517613c4b57613c4a612f76565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212207e4f052e1fa7997c295385460a79c9434ea92a31726f01bc6f543cd3c8469ef264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "swapPangolin(bytes32,bytes32,uint256,uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "_boughtAsset": "asset to be bought",
          "_exactSold": "exact amount of asset to be sold",
          "_minimumBought": "minimum amount of asset to be bought*",
          "_soldAsset": "asset to be sold"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getExchangeIntermediaryContract()": {
        "notice": "Returns address of UniswapV2-like exchange*"
      },
      "swapPangolin(bytes32,bytes32,uint256,uint256)": {
        "notice": "Swaps one asset to another"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9633,
        "contract": "contracts/facets/avalanche/PangolinDEXFacet.sol:PangolinDEXFacet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}