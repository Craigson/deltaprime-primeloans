{
  "address": "0x9e02b7784A60564cB9D0a31873Fb2Dc1413Ead39",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolAssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "activateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            }
          ],
          "internalType": "struct TokenManager.poolAsset[]",
          "name": "poolAssets",
          "type": "tuple[]"
        }
      ],
      "name": "addPoolAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "debtCoverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenManager.Asset[]",
          "name": "tokenAssets",
          "type": "tuple[]"
        }
      ],
      "name": "addTokenAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "deactivateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "debtCoverageStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolAssets",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "result",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokenAssets",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "result",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "allowInactive",
          "type": "bool"
        }
      ],
      "name": "getAssetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedTokensAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "debtCoverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenManager.Asset[]",
          "name": "tokenAssets",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            }
          ],
          "internalType": "struct TokenManager.poolAsset[]",
          "name": "poolAssets",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isTokenAssetActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_poolAssets",
          "type": "bytes32[]"
        }
      ],
      "name": "removePoolAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_tokenAssets",
          "type": "bytes32[]"
        }
      ],
      "name": "removeTokenAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "name": "setDebtCoverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "stakedAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "name": "setDebtCoverageStaked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedTokensList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddressToSymbol",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3db46038e5900ea6a301b138a192ed8a2711ed2afad606b67d18e79ba9302cf0",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x9e02b7784A60564cB9D0a31873Fb2Dc1413Ead39",
    "transactionIndex": 0,
    "gasUsed": "2855252",
    "logsBloom": "0x
    "blockHash": "0xde6b81e1463059888427ef4d1e518491646182d1c4869b9c73e27330a204f405",
    "transactionHash": "0x3db46038e5900ea6a301b138a192ed8a2711ed2afad606b67d18e79ba9302cf0",
    "logs": [],
    "blockNumber": 23883220,
    "cumulativeGasUsed": "2855252",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "eebdba013e340c12f8dab738f4b3d1a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolAssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"activateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"internalType\":\"struct TokenManager.poolAsset[]\",\"name\":\"poolAssets\",\"type\":\"tuple[]\"}],\"name\":\"addPoolAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtCoverage\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenManager.Asset[]\",\"name\":\"tokenAssets\",\"type\":\"tuple[]\"}],\"name\":\"addTokenAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"deactivateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"debtCoverageStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolAssets\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"result\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenAssets\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"result\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"allowInactive\",\"type\":\"bool\"}],\"name\":\"getAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokensAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtCoverage\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenManager.Asset[]\",\"name\":\"tokenAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"internalType\":\"struct TokenManager.poolAsset[]\",\"name\":\"poolAssets\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenAssetActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_poolAssets\",\"type\":\"bytes32[]\"}],\"name\":\"removePoolAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_tokenAssets\",\"type\":\"bytes32[]\"}],\"name\":\"removeTokenAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"name\":\"setDebtCoverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakedAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"name\":\"setDebtCoverageStaked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedTokensList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddressToSymbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"PoolAssetAdded(address,bytes32,address,uint256)\":{\"details\":\"emitted after adding a pool asset\",\"params\":{\"performer\":\"an address of wallet adding the pool asset\",\"poolAddress\":\"an address of the pool asset\",\"poolAsset\":\"pool asset\",\"timestamp\":\"time of the pool asset addition*\"}},\"PoolAssetRemoved(address,bytes32,address,uint256)\":{\"details\":\"emitted after removing a pool asset\",\"params\":{\"performer\":\"an address of wallet removing the pool asset\",\"poolAddress\":\"an address of the pool asset\",\"poolAsset\":\"pool asset\",\"timestamp\":\"time of a pool asset removal*\"}},\"TokenAssetActivated(address,address,uint256)\":{\"details\":\"emitted after activating a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet activating a token asset\",\"timestamp\":\"time of activating a token asset*\"}},\"TokenAssetAdded(address,bytes32,address,uint256)\":{\"details\":\"emitted after adding a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet adding a token asset\",\"timestamp\":\"time of adding a token asset*\",\"tokenAsset\":\"token asset\"}},\"TokenAssetDeactivated(address,address,uint256)\":{\"details\":\"emitted after deactivating a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet deactivating a token asset\",\"timestamp\":\"time of deactivating a token asset*\"}},\"TokenAssetRemoved(address,bytes32,uint256)\":{\"details\":\"emitted after removing a token asset\",\"params\":{\"performer\":\"an address of the wallet removing a token asset\",\"timestamp\":\"time a token asset removal*\",\"tokenAsset\":\"token asset\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAssetAddress(bytes32,bool)\":{\"notice\":\"Returns address of an asset*\"},\"getPoolAddress(bytes32)\":{\"notice\":\"Returns address of an asset's lending pool*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenManager.sol\":\"TokenManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/TokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./lib/Bytes32EnumerableMap.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract TokenManager is OwnableUpgradeable {\\r\\n    /**\\r\\n     * For adding supported assets\\r\\n     **/\\r\\n    struct Asset {\\r\\n        bytes32 asset;\\r\\n        address assetAddress;\\r\\n        uint256 debtCoverage;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * For adding supported lending pools\\r\\n     **/\\r\\n    struct poolAsset {\\r\\n        bytes32 asset;\\r\\n        address poolAddress;\\r\\n    }\\r\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\r\\n\\r\\n    uint256 private constant _NOT_SUPPORTED = 0;\\r\\n    uint256 private constant _INACTIVE = 1;\\r\\n    uint256 private constant _ACTIVE = 2;\\r\\n\\r\\n    // Stores an asset's bytes32 symbol representation to pool's address mapping\\r\\n    EnumerableMap.Bytes32ToAddressMap private assetToPoolAddress;\\r\\n    // Stores an asset's bytes32 symbol representation to asset's address mapping\\r\\n    EnumerableMap.Bytes32ToAddressMap private assetToTokenAddress;\\r\\n    mapping(address => bytes32) public tokenAddressToSymbol;\\r\\n    mapping(address => uint256) private tokenPositionInList;\\r\\n    // used for defining different leverage ratios for tokens\\r\\n    mapping(address => uint256) public debtCoverage;\\r\\n    address[] public supportedTokensList;\\r\\n\\r\\n    mapping(address => uint256) public tokenToStatus;\\r\\n    // used for defining different leverage ratios for staked assets\\r\\n    mapping(bytes32 => uint256) public debtCoverageStaked;\\r\\n\\r\\n    function initialize(Asset[] memory tokenAssets, poolAsset[] memory poolAssets) external initializer {\\r\\n        __Ownable_init();\\r\\n\\r\\n        addTokenAssets(tokenAssets);\\r\\n        addPoolAssets(poolAssets);\\r\\n    }\\r\\n\\r\\n    function getAllPoolAssets() public view returns (bytes32[] memory result) {\\r\\n        return assetToPoolAddress._inner._keys._inner._values;\\r\\n    }\\r\\n\\r\\n    function getSupportedTokensAddresses() public view returns (address[] memory) {\\r\\n        return supportedTokensList;\\r\\n    }\\r\\n\\r\\n    function getAllTokenAssets() public view returns (bytes32[] memory result) {\\r\\n        return assetToTokenAddress._inner._keys._inner._values;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Returns address of an asset\\r\\n    **/\\r\\n    function getAssetAddress(bytes32 _asset, bool allowInactive) public view returns (address) {\\r\\n        (, address assetAddress) = assetToTokenAddress.tryGet(_asset);\\r\\n        require(assetAddress != address(0), \\\"Asset not supported.\\\");\\r\\n        if (!allowInactive) {\\r\\n            require(tokenToStatus[assetAddress] == _ACTIVE, \\\"Asset inactive\\\");\\r\\n        }\\r\\n\\r\\n        return assetAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Returns address of an asset's lending pool\\r\\n    **/\\r\\n    function getPoolAddress(bytes32 _asset) public view returns (address) {\\r\\n        (, address assetAddress) = assetToPoolAddress.tryGet(_asset);\\r\\n        require(assetAddress != address(0), \\\"Pool asset not supported.\\\");\\r\\n\\r\\n        return assetAddress;\\r\\n    }\\r\\n\\r\\n    function addPoolAssets(poolAsset[] memory poolAssets) public onlyOwner {\\r\\n        for (uint256 i = 0; i < poolAssets.length; i++) {\\r\\n            _addPoolAsset(poolAssets[i].asset, poolAssets[i].poolAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _addPoolAsset(bytes32 _asset, address _poolAddress) internal {\\r\\n        require(Address.isContract(_poolAddress), \\\"TokenManager: Pool must be a contract\\\");\\r\\n        require(!assetToPoolAddress.contains(_asset), \\\"Asset's pool already exists\\\");\\r\\n        assetToPoolAddress.set(_asset, _poolAddress);\\r\\n        emit PoolAssetAdded(msg.sender, _asset, _poolAddress, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function addTokenAssets(Asset[] memory tokenAssets) public onlyOwner {\\r\\n        for (uint256 i = 0; i < tokenAssets.length; i++) {\\r\\n            _addTokenAsset(tokenAssets[i].asset, tokenAssets[i].assetAddress, tokenAssets[i].debtCoverage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isTokenAssetActive(address token) external view returns(bool) {\\r\\n        return tokenToStatus[token] == 2;\\r\\n    }\\r\\n\\r\\n    function activateToken(address token) public onlyOwner {\\r\\n        require(tokenToStatus[token] == _INACTIVE, \\\"Must be inactive\\\");\\r\\n        tokenToStatus[token] = _ACTIVE;\\r\\n        emit TokenAssetActivated(msg.sender, token, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function deactivateToken(address token) public onlyOwner {\\r\\n        require(tokenToStatus[token] == _ACTIVE, \\\"Must be active\\\");\\r\\n        tokenToStatus[token] = _INACTIVE;\\r\\n        emit TokenAssetDeactivated(msg.sender, token, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _addTokenAsset(bytes32 _asset, address _tokenAddress, uint256 _debtCoverage) internal {\\r\\n        require(_asset != \\\"\\\", \\\"Cannot set an empty string asset.\\\");\\r\\n        require(_tokenAddress != address(0), \\\"Cannot set an empty address.\\\");\\r\\n        require(!assetToTokenAddress.contains(_asset), \\\"Asset's token already exists\\\");\\r\\n        require(tokenAddressToSymbol[_tokenAddress] == 0, \\\"Asset address is already in use\\\");\\r\\n        setDebtCoverage(_tokenAddress, _debtCoverage);\\r\\n\\r\\n        assetToTokenAddress.set(_asset, _tokenAddress);\\r\\n        tokenAddressToSymbol[_tokenAddress] = _asset;\\r\\n        tokenToStatus[_tokenAddress] = _ACTIVE;\\r\\n\\r\\n        supportedTokensList.push(_tokenAddress);\\r\\n        tokenPositionInList[_tokenAddress] = supportedTokensList.length - 1;\\r\\n\\r\\n        emit TokenAssetAdded(msg.sender, _asset, _tokenAddress, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _removeTokenFromList(address tokenToRemove) internal {\\r\\n        // Move last address token to the `tokenToRemoveIndex` position (index of an asset that is being removed) in the address[] supportedTokensList\\r\\n        // and update map(address=>uint256) tokenPostitionInList if the token is not already the last element\\r\\n        uint256 tokenToRemoveIndex = tokenPositionInList[tokenToRemove];\\r\\n        if (tokenToRemoveIndex != (supportedTokensList.length - 1)) {\\r\\n            address currentLastToken = supportedTokensList[supportedTokensList.length - 1];\\r\\n            tokenPositionInList[currentLastToken] = tokenToRemoveIndex;\\r\\n            supportedTokensList[tokenToRemoveIndex] = currentLastToken;\\r\\n        }\\r\\n        // Remove last element - that is either the token that is being removed (if was already at the end)\\r\\n        // or some other asset that at this point was already copied to the `index` positon\\r\\n        supportedTokensList.pop();\\r\\n        tokenPositionInList[tokenToRemove] = 0;\\r\\n    }\\r\\n\\r\\n    function removeTokenAssets(bytes32[] memory _tokenAssets) public onlyOwner {\\r\\n        for (uint256 i = 0; i < _tokenAssets.length; i++) {\\r\\n            _removeTokenAsset(_tokenAssets[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _removeTokenAsset(bytes32 _tokenAsset) internal {\\r\\n        address tokenAddress = getAssetAddress(_tokenAsset, true);\\r\\n        EnumerableMap.remove(assetToTokenAddress, _tokenAsset);\\r\\n        tokenAddressToSymbol[tokenAddress] = 0;\\r\\n        tokenToStatus[tokenAddress] = _NOT_SUPPORTED;\\r\\n        debtCoverage[tokenAddress] = 0;\\r\\n        _removeTokenFromList(tokenAddress);\\r\\n        emit TokenAssetRemoved(msg.sender, _tokenAsset, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function removePoolAssets(bytes32[] memory _poolAssets) public onlyOwner {\\r\\n        for (uint256 i = 0; i < _poolAssets.length; i++) {\\r\\n            _removePoolAsset(_poolAssets[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _removePoolAsset(bytes32 _poolAsset) internal {\\r\\n        address poolAddress = getPoolAddress(_poolAsset);\\r\\n        EnumerableMap.remove(assetToPoolAddress, _poolAsset);\\r\\n        emit PoolAssetRemoved(msg.sender, _poolAsset, poolAddress, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setDebtCoverage(address token, uint256 coverage) public onlyOwner {\\r\\n        //LTV must be lower than 5\\r\\n        require(coverage <= 0.833333333333333333e18, 'Debt coverage higher than maximum acceptable');\\r\\n        debtCoverage[token] = coverage;\\r\\n    }\\r\\n\\r\\n    function setDebtCoverageStaked(bytes32 stakedAsset, uint256 coverage) public onlyOwner {\\r\\n        //LTV must be lower than 5\\r\\n        require(coverage <= 0.833333333333333333e18, 'Debt coverage higher than maximum acceptable');\\r\\n        debtCoverageStaked[stakedAsset] = coverage;\\r\\n    }\\r\\n\\r\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\r\\n\\r\\n    function renounceOwnership() public virtual override {}\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after adding a token asset\\r\\n     * @param performer an address of the wallet adding a token asset\\r\\n     * @param tokenAsset token asset\\r\\n     * @param assetAddress an address of the token asset\\r\\n     * @param timestamp time of adding a token asset\\r\\n     **/\\r\\n    event TokenAssetAdded(address indexed performer, bytes32 indexed tokenAsset, address assetAddress, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after activating a token asset\\r\\n     * @param performer an address of the wallet activating a token asset\\r\\n     * @param assetAddress an address of the token asset\\r\\n     * @param timestamp time of activating a token asset\\r\\n     **/\\r\\n    event TokenAssetActivated(address indexed performer, address assetAddress, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after deactivating a token asset\\r\\n     * @param performer an address of the wallet deactivating a token asset\\r\\n     * @param assetAddress an address of the token asset\\r\\n     * @param timestamp time of deactivating a token asset\\r\\n     **/\\r\\n    event TokenAssetDeactivated(address indexed performer, address assetAddress, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after removing a token asset\\r\\n     * @param performer an address of the wallet removing a token asset\\r\\n     * @param tokenAsset token asset\\r\\n     * @param timestamp time a token asset removal\\r\\n     **/\\r\\n    event TokenAssetRemoved(address indexed performer, bytes32 indexed tokenAsset, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after adding a pool asset\\r\\n     * @param performer an address of wallet adding the pool asset\\r\\n     * @param poolAsset pool asset\\r\\n     * @param poolAddress an address of the pool asset\\r\\n     * @param timestamp time of the pool asset addition\\r\\n     **/\\r\\n    event PoolAssetAdded(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after removing a pool asset\\r\\n     * @param performer an address of wallet removing the pool asset\\r\\n     * @param poolAsset pool asset\\r\\n     * @param poolAddress an address of the pool asset\\r\\n     * @param timestamp time of a pool asset removal\\r\\n     **/\\r\\n    event PoolAssetRemoved(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\r\\n}\\r\\n\",\"keccak256\":\"0x0a60b1ee5464df2eb94f38b1f27b2b198dddefa6f681a7cc2e1a27ae31a71c9b\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\r\\n\\r\\n/**\\r\\n * @dev Library for managing an enumerable variant of Solidity's\\r\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\r\\n * type.\\r\\n *\\r\\n * Maps have the following properties:\\r\\n *\\r\\n * - Entries are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n */\\r\\nlibrary EnumerableMap {\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Map type with\\r\\n    // bytes32 keys and values.\\r\\n    // The Map implementation uses private functions, and user-facing\\r\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\r\\n    // the underlying Map.\\r\\n    // This means that we can only create new EnumerableMaps for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Map {\\r\\n        // Storage of keys\\r\\n        EnumerableSet.Bytes32Set _keys;\\r\\n        mapping(bytes32 => bytes32) _values;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _set(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        bytes32 value\\r\\n    ) private returns (bool) {\\r\\n        map._values[key] = value;\\r\\n        return map._keys.add(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a key-value pair from a map. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\r\\n        delete map._values[key];\\r\\n        return map._keys.remove(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\r\\n        return map._keys.contains(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\r\\n     */\\r\\n    function _length(Map storage map) private view returns (uint256) {\\r\\n        return map._keys.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of entries inside the\\r\\n     * array, and it may change when more entries are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\r\\n        bytes32 key = map._keys.at(index);\\r\\n        return (key, map._values[key]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     */\\r\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        if (value == bytes32(0)) {\\r\\n            return (_contains(map, key), bytes32(0));\\r\\n        } else {\\r\\n            return (true, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\r\\n     */\\r\\n    function _get(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), errorMessage);\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    // Bytes32ToAddressMap\\r\\n\\r\\n    struct Bytes32ToAddressMap {\\r\\n        Map _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function set(\\r\\n        Bytes32ToAddressMap storage map,\\r\\n        bytes32 key,\\r\\n        address value\\r\\n    ) internal returns (bool) {\\r\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\r\\n        return _remove(map._inner, key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\r\\n        return _contains(map._inner, key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of elements in the map. O(1).\\r\\n     */\\r\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\r\\n        return _length(map._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\r\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\r\\n        return (key, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\r\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\r\\n        return (success, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, key))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\r\\n     */\\r\\n    function get(\\r\\n        Bytes32ToAddressMap storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c9de7c7f3406d29dc518366c68a88cb29aaf36907b95422cceac140959c2463\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506132ef806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063e0117bdd1161007c578063e0117bdd1461039c578063ecfc19a0146103cc578063f2fde38b146103e8578063f38555aa14610404578063f823f1e014610420578063fda4963b146104505761014d565b8063715018a614610302578063762b887a1461030c578063869c490d146103285780638da5cb5b14610346578063a2d2793314610364578063d1bc0831146103805761014d565b806335923e031161011557806335923e03146102085780633f8ef5c81461023857806363c918771461026857806366273c191461029857806368173bcf146102b65780636953c06c146102d25761014d565b80630d1ce2d2146101525780630edc25b61461016e57806321f880971461019e57806325eb876f146101bc57806331e7866c146101ec575b600080fd5b61016c60048036038101906101679190612094565b61046c565b005b610188600480360381019061018391906120f7565b610602565b6040516101959190612133565b60405180910390f35b6101a6610694565b6040516101b3919061220c565b60405180910390f35b6101d660048036038101906101d19190612266565b610722565b6040516101e39190612133565b60405180910390f35b610206600480360381019061020191906122dc565b61083d565b005b610222600480360381019061021d9190612094565b61094c565b60405161022f919061232b565b60405180910390f35b610252600480360381019061024d91906120f7565b610998565b60405161025f9190612355565b60405180910390f35b610282600480360381019061027d9190612370565b6109b0565b60405161028f9190612133565b60405180910390f35b6102a06109ef565b6040516102ad919061245b565b60405180910390f35b6102d060048036038101906102cb9190612094565b610a53565b005b6102ec60048036038101906102e79190612094565b610be9565b6040516102f99190612355565b60405180910390f35b61030a610c01565b005b61032660048036038101906103219190612752565b610c03565b005b610330610d03565b60405161033d919061245b565b60405180910390f35b61034e610d67565b60405161035b9190612133565b60405180910390f35b61037e600480360381019061037991906127ca565b610d91565b005b61039a600480360381019061039591906128d6565b610e95565b005b6103b660048036038101906103b19190612094565b610f57565b6040516103c39190612355565b60405180910390f35b6103e660048036038101906103e1919061291f565b610f6f565b005b61040260048036038101906103fd9190612094565b611052565b005b61041e6004803603810190610419919061295f565b611149565b005b61043a60048036038101906104359190612094565b61122e565b60405161044791906129b7565b60405180910390f35b61046a600480360381019061046591906128d6565b611246565b005b610474611308565b73ffffffffffffffffffffffffffffffffffffffff16610492610d67565b73ffffffffffffffffffffffffffffffffffffffff16146104e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104df90612a2f565b60405180910390fd5b6001606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056190612a9b565b60405180910390fd5b6002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167febd9f0d5b5df9f4d5180bbeec65fda8d99982e273d2a7365431b2a869aa826d482426040516105f7929190612abb565b60405180910390a250565b60008061061983606561131090919063ffffffff16565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068290612b30565b60405180910390fd5b80915050919050565b6060606e80548060200260200160405190810160405280929190818152602001828054801561071857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ce575b5050505050905090565b60008061073984606861131090919063ffffffff16565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a290612b9c565b60405180910390fd5b82610833576002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082990612c08565b60405180910390fd5b5b8091505092915050565b610845611308565b73ffffffffffffffffffffffffffffffffffffffff16610863610d67565b73ffffffffffffffffffffffffffffffffffffffff16146108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b090612a2f565b60405180910390fd5b670b90984060d35555811115610904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fb90612c9a565b60405180910390fd5b80606d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60006002606f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054149050919050565b60706020528060005260406000206000915090505481565b606e81815481106109c057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606065600001600001600001600001805480602002602001604051908101604052809291908181526020018280548015610a4957602002820191906000526020600020905b815481526020019060010190808311610a35575b5050505050905090565b610a5b611308565b73ffffffffffffffffffffffffffffffffffffffff16610a79610d67565b73ffffffffffffffffffffffffffffffffffffffff1614610acf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac690612a2f565b60405180910390fd5b6002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610b51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4890612d06565b60405180910390fd5b6001606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fbf0b0e2d837fddaee4742e91f53ca36bac9fdebdd571738027abb2b5f7c9a2f08242604051610bde929190612abb565b60405180910390a250565b606d6020528060005260406000206000915090505481565b565b600060019054906101000a900460ff16610c2b5760008054906101000a900460ff1615610c34565b610c33611339565b5b610c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6a90612d98565b60405180910390fd5b60008060019054906101000a900460ff161590508015610cc3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610ccb61134a565b610cd483610d91565b610cdd82611149565b8015610cfe5760008060016101000a81548160ff0219169083151502179055505b505050565b60606068600001600001600001600001805480602002602001604051908101604052809291908181526020018280548015610d5d57602002820191906000526020600020905b815481526020019060010190808311610d49575b5050505050905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d99611308565b73ffffffffffffffffffffffffffffffffffffffff16610db7610d67565b73ffffffffffffffffffffffffffffffffffffffff1614610e0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0490612a2f565b60405180910390fd5b60005b8151811015610e9157610e7e828281518110610e2f57610e2e612db8565b5b602002602001015160000151838381518110610e4e57610e4d612db8565b5b602002602001015160200151848481518110610e6d57610e6c612db8565b5b6020026020010151604001516113a3565b8080610e8990612e16565b915050610e10565b5050565b610e9d611308565b73ffffffffffffffffffffffffffffffffffffffff16610ebb610d67565b73ffffffffffffffffffffffffffffffffffffffff1614610f11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0890612a2f565b60405180910390fd5b60005b8151811015610f5357610f40828281518110610f3357610f32612db8565b5b60200260200101516116e5565b8080610f4b90612e16565b915050610f14565b5050565b606f6020528060005260406000206000915090505481565b610f77611308565b73ffffffffffffffffffffffffffffffffffffffff16610f95610d67565b73ffffffffffffffffffffffffffffffffffffffff1614610feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe290612a2f565b60405180910390fd5b670b90984060d35555811115611036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102d90612c9a565b60405180910390fd5b8060706000848152602001908152602001600020819055505050565b61105a611308565b73ffffffffffffffffffffffffffffffffffffffff16611078610d67565b73ffffffffffffffffffffffffffffffffffffffff16146110ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c590612a2f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361113d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113490612ed0565b60405180910390fd5b6111468161182d565b50565b611151611308565b73ffffffffffffffffffffffffffffffffffffffff1661116f610d67565b73ffffffffffffffffffffffffffffffffffffffff16146111c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111bc90612a2f565b60405180910390fd5b60005b815181101561122a576112178282815181106111e7576111e6612db8565b5b60200260200101516000015183838151811061120657611205612db8565b5b6020026020010151602001516118f3565b808061122290612e16565b9150506111c8565b5050565b606b6020528060005260406000206000915090505481565b61124e611308565b73ffffffffffffffffffffffffffffffffffffffff1661126c610d67565b73ffffffffffffffffffffffffffffffffffffffff16146112c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b990612a2f565b60405180910390fd5b60005b8151811015611304576112f18282815181106112e4576112e3612db8565b5b60200260200101516119fb565b80806112fc90612e16565b9150506112c5565b5050565b600033905090565b6000806000806113238660000186611a69565b91509150818160001c9350935050509250929050565b600061134430611ab8565b15905090565b600060019054906101000a900460ff16611399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139090612f62565b60405180910390fd5b6113a1611adb565b565b600083036113e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113dd90612ff4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144c90613060565b60405180910390fd5b611469836068611b3c90919063ffffffff16565b156114a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a0906130cc565b60405180910390fd5b6000801b606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461152d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152490613138565b60405180910390fd5b611537828261083d565b61154d83836068611b539092919063ffffffff16565b5082606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002606f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550606e829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001606e8054905061164c9190613158565b606c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550823373ffffffffffffffffffffffffffffffffffffffff167ff73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b684426040516116d8929190612abb565b60405180910390a3505050565b60006116f2826001610722565b90506116ff606883611b85565b506000801b606b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000606d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117da81611b9c565b813373ffffffffffffffffffffffffffffffffffffffff167f228e158b51be6445b7bd2f4121209717a371d44c7c53d4085ae7f5e496153a93426040516118219190612355565b60405180910390a35050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6118fc81611d7f565b61193b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611932906131fe565b60405180910390fd5b61194f826065611b3c90919063ffffffff16565b1561198f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119869061326a565b60405180910390fd5b6119a582826065611b539092919063ffffffff16565b50813373ffffffffffffffffffffffffffffffffffffffff167fcfbf9a4f33420379df003923a1d986358bb97d4b3455baae186db1d5d35cda3e83426040516119ef929190612abb565b60405180910390a35050565b6000611a0682610602565b9050611a13606583611b85565b50813373ffffffffffffffffffffffffffffffffffffffff167ff658b7b16fbc2f0f51a3320cc57763ccd8d13f554c4eb34ff0f5b49624b32e838342604051611a5d929190612abb565b60405180910390a35050565b60008060008460020160008581526020019081526020016000205490506000801b8103611aa857611a9a8585611da2565b6000801b9250925050611ab1565b60018192509250505b9250929050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2190612f62565b60405180910390fd5b611b3a611b35611308565b61182d565b565b6000611b4b8360000183611da2565b905092915050565b6000611b7c84600001848473ffffffffffffffffffffffffffffffffffffffff1660001b611dc2565b90509392505050565b6000611b948360000183611dfd565b905092915050565b6000606c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506001606e80549050611bf29190613158565b8114611cef576000606e6001606e80549050611c0e9190613158565b81548110611c1f57611c1e612db8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080606e8381548110611ca557611ca4612db8565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b606e805480611d0157611d0061328a565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556000606c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000611dba8284600001611e3690919063ffffffff16565b905092915050565b60008184600201600085815260200190815260200160002081905550611df48385600001611e4d90919063ffffffff16565b90509392505050565b600082600201600083815260200190815260200160002060009055611e2e8284600001611e6490919063ffffffff16565b905092915050565b6000611e458360000183611e7b565b905092915050565b6000611e5c8360000183611e9e565b905092915050565b6000611e738360000183611f0e565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000611eaa8383611e7b565b611f03578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611f08565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114612016576000600182611f409190613158565b9050600060018660000180549050611f589190613158565b9050818114611fc7576000866000018281548110611f7957611f78612db8565b5b9060005260206000200154905080876000018481548110611f9d57611f9c612db8565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611fdb57611fda61328a565b5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061201c565b60009150505b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061206182612036565b9050919050565b61207181612056565b811461207c57600080fd5b50565b60008135905061208e81612068565b92915050565b6000602082840312156120aa576120a961202c565b5b60006120b88482850161207f565b91505092915050565b6000819050919050565b6120d4816120c1565b81146120df57600080fd5b50565b6000813590506120f1816120cb565b92915050565b60006020828403121561210d5761210c61202c565b5b600061211b848285016120e2565b91505092915050565b61212d81612056565b82525050565b60006020820190506121486000830184612124565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61218381612056565b82525050565b6000612195838361217a565b60208301905092915050565b6000602082019050919050565b60006121b98261214e565b6121c38185612159565b93506121ce8361216a565b8060005b838110156121ff5781516121e68882612189565b97506121f1836121a1565b9250506001810190506121d2565b5085935050505092915050565b6000602082019050818103600083015261222681846121ae565b905092915050565b60008115159050919050565b6122438161222e565b811461224e57600080fd5b50565b6000813590506122608161223a565b92915050565b6000806040838503121561227d5761227c61202c565b5b600061228b858286016120e2565b925050602061229c85828601612251565b9150509250929050565b6000819050919050565b6122b9816122a6565b81146122c457600080fd5b50565b6000813590506122d6816122b0565b92915050565b600080604083850312156122f3576122f261202c565b5b60006123018582860161207f565b9250506020612312858286016122c7565b9150509250929050565b6123258161222e565b82525050565b6000602082019050612340600083018461231c565b92915050565b61234f816122a6565b82525050565b600060208201905061236a6000830184612346565b92915050565b6000602082840312156123865761238561202c565b5b6000612394848285016122c7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123d2816120c1565b82525050565b60006123e483836123c9565b60208301905092915050565b6000602082019050919050565b60006124088261239d565b61241281856123a8565b935061241d836123b9565b8060005b8381101561244e57815161243588826123d8565b9750612440836123f0565b925050600181019050612421565b5085935050505092915050565b6000602082019050818103600083015261247581846123fd565b905092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124cb82612482565b810181811067ffffffffffffffff821117156124ea576124e9612493565b5b80604052505050565b60006124fd612022565b905061250982826124c2565b919050565b600067ffffffffffffffff82111561252957612528612493565b5b602082029050602081019050919050565b600080fd5b600080fd5b60006060828403121561255a5761255961253f565b5b61256460606124f3565b90506000612574848285016120e2565b60008301525060206125888482850161207f565b602083015250604061259c848285016122c7565b60408301525092915050565b60006125bb6125b68461250e565b6124f3565b905080838252602082019050606084028301858111156125de576125dd61253a565b5b835b8181101561260757806125f38882612544565b8452602084019350506060810190506125e0565b5050509392505050565b600082601f8301126126265761262561247d565b5b81356126368482602086016125a8565b91505092915050565b600067ffffffffffffffff82111561265a57612659612493565b5b602082029050602081019050919050565b6000604082840312156126815761268061253f565b5b61268b60406124f3565b9050600061269b848285016120e2565b60008301525060206126af8482850161207f565b60208301525092915050565b60006126ce6126c98461263f565b6124f3565b905080838252602082019050604084028301858111156126f1576126f061253a565b5b835b8181101561271a5780612706888261266b565b8452602084019350506040810190506126f3565b5050509392505050565b600082601f8301126127395761273861247d565b5b81356127498482602086016126bb565b91505092915050565b600080604083850312156127695761276861202c565b5b600083013567ffffffffffffffff81111561278757612786612031565b5b61279385828601612611565b925050602083013567ffffffffffffffff8111156127b4576127b3612031565b5b6127c085828601612724565b9150509250929050565b6000602082840312156127e0576127df61202c565b5b600082013567ffffffffffffffff8111156127fe576127fd612031565b5b61280a84828501612611565b91505092915050565b600067ffffffffffffffff82111561282e5761282d612493565b5b602082029050602081019050919050565b600061285261284d84612813565b6124f3565b905080838252602082019050602084028301858111156128755761287461253a565b5b835b8181101561289e578061288a88826120e2565b845260208401935050602081019050612877565b5050509392505050565b600082601f8301126128bd576128bc61247d565b5b81356128cd84826020860161283f565b91505092915050565b6000602082840312156128ec576128eb61202c565b5b600082013567ffffffffffffffff81111561290a57612909612031565b5b612916848285016128a8565b91505092915050565b600080604083850312156129365761293561202c565b5b6000612944858286016120e2565b9250506020612955858286016122c7565b9150509250929050565b6000602082840312156129755761297461202c565b5b600082013567ffffffffffffffff81111561299357612992612031565b5b61299f84828501612724565b91505092915050565b6129b1816120c1565b82525050565b60006020820190506129cc60008301846129a8565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612a196020836129d2565b9150612a24826129e3565b602082019050919050565b60006020820190508181036000830152612a4881612a0c565b9050919050565b7f4d75737420626520696e61637469766500000000000000000000000000000000600082015250565b6000612a856010836129d2565b9150612a9082612a4f565b602082019050919050565b60006020820190508181036000830152612ab481612a78565b9050919050565b6000604082019050612ad06000830185612124565b612add6020830184612346565b9392505050565b7f506f6f6c206173736574206e6f7420737570706f727465642e00000000000000600082015250565b6000612b1a6019836129d2565b9150612b2582612ae4565b602082019050919050565b60006020820190508181036000830152612b4981612b0d565b9050919050565b7f4173736574206e6f7420737570706f727465642e000000000000000000000000600082015250565b6000612b866014836129d2565b9150612b9182612b50565b602082019050919050565b60006020820190508181036000830152612bb581612b79565b9050919050565b7f417373657420696e616374697665000000000000000000000000000000000000600082015250565b6000612bf2600e836129d2565b9150612bfd82612bbc565b602082019050919050565b60006020820190508181036000830152612c2181612be5565b9050919050565b7f4465627420636f76657261676520686967686572207468616e206d6178696d7560008201527f6d2061636365707461626c650000000000000000000000000000000000000000602082015250565b6000612c84602c836129d2565b9150612c8f82612c28565b604082019050919050565b60006020820190508181036000830152612cb381612c77565b9050919050565b7f4d75737420626520616374697665000000000000000000000000000000000000600082015250565b6000612cf0600e836129d2565b9150612cfb82612cba565b602082019050919050565b60006020820190508181036000830152612d1f81612ce3565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612d82602e836129d2565b9150612d8d82612d26565b604082019050919050565b60006020820190508181036000830152612db181612d75565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e21826122a6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e5357612e52612de7565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612eba6026836129d2565b9150612ec582612e5e565b604082019050919050565b60006020820190508181036000830152612ee981612ead565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612f4c602b836129d2565b9150612f5782612ef0565b604082019050919050565b60006020820190508181036000830152612f7b81612f3f565b9050919050565b7f43616e6e6f742073657420616e20656d70747920737472696e6720617373657460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000612fde6021836129d2565b9150612fe982612f82565b604082019050919050565b6000602082019050818103600083015261300d81612fd1565b9050919050565b7f43616e6e6f742073657420616e20656d70747920616464726573732e00000000600082015250565b600061304a601c836129d2565b915061305582613014565b602082019050919050565b600060208201905081810360008301526130798161303d565b9050919050565b7f4173736574277320746f6b656e20616c72656164792065786973747300000000600082015250565b60006130b6601c836129d2565b91506130c182613080565b602082019050919050565b600060208201905081810360008301526130e5816130a9565b9050919050565b7f4173736574206164647265737320697320616c726561647920696e2075736500600082015250565b6000613122601f836129d2565b915061312d826130ec565b602082019050919050565b6000602082019050818103600083015261315181613115565b9050919050565b6000613163826122a6565b915061316e836122a6565b925082820390508181111561318657613185612de7565b5b92915050565b7f546f6b656e4d616e616765723a20506f6f6c206d757374206265206120636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b60006131e86025836129d2565b91506131f38261318c565b604082019050919050565b60006020820190508181036000830152613217816131db565b9050919050565b7f4173736574277320706f6f6c20616c7265616479206578697374730000000000600082015250565b6000613254601b836129d2565b915061325f8261321e565b602082019050919050565b6000602082019050818103600083015261328381613247565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220ad30bbb15448afdd372781082556f6a778092a58d2997d43c39a47704a3739c164736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063e0117bdd1161007c578063e0117bdd1461039c578063ecfc19a0146103cc578063f2fde38b146103e8578063f38555aa14610404578063f823f1e014610420578063fda4963b146104505761014d565b8063715018a614610302578063762b887a1461030c578063869c490d146103285780638da5cb5b14610346578063a2d2793314610364578063d1bc0831146103805761014d565b806335923e031161011557806335923e03146102085780633f8ef5c81461023857806363c918771461026857806366273c191461029857806368173bcf146102b65780636953c06c146102d25761014d565b80630d1ce2d2146101525780630edc25b61461016e57806321f880971461019e57806325eb876f146101bc57806331e7866c146101ec575b600080fd5b61016c60048036038101906101679190612094565b61046c565b005b610188600480360381019061018391906120f7565b610602565b6040516101959190612133565b60405180910390f35b6101a6610694565b6040516101b3919061220c565b60405180910390f35b6101d660048036038101906101d19190612266565b610722565b6040516101e39190612133565b60405180910390f35b610206600480360381019061020191906122dc565b61083d565b005b610222600480360381019061021d9190612094565b61094c565b60405161022f919061232b565b60405180910390f35b610252600480360381019061024d91906120f7565b610998565b60405161025f9190612355565b60405180910390f35b610282600480360381019061027d9190612370565b6109b0565b60405161028f9190612133565b60405180910390f35b6102a06109ef565b6040516102ad919061245b565b60405180910390f35b6102d060048036038101906102cb9190612094565b610a53565b005b6102ec60048036038101906102e79190612094565b610be9565b6040516102f99190612355565b60405180910390f35b61030a610c01565b005b61032660048036038101906103219190612752565b610c03565b005b610330610d03565b60405161033d919061245b565b60405180910390f35b61034e610d67565b60405161035b9190612133565b60405180910390f35b61037e600480360381019061037991906127ca565b610d91565b005b61039a600480360381019061039591906128d6565b610e95565b005b6103b660048036038101906103b19190612094565b610f57565b6040516103c39190612355565b60405180910390f35b6103e660048036038101906103e1919061291f565b610f6f565b005b61040260048036038101906103fd9190612094565b611052565b005b61041e6004803603810190610419919061295f565b611149565b005b61043a60048036038101906104359190612094565b61122e565b60405161044791906129b7565b60405180910390f35b61046a600480360381019061046591906128d6565b611246565b005b610474611308565b73ffffffffffffffffffffffffffffffffffffffff16610492610d67565b73ffffffffffffffffffffffffffffffffffffffff16146104e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104df90612a2f565b60405180910390fd5b6001606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056190612a9b565b60405180910390fd5b6002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167febd9f0d5b5df9f4d5180bbeec65fda8d99982e273d2a7365431b2a869aa826d482426040516105f7929190612abb565b60405180910390a250565b60008061061983606561131090919063ffffffff16565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068290612b30565b60405180910390fd5b80915050919050565b6060606e80548060200260200160405190810160405280929190818152602001828054801561071857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ce575b5050505050905090565b60008061073984606861131090919063ffffffff16565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a290612b9c565b60405180910390fd5b82610833576002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610832576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082990612c08565b60405180910390fd5b5b8091505092915050565b610845611308565b73ffffffffffffffffffffffffffffffffffffffff16610863610d67565b73ffffffffffffffffffffffffffffffffffffffff16146108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b090612a2f565b60405180910390fd5b670b90984060d35555811115610904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fb90612c9a565b60405180910390fd5b80606d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60006002606f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054149050919050565b60706020528060005260406000206000915090505481565b606e81815481106109c057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606065600001600001600001600001805480602002602001604051908101604052809291908181526020018280548015610a4957602002820191906000526020600020905b815481526020019060010190808311610a35575b5050505050905090565b610a5b611308565b73ffffffffffffffffffffffffffffffffffffffff16610a79610d67565b73ffffffffffffffffffffffffffffffffffffffff1614610acf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac690612a2f565b60405180910390fd5b6002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610b51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4890612d06565b60405180910390fd5b6001606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fbf0b0e2d837fddaee4742e91f53ca36bac9fdebdd571738027abb2b5f7c9a2f08242604051610bde929190612abb565b60405180910390a250565b606d6020528060005260406000206000915090505481565b565b600060019054906101000a900460ff16610c2b5760008054906101000a900460ff1615610c34565b610c33611339565b5b610c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6a90612d98565b60405180910390fd5b60008060019054906101000a900460ff161590508015610cc3576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610ccb61134a565b610cd483610d91565b610cdd82611149565b8015610cfe5760008060016101000a81548160ff0219169083151502179055505b505050565b60606068600001600001600001600001805480602002602001604051908101604052809291908181526020018280548015610d5d57602002820191906000526020600020905b815481526020019060010190808311610d49575b5050505050905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d99611308565b73ffffffffffffffffffffffffffffffffffffffff16610db7610d67565b73ffffffffffffffffffffffffffffffffffffffff1614610e0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0490612a2f565b60405180910390fd5b60005b8151811015610e9157610e7e828281518110610e2f57610e2e612db8565b5b602002602001015160000151838381518110610e4e57610e4d612db8565b5b602002602001015160200151848481518110610e6d57610e6c612db8565b5b6020026020010151604001516113a3565b8080610e8990612e16565b915050610e10565b5050565b610e9d611308565b73ffffffffffffffffffffffffffffffffffffffff16610ebb610d67565b73ffffffffffffffffffffffffffffffffffffffff1614610f11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0890612a2f565b60405180910390fd5b60005b8151811015610f5357610f40828281518110610f3357610f32612db8565b5b60200260200101516116e5565b8080610f4b90612e16565b915050610f14565b5050565b606f6020528060005260406000206000915090505481565b610f77611308565b73ffffffffffffffffffffffffffffffffffffffff16610f95610d67565b73ffffffffffffffffffffffffffffffffffffffff1614610feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe290612a2f565b60405180910390fd5b670b90984060d35555811115611036576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102d90612c9a565b60405180910390fd5b8060706000848152602001908152602001600020819055505050565b61105a611308565b73ffffffffffffffffffffffffffffffffffffffff16611078610d67565b73ffffffffffffffffffffffffffffffffffffffff16146110ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c590612a2f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361113d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113490612ed0565b60405180910390fd5b6111468161182d565b50565b611151611308565b73ffffffffffffffffffffffffffffffffffffffff1661116f610d67565b73ffffffffffffffffffffffffffffffffffffffff16146111c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111bc90612a2f565b60405180910390fd5b60005b815181101561122a576112178282815181106111e7576111e6612db8565b5b60200260200101516000015183838151811061120657611205612db8565b5b6020026020010151602001516118f3565b808061122290612e16565b9150506111c8565b5050565b606b6020528060005260406000206000915090505481565b61124e611308565b73ffffffffffffffffffffffffffffffffffffffff1661126c610d67565b73ffffffffffffffffffffffffffffffffffffffff16146112c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b990612a2f565b60405180910390fd5b60005b8151811015611304576112f18282815181106112e4576112e3612db8565b5b60200260200101516119fb565b80806112fc90612e16565b9150506112c5565b5050565b600033905090565b6000806000806113238660000186611a69565b91509150818160001c9350935050509250929050565b600061134430611ab8565b15905090565b600060019054906101000a900460ff16611399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139090612f62565b60405180910390fd5b6113a1611adb565b565b600083036113e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113dd90612ff4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144c90613060565b60405180910390fd5b611469836068611b3c90919063ffffffff16565b156114a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a0906130cc565b60405180910390fd5b6000801b606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461152d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152490613138565b60405180910390fd5b611537828261083d565b61154d83836068611b539092919063ffffffff16565b5082606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002606f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550606e829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001606e8054905061164c9190613158565b606c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550823373ffffffffffffffffffffffffffffffffffffffff167ff73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b684426040516116d8929190612abb565b60405180910390a3505050565b60006116f2826001610722565b90506116ff606883611b85565b506000801b606b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000606d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506117da81611b9c565b813373ffffffffffffffffffffffffffffffffffffffff167f228e158b51be6445b7bd2f4121209717a371d44c7c53d4085ae7f5e496153a93426040516118219190612355565b60405180910390a35050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6118fc81611d7f565b61193b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611932906131fe565b60405180910390fd5b61194f826065611b3c90919063ffffffff16565b1561198f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119869061326a565b60405180910390fd5b6119a582826065611b539092919063ffffffff16565b50813373ffffffffffffffffffffffffffffffffffffffff167fcfbf9a4f33420379df003923a1d986358bb97d4b3455baae186db1d5d35cda3e83426040516119ef929190612abb565b60405180910390a35050565b6000611a0682610602565b9050611a13606583611b85565b50813373ffffffffffffffffffffffffffffffffffffffff167ff658b7b16fbc2f0f51a3320cc57763ccd8d13f554c4eb34ff0f5b49624b32e838342604051611a5d929190612abb565b60405180910390a35050565b60008060008460020160008581526020019081526020016000205490506000801b8103611aa857611a9a8585611da2565b6000801b9250925050611ab1565b60018192509250505b9250929050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2190612f62565b60405180910390fd5b611b3a611b35611308565b61182d565b565b6000611b4b8360000183611da2565b905092915050565b6000611b7c84600001848473ffffffffffffffffffffffffffffffffffffffff1660001b611dc2565b90509392505050565b6000611b948360000183611dfd565b905092915050565b6000606c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506001606e80549050611bf29190613158565b8114611cef576000606e6001606e80549050611c0e9190613158565b81548110611c1f57611c1e612db8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080606e8381548110611ca557611ca4612db8565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b606e805480611d0157611d0061328a565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556000606c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000611dba8284600001611e3690919063ffffffff16565b905092915050565b60008184600201600085815260200190815260200160002081905550611df48385600001611e4d90919063ffffffff16565b90509392505050565b600082600201600083815260200190815260200160002060009055611e2e8284600001611e6490919063ffffffff16565b905092915050565b6000611e458360000183611e7b565b905092915050565b6000611e5c8360000183611e9e565b905092915050565b6000611e738360000183611f0e565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000611eaa8383611e7b565b611f03578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611f08565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114612016576000600182611f409190613158565b9050600060018660000180549050611f589190613158565b9050818114611fc7576000866000018281548110611f7957611f78612db8565b5b9060005260206000200154905080876000018481548110611f9d57611f9c612db8565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611fdb57611fda61328a565b5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061201c565b60009150505b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061206182612036565b9050919050565b61207181612056565b811461207c57600080fd5b50565b60008135905061208e81612068565b92915050565b6000602082840312156120aa576120a961202c565b5b60006120b88482850161207f565b91505092915050565b6000819050919050565b6120d4816120c1565b81146120df57600080fd5b50565b6000813590506120f1816120cb565b92915050565b60006020828403121561210d5761210c61202c565b5b600061211b848285016120e2565b91505092915050565b61212d81612056565b82525050565b60006020820190506121486000830184612124565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61218381612056565b82525050565b6000612195838361217a565b60208301905092915050565b6000602082019050919050565b60006121b98261214e565b6121c38185612159565b93506121ce8361216a565b8060005b838110156121ff5781516121e68882612189565b97506121f1836121a1565b9250506001810190506121d2565b5085935050505092915050565b6000602082019050818103600083015261222681846121ae565b905092915050565b60008115159050919050565b6122438161222e565b811461224e57600080fd5b50565b6000813590506122608161223a565b92915050565b6000806040838503121561227d5761227c61202c565b5b600061228b858286016120e2565b925050602061229c85828601612251565b9150509250929050565b6000819050919050565b6122b9816122a6565b81146122c457600080fd5b50565b6000813590506122d6816122b0565b92915050565b600080604083850312156122f3576122f261202c565b5b60006123018582860161207f565b9250506020612312858286016122c7565b9150509250929050565b6123258161222e565b82525050565b6000602082019050612340600083018461231c565b92915050565b61234f816122a6565b82525050565b600060208201905061236a6000830184612346565b92915050565b6000602082840312156123865761238561202c565b5b6000612394848285016122c7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123d2816120c1565b82525050565b60006123e483836123c9565b60208301905092915050565b6000602082019050919050565b60006124088261239d565b61241281856123a8565b935061241d836123b9565b8060005b8381101561244e57815161243588826123d8565b9750612440836123f0565b925050600181019050612421565b5085935050505092915050565b6000602082019050818103600083015261247581846123fd565b905092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124cb82612482565b810181811067ffffffffffffffff821117156124ea576124e9612493565b5b80604052505050565b60006124fd612022565b905061250982826124c2565b919050565b600067ffffffffffffffff82111561252957612528612493565b5b602082029050602081019050919050565b600080fd5b600080fd5b60006060828403121561255a5761255961253f565b5b61256460606124f3565b90506000612574848285016120e2565b60008301525060206125888482850161207f565b602083015250604061259c848285016122c7565b60408301525092915050565b60006125bb6125b68461250e565b6124f3565b905080838252602082019050606084028301858111156125de576125dd61253a565b5b835b8181101561260757806125f38882612544565b8452602084019350506060810190506125e0565b5050509392505050565b600082601f8301126126265761262561247d565b5b81356126368482602086016125a8565b91505092915050565b600067ffffffffffffffff82111561265a57612659612493565b5b602082029050602081019050919050565b6000604082840312156126815761268061253f565b5b61268b60406124f3565b9050600061269b848285016120e2565b60008301525060206126af8482850161207f565b60208301525092915050565b60006126ce6126c98461263f565b6124f3565b905080838252602082019050604084028301858111156126f1576126f061253a565b5b835b8181101561271a5780612706888261266b565b8452602084019350506040810190506126f3565b5050509392505050565b600082601f8301126127395761273861247d565b5b81356127498482602086016126bb565b91505092915050565b600080604083850312156127695761276861202c565b5b600083013567ffffffffffffffff81111561278757612786612031565b5b61279385828601612611565b925050602083013567ffffffffffffffff8111156127b4576127b3612031565b5b6127c085828601612724565b9150509250929050565b6000602082840312156127e0576127df61202c565b5b600082013567ffffffffffffffff8111156127fe576127fd612031565b5b61280a84828501612611565b91505092915050565b600067ffffffffffffffff82111561282e5761282d612493565b5b602082029050602081019050919050565b600061285261284d84612813565b6124f3565b905080838252602082019050602084028301858111156128755761287461253a565b5b835b8181101561289e578061288a88826120e2565b845260208401935050602081019050612877565b5050509392505050565b600082601f8301126128bd576128bc61247d565b5b81356128cd84826020860161283f565b91505092915050565b6000602082840312156128ec576128eb61202c565b5b600082013567ffffffffffffffff81111561290a57612909612031565b5b612916848285016128a8565b91505092915050565b600080604083850312156129365761293561202c565b5b6000612944858286016120e2565b9250506020612955858286016122c7565b9150509250929050565b6000602082840312156129755761297461202c565b5b600082013567ffffffffffffffff81111561299357612992612031565b5b61299f84828501612724565b91505092915050565b6129b1816120c1565b82525050565b60006020820190506129cc60008301846129a8565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612a196020836129d2565b9150612a24826129e3565b602082019050919050565b60006020820190508181036000830152612a4881612a0c565b9050919050565b7f4d75737420626520696e61637469766500000000000000000000000000000000600082015250565b6000612a856010836129d2565b9150612a9082612a4f565b602082019050919050565b60006020820190508181036000830152612ab481612a78565b9050919050565b6000604082019050612ad06000830185612124565b612add6020830184612346565b9392505050565b7f506f6f6c206173736574206e6f7420737570706f727465642e00000000000000600082015250565b6000612b1a6019836129d2565b9150612b2582612ae4565b602082019050919050565b60006020820190508181036000830152612b4981612b0d565b9050919050565b7f4173736574206e6f7420737570706f727465642e000000000000000000000000600082015250565b6000612b866014836129d2565b9150612b9182612b50565b602082019050919050565b60006020820190508181036000830152612bb581612b79565b9050919050565b7f417373657420696e616374697665000000000000000000000000000000000000600082015250565b6000612bf2600e836129d2565b9150612bfd82612bbc565b602082019050919050565b60006020820190508181036000830152612c2181612be5565b9050919050565b7f4465627420636f76657261676520686967686572207468616e206d6178696d7560008201527f6d2061636365707461626c650000000000000000000000000000000000000000602082015250565b6000612c84602c836129d2565b9150612c8f82612c28565b604082019050919050565b60006020820190508181036000830152612cb381612c77565b9050919050565b7f4d75737420626520616374697665000000000000000000000000000000000000600082015250565b6000612cf0600e836129d2565b9150612cfb82612cba565b602082019050919050565b60006020820190508181036000830152612d1f81612ce3565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612d82602e836129d2565b9150612d8d82612d26565b604082019050919050565b60006020820190508181036000830152612db181612d75565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e21826122a6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e5357612e52612de7565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612eba6026836129d2565b9150612ec582612e5e565b604082019050919050565b60006020820190508181036000830152612ee981612ead565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612f4c602b836129d2565b9150612f5782612ef0565b604082019050919050565b60006020820190508181036000830152612f7b81612f3f565b9050919050565b7f43616e6e6f742073657420616e20656d70747920737472696e6720617373657460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000612fde6021836129d2565b9150612fe982612f82565b604082019050919050565b6000602082019050818103600083015261300d81612fd1565b9050919050565b7f43616e6e6f742073657420616e20656d70747920616464726573732e00000000600082015250565b600061304a601c836129d2565b915061305582613014565b602082019050919050565b600060208201905081810360008301526130798161303d565b9050919050565b7f4173736574277320746f6b656e20616c72656164792065786973747300000000600082015250565b60006130b6601c836129d2565b91506130c182613080565b602082019050919050565b600060208201905081810360008301526130e5816130a9565b9050919050565b7f4173736574206164647265737320697320616c726561647920696e2075736500600082015250565b6000613122601f836129d2565b915061312d826130ec565b602082019050919050565b6000602082019050818103600083015261315181613115565b9050919050565b6000613163826122a6565b915061316e836122a6565b925082820390508181111561318657613185612de7565b5b92915050565b7f546f6b656e4d616e616765723a20506f6f6c206d757374206265206120636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b60006131e86025836129d2565b91506131f38261318c565b604082019050919050565b60006020820190508181036000830152613217816131db565b9050919050565b7f4173736574277320706f6f6c20616c7265616479206578697374730000000000600082015250565b6000613254601b836129d2565b915061325f8261321e565b602082019050919050565b6000602082019050818103600083015261328381613247565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220ad30bbb15448afdd372781082556f6a778092a58d2997d43c39a47704a3739c164736f6c63430008110033",
  "devdoc": {
    "events": {
      "PoolAssetAdded(address,bytes32,address,uint256)": {
        "details": "emitted after adding a pool asset",
        "params": {
          "performer": "an address of wallet adding the pool asset",
          "poolAddress": "an address of the pool asset",
          "poolAsset": "pool asset",
          "timestamp": "time of the pool asset addition*"
        }
      },
      "PoolAssetRemoved(address,bytes32,address,uint256)": {
        "details": "emitted after removing a pool asset",
        "params": {
          "performer": "an address of wallet removing the pool asset",
          "poolAddress": "an address of the pool asset",
          "poolAsset": "pool asset",
          "timestamp": "time of a pool asset removal*"
        }
      },
      "TokenAssetActivated(address,address,uint256)": {
        "details": "emitted after activating a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet activating a token asset",
          "timestamp": "time of activating a token asset*"
        }
      },
      "TokenAssetAdded(address,bytes32,address,uint256)": {
        "details": "emitted after adding a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet adding a token asset",
          "timestamp": "time of adding a token asset*",
          "tokenAsset": "token asset"
        }
      },
      "TokenAssetDeactivated(address,address,uint256)": {
        "details": "emitted after deactivating a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet deactivating a token asset",
          "timestamp": "time of deactivating a token asset*"
        }
      },
      "TokenAssetRemoved(address,bytes32,uint256)": {
        "details": "emitted after removing a token asset",
        "params": {
          "performer": "an address of the wallet removing a token asset",
          "timestamp": "time a token asset removal*",
          "tokenAsset": "token asset"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAssetAddress(bytes32,bool)": {
        "notice": "Returns address of an asset*"
      },
      "getPoolAddress(bytes32)": {
        "notice": "Returns address of an asset's lending pool*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11144,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "assetToPoolAddress",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(Bytes32ToAddressMap)23537_storage"
      },
      {
        "astId": 11147,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "assetToTokenAddress",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(Bytes32ToAddressMap)23537_storage"
      },
      {
        "astId": 11151,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenAddressToSymbol",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 11155,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenPositionInList",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11159,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "debtCoverage",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11162,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "supportedTokensList",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11166,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenToStatus",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11170,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "debtCoverageStaked",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bytes32Set)4321_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 4320,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4127_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToAddressMap)23537_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToAddressMap",
        "members": [
          {
            "astId": 23536,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)23307_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Map)23307_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 23302,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)4321_storage"
          },
          {
            "astId": 23306,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)4127_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4122,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4126,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}