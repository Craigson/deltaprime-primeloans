{
  "address": "0x938a0caa7a2Bf44E4be060e83C5579dEC0bC8518",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "exposureGroup",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "IdentifierToExposureGroupSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolAssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newExposure",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ProtocolExposureChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "groupIdentifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevMaxExposure",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxExposure",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentExposure",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ProtocolExposureSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "activateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            }
          ],
          "internalType": "struct TokenManager.poolAsset[]",
          "name": "poolAssets",
          "type": "tuple[]"
        }
      ],
      "name": "addPoolAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "debtCoverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenManager.Asset[]",
          "name": "tokenAssets",
          "type": "tuple[]"
        }
      ],
      "name": "addTokenAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "deactivateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "debtCoverageStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetIdentifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "exposureDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseProtocolExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolAssets",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "result",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokenAssets",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "result",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "allowInactive",
          "type": "bool"
        }
      ],
      "name": "getAssetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSmartLoansFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedTokensAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "groupToExposure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "current",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "identifierToExposureGroup",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetIdentifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "exposureIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseProtocolExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "debtCoverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenManager.Asset[]",
          "name": "tokenAssets",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            }
          ],
          "internalType": "struct TokenManager.poolAsset[]",
          "name": "poolAssets",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isTokenAssetActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_poolAssets",
          "type": "bytes32[]"
        }
      ],
      "name": "removePoolAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_tokenAssets",
          "type": "bytes32[]"
        }
      ],
      "name": "removeTokenAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "name": "setDebtCoverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "stakedAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "name": "setDebtCoverageStaked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "identifiers",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "exposureGroups",
          "type": "bytes32[]"
        }
      ],
      "name": "setIdentifiersToExposureGroups",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "groupIdentifiers",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxExposures",
          "type": "uint256[]"
        }
      ],
      "name": "setMaxProtocolsExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedTokensList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddressToSymbol",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x748f2b668de28594c1b7f87167f43e61a5d66d12d876f7040231ec6531a41cb3",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x938a0caa7a2Bf44E4be060e83C5579dEC0bC8518",
    "transactionIndex": 0,
    "gasUsed": "3595595",
    "logsBloom": "0x
    "blockHash": "0x2db8f783bbe9f7933a178b5aba95868b495eaaf1385afba1a7b8e1efa40eabab",
    "transactionHash": "0x748f2b668de28594c1b7f87167f43e61a5d66d12d876f7040231ec6531a41cb3",
    "logs": [],
    "blockNumber": 24600096,
    "cumulativeGasUsed": "3595595",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "fa23c61f86cec8c7de13e8bfa631887b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"exposureGroup\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IdentifierToExposureGroupSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolAssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExposure\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProtocolExposureChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"groupIdentifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevMaxExposure\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxExposure\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentExposure\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProtocolExposureSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"activateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"internalType\":\"struct TokenManager.poolAsset[]\",\"name\":\"poolAssets\",\"type\":\"tuple[]\"}],\"name\":\"addPoolAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtCoverage\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenManager.Asset[]\",\"name\":\"tokenAssets\",\"type\":\"tuple[]\"}],\"name\":\"addTokenAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"deactivateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"debtCoverageStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"exposureDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseProtocolExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolAssets\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"result\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenAssets\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"result\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"allowInactive\",\"type\":\"bool\"}],\"name\":\"getAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSmartLoansFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokensAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"groupToExposure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"identifierToExposureGroup\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"exposureIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseProtocolExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtCoverage\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenManager.Asset[]\",\"name\":\"tokenAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"internalType\":\"struct TokenManager.poolAsset[]\",\"name\":\"poolAssets\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenAssetActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_poolAssets\",\"type\":\"bytes32[]\"}],\"name\":\"removePoolAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_tokenAssets\",\"type\":\"bytes32[]\"}],\"name\":\"removeTokenAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"name\":\"setDebtCoverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakedAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"name\":\"setDebtCoverageStaked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"identifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"exposureGroups\",\"type\":\"bytes32[]\"}],\"name\":\"setIdentifiersToExposureGroups\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"groupIdentifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxExposures\",\"type\":\"uint256[]\"}],\"name\":\"setMaxProtocolsExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedTokensList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddressToSymbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"IdentifierToExposureGroupSet(address,bytes32,bytes32,uint256)\":{\"details\":\"emitted after associating identifier with a exposure group\",\"params\":{\"exposureGroup\":\"exposure group identifier\",\"identifier\":\"asset identifier\",\"performer\":\"an address of the wallet setting max exposure\",\"timestamp\":\"time of associating identifier with a exposure group*\"}},\"PoolAssetAdded(address,bytes32,address,uint256)\":{\"details\":\"emitted after adding a pool asset\",\"params\":{\"performer\":\"an address of wallet adding the pool asset\",\"poolAddress\":\"an address of the pool asset\",\"poolAsset\":\"pool asset\",\"timestamp\":\"time of the pool asset addition*\"}},\"PoolAssetRemoved(address,bytes32,address,uint256)\":{\"details\":\"emitted after removing a pool asset\",\"params\":{\"performer\":\"an address of wallet removing the pool asset\",\"poolAddress\":\"an address of the pool asset\",\"poolAsset\":\"pool asset\",\"timestamp\":\"time of a pool asset removal*\"}},\"ProtocolExposureChanged(address,bytes32,uint256,uint256)\":{\"details\":\"emitted after changing current protocol exposure\",\"params\":{\"identifier\":\"group identifier\",\"newExposure\":\"new current protocol exposure\",\"performer\":\"an address of the wallet changing the exposure\",\"timestamp\":\"time of associating identifier with a exposure group*\"}},\"ProtocolExposureSet(address,bytes32,uint256,uint256,uint256,uint256)\":{\"details\":\"emitted after setting max exposure for a given protocol.\",\"params\":{\"currentExposure\":\"current protocol exposure\",\"groupIdentifier\":\"exposure group identifier\",\"newMaxExposure\":\"new max protocol exposure\",\"performer\":\"an address of the wallet setting max exposure\",\"prevMaxExposure\":\"previous max protocol exposure\",\"timestamp\":\"time of setting max exposure*\"}},\"TokenAssetActivated(address,address,uint256)\":{\"details\":\"emitted after activating a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet activating a token asset\",\"timestamp\":\"time of activating a token asset*\"}},\"TokenAssetAdded(address,bytes32,address,uint256)\":{\"details\":\"emitted after adding a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet adding a token asset\",\"timestamp\":\"time of adding a token asset*\",\"tokenAsset\":\"token asset\"}},\"TokenAssetDeactivated(address,address,uint256)\":{\"details\":\"emitted after deactivating a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet deactivating a token asset\",\"timestamp\":\"time of deactivating a token asset*\"}},\"TokenAssetRemoved(address,bytes32,uint256)\":{\"details\":\"emitted after removing a token asset\",\"params\":{\"performer\":\"an address of the wallet removing a token asset\",\"timestamp\":\"time a token asset removal*\",\"tokenAsset\":\"token asset\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAssetAddress(bytes32,bool)\":{\"notice\":\"Returns address of an asset*\"},\"getPoolAddress(bytes32)\":{\"notice\":\"Returns address of an asset's lending pool*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenManager.sol\":\"TokenManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/TokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./lib/Bytes32EnumerableMap.sol\\\";\\r\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract TokenManager is OwnableUpgradeable {\\r\\n    /**\\r\\n     * For adding supported assets\\r\\n     **/\\r\\n    struct Asset {\\r\\n        bytes32 asset;\\r\\n        address assetAddress;\\r\\n        uint256 debtCoverage;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * For adding supported lending pools\\r\\n     **/\\r\\n    struct poolAsset {\\r\\n        bytes32 asset;\\r\\n        address poolAddress;\\r\\n    }\\r\\n\\r\\n    struct Exposure {\\r\\n        uint256 current;\\r\\n        uint256 max; // Setting max to 0 means no exposure limitations.\\r\\n    }\\r\\n\\r\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\r\\n\\r\\n    uint256 private constant _NOT_SUPPORTED = 0;\\r\\n    uint256 private constant _INACTIVE = 1;\\r\\n    uint256 private constant _ACTIVE = 2;\\r\\n\\r\\n    // Stores an asset's bytes32 symbol representation to pool's address mapping\\r\\n    EnumerableMap.Bytes32ToAddressMap private assetToPoolAddress;\\r\\n    // Stores an asset's bytes32 symbol representation to asset's address mapping\\r\\n    EnumerableMap.Bytes32ToAddressMap private assetToTokenAddress;\\r\\n    mapping(address => bytes32) public tokenAddressToSymbol;\\r\\n    mapping(address => uint256) private tokenPositionInList;\\r\\n    // used for defining different leverage ratios for tokens\\r\\n    mapping(address => uint256) public debtCoverage;\\r\\n    address[] public supportedTokensList;\\r\\n\\r\\n    mapping(address => uint256) public tokenToStatus;\\r\\n    // used for defining different leverage ratios for staked assets\\r\\n    mapping(bytes32 => uint256) public debtCoverageStaked;\\r\\n\\r\\n    mapping(bytes32 => bytes32) public identifierToExposureGroup;\\r\\n    mapping(bytes32 => Exposure) public groupToExposure;\\r\\n\\r\\n    function initialize(Asset[] memory tokenAssets, poolAsset[] memory poolAssets) external initializer {\\r\\n        __Ownable_init();\\r\\n\\r\\n        addTokenAssets(tokenAssets);\\r\\n        addPoolAssets(poolAssets);\\r\\n    }\\r\\n\\r\\n    function getAllPoolAssets() public view returns (bytes32[] memory result) {\\r\\n        return assetToPoolAddress._inner._keys._inner._values;\\r\\n    }\\r\\n\\r\\n    function getSupportedTokensAddresses() public view returns (address[] memory) {\\r\\n        return supportedTokensList;\\r\\n    }\\r\\n\\r\\n    function getAllTokenAssets() public view returns (bytes32[] memory result) {\\r\\n        return assetToTokenAddress._inner._keys._inner._values;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Returns address of an asset\\r\\n    **/\\r\\n    function getAssetAddress(bytes32 _asset, bool allowInactive) public view returns (address) {\\r\\n        (, address assetAddress) = assetToTokenAddress.tryGet(_asset);\\r\\n        require(assetAddress != address(0), \\\"Asset not supported.\\\");\\r\\n        if (!allowInactive) {\\r\\n            require(tokenToStatus[assetAddress] == _ACTIVE, \\\"Asset inactive\\\");\\r\\n        }\\r\\n\\r\\n        return assetAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Returns address of an asset's lending pool\\r\\n    **/\\r\\n    function getPoolAddress(bytes32 _asset) public view returns (address) {\\r\\n        (, address assetAddress) = assetToPoolAddress.tryGet(_asset);\\r\\n        require(assetAddress != address(0), \\\"Pool asset not supported.\\\");\\r\\n\\r\\n        return assetAddress;\\r\\n    }\\r\\n\\r\\n    function increaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureIncrease) public onlyPrimeAccountOrOwner {\\r\\n        bytes32 group = identifierToExposureGroup[assetIdentifier];\\r\\n        if(group != \\\"\\\"){\\r\\n            Exposure storage exposure = groupToExposure[group];\\r\\n            if(exposure.max != 0){\\r\\n                exposure.current += exposureIncrease;\\r\\n                require(exposure.current <= exposure.max, \\\"Max asset exposure breached\\\");\\r\\n                emit ProtocolExposureChanged(msg.sender, group, exposureIncrease, block.timestamp);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) public onlyPrimeAccountOrOwner {\\r\\n        bytes32 group = identifierToExposureGroup[assetIdentifier];\\r\\n        if(group != \\\"\\\"){\\r\\n            Exposure storage exposure = groupToExposure[group];\\r\\n            if(exposure.max != 0){\\r\\n                exposure.current = exposure.current <= exposureDecrease ? 0 : exposure.current - exposureDecrease;\\r\\n                emit ProtocolExposureChanged(msg.sender, group, exposureDecrease, block.timestamp);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setMaxProtocolsExposure(bytes32[] memory groupIdentifiers, uint256[] memory maxExposures) public onlyOwner {\\r\\n        require(groupIdentifiers.length == maxExposures.length, \\\"Arrays lengths mismatch\\\");\\r\\n        for (uint256 i = 0; i < groupIdentifiers.length; i++) {\\r\\n            _setMaxProtocolExposure(groupIdentifiers[i], maxExposures[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setMaxProtocolExposure(bytes32 groupIdentifier, uint256 maxExposure) internal {\\r\\n        require(groupIdentifier != \\\"\\\", \\\"Cannot set an empty string asset.\\\");\\r\\n        uint256 prevExposure = groupToExposure[groupIdentifier].max;\\r\\n        groupToExposure[groupIdentifier].max = maxExposure;\\r\\n\\r\\n        emit ProtocolExposureSet(msg.sender, groupIdentifier, prevExposure, maxExposure, groupToExposure[groupIdentifier].current , block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setIdentifiersToExposureGroups(bytes32[] memory identifiers, bytes32[] memory exposureGroups) public onlyOwner {\\r\\n        require(identifiers.length == exposureGroups.length, \\\"Arrays lengths mismatch\\\");\\r\\n        for(uint i=0; i<identifiers.length; i++){\\r\\n            identifierToExposureGroup[identifiers[i]] = exposureGroups[i];\\r\\n            emit IdentifierToExposureGroupSet(msg.sender, identifiers[i], exposureGroups[i], block.timestamp);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function addPoolAssets(poolAsset[] memory poolAssets) public onlyOwner {\\r\\n        for (uint256 i = 0; i < poolAssets.length; i++) {\\r\\n            _addPoolAsset(poolAssets[i].asset, poolAssets[i].poolAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _addPoolAsset(bytes32 _asset, address _poolAddress) internal {\\r\\n        require(Address.isContract(_poolAddress), \\\"TokenManager: Pool must be a contract\\\");\\r\\n        require(!assetToPoolAddress.contains(_asset), \\\"Asset's pool already exists\\\");\\r\\n        assetToPoolAddress.set(_asset, _poolAddress);\\r\\n        emit PoolAssetAdded(msg.sender, _asset, _poolAddress, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function addTokenAssets(Asset[] memory tokenAssets) public onlyOwner {\\r\\n        for (uint256 i = 0; i < tokenAssets.length; i++) {\\r\\n            _addTokenAsset(tokenAssets[i].asset, tokenAssets[i].assetAddress, tokenAssets[i].debtCoverage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isTokenAssetActive(address token) external view returns(bool) {\\r\\n        return tokenToStatus[token] == 2;\\r\\n    }\\r\\n\\r\\n    function activateToken(address token) public onlyOwner {\\r\\n        require(tokenToStatus[token] == _INACTIVE, \\\"Must be inactive\\\");\\r\\n        tokenToStatus[token] = _ACTIVE;\\r\\n        emit TokenAssetActivated(msg.sender, token, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function deactivateToken(address token) public onlyOwner {\\r\\n        require(tokenToStatus[token] == _ACTIVE, \\\"Must be active\\\");\\r\\n        tokenToStatus[token] = _INACTIVE;\\r\\n        emit TokenAssetDeactivated(msg.sender, token, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _addTokenAsset(bytes32 _asset, address _tokenAddress, uint256 _debtCoverage) internal {\\r\\n        require(_asset != \\\"\\\", \\\"Cannot set an empty string asset.\\\");\\r\\n        require(_tokenAddress != address(0), \\\"Cannot set an empty address.\\\");\\r\\n        require(!assetToTokenAddress.contains(_asset), \\\"Asset's token already exists\\\");\\r\\n        require(tokenAddressToSymbol[_tokenAddress] == 0, \\\"Asset address is already in use\\\");\\r\\n        setDebtCoverage(_tokenAddress, _debtCoverage);\\r\\n\\r\\n        assetToTokenAddress.set(_asset, _tokenAddress);\\r\\n        tokenAddressToSymbol[_tokenAddress] = _asset;\\r\\n        tokenToStatus[_tokenAddress] = _ACTIVE;\\r\\n\\r\\n        supportedTokensList.push(_tokenAddress);\\r\\n        tokenPositionInList[_tokenAddress] = supportedTokensList.length - 1;\\r\\n\\r\\n        emit TokenAssetAdded(msg.sender, _asset, _tokenAddress, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _removeTokenFromList(address tokenToRemove) internal {\\r\\n        // Move last address token to the `tokenToRemoveIndex` position (index of an asset that is being removed) in the address[] supportedTokensList\\r\\n        // and update map(address=>uint256) tokenPostitionInList if the token is not already the last element\\r\\n        uint256 tokenToRemoveIndex = tokenPositionInList[tokenToRemove];\\r\\n        if (tokenToRemoveIndex != (supportedTokensList.length - 1)) {\\r\\n            address currentLastToken = supportedTokensList[supportedTokensList.length - 1];\\r\\n            tokenPositionInList[currentLastToken] = tokenToRemoveIndex;\\r\\n            supportedTokensList[tokenToRemoveIndex] = currentLastToken;\\r\\n        }\\r\\n        // Remove last element - that is either the token that is being removed (if was already at the end)\\r\\n        // or some other asset that at this point was already copied to the `index` positon\\r\\n        supportedTokensList.pop();\\r\\n        tokenPositionInList[tokenToRemove] = 0;\\r\\n    }\\r\\n\\r\\n    function removeTokenAssets(bytes32[] memory _tokenAssets) public onlyOwner {\\r\\n        for (uint256 i = 0; i < _tokenAssets.length; i++) {\\r\\n            _removeTokenAsset(_tokenAssets[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _removeTokenAsset(bytes32 _tokenAsset) internal {\\r\\n        address tokenAddress = getAssetAddress(_tokenAsset, true);\\r\\n        EnumerableMap.remove(assetToTokenAddress, _tokenAsset);\\r\\n        tokenAddressToSymbol[tokenAddress] = 0;\\r\\n        tokenToStatus[tokenAddress] = _NOT_SUPPORTED;\\r\\n        debtCoverage[tokenAddress] = 0;\\r\\n        _removeTokenFromList(tokenAddress);\\r\\n        emit TokenAssetRemoved(msg.sender, _tokenAsset, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function removePoolAssets(bytes32[] memory _poolAssets) public onlyOwner {\\r\\n        for (uint256 i = 0; i < _poolAssets.length; i++) {\\r\\n            _removePoolAsset(_poolAssets[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _removePoolAsset(bytes32 _poolAsset) internal {\\r\\n        address poolAddress = getPoolAddress(_poolAsset);\\r\\n        EnumerableMap.remove(assetToPoolAddress, _poolAsset);\\r\\n        emit PoolAssetRemoved(msg.sender, _poolAsset, poolAddress, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setDebtCoverage(address token, uint256 coverage) public onlyOwner {\\r\\n        //LTV must be lower than 5\\r\\n        require(coverage <= 0.833333333333333333e18, 'Debt coverage higher than maximum acceptable');\\r\\n        debtCoverage[token] = coverage;\\r\\n    }\\r\\n\\r\\n    function setDebtCoverageStaked(bytes32 stakedAsset, uint256 coverage) public onlyOwner {\\r\\n        //LTV must be lower than 5\\r\\n        require(coverage <= 0.833333333333333333e18, 'Debt coverage higher than maximum acceptable');\\r\\n        debtCoverageStaked[stakedAsset] = coverage;\\r\\n    }\\r\\n\\r\\n    function getSmartLoansFactoryAddress() public view virtual returns (address) {\\r\\n        return 0x3Ea9D480295A73fd2aF95b4D96c2afF88b21B03D;\\r\\n    }\\r\\n\\r\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\r\\n\\r\\n    function renounceOwnership() public virtual override {}\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier onlyPrimeAccountOrOwner() {\\r\\n        IBorrowersRegistry borrowersRegistry = IBorrowersRegistry(getSmartLoansFactoryAddress());\\r\\n        require(borrowersRegistry.canBorrow(msg.sender) || owner() == _msgSender(), \\\"Only PrimeAccount or owner can change protocol exposure\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after changing current protocol exposure\\r\\n     * @param performer an address of the wallet changing the exposure\\r\\n     * @param identifier group identifier\\r\\n     * @param newExposure new current protocol exposure\\r\\n     * @param timestamp time of associating identifier with a exposure group\\r\\n     **/\\r\\n    event ProtocolExposureChanged(address indexed performer, bytes32 indexed identifier, uint256 newExposure, uint256 timestamp);\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after associating identifier with a exposure group\\r\\n     * @param performer an address of the wallet setting max exposure\\r\\n     * @param identifier asset identifier\\r\\n     * @param exposureGroup exposure group identifier\\r\\n     * @param timestamp time of associating identifier with a exposure group\\r\\n     **/\\r\\n    event IdentifierToExposureGroupSet(address indexed performer, bytes32 indexed identifier, bytes32 indexed exposureGroup, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after setting max exposure for a given protocol.\\r\\n     * @param performer an address of the wallet setting max exposure\\r\\n     * @param groupIdentifier exposure group identifier\\r\\n     * @param prevMaxExposure previous max protocol exposure\\r\\n     * @param newMaxExposure new max protocol exposure\\r\\n     * @param currentExposure current protocol exposure\\r\\n     * @param timestamp time of setting max exposure\\r\\n     **/\\r\\n    event ProtocolExposureSet(address indexed performer, bytes32 indexed groupIdentifier, uint256 prevMaxExposure, uint256 newMaxExposure, uint256 currentExposure, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after adding a token asset\\r\\n     * @param performer an address of the wallet adding a token asset\\r\\n     * @param tokenAsset token asset\\r\\n     * @param assetAddress an address of the token asset\\r\\n     * @param timestamp time of adding a token asset\\r\\n     **/\\r\\n    event TokenAssetAdded(address indexed performer, bytes32 indexed tokenAsset, address assetAddress, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after activating a token asset\\r\\n     * @param performer an address of the wallet activating a token asset\\r\\n     * @param assetAddress an address of the token asset\\r\\n     * @param timestamp time of activating a token asset\\r\\n     **/\\r\\n    event TokenAssetActivated(address indexed performer, address assetAddress, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after deactivating a token asset\\r\\n     * @param performer an address of the wallet deactivating a token asset\\r\\n     * @param assetAddress an address of the token asset\\r\\n     * @param timestamp time of deactivating a token asset\\r\\n     **/\\r\\n    event TokenAssetDeactivated(address indexed performer, address assetAddress, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after removing a token asset\\r\\n     * @param performer an address of the wallet removing a token asset\\r\\n     * @param tokenAsset token asset\\r\\n     * @param timestamp time a token asset removal\\r\\n     **/\\r\\n    event TokenAssetRemoved(address indexed performer, bytes32 indexed tokenAsset, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after adding a pool asset\\r\\n     * @param performer an address of wallet adding the pool asset\\r\\n     * @param poolAsset pool asset\\r\\n     * @param poolAddress an address of the pool asset\\r\\n     * @param timestamp time of the pool asset addition\\r\\n     **/\\r\\n    event PoolAssetAdded(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after removing a pool asset\\r\\n     * @param performer an address of wallet removing the pool asset\\r\\n     * @param poolAsset pool asset\\r\\n     * @param poolAddress an address of the pool asset\\r\\n     * @param timestamp time of a pool asset removal\\r\\n     **/\\r\\n    event PoolAssetRemoved(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\r\\n}\\r\\n\",\"keccak256\":\"0x64c4434c96287ce0b76486abd40b965ec7d75cededa3379feffbb75751d4317b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IBorrowersRegistry\\r\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\r\\n */\\r\\ninterface IBorrowersRegistry {\\r\\n    function canBorrow(address _account) external view returns (bool);\\r\\n\\r\\n    function getLoanForOwner(address _owner) external view returns (address);\\r\\n\\r\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xb8aaf225432273e91887b0ecda730ad062eaeef212cfd099e322393d1c3f56e3\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\r\\n\\r\\n/**\\r\\n * @dev Library for managing an enumerable variant of Solidity's\\r\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\r\\n * type.\\r\\n *\\r\\n * Maps have the following properties:\\r\\n *\\r\\n * - Entries are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n */\\r\\nlibrary EnumerableMap {\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Map type with\\r\\n    // bytes32 keys and values.\\r\\n    // The Map implementation uses private functions, and user-facing\\r\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\r\\n    // the underlying Map.\\r\\n    // This means that we can only create new EnumerableMaps for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Map {\\r\\n        // Storage of keys\\r\\n        EnumerableSet.Bytes32Set _keys;\\r\\n        mapping(bytes32 => bytes32) _values;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _set(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        bytes32 value\\r\\n    ) private returns (bool) {\\r\\n        map._values[key] = value;\\r\\n        return map._keys.add(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a key-value pair from a map. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\r\\n        delete map._values[key];\\r\\n        return map._keys.remove(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\r\\n        return map._keys.contains(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\r\\n     */\\r\\n    function _length(Map storage map) private view returns (uint256) {\\r\\n        return map._keys.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of entries inside the\\r\\n     * array, and it may change when more entries are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\r\\n        bytes32 key = map._keys.at(index);\\r\\n        return (key, map._values[key]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     */\\r\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        if (value == bytes32(0)) {\\r\\n            return (_contains(map, key), bytes32(0));\\r\\n        } else {\\r\\n            return (true, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\r\\n     */\\r\\n    function _get(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), errorMessage);\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    // Bytes32ToAddressMap\\r\\n\\r\\n    struct Bytes32ToAddressMap {\\r\\n        Map _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function set(\\r\\n        Bytes32ToAddressMap storage map,\\r\\n        bytes32 key,\\r\\n        address value\\r\\n    ) internal returns (bool) {\\r\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\r\\n        return _remove(map._inner, key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\r\\n        return _contains(map._inner, key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of elements in the map. O(1).\\r\\n     */\\r\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\r\\n        return _length(map._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\r\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\r\\n        return (key, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\r\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\r\\n        return (success, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, key))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\r\\n     */\\r\\n    function get(\\r\\n        Bytes32ToAddressMap storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c9de7c7f3406d29dc518366c68a88cb29aaf36907b95422cceac140959c2463\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614061806100206000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063762b887a11610104578063d1bc0831116100a2578063f38555aa11610071578063f38555aa1461054f578063f823f1e01461056b578063fda4963b1461059b578063fff3d39a146105b7576101da565b8063d1bc0831146104cb578063e0117bdd146104e7578063ecfc19a014610517578063f2fde38b14610533576101da565b8063a2d27933116100de578063a2d279331461045b578063adfe6a0f14610477578063c3cc6c7a14610493578063d195f047146104af576101da565b8063762b887a14610403578063869c490d1461041f5780638da5cb5b1461043d576101da565b8063326c2e971161017c57806366273c191161014b57806366273c191461038f57806368173bcf146103ad5780636953c06c146103c9578063715018a6146103f9576101da565b8063326c2e97146102cf57806335923e03146102ff5780633f8ef5c81461032f57806363c918771461035f576101da565b806321f88097116101b857806321f880971461024757806325eb876f146102655780632caeffe21461029557806331e7866c146102b3576101da565b806303223bb4146101df5780630d1ce2d2146101fb5780630edc25b614610217575b600080fd5b6101f960048036038101906101f49190612b36565b6105e8565b005b61021560048036038101906102109190612c0c565b61079c565b005b610231600480360381019061022c9190612c39565b610932565b60405161023e9190612c75565b60405180910390f35b61024f6109c4565b60405161025c9190612d4e565b60405180910390f35b61027f600480360381019061027a9190612da8565b610a52565b60405161028c9190612c75565b60405180910390f35b61029d610b6d565b6040516102aa9190612c75565b60405180910390f35b6102cd60048036038101906102c89190612e1e565b610b89565b005b6102e960048036038101906102e49190612c39565b610c98565b6040516102f69190612e6d565b60405180910390f35b61031960048036038101906103149190612c0c565b610cb0565b6040516103269190612e97565b60405180910390f35b61034960048036038101906103449190612c39565b610cfc565b6040516103569190612ec1565b60405180910390f35b61037960048036038101906103749190612edc565b610d14565b6040516103869190612c75565b60405180910390f35b610397610d53565b6040516103a49190612fc7565b60405180910390f35b6103c760048036038101906103c29190612c0c565b610db7565b005b6103e360048036038101906103de9190612c0c565b610f4d565b6040516103f09190612ec1565b60405180910390f35b610401610f65565b005b61041d60048036038101906104189190613228565b610f67565b005b610427611067565b6040516104349190612fc7565b60405180910390f35b6104456110cb565b6040516104529190612c75565b60405180910390f35b610475600480360381019061047091906132a0565b6110f5565b005b610491600480360381019061048c91906132e9565b6111f9565b005b6104ad60048036038101906104a891906132e9565b6113cb565b005b6104c960048036038101906104c491906133ec565b6115d7565b005b6104e560048036038101906104e09190613464565b6116f9565b005b61050160048036038101906104fc9190612c0c565b6117bb565b60405161050e9190612ec1565b60405180910390f35b610531600480360381019061052c91906132e9565b6117d3565b005b61054d60048036038101906105489190612c0c565b6118b6565b005b610569600480360381019061056491906134ad565b6119ad565b005b61058560048036038101906105809190612c0c565b611a92565b6040516105929190612e6d565b60405180910390f35b6105b560048036038101906105b09190613464565b611aaa565b005b6105d160048036038101906105cc9190612c39565b611b6c565b6040516105df9291906134f6565b60405180910390f35b6105f0611b90565b73ffffffffffffffffffffffffffffffffffffffff1661060e6110cb565b73ffffffffffffffffffffffffffffffffffffffff1614610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b9061357c565b60405180910390fd5b80518251146106a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069f906135e8565b60405180910390fd5b60005b8251811015610797578181815181106106c7576106c6613608565b5b6020026020010151607160008584815181106106e6576106e5613608565b5b602002602001015181526020019081526020016000208190555081818151811061071357610712613608565b5b602002602001015183828151811061072e5761072d613608565b5b60200260200101513373ffffffffffffffffffffffffffffffffffffffff167f6185e65460908e4de770553685b03f20921bc24a081923fc2ca1f0ba7d18cd5f4260405161077c9190612ec1565b60405180910390a4808061078f90613666565b9150506106ab565b505050565b6107a4611b90565b73ffffffffffffffffffffffffffffffffffffffff166107c26110cb565b73ffffffffffffffffffffffffffffffffffffffff1614610818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080f9061357c565b60405180910390fd5b6001606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461089a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610891906136fa565b60405180910390fd5b6002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167febd9f0d5b5df9f4d5180bbeec65fda8d99982e273d2a7365431b2a869aa826d4824260405161092792919061371a565b60405180910390a250565b600080610949836065611b9890919063ffffffff16565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b29061378f565b60405180910390fd5b80915050919050565b6060606e805480602002602001604051908101604052809291908181526020018280548015610a4857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116109fe575b5050505050905090565b600080610a69846068611b9890919063ffffffff16565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610adb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad2906137fb565b60405180910390fd5b82610b63576002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5990613867565b60405180910390fd5b5b8091505092915050565b6000733ea9d480295a73fd2af95b4d96c2aff88b21b03d905090565b610b91611b90565b73ffffffffffffffffffffffffffffffffffffffff16610baf6110cb565b73ffffffffffffffffffffffffffffffffffffffff1614610c05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfc9061357c565b60405180910390fd5b670b90984060d35555811115610c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c47906138f9565b60405180910390fd5b80606d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60716020528060005260406000206000915090505481565b60006002606f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054149050919050565b60706020528060005260406000206000915090505481565b606e8181548110610d2457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606065600001600001600001600001805480602002602001604051908101604052809291908181526020018280548015610dad57602002820191906000526020600020905b815481526020019060010190808311610d99575b5050505050905090565b610dbf611b90565b73ffffffffffffffffffffffffffffffffffffffff16610ddd6110cb565b73ffffffffffffffffffffffffffffffffffffffff1614610e33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2a9061357c565b60405180910390fd5b6002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eac90613965565b60405180910390fd5b6001606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fbf0b0e2d837fddaee4742e91f53ca36bac9fdebdd571738027abb2b5f7c9a2f08242604051610f4292919061371a565b60405180910390a250565b606d6020528060005260406000206000915090505481565b565b600060019054906101000a900460ff16610f8f5760008054906101000a900460ff1615610f98565b610f97611bc1565b5b610fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fce906139f7565b60405180910390fd5b60008060019054906101000a900460ff161590508015611027576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61102f611bd2565b611038836110f5565b611041826119ad565b80156110625760008060016101000a81548160ff0219169083151502179055505b505050565b606060686000016000016000016000018054806020026020016040519081016040528092919081815260200182805480156110c157602002820191906000526020600020905b8154815260200190600101908083116110ad575b5050505050905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6110fd611b90565b73ffffffffffffffffffffffffffffffffffffffff1661111b6110cb565b73ffffffffffffffffffffffffffffffffffffffff1614611171576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111689061357c565b60405180910390fd5b60005b81518110156111f5576111e282828151811061119357611192613608565b5b6020026020010151600001518383815181106111b2576111b1613608565b5b6020026020010151602001518484815181106111d1576111d0613608565b5b602002602001015160400151611c2b565b80806111ed90613666565b915050611174565b5050565b6000611203610b6d565b90508073ffffffffffffffffffffffffffffffffffffffff16630e7fc864336040518263ffffffff1660e01b815260040161123e9190612c75565b602060405180830381865afa15801561125b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127f9190613a2c565b806112c3575061128d611b90565b73ffffffffffffffffffffffffffffffffffffffff166112ab6110cb565b73ffffffffffffffffffffffffffffffffffffffff16145b611302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f990613acb565b60405180910390fd5b600060716000858152602001908152602001600020549050600081146113c557600060726000838152602001908152602001600020905060008160010154146113c3578381600001541115611366578381600001546113619190613aeb565b611369565b60005b8160000181905550813373ffffffffffffffffffffffffffffffffffffffff167f45262a952f63661e3b881eb82a0d0bd391ab35692bd26023356b06e452230d4386426040516113ba9291906134f6565b60405180910390a35b505b50505050565b60006113d5610b6d565b90508073ffffffffffffffffffffffffffffffffffffffff16630e7fc864336040518263ffffffff1660e01b81526004016114109190612c75565b602060405180830381865afa15801561142d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114519190613a2c565b80611495575061145f611b90565b73ffffffffffffffffffffffffffffffffffffffff1661147d6110cb565b73ffffffffffffffffffffffffffffffffffffffff16145b6114d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cb90613acb565b60405180910390fd5b600060716000858152602001908152602001600020549050600081146115d157600060726000838152602001908152602001600020905060008160010154146115cf578381600001600082825461152b9190613b1f565b9250508190555080600101548160000154111561157d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157490613b9f565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff167f45262a952f63661e3b881eb82a0d0bd391ab35692bd26023356b06e452230d4386426040516115c69291906134f6565b60405180910390a35b505b50505050565b6115df611b90565b73ffffffffffffffffffffffffffffffffffffffff166115fd6110cb565b73ffffffffffffffffffffffffffffffffffffffff1614611653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164a9061357c565b60405180910390fd5b8051825114611697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168e906135e8565b60405180910390fd5b60005b82518110156116f4576116e18382815181106116b9576116b8613608565b5b60200260200101518383815181106116d4576116d3613608565b5b6020026020010151611f6d565b80806116ec90613666565b91505061169a565b505050565b611701611b90565b73ffffffffffffffffffffffffffffffffffffffff1661171f6110cb565b73ffffffffffffffffffffffffffffffffffffffff1614611775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176c9061357c565b60405180910390fd5b60005b81518110156117b7576117a482828151811061179757611796613608565b5b6020026020010151612056565b80806117af90613666565b915050611778565b5050565b606f6020528060005260406000206000915090505481565b6117db611b90565b73ffffffffffffffffffffffffffffffffffffffff166117f96110cb565b73ffffffffffffffffffffffffffffffffffffffff161461184f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118469061357c565b60405180910390fd5b670b90984060d3555581111561189a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611891906138f9565b60405180910390fd5b8060706000848152602001908152602001600020819055505050565b6118be611b90565b73ffffffffffffffffffffffffffffffffffffffff166118dc6110cb565b73ffffffffffffffffffffffffffffffffffffffff1614611932576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119299061357c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036119a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199890613c31565b60405180910390fd5b6119aa8161219e565b50565b6119b5611b90565b73ffffffffffffffffffffffffffffffffffffffff166119d36110cb565b73ffffffffffffffffffffffffffffffffffffffff1614611a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a209061357c565b60405180910390fd5b60005b8151811015611a8e57611a7b828281518110611a4b57611a4a613608565b5b602002602001015160000151838381518110611a6a57611a69613608565b5b602002602001015160200151612264565b8080611a8690613666565b915050611a2c565b5050565b606b6020528060005260406000206000915090505481565b611ab2611b90565b73ffffffffffffffffffffffffffffffffffffffff16611ad06110cb565b73ffffffffffffffffffffffffffffffffffffffff1614611b26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1d9061357c565b60405180910390fd5b60005b8151811015611b6857611b55828281518110611b4857611b47613608565b5b602002602001015161236c565b8080611b6090613666565b915050611b29565b5050565b60726020528060005260406000206000915090508060000154908060010154905082565b600033905090565b600080600080611bab86600001866123da565b91509150818160001c9350935050509250929050565b6000611bcc30612429565b15905090565b600060019054906101000a900460ff16611c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1890613cc3565b60405180910390fd5b611c2961244c565b565b60008303611c6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6590613d55565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611cdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd490613dc1565b60405180910390fd5b611cf18360686124ad90919063ffffffff16565b15611d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2890613e2d565b60405180910390fd5b6000801b606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611db5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dac90613e99565b60405180910390fd5b611dbf8282610b89565b611dd5838360686124c49092919063ffffffff16565b5082606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002606f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550606e829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001606e80549050611ed49190613aeb565b606c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550823373ffffffffffffffffffffffffffffffffffffffff167ff73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b68442604051611f6092919061371a565b60405180910390a3505050565b60008203611fb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa790613d55565b60405180910390fd5b600060726000848152602001908152602001600020600101549050816072600085815260200190815260200160002060010181905550823373ffffffffffffffffffffffffffffffffffffffff167f4e3db1a563ebfee7c496974d792038536dc8311892551dc36d19116131e3dd3c83856072600089815260200190815260200160002060000154426040516120499493929190613eb9565b60405180910390a3505050565b6000612063826001610a52565b90506120706068836124f6565b506000801b606b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000606d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061214b8161250d565b813373ffffffffffffffffffffffffffffffffffffffff167f228e158b51be6445b7bd2f4121209717a371d44c7c53d4085ae7f5e496153a93426040516121929190612ec1565b60405180910390a35050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61226d816126f0565b6122ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a390613f70565b60405180910390fd5b6122c08260656124ad90919063ffffffff16565b15612300576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f790613fdc565b60405180910390fd5b612316828260656124c49092919063ffffffff16565b50813373ffffffffffffffffffffffffffffffffffffffff167fcfbf9a4f33420379df003923a1d986358bb97d4b3455baae186db1d5d35cda3e834260405161236092919061371a565b60405180910390a35050565b600061237782610932565b90506123846065836124f6565b50813373ffffffffffffffffffffffffffffffffffffffff167ff658b7b16fbc2f0f51a3320cc57763ccd8d13f554c4eb34ff0f5b49624b32e8383426040516123ce92919061371a565b60405180910390a35050565b60008060008460020160008581526020019081526020016000205490506000801b81036124195761240b8585612713565b6000801b9250925050612422565b60018192509250505b9250929050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661249b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249290613cc3565b60405180910390fd5b6124ab6124a6611b90565b61219e565b565b60006124bc8360000183612713565b905092915050565b60006124ed84600001848473ffffffffffffffffffffffffffffffffffffffff1660001b612733565b90509392505050565b6000612505836000018361276e565b905092915050565b6000606c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506001606e805490506125639190613aeb565b8114612660576000606e6001606e8054905061257f9190613aeb565b815481106125905761258f613608565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080606e838154811061261657612615613608565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b606e80548061267257612671613ffc565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556000606c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600061272b82846000016127a790919063ffffffff16565b905092915050565b6000818460020160008581526020019081526020016000208190555061276583856000016127be90919063ffffffff16565b90509392505050565b60008260020160008381526020019081526020016000206000905561279f82846000016127d590919063ffffffff16565b905092915050565b60006127b683600001836127ec565b905092915050565b60006127cd836000018361280f565b905092915050565b60006127e4836000018361287f565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600061281b83836127ec565b612874578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612879565b600090505b92915050565b600080836001016000848152602001908152602001600020549050600081146129875760006001826128b19190613aeb565b90506000600186600001805490506128c99190613aeb565b90508181146129385760008660000182815481106128ea576128e9613608565b5b906000526020600020015490508087600001848154811061290e5761290d613608565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061294c5761294b613ffc565b5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061298d565b60009150505b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6129f5826129ac565b810181811067ffffffffffffffff82111715612a1457612a136129bd565b5b80604052505050565b6000612a27612993565b9050612a3382826129ec565b919050565b600067ffffffffffffffff821115612a5357612a526129bd565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b612a7c81612a69565b8114612a8757600080fd5b50565b600081359050612a9981612a73565b92915050565b6000612ab2612aad84612a38565b612a1d565b90508083825260208201905060208402830185811115612ad557612ad4612a64565b5b835b81811015612afe5780612aea8882612a8a565b845260208401935050602081019050612ad7565b5050509392505050565b600082601f830112612b1d57612b1c6129a7565b5b8135612b2d848260208601612a9f565b91505092915050565b60008060408385031215612b4d57612b4c61299d565b5b600083013567ffffffffffffffff811115612b6b57612b6a6129a2565b5b612b7785828601612b08565b925050602083013567ffffffffffffffff811115612b9857612b976129a2565b5b612ba485828601612b08565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612bd982612bae565b9050919050565b612be981612bce565b8114612bf457600080fd5b50565b600081359050612c0681612be0565b92915050565b600060208284031215612c2257612c2161299d565b5b6000612c3084828501612bf7565b91505092915050565b600060208284031215612c4f57612c4e61299d565b5b6000612c5d84828501612a8a565b91505092915050565b612c6f81612bce565b82525050565b6000602082019050612c8a6000830184612c66565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612cc581612bce565b82525050565b6000612cd78383612cbc565b60208301905092915050565b6000602082019050919050565b6000612cfb82612c90565b612d058185612c9b565b9350612d1083612cac565b8060005b83811015612d41578151612d288882612ccb565b9750612d3383612ce3565b925050600181019050612d14565b5085935050505092915050565b60006020820190508181036000830152612d688184612cf0565b905092915050565b60008115159050919050565b612d8581612d70565b8114612d9057600080fd5b50565b600081359050612da281612d7c565b92915050565b60008060408385031215612dbf57612dbe61299d565b5b6000612dcd85828601612a8a565b9250506020612dde85828601612d93565b9150509250929050565b6000819050919050565b612dfb81612de8565b8114612e0657600080fd5b50565b600081359050612e1881612df2565b92915050565b60008060408385031215612e3557612e3461299d565b5b6000612e4385828601612bf7565b9250506020612e5485828601612e09565b9150509250929050565b612e6781612a69565b82525050565b6000602082019050612e826000830184612e5e565b92915050565b612e9181612d70565b82525050565b6000602082019050612eac6000830184612e88565b92915050565b612ebb81612de8565b82525050565b6000602082019050612ed66000830184612eb2565b92915050565b600060208284031215612ef257612ef161299d565b5b6000612f0084828501612e09565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612f3e81612a69565b82525050565b6000612f508383612f35565b60208301905092915050565b6000602082019050919050565b6000612f7482612f09565b612f7e8185612f14565b9350612f8983612f25565b8060005b83811015612fba578151612fa18882612f44565b9750612fac83612f5c565b925050600181019050612f8d565b5085935050505092915050565b60006020820190508181036000830152612fe18184612f69565b905092915050565b600067ffffffffffffffff821115613004576130036129bd565b5b602082029050602081019050919050565b600080fd5b6000606082840312156130305761302f613015565b5b61303a6060612a1d565b9050600061304a84828501612a8a565b600083015250602061305e84828501612bf7565b602083015250604061307284828501612e09565b60408301525092915050565b600061309161308c84612fe9565b612a1d565b905080838252602082019050606084028301858111156130b4576130b3612a64565b5b835b818110156130dd57806130c9888261301a565b8452602084019350506060810190506130b6565b5050509392505050565b600082601f8301126130fc576130fb6129a7565b5b813561310c84826020860161307e565b91505092915050565b600067ffffffffffffffff8211156131305761312f6129bd565b5b602082029050602081019050919050565b60006040828403121561315757613156613015565b5b6131616040612a1d565b9050600061317184828501612a8a565b600083015250602061318584828501612bf7565b60208301525092915050565b60006131a461319f84613115565b612a1d565b905080838252602082019050604084028301858111156131c7576131c6612a64565b5b835b818110156131f057806131dc8882613141565b8452602084019350506040810190506131c9565b5050509392505050565b600082601f83011261320f5761320e6129a7565b5b813561321f848260208601613191565b91505092915050565b6000806040838503121561323f5761323e61299d565b5b600083013567ffffffffffffffff81111561325d5761325c6129a2565b5b613269858286016130e7565b925050602083013567ffffffffffffffff81111561328a576132896129a2565b5b613296858286016131fa565b9150509250929050565b6000602082840312156132b6576132b561299d565b5b600082013567ffffffffffffffff8111156132d4576132d36129a2565b5b6132e0848285016130e7565b91505092915050565b60008060408385031215613300576132ff61299d565b5b600061330e85828601612a8a565b925050602061331f85828601612e09565b9150509250929050565b600067ffffffffffffffff821115613344576133436129bd565b5b602082029050602081019050919050565b600061336861336384613329565b612a1d565b9050808382526020820190506020840283018581111561338b5761338a612a64565b5b835b818110156133b457806133a08882612e09565b84526020840193505060208101905061338d565b5050509392505050565b600082601f8301126133d3576133d26129a7565b5b81356133e3848260208601613355565b91505092915050565b600080604083850312156134035761340261299d565b5b600083013567ffffffffffffffff811115613421576134206129a2565b5b61342d85828601612b08565b925050602083013567ffffffffffffffff81111561344e5761344d6129a2565b5b61345a858286016133be565b9150509250929050565b60006020828403121561347a5761347961299d565b5b600082013567ffffffffffffffff811115613498576134976129a2565b5b6134a484828501612b08565b91505092915050565b6000602082840312156134c3576134c261299d565b5b600082013567ffffffffffffffff8111156134e1576134e06129a2565b5b6134ed848285016131fa565b91505092915050565b600060408201905061350b6000830185612eb2565b6135186020830184612eb2565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061356660208361351f565b915061357182613530565b602082019050919050565b6000602082019050818103600083015261359581613559565b9050919050565b7f417272617973206c656e67746873206d69736d61746368000000000000000000600082015250565b60006135d260178361351f565b91506135dd8261359c565b602082019050919050565b60006020820190508181036000830152613601816135c5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061367182612de8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036136a3576136a2613637565b5b600182019050919050565b7f4d75737420626520696e61637469766500000000000000000000000000000000600082015250565b60006136e460108361351f565b91506136ef826136ae565b602082019050919050565b60006020820190508181036000830152613713816136d7565b9050919050565b600060408201905061372f6000830185612c66565b61373c6020830184612eb2565b9392505050565b7f506f6f6c206173736574206e6f7420737570706f727465642e00000000000000600082015250565b600061377960198361351f565b915061378482613743565b602082019050919050565b600060208201905081810360008301526137a88161376c565b9050919050565b7f4173736574206e6f7420737570706f727465642e000000000000000000000000600082015250565b60006137e560148361351f565b91506137f0826137af565b602082019050919050565b60006020820190508181036000830152613814816137d8565b9050919050565b7f417373657420696e616374697665000000000000000000000000000000000000600082015250565b6000613851600e8361351f565b915061385c8261381b565b602082019050919050565b6000602082019050818103600083015261388081613844565b9050919050565b7f4465627420636f76657261676520686967686572207468616e206d6178696d7560008201527f6d2061636365707461626c650000000000000000000000000000000000000000602082015250565b60006138e3602c8361351f565b91506138ee82613887565b604082019050919050565b60006020820190508181036000830152613912816138d6565b9050919050565b7f4d75737420626520616374697665000000000000000000000000000000000000600082015250565b600061394f600e8361351f565b915061395a82613919565b602082019050919050565b6000602082019050818103600083015261397e81613942565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006139e1602e8361351f565b91506139ec82613985565b604082019050919050565b60006020820190508181036000830152613a10816139d4565b9050919050565b600081519050613a2681612d7c565b92915050565b600060208284031215613a4257613a4161299d565b5b6000613a5084828501613a17565b91505092915050565b7f4f6e6c79205072696d654163636f756e74206f72206f776e65722063616e206360008201527f68616e67652070726f746f636f6c206578706f73757265000000000000000000602082015250565b6000613ab560378361351f565b9150613ac082613a59565b604082019050919050565b60006020820190508181036000830152613ae481613aa8565b9050919050565b6000613af682612de8565b9150613b0183612de8565b9250828203905081811115613b1957613b18613637565b5b92915050565b6000613b2a82612de8565b9150613b3583612de8565b9250828201905080821115613b4d57613b4c613637565b5b92915050565b7f4d6178206173736574206578706f737572652062726561636865640000000000600082015250565b6000613b89601b8361351f565b9150613b9482613b53565b602082019050919050565b60006020820190508181036000830152613bb881613b7c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613c1b60268361351f565b9150613c2682613bbf565b604082019050919050565b60006020820190508181036000830152613c4a81613c0e565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613cad602b8361351f565b9150613cb882613c51565b604082019050919050565b60006020820190508181036000830152613cdc81613ca0565b9050919050565b7f43616e6e6f742073657420616e20656d70747920737472696e6720617373657460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000613d3f60218361351f565b9150613d4a82613ce3565b604082019050919050565b60006020820190508181036000830152613d6e81613d32565b9050919050565b7f43616e6e6f742073657420616e20656d70747920616464726573732e00000000600082015250565b6000613dab601c8361351f565b9150613db682613d75565b602082019050919050565b60006020820190508181036000830152613dda81613d9e565b9050919050565b7f4173736574277320746f6b656e20616c72656164792065786973747300000000600082015250565b6000613e17601c8361351f565b9150613e2282613de1565b602082019050919050565b60006020820190508181036000830152613e4681613e0a565b9050919050565b7f4173736574206164647265737320697320616c726561647920696e2075736500600082015250565b6000613e83601f8361351f565b9150613e8e82613e4d565b602082019050919050565b60006020820190508181036000830152613eb281613e76565b9050919050565b6000608082019050613ece6000830187612eb2565b613edb6020830186612eb2565b613ee86040830185612eb2565b613ef56060830184612eb2565b95945050505050565b7f546f6b656e4d616e616765723a20506f6f6c206d757374206265206120636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b6000613f5a60258361351f565b9150613f6582613efe565b604082019050919050565b60006020820190508181036000830152613f8981613f4d565b9050919050565b7f4173736574277320706f6f6c20616c7265616479206578697374730000000000600082015250565b6000613fc6601b8361351f565b9150613fd182613f90565b602082019050919050565b60006020820190508181036000830152613ff581613fb9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220aaef6015a1b2309266d9dad3a9c2fb25a512806d636be2cb3de891d3fceb933d64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "IdentifierToExposureGroupSet(address,bytes32,bytes32,uint256)": {
        "details": "emitted after associating identifier with a exposure group",
        "params": {
          "exposureGroup": "exposure group identifier",
          "identifier": "asset identifier",
          "performer": "an address of the wallet setting max exposure",
          "timestamp": "time of associating identifier with a exposure group*"
        }
      },
      "PoolAssetAdded(address,bytes32,address,uint256)": {
        "details": "emitted after adding a pool asset",
        "params": {
          "performer": "an address of wallet adding the pool asset",
          "poolAddress": "an address of the pool asset",
          "poolAsset": "pool asset",
          "timestamp": "time of the pool asset addition*"
        }
      },
      "PoolAssetRemoved(address,bytes32,address,uint256)": {
        "details": "emitted after removing a pool asset",
        "params": {
          "performer": "an address of wallet removing the pool asset",
          "poolAddress": "an address of the pool asset",
          "poolAsset": "pool asset",
          "timestamp": "time of a pool asset removal*"
        }
      },
      "ProtocolExposureChanged(address,bytes32,uint256,uint256)": {
        "details": "emitted after changing current protocol exposure",
        "params": {
          "identifier": "group identifier",
          "newExposure": "new current protocol exposure",
          "performer": "an address of the wallet changing the exposure",
          "timestamp": "time of associating identifier with a exposure group*"
        }
      },
      "ProtocolExposureSet(address,bytes32,uint256,uint256,uint256,uint256)": {
        "details": "emitted after setting max exposure for a given protocol.",
        "params": {
          "currentExposure": "current protocol exposure",
          "groupIdentifier": "exposure group identifier",
          "newMaxExposure": "new max protocol exposure",
          "performer": "an address of the wallet setting max exposure",
          "prevMaxExposure": "previous max protocol exposure",
          "timestamp": "time of setting max exposure*"
        }
      },
      "TokenAssetActivated(address,address,uint256)": {
        "details": "emitted after activating a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet activating a token asset",
          "timestamp": "time of activating a token asset*"
        }
      },
      "TokenAssetAdded(address,bytes32,address,uint256)": {
        "details": "emitted after adding a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet adding a token asset",
          "timestamp": "time of adding a token asset*",
          "tokenAsset": "token asset"
        }
      },
      "TokenAssetDeactivated(address,address,uint256)": {
        "details": "emitted after deactivating a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet deactivating a token asset",
          "timestamp": "time of deactivating a token asset*"
        }
      },
      "TokenAssetRemoved(address,bytes32,uint256)": {
        "details": "emitted after removing a token asset",
        "params": {
          "performer": "an address of the wallet removing a token asset",
          "timestamp": "time a token asset removal*",
          "tokenAsset": "token asset"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAssetAddress(bytes32,bool)": {
        "notice": "Returns address of an asset*"
      },
      "getPoolAddress(bytes32)": {
        "notice": "Returns address of an asset's lending pool*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14607,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "assetToPoolAddress",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(Bytes32ToAddressMap)29313_storage"
      },
      {
        "astId": 14610,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "assetToTokenAddress",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(Bytes32ToAddressMap)29313_storage"
      },
      {
        "astId": 14614,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenAddressToSymbol",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 14618,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenPositionInList",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14622,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "debtCoverage",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14625,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "supportedTokensList",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14629,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenToStatus",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14633,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "debtCoverageStaked",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 14637,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "identifierToExposureGroup",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 14642,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "groupToExposure",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_bytes32,t_struct(Exposure)14591_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(Exposure)14591_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TokenManager.Exposure)",
        "numberOfBytes": "32",
        "value": "t_struct(Exposure)14591_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bytes32Set)5608_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 5607,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5414_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToAddressMap)29313_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToAddressMap",
        "members": [
          {
            "astId": 29312,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)29083_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Exposure)14591_storage": {
        "encoding": "inplace",
        "label": "struct TokenManager.Exposure",
        "members": [
          {
            "astId": 14588,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "current",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14590,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "max",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Map)29083_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 29078,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)5608_storage"
          },
          {
            "astId": 29082,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)5414_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5409,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5413,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}