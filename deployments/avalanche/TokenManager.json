{
  "address": "0x28739d2A05D754b51F3441cBF64d4D2635ccfABC",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolAssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "activateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            }
          ],
          "internalType": "struct TokenManager.poolAsset[]",
          "name": "poolAssets",
          "type": "tuple[]"
        }
      ],
      "name": "addPoolAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "debtCoverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenManager.Asset[]",
          "name": "tokenAssets",
          "type": "tuple[]"
        }
      ],
      "name": "addTokenAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "deactivateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolAssets",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "result",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokenAssets",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "result",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "allowInactive",
          "type": "bool"
        }
      ],
      "name": "getAssetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedTokensAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "debtCoverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenManager.Asset[]",
          "name": "tokenAssets",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            }
          ],
          "internalType": "struct TokenManager.poolAsset[]",
          "name": "poolAssets",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isTokenAssetActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_poolAssets",
          "type": "bytes32[]"
        }
      ],
      "name": "removePoolAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_tokenAssets",
          "type": "bytes32[]"
        }
      ],
      "name": "removeTokenAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "name": "setDebtCoverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedTokensList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddressToSymbol",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x38f8ee9021529ff955a14d7abd501760c0e24ddc2a4b70f1c1149e77fee17799",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x28739d2A05D754b51F3441cBF64d4D2635ccfABC",
    "transactionIndex": 0,
    "gasUsed": "2766689",
    "logsBloom": "0x
    "blockHash": "0x9509c549ac1ef7acf192c062678534dd46c99e9c3abc177e57e7a32b7866aa5d",
    "transactionHash": "0x38f8ee9021529ff955a14d7abd501760c0e24ddc2a4b70f1c1149e77fee17799",
    "logs": [],
    "blockNumber": 23431119,
    "cumulativeGasUsed": "2766689",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b1653a4f0e14ac944ac8bfdc8c1d1665",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolAssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"activateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"internalType\":\"struct TokenManager.poolAsset[]\",\"name\":\"poolAssets\",\"type\":\"tuple[]\"}],\"name\":\"addPoolAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtCoverage\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenManager.Asset[]\",\"name\":\"tokenAssets\",\"type\":\"tuple[]\"}],\"name\":\"addTokenAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"deactivateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolAssets\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"result\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenAssets\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"result\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"allowInactive\",\"type\":\"bool\"}],\"name\":\"getAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokensAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtCoverage\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenManager.Asset[]\",\"name\":\"tokenAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"internalType\":\"struct TokenManager.poolAsset[]\",\"name\":\"poolAssets\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenAssetActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_poolAssets\",\"type\":\"bytes32[]\"}],\"name\":\"removePoolAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_tokenAssets\",\"type\":\"bytes32[]\"}],\"name\":\"removeTokenAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"name\":\"setDebtCoverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedTokensList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddressToSymbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"PoolAssetAdded(address,bytes32,address,uint256)\":{\"details\":\"emitted after adding a pool asset\",\"params\":{\"performer\":\"an address of wallet adding the pool asset\",\"poolAddress\":\"an address of the pool asset\",\"poolAsset\":\"pool asset\",\"timestamp\":\"time of the pool asset addition*\"}},\"PoolAssetRemoved(address,bytes32,address,uint256)\":{\"details\":\"emitted after removing a pool asset\",\"params\":{\"performer\":\"an address of wallet removing the pool asset\",\"poolAddress\":\"an address of the pool asset\",\"poolAsset\":\"pool asset\",\"timestamp\":\"time of a pool asset removal*\"}},\"TokenAssetActivated(address,address,uint256)\":{\"details\":\"emitted after activating a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet activating a token asset\",\"timestamp\":\"time of activating a token asset*\"}},\"TokenAssetAdded(address,bytes32,address,uint256)\":{\"details\":\"emitted after adding a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet adding a token asset\",\"timestamp\":\"time of adding a token asset*\",\"tokenAsset\":\"token asset\"}},\"TokenAssetDeactivated(address,address,uint256)\":{\"details\":\"emitted after deactivating a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet deactivating a token asset\",\"timestamp\":\"time of deactivating a token asset*\"}},\"TokenAssetRemoved(address,bytes32,uint256)\":{\"details\":\"emitted after removing a token asset\",\"params\":{\"performer\":\"an address of the wallet removing a token asset\",\"timestamp\":\"time a token asset removal*\",\"tokenAsset\":\"token asset\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAssetAddress(bytes32,bool)\":{\"notice\":\"Returns address of an asset*\"},\"getPoolAddress(bytes32)\":{\"notice\":\"Returns address of an asset's lending pool*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenManager.sol\":\"TokenManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/TokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\npragma solidity 0.8.17;\\n\\nimport \\\"./lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract TokenManager is OwnableUpgradeable {\\n    /**\\n     * For adding supported assets\\n     **/\\n    struct Asset {\\n        bytes32 asset;\\n        address assetAddress;\\n        uint256 debtCoverage;\\n    }\\n\\n    /**\\n     * For adding supported lending pools\\n     **/\\n    struct poolAsset {\\n        bytes32 asset;\\n        address poolAddress;\\n    }\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    uint256 private constant _NOT_SUPPORTED = 0;\\n    uint256 private constant _INACTIVE = 1;\\n    uint256 private constant _ACTIVE = 2;\\n\\n    // Stores an asset's bytes32 symbol representation to pool's address mapping\\n    EnumerableMap.Bytes32ToAddressMap private assetToPoolAddress;\\n    // Stores an asset's bytes32 symbol representation to asset's address mapping\\n    EnumerableMap.Bytes32ToAddressMap private assetToTokenAddress;\\n    mapping(address => bytes32) public tokenAddressToSymbol;\\n    mapping(address => uint256) private tokenPositionInList;\\n    // used for defining different leverage ratios for tokens\\n    mapping(address => uint256) public debtCoverage;\\n    address[] public supportedTokensList;\\n\\n    mapping(address => uint256) public tokenToStatus;\\n\\n    function initialize(Asset[] memory tokenAssets, poolAsset[] memory poolAssets) external initializer {\\n        __Ownable_init();\\n\\n        addTokenAssets(tokenAssets);\\n        addPoolAssets(poolAssets);\\n    }\\n\\n    function getAllPoolAssets() public view returns (bytes32[] memory result) {\\n        return assetToPoolAddress._inner._keys._inner._values;\\n    }\\n\\n    function getSupportedTokensAddresses() public view returns (address[] memory) {\\n        return supportedTokensList;\\n    }\\n\\n    function getAllTokenAssets() public view returns (bytes32[] memory result) {\\n        return assetToTokenAddress._inner._keys._inner._values;\\n    }\\n\\n    /**\\n    * Returns address of an asset\\n    **/\\n    function getAssetAddress(bytes32 _asset, bool allowInactive) public view returns (address) {\\n        (, address assetAddress) = assetToTokenAddress.tryGet(_asset);\\n        require(assetAddress != address(0), \\\"Asset not supported.\\\");\\n        if (!allowInactive) {\\n            require(tokenToStatus[assetAddress] == _ACTIVE, \\\"Asset inactive\\\");\\n        }\\n\\n        return assetAddress;\\n    }\\n\\n    /**\\n    * Returns address of an asset's lending pool\\n    **/\\n    function getPoolAddress(bytes32 _asset) public view returns (address) {\\n        (, address assetAddress) = assetToPoolAddress.tryGet(_asset);\\n        require(assetAddress != address(0), \\\"Pool asset not supported.\\\");\\n\\n        return assetAddress;\\n    }\\n\\n    function addPoolAssets(poolAsset[] memory poolAssets) public onlyOwner {\\n        for (uint256 i = 0; i < poolAssets.length; i++) {\\n            _addPoolAsset(poolAssets[i].asset, poolAssets[i].poolAddress);\\n        }\\n    }\\n\\n    function _addPoolAsset(bytes32 _asset, address _poolAddress) internal {\\n        require(Address.isContract(_poolAddress), \\\"TokenManager: Pool must be a contract\\\");\\n        require(!assetToPoolAddress.contains(_asset), \\\"Asset's pool already exists\\\");\\n        assetToPoolAddress.set(_asset, _poolAddress);\\n        emit PoolAssetAdded(msg.sender, _asset, _poolAddress, block.timestamp);\\n    }\\n\\n    function addTokenAssets(Asset[] memory tokenAssets) public onlyOwner {\\n        for (uint256 i = 0; i < tokenAssets.length; i++) {\\n            _addTokenAsset(tokenAssets[i].asset, tokenAssets[i].assetAddress, tokenAssets[i].debtCoverage);\\n        }\\n    }\\n\\n    function isTokenAssetActive(address token) external view returns(bool) {\\n        return tokenToStatus[token] == 2;\\n    }\\n\\n    function activateToken(address token) public onlyOwner {\\n        require(tokenToStatus[token] == _INACTIVE, \\\"Must be inactive\\\");\\n        tokenToStatus[token] = _ACTIVE;\\n        emit TokenAssetActivated(msg.sender, token, block.timestamp);\\n    }\\n\\n    function deactivateToken(address token) public onlyOwner {\\n        require(tokenToStatus[token] == _ACTIVE, \\\"Must be active\\\");\\n        tokenToStatus[token] = _INACTIVE;\\n        emit TokenAssetDeactivated(msg.sender, token, block.timestamp);\\n    }\\n\\n    function _addTokenAsset(bytes32 _asset, address _tokenAddress, uint256 _debtCoverage) internal {\\n        require(_asset != \\\"\\\", \\\"Cannot set an empty string asset.\\\");\\n        require(_tokenAddress != address(0), \\\"Cannot set an empty address.\\\");\\n        require(!assetToTokenAddress.contains(_asset), \\\"Asset's token already exists\\\");\\n        require(tokenAddressToSymbol[_tokenAddress] == 0, \\\"Asset address is already in use\\\");\\n        setDebtCoverage(_tokenAddress, _debtCoverage);\\n\\n        assetToTokenAddress.set(_asset, _tokenAddress);\\n        tokenAddressToSymbol[_tokenAddress] = _asset;\\n        tokenToStatus[_tokenAddress] = _ACTIVE;\\n\\n        supportedTokensList.push(_tokenAddress);\\n        tokenPositionInList[_tokenAddress] = supportedTokensList.length - 1;\\n\\n        emit TokenAssetAdded(msg.sender, _asset, _tokenAddress, block.timestamp);\\n    }\\n\\n    function _removeTokenFromList(address tokenToRemove) internal {\\n        // Move last address token to the `tokenToRemoveIndex` position (index of an asset that is being removed) in the address[] supportedTokensList\\n        // and update map(address=>uint256) tokenPostitionInList if the token is not already the last element\\n        uint256 tokenToRemoveIndex = tokenPositionInList[tokenToRemove];\\n        if (tokenToRemoveIndex != (supportedTokensList.length - 1)) {\\n            address currentLastToken = supportedTokensList[supportedTokensList.length - 1];\\n            tokenPositionInList[currentLastToken] = tokenToRemoveIndex;\\n            supportedTokensList[tokenToRemoveIndex] = currentLastToken;\\n        }\\n        // Remove last element - that is either the token that is being removed (if was already at the end)\\n        // or some other asset that at this point was already copied to the `index` positon\\n        supportedTokensList.pop();\\n        tokenPositionInList[tokenToRemove] = 0;\\n    }\\n\\n    function removeTokenAssets(bytes32[] memory _tokenAssets) public onlyOwner {\\n        for (uint256 i = 0; i < _tokenAssets.length; i++) {\\n            _removeTokenAsset(_tokenAssets[i]);\\n        }\\n    }\\n\\n    function _removeTokenAsset(bytes32 _tokenAsset) internal {\\n        address tokenAddress = getAssetAddress(_tokenAsset, true);\\n        EnumerableMap.remove(assetToTokenAddress, _tokenAsset);\\n        tokenAddressToSymbol[tokenAddress] = 0;\\n        tokenToStatus[tokenAddress] = _NOT_SUPPORTED;\\n        debtCoverage[tokenAddress] = 0;\\n        _removeTokenFromList(tokenAddress);\\n        emit TokenAssetRemoved(msg.sender, _tokenAsset, block.timestamp);\\n    }\\n\\n    function removePoolAssets(bytes32[] memory _poolAssets) public onlyOwner {\\n        for (uint256 i = 0; i < _poolAssets.length; i++) {\\n            _removePoolAsset(_poolAssets[i]);\\n        }\\n    }\\n\\n    function _removePoolAsset(bytes32 _poolAsset) internal {\\n        address poolAddress = getPoolAddress(_poolAsset);\\n        EnumerableMap.remove(assetToPoolAddress, _poolAsset);\\n        emit PoolAssetRemoved(msg.sender, _poolAsset, poolAddress, block.timestamp);\\n    }\\n\\n    function setDebtCoverage(address token, uint256 coverage) public onlyOwner {\\n        //LTV must be lower than 5\\n        require(coverage <= 0.833333333333333333e18, 'Debt coverage higher than maximum acceptable');\\n        debtCoverage[token] = coverage;\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n\\n    /**\\n     * @dev emitted after adding a token asset\\n     * @param performer an address of the wallet adding a token asset\\n     * @param tokenAsset token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of adding a token asset\\n     **/\\n    event TokenAssetAdded(address indexed performer, bytes32 indexed tokenAsset, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after activating a token asset\\n     * @param performer an address of the wallet activating a token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of activating a token asset\\n     **/\\n    event TokenAssetActivated(address indexed performer, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after deactivating a token asset\\n     * @param performer an address of the wallet deactivating a token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of deactivating a token asset\\n     **/\\n    event TokenAssetDeactivated(address indexed performer, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after removing a token asset\\n     * @param performer an address of the wallet removing a token asset\\n     * @param tokenAsset token asset\\n     * @param timestamp time a token asset removal\\n     **/\\n    event TokenAssetRemoved(address indexed performer, bytes32 indexed tokenAsset, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after adding a pool asset\\n     * @param performer an address of wallet adding the pool asset\\n     * @param poolAsset pool asset\\n     * @param poolAddress an address of the pool asset\\n     * @param timestamp time of the pool asset addition\\n     **/\\n    event PoolAssetAdded(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after removing a pool asset\\n     * @param performer an address of wallet removing the pool asset\\n     * @param poolAsset pool asset\\n     * @param poolAddress an address of the pool asset\\n     * @param timestamp time of a pool asset removal\\n     **/\\n    event PoolAssetRemoved(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0x1801e902ae85981b7c3dfc110b462fef68c923aec1ed0ae0abf281170542d7ab\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // Bytes32ToAddressMap\\n\\n    struct Bytes32ToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (key, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x74c86dcb231a31355e8947aea10f3c94eb5f1656b000ce90d18f5a48fcb98b4a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613152806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c8063715018a6116100b8578063d1bc08311161007c578063d1bc08311461033a578063e0117bdd14610356578063f2fde38b14610386578063f38555aa146103a2578063f823f1e0146103be578063fda4963b146103ee57610137565b8063715018a6146102bc578063762b887a146102c6578063869c490d146102e25780638da5cb5b14610300578063a2d279331461031e57610137565b806335923e03116100ff57806335923e03146101f257806363c918771461022257806366273c191461025257806368173bcf146102705780636953c06c1461028c57610137565b80630d1ce2d21461013c5780630edc25b61461015857806321f880971461018857806325eb876f146101a657806331e7866c146101d6575b600080fd5b61015660048036038101906101519190611f37565b61040a565b005b610172600480360381019061016d9190611f9a565b6105a0565b60405161017f9190611fd6565b60405180910390f35b610190610632565b60405161019d91906120af565b60405180910390f35b6101c060048036038101906101bb9190612109565b6106c0565b6040516101cd9190611fd6565b60405180910390f35b6101f060048036038101906101eb919061217f565b6107db565b005b61020c60048036038101906102079190611f37565b6108ea565b60405161021991906121ce565b60405180910390f35b61023c600480360381019061023791906121e9565b610936565b6040516102499190611fd6565b60405180910390f35b61025a610975565b60405161026791906122d4565b60405180910390f35b61028a60048036038101906102859190611f37565b6109d9565b005b6102a660048036038101906102a19190611f37565b610b6f565b6040516102b39190612305565b60405180910390f35b6102c4610b87565b005b6102e060048036038101906102db91906125f5565b610b89565b005b6102ea610c89565b6040516102f791906122d4565b60405180910390f35b610308610ced565b6040516103159190611fd6565b60405180910390f35b6103386004803603810190610333919061266d565b610d17565b005b610354600480360381019061034f9190612779565b610e1b565b005b610370600480360381019061036b9190611f37565b610edd565b60405161037d9190612305565b60405180910390f35b6103a0600480360381019061039b9190611f37565b610ef5565b005b6103bc60048036038101906103b791906127c2565b610fec565b005b6103d860048036038101906103d39190611f37565b6110d1565b6040516103e5919061281a565b60405180910390f35b61040860048036038101906104039190612779565b6110e9565b005b6104126111ab565b73ffffffffffffffffffffffffffffffffffffffff16610430610ced565b73ffffffffffffffffffffffffffffffffffffffff1614610486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90612892565b60405180910390fd5b6001606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ff906128fe565b60405180910390fd5b6002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167febd9f0d5b5df9f4d5180bbeec65fda8d99982e273d2a7365431b2a869aa826d4824260405161059592919061291e565b60405180910390a250565b6000806105b78360656111b390919063ffffffff16565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062090612993565b60405180910390fd5b80915050919050565b6060606e8054806020026020016040519081016040528092919081815260200182805480156106b657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161066c575b5050505050905090565b6000806106d78460686111b390919063ffffffff16565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610749576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610740906129ff565b60405180910390fd5b826107d1576002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146107d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c790612a6b565b60405180910390fd5b5b8091505092915050565b6107e36111ab565b73ffffffffffffffffffffffffffffffffffffffff16610801610ced565b73ffffffffffffffffffffffffffffffffffffffff1614610857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084e90612892565b60405180910390fd5b670b90984060d355558111156108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089990612afd565b60405180910390fd5b80606d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60006002606f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054149050919050565b606e818154811061094657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060656000016000016000016000018054806020026020016040519081016040528092919081815260200182805480156109cf57602002820191906000526020600020905b8154815260200190600101908083116109bb575b5050505050905090565b6109e16111ab565b73ffffffffffffffffffffffffffffffffffffffff166109ff610ced565b73ffffffffffffffffffffffffffffffffffffffff1614610a55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4c90612892565b60405180910390fd5b6002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610ad7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ace90612b69565b60405180910390fd5b6001606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fbf0b0e2d837fddaee4742e91f53ca36bac9fdebdd571738027abb2b5f7c9a2f08242604051610b6492919061291e565b60405180910390a250565b606d6020528060005260406000206000915090505481565b565b600060019054906101000a900460ff16610bb15760008054906101000a900460ff1615610bba565b610bb96111dc565b5b610bf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf090612bfb565b60405180910390fd5b60008060019054906101000a900460ff161590508015610c49576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610c516111ed565b610c5a83610d17565b610c6382610fec565b8015610c845760008060016101000a81548160ff0219169083151502179055505b505050565b60606068600001600001600001600001805480602002602001604051908101604052809291908181526020018280548015610ce357602002820191906000526020600020905b815481526020019060010190808311610ccf575b5050505050905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d1f6111ab565b73ffffffffffffffffffffffffffffffffffffffff16610d3d610ced565b73ffffffffffffffffffffffffffffffffffffffff1614610d93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8a90612892565b60405180910390fd5b60005b8151811015610e1757610e04828281518110610db557610db4612c1b565b5b602002602001015160000151838381518110610dd457610dd3612c1b565b5b602002602001015160200151848481518110610df357610df2612c1b565b5b602002602001015160400151611246565b8080610e0f90612c79565b915050610d96565b5050565b610e236111ab565b73ffffffffffffffffffffffffffffffffffffffff16610e41610ced565b73ffffffffffffffffffffffffffffffffffffffff1614610e97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8e90612892565b60405180910390fd5b60005b8151811015610ed957610ec6828281518110610eb957610eb8612c1b565b5b6020026020010151611588565b8080610ed190612c79565b915050610e9a565b5050565b606f6020528060005260406000206000915090505481565b610efd6111ab565b73ffffffffffffffffffffffffffffffffffffffff16610f1b610ced565b73ffffffffffffffffffffffffffffffffffffffff1614610f71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6890612892565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fe0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd790612d33565b60405180910390fd5b610fe9816116d0565b50565b610ff46111ab565b73ffffffffffffffffffffffffffffffffffffffff16611012610ced565b73ffffffffffffffffffffffffffffffffffffffff1614611068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105f90612892565b60405180910390fd5b60005b81518110156110cd576110ba82828151811061108a57611089612c1b565b5b6020026020010151600001518383815181106110a9576110a8612c1b565b5b602002602001015160200151611796565b80806110c590612c79565b91505061106b565b5050565b606b6020528060005260406000206000915090505481565b6110f16111ab565b73ffffffffffffffffffffffffffffffffffffffff1661110f610ced565b73ffffffffffffffffffffffffffffffffffffffff1614611165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115c90612892565b60405180910390fd5b60005b81518110156111a75761119482828151811061118757611186612c1b565b5b602002602001015161189e565b808061119f90612c79565b915050611168565b5050565b600033905090565b6000806000806111c6866000018661190c565b91509150818160001c9350935050509250929050565b60006111e73061195b565b15905090565b600060019054906101000a900460ff1661123c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123390612dc5565b60405180910390fd5b61124461197e565b565b60008303611289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128090612e57565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ef90612ec3565b60405180910390fd5b61130c8360686119df90919063ffffffff16565b1561134c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134390612f2f565b60405180910390fd5b6000801b606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146113d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c790612f9b565b60405180910390fd5b6113da82826107db565b6113f0838360686119f69092919063ffffffff16565b5082606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002606f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550606e829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001606e805490506114ef9190612fbb565b606c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550823373ffffffffffffffffffffffffffffffffffffffff167ff73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6844260405161157b92919061291e565b60405180910390a3505050565b60006115958260016106c0565b90506115a2606883611a28565b506000801b606b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000606d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061167d81611a3f565b813373ffffffffffffffffffffffffffffffffffffffff167f228e158b51be6445b7bd2f4121209717a371d44c7c53d4085ae7f5e496153a93426040516116c49190612305565b60405180910390a35050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61179f81611c22565b6117de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d590613061565b60405180910390fd5b6117f28260656119df90919063ffffffff16565b15611832576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611829906130cd565b60405180910390fd5b611848828260656119f69092919063ffffffff16565b50813373ffffffffffffffffffffffffffffffffffffffff167fcfbf9a4f33420379df003923a1d986358bb97d4b3455baae186db1d5d35cda3e834260405161189292919061291e565b60405180910390a35050565b60006118a9826105a0565b90506118b6606583611a28565b50813373ffffffffffffffffffffffffffffffffffffffff167ff658b7b16fbc2f0f51a3320cc57763ccd8d13f554c4eb34ff0f5b49624b32e83834260405161190092919061291e565b60405180910390a35050565b60008060008460020160008581526020019081526020016000205490506000801b810361194b5761193d8585611c45565b6000801b9250925050611954565b60018192509250505b9250929050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166119cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c490612dc5565b60405180910390fd5b6119dd6119d86111ab565b6116d0565b565b60006119ee8360000183611c45565b905092915050565b6000611a1f84600001848473ffffffffffffffffffffffffffffffffffffffff1660001b611c65565b90509392505050565b6000611a378360000183611ca0565b905092915050565b6000606c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506001606e80549050611a959190612fbb565b8114611b92576000606e6001606e80549050611ab19190612fbb565b81548110611ac257611ac1612c1b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080606e8381548110611b4857611b47612c1b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b606e805480611ba457611ba36130ed565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556000606c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000611c5d8284600001611cd990919063ffffffff16565b905092915050565b60008184600201600085815260200190815260200160002081905550611c978385600001611cf090919063ffffffff16565b90509392505050565b600082600201600083815260200190815260200160002060009055611cd18284600001611d0790919063ffffffff16565b905092915050565b6000611ce88360000183611d1e565b905092915050565b6000611cff8360000183611d41565b905092915050565b6000611d168360000183611db1565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000611d4d8383611d1e565b611da6578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611dab565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114611eb9576000600182611de39190612fbb565b9050600060018660000180549050611dfb9190612fbb565b9050818114611e6a576000866000018281548110611e1c57611e1b612c1b565b5b9060005260206000200154905080876000018481548110611e4057611e3f612c1b565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611e7e57611e7d6130ed565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611ebf565b60009150505b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f0482611ed9565b9050919050565b611f1481611ef9565b8114611f1f57600080fd5b50565b600081359050611f3181611f0b565b92915050565b600060208284031215611f4d57611f4c611ecf565b5b6000611f5b84828501611f22565b91505092915050565b6000819050919050565b611f7781611f64565b8114611f8257600080fd5b50565b600081359050611f9481611f6e565b92915050565b600060208284031215611fb057611faf611ecf565b5b6000611fbe84828501611f85565b91505092915050565b611fd081611ef9565b82525050565b6000602082019050611feb6000830184611fc7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61202681611ef9565b82525050565b6000612038838361201d565b60208301905092915050565b6000602082019050919050565b600061205c82611ff1565b6120668185611ffc565b93506120718361200d565b8060005b838110156120a2578151612089888261202c565b975061209483612044565b925050600181019050612075565b5085935050505092915050565b600060208201905081810360008301526120c98184612051565b905092915050565b60008115159050919050565b6120e6816120d1565b81146120f157600080fd5b50565b600081359050612103816120dd565b92915050565b600080604083850312156121205761211f611ecf565b5b600061212e85828601611f85565b925050602061213f858286016120f4565b9150509250929050565b6000819050919050565b61215c81612149565b811461216757600080fd5b50565b60008135905061217981612153565b92915050565b6000806040838503121561219657612195611ecf565b5b60006121a485828601611f22565b92505060206121b58582860161216a565b9150509250929050565b6121c8816120d1565b82525050565b60006020820190506121e360008301846121bf565b92915050565b6000602082840312156121ff576121fe611ecf565b5b600061220d8482850161216a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61224b81611f64565b82525050565b600061225d8383612242565b60208301905092915050565b6000602082019050919050565b600061228182612216565b61228b8185612221565b935061229683612232565b8060005b838110156122c75781516122ae8882612251565b97506122b983612269565b92505060018101905061229a565b5085935050505092915050565b600060208201905081810360008301526122ee8184612276565b905092915050565b6122ff81612149565b82525050565b600060208201905061231a60008301846122f6565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61236e82612325565b810181811067ffffffffffffffff8211171561238d5761238c612336565b5b80604052505050565b60006123a0611ec5565b90506123ac8282612365565b919050565b600067ffffffffffffffff8211156123cc576123cb612336565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000606082840312156123fd576123fc6123e2565b5b6124076060612396565b9050600061241784828501611f85565b600083015250602061242b84828501611f22565b602083015250604061243f8482850161216a565b60408301525092915050565b600061245e612459846123b1565b612396565b90508083825260208201905060608402830185811115612481576124806123dd565b5b835b818110156124aa578061249688826123e7565b845260208401935050606081019050612483565b5050509392505050565b600082601f8301126124c9576124c8612320565b5b81356124d984826020860161244b565b91505092915050565b600067ffffffffffffffff8211156124fd576124fc612336565b5b602082029050602081019050919050565b600060408284031215612524576125236123e2565b5b61252e6040612396565b9050600061253e84828501611f85565b600083015250602061255284828501611f22565b60208301525092915050565b600061257161256c846124e2565b612396565b90508083825260208201905060408402830185811115612594576125936123dd565b5b835b818110156125bd57806125a9888261250e565b845260208401935050604081019050612596565b5050509392505050565b600082601f8301126125dc576125db612320565b5b81356125ec84826020860161255e565b91505092915050565b6000806040838503121561260c5761260b611ecf565b5b600083013567ffffffffffffffff81111561262a57612629611ed4565b5b612636858286016124b4565b925050602083013567ffffffffffffffff81111561265757612656611ed4565b5b612663858286016125c7565b9150509250929050565b60006020828403121561268357612682611ecf565b5b600082013567ffffffffffffffff8111156126a1576126a0611ed4565b5b6126ad848285016124b4565b91505092915050565b600067ffffffffffffffff8211156126d1576126d0612336565b5b602082029050602081019050919050565b60006126f56126f0846126b6565b612396565b90508083825260208201905060208402830185811115612718576127176123dd565b5b835b81811015612741578061272d8882611f85565b84526020840193505060208101905061271a565b5050509392505050565b600082601f8301126127605761275f612320565b5b81356127708482602086016126e2565b91505092915050565b60006020828403121561278f5761278e611ecf565b5b600082013567ffffffffffffffff8111156127ad576127ac611ed4565b5b6127b98482850161274b565b91505092915050565b6000602082840312156127d8576127d7611ecf565b5b600082013567ffffffffffffffff8111156127f6576127f5611ed4565b5b612802848285016125c7565b91505092915050565b61281481611f64565b82525050565b600060208201905061282f600083018461280b565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061287c602083612835565b915061288782612846565b602082019050919050565b600060208201905081810360008301526128ab8161286f565b9050919050565b7f4d75737420626520696e61637469766500000000000000000000000000000000600082015250565b60006128e8601083612835565b91506128f3826128b2565b602082019050919050565b60006020820190508181036000830152612917816128db565b9050919050565b60006040820190506129336000830185611fc7565b61294060208301846122f6565b9392505050565b7f506f6f6c206173736574206e6f7420737570706f727465642e00000000000000600082015250565b600061297d601983612835565b915061298882612947565b602082019050919050565b600060208201905081810360008301526129ac81612970565b9050919050565b7f4173736574206e6f7420737570706f727465642e000000000000000000000000600082015250565b60006129e9601483612835565b91506129f4826129b3565b602082019050919050565b60006020820190508181036000830152612a18816129dc565b9050919050565b7f417373657420696e616374697665000000000000000000000000000000000000600082015250565b6000612a55600e83612835565b9150612a6082612a1f565b602082019050919050565b60006020820190508181036000830152612a8481612a48565b9050919050565b7f4465627420636f76657261676520686967686572207468616e206d6178696d7560008201527f6d2061636365707461626c650000000000000000000000000000000000000000602082015250565b6000612ae7602c83612835565b9150612af282612a8b565b604082019050919050565b60006020820190508181036000830152612b1681612ada565b9050919050565b7f4d75737420626520616374697665000000000000000000000000000000000000600082015250565b6000612b53600e83612835565b9150612b5e82612b1d565b602082019050919050565b60006020820190508181036000830152612b8281612b46565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612be5602e83612835565b9150612bf082612b89565b604082019050919050565b60006020820190508181036000830152612c1481612bd8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c8482612149565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612cb657612cb5612c4a565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d1d602683612835565b9150612d2882612cc1565b604082019050919050565b60006020820190508181036000830152612d4c81612d10565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612daf602b83612835565b9150612dba82612d53565b604082019050919050565b60006020820190508181036000830152612dde81612da2565b9050919050565b7f43616e6e6f742073657420616e20656d70747920737472696e6720617373657460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e41602183612835565b9150612e4c82612de5565b604082019050919050565b60006020820190508181036000830152612e7081612e34565b9050919050565b7f43616e6e6f742073657420616e20656d70747920616464726573732e00000000600082015250565b6000612ead601c83612835565b9150612eb882612e77565b602082019050919050565b60006020820190508181036000830152612edc81612ea0565b9050919050565b7f4173736574277320746f6b656e20616c72656164792065786973747300000000600082015250565b6000612f19601c83612835565b9150612f2482612ee3565b602082019050919050565b60006020820190508181036000830152612f4881612f0c565b9050919050565b7f4173736574206164647265737320697320616c726561647920696e2075736500600082015250565b6000612f85601f83612835565b9150612f9082612f4f565b602082019050919050565b60006020820190508181036000830152612fb481612f78565b9050919050565b6000612fc682612149565b9150612fd183612149565b9250828203905081811115612fe957612fe8612c4a565b5b92915050565b7f546f6b656e4d616e616765723a20506f6f6c206d757374206265206120636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b600061304b602583612835565b915061305682612fef565b604082019050919050565b6000602082019050818103600083015261307a8161303e565b9050919050565b7f4173736574277320706f6f6c20616c7265616479206578697374730000000000600082015250565b60006130b7601b83612835565b91506130c282613081565b602082019050919050565b600060208201905081810360008301526130e6816130aa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212206bf16985baa8b2bd0735a1de27585a4b766d1418a940c0c4a216793bd0db4cd064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c8063715018a6116100b8578063d1bc08311161007c578063d1bc08311461033a578063e0117bdd14610356578063f2fde38b14610386578063f38555aa146103a2578063f823f1e0146103be578063fda4963b146103ee57610137565b8063715018a6146102bc578063762b887a146102c6578063869c490d146102e25780638da5cb5b14610300578063a2d279331461031e57610137565b806335923e03116100ff57806335923e03146101f257806363c918771461022257806366273c191461025257806368173bcf146102705780636953c06c1461028c57610137565b80630d1ce2d21461013c5780630edc25b61461015857806321f880971461018857806325eb876f146101a657806331e7866c146101d6575b600080fd5b61015660048036038101906101519190611f37565b61040a565b005b610172600480360381019061016d9190611f9a565b6105a0565b60405161017f9190611fd6565b60405180910390f35b610190610632565b60405161019d91906120af565b60405180910390f35b6101c060048036038101906101bb9190612109565b6106c0565b6040516101cd9190611fd6565b60405180910390f35b6101f060048036038101906101eb919061217f565b6107db565b005b61020c60048036038101906102079190611f37565b6108ea565b60405161021991906121ce565b60405180910390f35b61023c600480360381019061023791906121e9565b610936565b6040516102499190611fd6565b60405180910390f35b61025a610975565b60405161026791906122d4565b60405180910390f35b61028a60048036038101906102859190611f37565b6109d9565b005b6102a660048036038101906102a19190611f37565b610b6f565b6040516102b39190612305565b60405180910390f35b6102c4610b87565b005b6102e060048036038101906102db91906125f5565b610b89565b005b6102ea610c89565b6040516102f791906122d4565b60405180910390f35b610308610ced565b6040516103159190611fd6565b60405180910390f35b6103386004803603810190610333919061266d565b610d17565b005b610354600480360381019061034f9190612779565b610e1b565b005b610370600480360381019061036b9190611f37565b610edd565b60405161037d9190612305565b60405180910390f35b6103a0600480360381019061039b9190611f37565b610ef5565b005b6103bc60048036038101906103b791906127c2565b610fec565b005b6103d860048036038101906103d39190611f37565b6110d1565b6040516103e5919061281a565b60405180910390f35b61040860048036038101906104039190612779565b6110e9565b005b6104126111ab565b73ffffffffffffffffffffffffffffffffffffffff16610430610ced565b73ffffffffffffffffffffffffffffffffffffffff1614610486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90612892565b60405180910390fd5b6001606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610508576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ff906128fe565b60405180910390fd5b6002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167febd9f0d5b5df9f4d5180bbeec65fda8d99982e273d2a7365431b2a869aa826d4824260405161059592919061291e565b60405180910390a250565b6000806105b78360656111b390919063ffffffff16565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610629576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062090612993565b60405180910390fd5b80915050919050565b6060606e8054806020026020016040519081016040528092919081815260200182805480156106b657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161066c575b5050505050905090565b6000806106d78460686111b390919063ffffffff16565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610749576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610740906129ff565b60405180910390fd5b826107d1576002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146107d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c790612a6b565b60405180910390fd5b5b8091505092915050565b6107e36111ab565b73ffffffffffffffffffffffffffffffffffffffff16610801610ced565b73ffffffffffffffffffffffffffffffffffffffff1614610857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084e90612892565b60405180910390fd5b670b90984060d355558111156108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089990612afd565b60405180910390fd5b80606d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60006002606f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054149050919050565b606e818154811061094657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060656000016000016000016000018054806020026020016040519081016040528092919081815260200182805480156109cf57602002820191906000526020600020905b8154815260200190600101908083116109bb575b5050505050905090565b6109e16111ab565b73ffffffffffffffffffffffffffffffffffffffff166109ff610ced565b73ffffffffffffffffffffffffffffffffffffffff1614610a55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4c90612892565b60405180910390fd5b6002606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610ad7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ace90612b69565b60405180910390fd5b6001606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fbf0b0e2d837fddaee4742e91f53ca36bac9fdebdd571738027abb2b5f7c9a2f08242604051610b6492919061291e565b60405180910390a250565b606d6020528060005260406000206000915090505481565b565b600060019054906101000a900460ff16610bb15760008054906101000a900460ff1615610bba565b610bb96111dc565b5b610bf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf090612bfb565b60405180910390fd5b60008060019054906101000a900460ff161590508015610c49576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610c516111ed565b610c5a83610d17565b610c6382610fec565b8015610c845760008060016101000a81548160ff0219169083151502179055505b505050565b60606068600001600001600001600001805480602002602001604051908101604052809291908181526020018280548015610ce357602002820191906000526020600020905b815481526020019060010190808311610ccf575b5050505050905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d1f6111ab565b73ffffffffffffffffffffffffffffffffffffffff16610d3d610ced565b73ffffffffffffffffffffffffffffffffffffffff1614610d93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8a90612892565b60405180910390fd5b60005b8151811015610e1757610e04828281518110610db557610db4612c1b565b5b602002602001015160000151838381518110610dd457610dd3612c1b565b5b602002602001015160200151848481518110610df357610df2612c1b565b5b602002602001015160400151611246565b8080610e0f90612c79565b915050610d96565b5050565b610e236111ab565b73ffffffffffffffffffffffffffffffffffffffff16610e41610ced565b73ffffffffffffffffffffffffffffffffffffffff1614610e97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8e90612892565b60405180910390fd5b60005b8151811015610ed957610ec6828281518110610eb957610eb8612c1b565b5b6020026020010151611588565b8080610ed190612c79565b915050610e9a565b5050565b606f6020528060005260406000206000915090505481565b610efd6111ab565b73ffffffffffffffffffffffffffffffffffffffff16610f1b610ced565b73ffffffffffffffffffffffffffffffffffffffff1614610f71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6890612892565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fe0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd790612d33565b60405180910390fd5b610fe9816116d0565b50565b610ff46111ab565b73ffffffffffffffffffffffffffffffffffffffff16611012610ced565b73ffffffffffffffffffffffffffffffffffffffff1614611068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105f90612892565b60405180910390fd5b60005b81518110156110cd576110ba82828151811061108a57611089612c1b565b5b6020026020010151600001518383815181106110a9576110a8612c1b565b5b602002602001015160200151611796565b80806110c590612c79565b91505061106b565b5050565b606b6020528060005260406000206000915090505481565b6110f16111ab565b73ffffffffffffffffffffffffffffffffffffffff1661110f610ced565b73ffffffffffffffffffffffffffffffffffffffff1614611165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115c90612892565b60405180910390fd5b60005b81518110156111a75761119482828151811061118757611186612c1b565b5b602002602001015161189e565b808061119f90612c79565b915050611168565b5050565b600033905090565b6000806000806111c6866000018661190c565b91509150818160001c9350935050509250929050565b60006111e73061195b565b15905090565b600060019054906101000a900460ff1661123c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123390612dc5565b60405180910390fd5b61124461197e565b565b60008303611289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128090612e57565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ef90612ec3565b60405180910390fd5b61130c8360686119df90919063ffffffff16565b1561134c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134390612f2f565b60405180910390fd5b6000801b606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146113d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c790612f9b565b60405180910390fd5b6113da82826107db565b6113f0838360686119f69092919063ffffffff16565b5082606b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002606f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550606e829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001606e805490506114ef9190612fbb565b606c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550823373ffffffffffffffffffffffffffffffffffffffff167ff73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6844260405161157b92919061291e565b60405180910390a3505050565b60006115958260016106c0565b90506115a2606883611a28565b506000801b606b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000606f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000606d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061167d81611a3f565b813373ffffffffffffffffffffffffffffffffffffffff167f228e158b51be6445b7bd2f4121209717a371d44c7c53d4085ae7f5e496153a93426040516116c49190612305565b60405180910390a35050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61179f81611c22565b6117de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d590613061565b60405180910390fd5b6117f28260656119df90919063ffffffff16565b15611832576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611829906130cd565b60405180910390fd5b611848828260656119f69092919063ffffffff16565b50813373ffffffffffffffffffffffffffffffffffffffff167fcfbf9a4f33420379df003923a1d986358bb97d4b3455baae186db1d5d35cda3e834260405161189292919061291e565b60405180910390a35050565b60006118a9826105a0565b90506118b6606583611a28565b50813373ffffffffffffffffffffffffffffffffffffffff167ff658b7b16fbc2f0f51a3320cc57763ccd8d13f554c4eb34ff0f5b49624b32e83834260405161190092919061291e565b60405180910390a35050565b60008060008460020160008581526020019081526020016000205490506000801b810361194b5761193d8585611c45565b6000801b9250925050611954565b60018192509250505b9250929050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166119cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c490612dc5565b60405180910390fd5b6119dd6119d86111ab565b6116d0565b565b60006119ee8360000183611c45565b905092915050565b6000611a1f84600001848473ffffffffffffffffffffffffffffffffffffffff1660001b611c65565b90509392505050565b6000611a378360000183611ca0565b905092915050565b6000606c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506001606e80549050611a959190612fbb565b8114611b92576000606e6001606e80549050611ab19190612fbb565b81548110611ac257611ac1612c1b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080606e8381548110611b4857611b47612c1b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b606e805480611ba457611ba36130ed565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556000606c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000611c5d8284600001611cd990919063ffffffff16565b905092915050565b60008184600201600085815260200190815260200160002081905550611c978385600001611cf090919063ffffffff16565b90509392505050565b600082600201600083815260200190815260200160002060009055611cd18284600001611d0790919063ffffffff16565b905092915050565b6000611ce88360000183611d1e565b905092915050565b6000611cff8360000183611d41565b905092915050565b6000611d168360000183611db1565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000611d4d8383611d1e565b611da6578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611dab565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114611eb9576000600182611de39190612fbb565b9050600060018660000180549050611dfb9190612fbb565b9050818114611e6a576000866000018281548110611e1c57611e1b612c1b565b5b9060005260206000200154905080876000018481548110611e4057611e3f612c1b565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611e7e57611e7d6130ed565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611ebf565b60009150505b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f0482611ed9565b9050919050565b611f1481611ef9565b8114611f1f57600080fd5b50565b600081359050611f3181611f0b565b92915050565b600060208284031215611f4d57611f4c611ecf565b5b6000611f5b84828501611f22565b91505092915050565b6000819050919050565b611f7781611f64565b8114611f8257600080fd5b50565b600081359050611f9481611f6e565b92915050565b600060208284031215611fb057611faf611ecf565b5b6000611fbe84828501611f85565b91505092915050565b611fd081611ef9565b82525050565b6000602082019050611feb6000830184611fc7565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61202681611ef9565b82525050565b6000612038838361201d565b60208301905092915050565b6000602082019050919050565b600061205c82611ff1565b6120668185611ffc565b93506120718361200d565b8060005b838110156120a2578151612089888261202c565b975061209483612044565b925050600181019050612075565b5085935050505092915050565b600060208201905081810360008301526120c98184612051565b905092915050565b60008115159050919050565b6120e6816120d1565b81146120f157600080fd5b50565b600081359050612103816120dd565b92915050565b600080604083850312156121205761211f611ecf565b5b600061212e85828601611f85565b925050602061213f858286016120f4565b9150509250929050565b6000819050919050565b61215c81612149565b811461216757600080fd5b50565b60008135905061217981612153565b92915050565b6000806040838503121561219657612195611ecf565b5b60006121a485828601611f22565b92505060206121b58582860161216a565b9150509250929050565b6121c8816120d1565b82525050565b60006020820190506121e360008301846121bf565b92915050565b6000602082840312156121ff576121fe611ecf565b5b600061220d8482850161216a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61224b81611f64565b82525050565b600061225d8383612242565b60208301905092915050565b6000602082019050919050565b600061228182612216565b61228b8185612221565b935061229683612232565b8060005b838110156122c75781516122ae8882612251565b97506122b983612269565b92505060018101905061229a565b5085935050505092915050565b600060208201905081810360008301526122ee8184612276565b905092915050565b6122ff81612149565b82525050565b600060208201905061231a60008301846122f6565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61236e82612325565b810181811067ffffffffffffffff8211171561238d5761238c612336565b5b80604052505050565b60006123a0611ec5565b90506123ac8282612365565b919050565b600067ffffffffffffffff8211156123cc576123cb612336565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000606082840312156123fd576123fc6123e2565b5b6124076060612396565b9050600061241784828501611f85565b600083015250602061242b84828501611f22565b602083015250604061243f8482850161216a565b60408301525092915050565b600061245e612459846123b1565b612396565b90508083825260208201905060608402830185811115612481576124806123dd565b5b835b818110156124aa578061249688826123e7565b845260208401935050606081019050612483565b5050509392505050565b600082601f8301126124c9576124c8612320565b5b81356124d984826020860161244b565b91505092915050565b600067ffffffffffffffff8211156124fd576124fc612336565b5b602082029050602081019050919050565b600060408284031215612524576125236123e2565b5b61252e6040612396565b9050600061253e84828501611f85565b600083015250602061255284828501611f22565b60208301525092915050565b600061257161256c846124e2565b612396565b90508083825260208201905060408402830185811115612594576125936123dd565b5b835b818110156125bd57806125a9888261250e565b845260208401935050604081019050612596565b5050509392505050565b600082601f8301126125dc576125db612320565b5b81356125ec84826020860161255e565b91505092915050565b6000806040838503121561260c5761260b611ecf565b5b600083013567ffffffffffffffff81111561262a57612629611ed4565b5b612636858286016124b4565b925050602083013567ffffffffffffffff81111561265757612656611ed4565b5b612663858286016125c7565b9150509250929050565b60006020828403121561268357612682611ecf565b5b600082013567ffffffffffffffff8111156126a1576126a0611ed4565b5b6126ad848285016124b4565b91505092915050565b600067ffffffffffffffff8211156126d1576126d0612336565b5b602082029050602081019050919050565b60006126f56126f0846126b6565b612396565b90508083825260208201905060208402830185811115612718576127176123dd565b5b835b81811015612741578061272d8882611f85565b84526020840193505060208101905061271a565b5050509392505050565b600082601f8301126127605761275f612320565b5b81356127708482602086016126e2565b91505092915050565b60006020828403121561278f5761278e611ecf565b5b600082013567ffffffffffffffff8111156127ad576127ac611ed4565b5b6127b98482850161274b565b91505092915050565b6000602082840312156127d8576127d7611ecf565b5b600082013567ffffffffffffffff8111156127f6576127f5611ed4565b5b612802848285016125c7565b91505092915050565b61281481611f64565b82525050565b600060208201905061282f600083018461280b565b92915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061287c602083612835565b915061288782612846565b602082019050919050565b600060208201905081810360008301526128ab8161286f565b9050919050565b7f4d75737420626520696e61637469766500000000000000000000000000000000600082015250565b60006128e8601083612835565b91506128f3826128b2565b602082019050919050565b60006020820190508181036000830152612917816128db565b9050919050565b60006040820190506129336000830185611fc7565b61294060208301846122f6565b9392505050565b7f506f6f6c206173736574206e6f7420737570706f727465642e00000000000000600082015250565b600061297d601983612835565b915061298882612947565b602082019050919050565b600060208201905081810360008301526129ac81612970565b9050919050565b7f4173736574206e6f7420737570706f727465642e000000000000000000000000600082015250565b60006129e9601483612835565b91506129f4826129b3565b602082019050919050565b60006020820190508181036000830152612a18816129dc565b9050919050565b7f417373657420696e616374697665000000000000000000000000000000000000600082015250565b6000612a55600e83612835565b9150612a6082612a1f565b602082019050919050565b60006020820190508181036000830152612a8481612a48565b9050919050565b7f4465627420636f76657261676520686967686572207468616e206d6178696d7560008201527f6d2061636365707461626c650000000000000000000000000000000000000000602082015250565b6000612ae7602c83612835565b9150612af282612a8b565b604082019050919050565b60006020820190508181036000830152612b1681612ada565b9050919050565b7f4d75737420626520616374697665000000000000000000000000000000000000600082015250565b6000612b53600e83612835565b9150612b5e82612b1d565b602082019050919050565b60006020820190508181036000830152612b8281612b46565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612be5602e83612835565b9150612bf082612b89565b604082019050919050565b60006020820190508181036000830152612c1481612bd8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c8482612149565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612cb657612cb5612c4a565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d1d602683612835565b9150612d2882612cc1565b604082019050919050565b60006020820190508181036000830152612d4c81612d10565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612daf602b83612835565b9150612dba82612d53565b604082019050919050565b60006020820190508181036000830152612dde81612da2565b9050919050565b7f43616e6e6f742073657420616e20656d70747920737472696e6720617373657460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e41602183612835565b9150612e4c82612de5565b604082019050919050565b60006020820190508181036000830152612e7081612e34565b9050919050565b7f43616e6e6f742073657420616e20656d70747920616464726573732e00000000600082015250565b6000612ead601c83612835565b9150612eb882612e77565b602082019050919050565b60006020820190508181036000830152612edc81612ea0565b9050919050565b7f4173736574277320746f6b656e20616c72656164792065786973747300000000600082015250565b6000612f19601c83612835565b9150612f2482612ee3565b602082019050919050565b60006020820190508181036000830152612f4881612f0c565b9050919050565b7f4173736574206164647265737320697320616c726561647920696e2075736500600082015250565b6000612f85601f83612835565b9150612f9082612f4f565b602082019050919050565b60006020820190508181036000830152612fb481612f78565b9050919050565b6000612fc682612149565b9150612fd183612149565b9250828203905081811115612fe957612fe8612c4a565b5b92915050565b7f546f6b656e4d616e616765723a20506f6f6c206d757374206265206120636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b600061304b602583612835565b915061305682612fef565b604082019050919050565b6000602082019050818103600083015261307a8161303e565b9050919050565b7f4173736574277320706f6f6c20616c7265616479206578697374730000000000600082015250565b60006130b7601b83612835565b91506130c282613081565b602082019050919050565b600060208201905081810360008301526130e6816130aa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212206bf16985baa8b2bd0735a1de27585a4b766d1418a940c0c4a216793bd0db4cd064736f6c63430008110033",
  "devdoc": {
    "events": {
      "PoolAssetAdded(address,bytes32,address,uint256)": {
        "details": "emitted after adding a pool asset",
        "params": {
          "performer": "an address of wallet adding the pool asset",
          "poolAddress": "an address of the pool asset",
          "poolAsset": "pool asset",
          "timestamp": "time of the pool asset addition*"
        }
      },
      "PoolAssetRemoved(address,bytes32,address,uint256)": {
        "details": "emitted after removing a pool asset",
        "params": {
          "performer": "an address of wallet removing the pool asset",
          "poolAddress": "an address of the pool asset",
          "poolAsset": "pool asset",
          "timestamp": "time of a pool asset removal*"
        }
      },
      "TokenAssetActivated(address,address,uint256)": {
        "details": "emitted after activating a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet activating a token asset",
          "timestamp": "time of activating a token asset*"
        }
      },
      "TokenAssetAdded(address,bytes32,address,uint256)": {
        "details": "emitted after adding a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet adding a token asset",
          "timestamp": "time of adding a token asset*",
          "tokenAsset": "token asset"
        }
      },
      "TokenAssetDeactivated(address,address,uint256)": {
        "details": "emitted after deactivating a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet deactivating a token asset",
          "timestamp": "time of deactivating a token asset*"
        }
      },
      "TokenAssetRemoved(address,bytes32,uint256)": {
        "details": "emitted after removing a token asset",
        "params": {
          "performer": "an address of the wallet removing a token asset",
          "timestamp": "time a token asset removal*",
          "tokenAsset": "token asset"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAssetAddress(bytes32,bool)": {
        "notice": "Returns address of an asset*"
      },
      "getPoolAddress(bytes32)": {
        "notice": "Returns address of an asset's lending pool*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11125,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "assetToPoolAddress",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(Bytes32ToAddressMap)22454_storage"
      },
      {
        "astId": 11128,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "assetToTokenAddress",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(Bytes32ToAddressMap)22454_storage"
      },
      {
        "astId": 11132,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenAddressToSymbol",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 11136,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenPositionInList",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11140,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "debtCoverage",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11143,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "supportedTokensList",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11147,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenToStatus",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bytes32Set)4321_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 4320,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4127_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToAddressMap)22454_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToAddressMap",
        "members": [
          {
            "astId": 22453,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)22224_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Map)22224_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 22219,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)4321_storage"
          },
          {
            "astId": 22223,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)4127_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4122,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4126,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}