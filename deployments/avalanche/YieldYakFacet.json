{
  "address": "0x76ccaEf23dF9e0612C77ac93c73c0f65Dd0CCCAB",
  "abi": [
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receviedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "ProxyCalldataFailedWithCustomError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ProxyCalldataFailedWithStringMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProxyCalldataFailedWithoutErrMsg",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "assetsToRepay",
          "type": "bytes32[]"
        }
      ],
      "name": "_getAllPricesForLiquidation",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "ownedAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "debtAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "stakedPositionsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "assetsToRepayPrices",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SolvencyFacetProd.CachedPrices",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getHealthRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "ownedAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "debtAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "stakedPositionsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "assetsToRepayPrices",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SolvencyFacetProd.CachedPrices",
          "name": "cachedPrices",
          "type": "tuple"
        }
      ],
      "name": "_getHealthRatioWithPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_resetPrimeAccountAssetsExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_setPrimeAccountAssetsExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "symbol",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "symbols",
          "type": "bytes32[]"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeAVAXYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakePNGAVAXETHYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakePNGAVAXUSDCYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeSAVAXYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeTJAVAXETHYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeTJAVAXSAVAXYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeTJAVAXUSDCYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeAVAXYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstakePNGAVAXETHYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstakePNGAVAXUSDCYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeSAVAXYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeTJAVAXETHYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeTJAVAXSAVAXYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeTJAVAXUSDCYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5c17b038c00151d8de9b5deb3f10e6f9ffa7aa9bb53af44e8882283c11fa3eca",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x76ccaEf23dF9e0612C77ac93c73c0f65Dd0CCCAB",
    "transactionIndex": 0,
    "gasUsed": "4154670",
    "logsBloom": "0x
    "blockHash": "0xe88990892364c72979ec8f149aaa85adca0e3f3f59959496df7cc2cc49c043e4",
    "transactionHash": "0x5c17b038c00151d8de9b5deb3f10e6f9ffa7aa9bb53af44e8882283c11fa3eca",
    "logs": [],
    "blockNumber": 24600766,
    "cumulativeGasUsed": "4154670",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "fa23c61f86cec8c7de13e8bfa631887b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receviedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"ProxyCalldataFailedWithCustomError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ProxyCalldataFailedWithStringMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProxyCalldataFailedWithoutErrMsg\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"assetsToRepay\",\"type\":\"bytes32[]\"}],\"name\":\"_getAllPricesForLiquidation\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"assetsToRepayPrices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SolvencyFacetProd.CachedPrices\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getHealthRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"assetsToRepayPrices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SolvencyFacetProd.CachedPrices\",\"name\":\"cachedPrices\",\"type\":\"tuple\"}],\"name\":\"_getHealthRatioWithPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_resetPrimeAccountAssetsExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_setPrimeAccountAssetsExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"symbols\",\"type\":\"bytes32[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeAVAXYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakePNGAVAXETHYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakePNGAVAXUSDCYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeSAVAXYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeTJAVAXETHYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeTJAVAXSAVAXYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeTJAVAXUSDCYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeAVAXYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakePNGAVAXETHYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakePNGAVAXUSDCYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeSAVAXYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeTJAVAXETHYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeTJAVAXSAVAXYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeTJAVAXUSDCYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Staked(address,bytes32,address,uint256,uint256)\":{\"details\":\"emitted when user stakes an asset\",\"params\":{\"amount\":\"of the asset that was staked\",\"asset\":\"the asset that was staked\",\"timestamp\":\"of staking*\",\"user\":\"the address executing staking\",\"vault\":\"address of the vault token\"}},\"Unstaked(address,bytes32,address,uint256,uint256)\":{\"details\":\"emitted when user unstakes an asset\",\"params\":{\"amount\":\"of the asset that was unstaked\",\"asset\":\"the asset that was unstaked\",\"timestamp\":\"of unstaking*\",\"user\":\"the address executing unstaking\",\"vault\":\"address of the vault token\"}}},\"kind\":\"dev\",\"methods\":{\"stakeAVAXYak(uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"amount\":\"amount of AVAX to be staked*\"}},\"stakePNGAVAXETHYak(uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"amount\":\"amount of PNG_AVAX_ETH_LP to be staked*\"}},\"stakePNGAVAXUSDCYak(uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"amount\":\"amount of PNG_AVAX_USDC_LP to be staked*\"}},\"stakeSAVAXYak(uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"amount\":\"amount of sAVAX to be staked*\"}},\"stakeTJAVAXETHYak(uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"amount\":\"amount of TJ_AVAX_ETH_LP to be staked*\"}},\"stakeTJAVAXSAVAXYak(uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"amount\":\"amount of TJ_AVAX_sAVAX_LP to be staked*\"}},\"stakeTJAVAXUSDCYak(uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"amount\":\"amount of TJ_AVAX_USDC to be staked*\"}},\"unstakeAVAXYak(uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"amount\":\"amount of AVAX to be unstaked*\"}},\"unstakePNGAVAXETHYak(uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"amount\":\"amount of PNG_AVAX_ETH_LP to be unstaked*\"}},\"unstakePNGAVAXUSDCYak(uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"amount\":\"amount of PNG_AVAX_USDC_LP to be staked*\"}},\"unstakeSAVAXYak(uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"amount\":\"amount of sAVAX to be unstaked*\"}},\"unstakeTJAVAXETHYak(uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"amount\":\"amount of TJ_AVAX_ETH_LP to be unstaked*\"}},\"unstakeTJAVAXSAVAXYak(uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"amount\":\"amount of TJ_AVAX_sAVAX_LP to be unstaked*\"}},\"unstakeTJAVAXUSDCYak(uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"amount\":\"amount of TJ_AVAX_USDC to be unstaked*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"stakeAVAXYak(uint256)\":{\"notice\":\"Stakes AVAX in Yield Yak protocol\"},\"stakePNGAVAXETHYak(uint256)\":{\"notice\":\"Stakes PNG_AVAX_ETH_LP in Yield Yak protocol\"},\"stakePNGAVAXUSDCYak(uint256)\":{\"notice\":\"Stakes PNG_AVAX_USDC_LP in Yield Yak protocol\"},\"stakeSAVAXYak(uint256)\":{\"notice\":\"Stakes sAVAX in Yield Yak protocol\"},\"stakeTJAVAXETHYak(uint256)\":{\"notice\":\"Stakes TJ_AVAX_ETH_LP in Yield Yak protocol\"},\"stakeTJAVAXSAVAXYak(uint256)\":{\"notice\":\"Stakes TJ_AVAX_sAVAX_LP in Yield Yak protocol\"},\"stakeTJAVAXUSDCYak(uint256)\":{\"notice\":\"Stakes TJ_AVAX_USDC in Yield Yak protocol\"},\"unstakeAVAXYak(uint256)\":{\"notice\":\"Unstakes AVAX from Yield Yak protocol\"},\"unstakePNGAVAXETHYak(uint256)\":{\"notice\":\"Unstakes PNG_AVAX_ETH_LP in Yield Yak protocol\"},\"unstakePNGAVAXUSDCYak(uint256)\":{\"notice\":\"Unstakes PNG_AVAX_USDC_LP in Yield Yak protocol\"},\"unstakeSAVAXYak(uint256)\":{\"notice\":\"Unstakes sAVAX from Yield Yak protocol\"},\"unstakeTJAVAXETHYak(uint256)\":{\"notice\":\"Unstakes TJ_AVAX_ETH_LP in Yield Yak protocol\"},\"unstakeTJAVAXSAVAXYak(uint256)\":{\"notice\":\"Unstakes TJ_AVAX_sAVAX_LP in Yield Yak protocol\"},\"unstakeTJAVAXUSDCYak(uint256)\":{\"notice\":\"Unstakes TJ_AVAX_USDC in Yield Yak protocol\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/avalanche/YieldYakFacet.sol\":\"YieldYakFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n  using SafeMath for uint256;\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSGINED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return dataPackagesCount;\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 calldataNegativeOffsetForDataPackage,\\n    uint256 defaultDataPointValueByteSize,\\n    uint256 dataPointIndex\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\\n    );\\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0xa96eced2521c637867c670f7f86f3a719e40f210d8a802124f322876bdf013df\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\n\\n/**\\n * @title The base contract for forwarding redstone payload to other contracts\\n * @author The Redstone Oracles team\\n */\\ncontract ProxyConnector is RedstoneConstants, CalldataExtractor {\\n  error ProxyCalldataFailedWithoutErrMsg();\\n  error ProxyCalldataFailedWithStringMessage(string message);\\n  error ProxyCalldataFailedWithCustomError(bytes result);\\n\\n  function proxyCalldata(\\n    address contractAddress,\\n    bytes memory encodedFunction,\\n    bool forwardValue\\n  ) internal returns (bytes memory) {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n\\n    (bool success, bytes memory result) =\\n      contractAddress.call{value: forwardValue ? msg.value : 0}(message);\\n\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyDelegateCalldata(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.delegatecall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyCalldataView(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.staticcall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function _prepareMessage(bytes memory encodedFunction) private pure returns (bytes memory) {\\n    uint256 encodedFunctionBytesCount = encodedFunction.length;\\n    uint256 redstonePayloadByteSize = _getRedstonePayloadByteSize();\\n    uint256 resultMessageByteSize = encodedFunctionBytesCount + redstonePayloadByteSize;\\n\\n    if (redstonePayloadByteSize > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n\\n    bytes memory message;\\n\\n    assembly {\\n      message := mload(FREE_MEMORY_PTR) // sets message pointer to first free place in memory\\n\\n      // Saving the byte size of the result message (it's a standard in EVM)\\n      mstore(message, resultMessageByteSize)\\n\\n      // Copying function and its arguments\\n      for {\\n        let from := add(BYTES_ARR_LEN_VAR_BS, encodedFunction)\\n        let fromEnd := add(from, encodedFunctionBytesCount)\\n        let to := add(BYTES_ARR_LEN_VAR_BS, message)\\n      } lt (from, fromEnd) {\\n        from := add(from, STANDARD_SLOT_BS)\\n        to := add(to, STANDARD_SLOT_BS)\\n      } {\\n        // Copying data from encodedFunction to message (32 bytes at a time)\\n        mstore(to, mload(from))\\n      }\\n\\n      // Copying redstone payload to the message bytes\\n      calldatacopy(\\n        add(message, add(BYTES_ARR_LEN_VAR_BS, encodedFunctionBytesCount)), // address\\n        sub(calldatasize(), redstonePayloadByteSize), // offset\\n        redstonePayloadByteSize // bytes length to copy\\n      )\\n\\n      // Updating free memory pointer\\n      mstore(\\n        FREE_MEMORY_PTR,\\n        add(\\n          add(message, add(redstonePayloadByteSize, encodedFunctionBytesCount)),\\n          BYTES_ARR_LEN_VAR_BS\\n        )\\n      )\\n    }\\n\\n    return message;\\n  }\\n\\n  function _getRedstonePayloadByteSize() private pure returns (uint256) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n\\n    return calldataNegativeOffset;\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) private pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n\\n  function _prepareReturnValue(bool success, bytes memory result)\\n    internal\\n    pure\\n    returns (bytes memory)\\n  {\\n    if (!success) {\\n\\n      if (result.length == 0) {\\n        revert ProxyCalldataFailedWithoutErrMsg();\\n      } else {\\n        bool isStringErrorMessage;\\n        assembly {\\n          let first32BytesOfResult := mload(add(result, BYTES_ARR_LEN_VAR_BS))\\n          isStringErrorMessage := eq(first32BytesOfResult, STRING_ERR_MESSAGE_MASK)\\n        }\\n\\n        if (isStringErrorMessage) {\\n          string memory receivedErrMsg;\\n          assembly {\\n            receivedErrMsg := add(result, REVERT_MSG_OFFSET)\\n          }\\n          revert ProxyCalldataFailedWithStringMessage(receivedErrMsg);\\n        } else {\\n          revert ProxyCalldataFailedWithCustomError(result);\\n        }\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x4630299916b145de0c392f390e77f75a7b1cec762bbd374f745abcdbcfdb5e8c\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSGINED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receviedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n}\\n\",\"keccak256\":\"0xc9a73986f5a12a28f74d98e8f028ca47c79909f317a38be02820e421d0723b30\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./RedstoneDefaultsLib.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\nimport \\\"../libs/BitmapLib.sol\\\";\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n/**\\n * @title The base contract with the main Redstone logic\\n * @author The Redstone Oracles team\\n * @dev Do not use this contract directly in consumer contracts, take a\\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\\n */\\nabstract contract RedstoneConsumerBase is CalldataExtractor {\\n  using SafeMath for uint256;\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return a unique index for a given signer address if the signer\\n   * is authorised, otherwise it should revert\\n   * @param receviedSigner The address of a signer, recovered from ECDSA signature\\n   * @return Unique index for a signer in the range [0..255]\\n   */\\n  function getAuthorisedSignerIndex(address receviedSigner) public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overriden by the child consumer contract.\\n   * It should validate the timestamp against the current time (block.timestamp)\\n   * It should revert with a helpful message if the timestamp is not valid\\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n  }\\n\\n  /**\\n   * @dev This function should be overriden by the child consumer contract.\\n   * @return The minimum required value of unique authorised signers\\n   */\\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev This function may be overriden by the child consumer contract.\\n   * It should aggregate values from different signers to a single uint value.\\n   * By default, it calculates the median value\\n   * @param values An array of uint256 values from different signers\\n   * @return Result of the aggregation in the form of a single number\\n   */\\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\\n    return RedstoneDefaultsLib.aggregateValues(values);\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  /**\\n   * @dev This is an internal helpful function for secure extraction oracle values\\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\\n   * validation, and aggregating values from different authorised signers into a\\n   * single numeric value. If any of the required conditions (e.g. too old timestamp or\\n   * insufficient number of autorised signers) do not match, the function will revert.\\n   *\\n   * Note! You should not call this function in a consumer contract. You can use\\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n   *\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in dataFeedIds array\\n   */\\n  function _securelyExtractOracleValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    // Initializing helpful variables and allocating memory\\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n    for (uint256 i = 0; i < dataFeedIds.length; i++) {\\n      // The line below is commented because newly allocated arrays are filled with zeros\\n      // But we left it for better readability\\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\\n    }\\n\\n    // Extracting the number of data packages from calldata\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n\\n    // Saving current free memory pointer\\n    uint256 freeMemPtr;\\n    assembly {\\n      freeMemPtr := mload(FREE_MEMORY_PTR)\\n    }\\n\\n    // Data packages extraction in a loop\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      // Extract data package details and update calldata offset\\n      uint256 dataPackageByteSize = _extractDataPackage(\\n        dataFeedIds,\\n        uniqueSignerCountForDataFeedIds,\\n        signersBitmapForDataFeedIds,\\n        valuesForDataFeeds,\\n        calldataNegativeOffset\\n      );\\n      calldataNegativeOffset += dataPackageByteSize;\\n\\n      // Shifting memory pointer back to the \\\"safe\\\" value\\n      assembly {\\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\\n      }\\n    }\\n\\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n    return _getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which extracts data for a data package based\\n   * on the given negative calldata offset, verifies them, and in the case of successful\\n   * verification updates the corresponding data package values in memory\\n   *\\n   * @param dataFeedIds an array of unique data feed identifiers\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   * @param signersBitmapForDataFeedIds an array of sginers bitmaps for data feeds\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param calldataNegativeOffset negative calldata offset for the given data package\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _extractDataPackage(\\n    bytes32[] memory dataFeedIds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds,\\n    uint256[] memory signersBitmapForDataFeedIds,\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256 calldataNegativeOffset\\n  ) private view returns (uint256) {\\n    uint256 signerIndex;\\n\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    // We use scopes to resolve problem with too deep stack\\n    {\\n      uint48 extractedTimestamp;\\n      address signerAddress;\\n      bytes32 signedHash;\\n      bytes memory signedMessage;\\n      uint256 signedMessageBytesCount;\\n\\n      signedMessageBytesCount = dataPointsCount.mul(eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS;\\n\\n      uint256 timestampCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n\\n      uint256 signedMessageCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\\n\\n      assembly {\\n        // Extracting the signed message\\n        signedMessage := extractBytesFromCalldata(\\n          signedMessageCalldataOffset,\\n          signedMessageBytesCount\\n        )\\n\\n        // Hashing the signed message\\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n        // Extracting timestamp\\n        extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n        function initByteArray(bytesCount) -> ptr {\\n          ptr := mload(FREE_MEMORY_PTR)\\n          mstore(ptr, bytesCount)\\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n        }\\n\\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n          let extractedBytesStartPtr := initByteArray(bytesCount)\\n          calldatacopy(\\n            extractedBytesStartPtr,\\n            offset,\\n            bytesCount\\n          )\\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n        }\\n      }\\n\\n      // Validating timestamp\\n      validateTimestamp(extractedTimestamp);\\n\\n      // Verifying the off-chain signature against on-chain hashed data\\n      signerAddress = SignatureLib.recoverSignerAddress(\\n        signedHash,\\n        calldataNegativeOffset + SIG_BS\\n      );\\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\\n    }\\n\\n    // Updating helpful arrays\\n    {\\n      bytes32 dataPointDataFeedId;\\n      uint256 dataPointValue;\\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount; dataPointIndex++) {\\n        // Extracting data feed id and value for the current data point\\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n          calldataNegativeOffset,\\n          eachDataPointValueByteSize,\\n          dataPointIndex\\n        );\\n\\n        for (\\n          uint256 dataFeedIdIndex = 0;\\n          dataFeedIdIndex < dataFeedIds.length;\\n          dataFeedIdIndex++\\n        ) {\\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n            if (\\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n            ) {\\n              // Increase unique signer counter\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n              // Add new value\\n              valuesForDataFeeds[dataFeedIdIndex][\\n                uniqueSignerCountForDataFeedIds[dataFeedIdIndex] - 1\\n              ] = dataPointValue;\\n\\n              // Update signers bitmap\\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                bitmapSignersForDataFeedId,\\n                signerIndex\\n              );\\n            }\\n\\n            // Breaking, as there couldn't be several indexes for the same feed ID\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Return total data package byte size\\n    return\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS +\\n      (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) *\\n      dataPointsCount;\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which aggregates values from different\\n   * authorised signers for the given arrays of values for each data feed\\n   *\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _getAggregatedValues(\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds\\n  ) private view returns (uint256[] memory) {\\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n        revert InsufficientNumberOfUniqueSigners(\\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n          uniqueSignersThreshold);\\n      }\\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n    }\\n\\n    return aggregatedValues;\\n  }\\n}\\n\",\"keccak256\":\"0x202fada6c6efd72d2c57574f52ca1af65149c926b0e99a53503be3af6ad1864c\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConsumerBase.sol\\\";\\n\\n/**\\n * @title The base contract for Redstone consumers' contracts that allows to\\n * securely calculate numeric redstone oracle values\\n * @author The Redstone Oracles team\\n * @dev This contract can extend other contracts to allow them\\n * securely fetch Redstone oracle data from transactions calldata\\n */\\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract an\\n   * oracle value for a given data feed id. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n   * @return Extracted and verified numeric oracle value for the given data feed id\\n   */\\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    bytes32[] memory dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = dataFeedId;\\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array\\n   */\\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n  {\\n    return _securelyExtractOracleValuesFromTxMsg(dataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\\n   * only difference that it allows to request oracle data for an array of data feeds\\n   * that may contain duplicates\\n   * \\n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIdsWithDuplicates array\\n   */\\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\\n    // Building an array without duplicates\\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\\n    bool alreadyIncluded;\\n    uint256 uniqueDataFeedIdsCount = 0;\\n\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\\n      alreadyIncluded = false;\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < uniqueDataFeedIdsCount; indexWithoutDup++) {\\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\\n          alreadyIncluded = true;\\n          break;\\n        }\\n      }\\n\\n      // Adding if not included\\n      if (!alreadyIncluded) {\\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\\n        uniqueDataFeedIdsCount++;\\n      }\\n    }\\n\\n    // Overriding dataFeedIdsWithoutDuplicates.length\\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\\n    assembly {\\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\\n    }\\n\\n    // Requesting oracle values (without duplicates)\\n    uint256[] memory valuesWithoutDuplicates = getOracleNumericValuesFromTxMsg(dataFeedIdsWithoutDuplicates);\\n\\n    // Preparing result values array\\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\\n          break;\\n        }\\n      }\\n    }\\n\\n    return valuesWithDuplicates;\\n  }\\n}\\n\",\"keccak256\":\"0xe8e70ed8bb3efc527dccaf5919587c7ff3980836256d7d8db8f632721a3cf956\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n\\n    if (block.timestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n      }\\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0xe39ee1618d15944d6f44918f02f71d0d604fb678dbdbf36ca1eeecc86858ff25\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/RedstoneConsumerNumericBase.sol\\\";\\n\\ncontract AvalancheDataServiceConsumerBase is RedstoneConsumerNumericBase {\\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n    return 3;\\n  }\\n\\n  function getAuthorisedSignerIndex(\\n    address signerAddress\\n  ) public view virtual override returns (uint8) {\\n    if (signerAddress == 0x1eA62d73EdF8AC05DfceA1A34b9796E937a29EfF) {\\n      return 0;\\n    } else if (signerAddress == 0x2c59617248994D12816EE1Fa77CE0a64eEB456BF) {\\n      return 1;\\n    } else if (signerAddress == 0x12470f7aBA85c8b81D63137DD5925D6EE114952b) {\\n      return 2;\\n    } else if (signerAddress == 0x109B4a318A4F5ddcbCA6349B45f881B4137deaFB) {\\n      return 3;\\n    } else if (signerAddress == 0x83cbA8c619fb629b81A65C2e67fE15cf3E3C9747) {\\n      return 4;\\n    } else {\\n      revert SignerNotAuthorised(signerAddress);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x816269b87f6d7fdbac50710b9bd7ecbea0afc660ed4ea8a4441d5f3d163f9e61\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9762198cae997eebad303a7a43a6133908646ed30811285085c9ea9cbd2a5e07\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = SafeMath.add(arr[middleIndex - 1], arr[middleIndex]);\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9b1a3a433a450cbe90e85801ddf891ab26deeda02d45a2d67e24443cdc33e764\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    return ecrecover(signedHash, v, r, s);\\n  }\\n}\\n\",\"keccak256\":\"0x06037b440e5eab52d550718543c463da00ac7231f303a503178ad5191e154310\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/DiamondHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 97d6cc3cb60bfd6feda4ea784b13bf0e7daac710;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./interfaces/IDiamondBeacon.sol\\\";\\r\\n\\r\\n//This path is updated during deployment\\r\\nimport \\\"./lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\n/**\\r\\n * DiamondHelper\\r\\n * Helper methods\\r\\n **/\\r\\ncontract DiamondHelper {\\r\\n    function _getFacetAddress(bytes4 methodSelector) internal view returns (address solvencyFacetAddress) {\\r\\n        solvencyFacetAddress = IDiamondBeacon(payable(DeploymentConstants.getDiamondAddress())).implementation(methodSelector);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1260e163609ca1f1b7508e0cf0b3b11ed45f844659f1720460000203de90d634\",\"license\":\"BUSL-1.1\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 5bae95ca244e96444fe80078195944f6637e72d8;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./interfaces/IIndex.sol\\\";\\r\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\r\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Pool\\r\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\r\\n * Depositors are rewarded with the interest rates collected from borrowers.\\r\\n * The interest rates calculation is delegated to an external calculator contract.\\r\\n */\\r\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\r\\n    using TransferHelper for address payable;\\r\\n\\r\\n    uint256 public totalSupplyCap;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowed;\\r\\n    mapping(address => uint256) internal _deposited;\\r\\n\\r\\n    mapping(address => uint256) public borrowed;\\r\\n\\r\\n    IRatesCalculator public ratesCalculator;\\r\\n    IBorrowersRegistry public borrowersRegistry;\\r\\n    IPoolRewarder public poolRewarder;\\r\\n\\r\\n    IIndex public depositIndex;\\r\\n    IIndex public borrowIndex;\\r\\n\\r\\n    address payable public tokenAddress;\\r\\n\\r\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\\r\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\r\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\r\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\r\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\r\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\r\\n\\r\\n        borrowersRegistry = borrowersRegistry_;\\r\\n        ratesCalculator = ratesCalculator_;\\r\\n        depositIndex = depositIndex_;\\r\\n        borrowIndex = borrowIndex_;\\r\\n        poolRewarder = poolRewarder_;\\r\\n        tokenAddress = tokenAddress_;\\r\\n        totalSupplyCap = _totalSupplyCap;\\r\\n\\r\\n        __Ownable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n        _updateRates();\\r\\n    }\\r\\n\\r\\n    /* ========== SETTERS ========== */\\r\\n\\r\\n    /**\\r\\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev _newTotalSupplyCap new deposit cap\\r\\n    **/\\r\\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\\r\\n        totalSupplyCap = _newTotalSupplyCap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new Pool Rewarder.\\r\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev _poolRewarder the address of PoolRewarder\\r\\n    **/\\r\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\r\\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\\r\\n        poolRewarder = _poolRewarder;\\r\\n\\r\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new rate calculator.\\r\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev ratesCalculator the address of rates calculator\\r\\n     **/\\r\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\r\\n        // setting address(0) ratesCalculator_ freezes the pool\\r\\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\\r\\n        ratesCalculator = ratesCalculator_;\\r\\n        if (address(ratesCalculator_) != address(0)) {\\r\\n            _updateRates();\\r\\n        }\\r\\n\\r\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new borrowers registry contract.\\r\\n     * The borrowers registry decides if an account can borrow funds.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev borrowersRegistry the address of borrowers registry\\r\\n     **/\\r\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\r\\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\\r\\n\\r\\n        borrowersRegistry = borrowersRegistry_;\\r\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(_deposited[msg.sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[msg.sender]);\\r\\n\\r\\n        // (this is verified in \\\"require\\\" above)\\r\\n        unchecked {\\r\\n            _deposited[msg.sender] -= amount;\\r\\n        }\\r\\n\\r\\n        _accumulateDepositInterest(recipient);\\r\\n        _deposited[recipient] += amount;\\r\\n\\r\\n        // Handle rewards\\r\\n        if(address(poolRewarder) != address(0) && amount != 0){\\r\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, msg.sender);\\r\\n            if(unstaked > 0) {\\r\\n                poolRewarder.stakeFor(unstaked, recipient);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(msg.sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\r\\n        return _allowed[owner][spender];\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\r\\n        _allowed[msg.sender][spender] = newAllowance;\\r\\n\\r\\n        emit Approval(msg.sender, spender, newAllowance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        uint256 currentAllowance = _allowed[msg.sender][spender];\\r\\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\\r\\n\\r\\n        uint256 newAllowance = currentAllowance - subtractedValue;\\r\\n        _allowed[msg.sender][spender] = newAllowance;\\r\\n\\r\\n        emit Approval(msg.sender, spender, newAllowance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        _allowed[msg.sender][spender] = amount;\\r\\n\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\\r\\n\\r\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\r\\n\\r\\n        _accumulateDepositInterest(sender);\\r\\n\\r\\n        if(_deposited[sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[sender]);\\r\\n\\r\\n\\r\\n        _deposited[sender] -= amount;\\r\\n        _allowed[sender][msg.sender] -= amount;\\r\\n\\r\\n        _accumulateDepositInterest(recipient);\\r\\n        _deposited[recipient] += amount;\\r\\n\\r\\n        // Handle rewards\\r\\n        if(address(poolRewarder) != address(0) && amount != 0){\\r\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\\r\\n            if(unstaked > 0) {\\r\\n                poolRewarder.stakeFor(unstaked, recipient);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Deposits the amount\\r\\n     * It updates user deposited balance, total deposited and rates\\r\\n     **/\\r\\n    function deposit(uint256 _amount) public virtual nonReentrant {\\r\\n        if(_amount == 0) revert ZeroDepositAmount();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(totalSupplyCap != 0){\\r\\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\\r\\n        }\\r\\n\\r\\n        _transferToPool(msg.sender, _amount);\\r\\n\\r\\n        _mint(msg.sender, _amount);\\r\\n        _deposited[address(this)] += _amount;\\r\\n        _updateRates();\\r\\n\\r\\n        if (address(poolRewarder) != address(0)) {\\r\\n            poolRewarder.stakeFor(_amount, msg.sender);\\r\\n        }\\r\\n\\r\\n        emit Deposit(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\r\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\r\\n        tokenAddress.safeTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws selected amount from the user deposits\\r\\n     * @dev _amount the amount to be withdrawn\\r\\n     **/\\r\\n    function withdraw(uint256 _amount) external nonReentrant {\\r\\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\r\\n        // verified in \\\"require\\\" above\\r\\n        unchecked {\\r\\n            _deposited[address(this)] -= _amount;\\r\\n        }\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        _transferFromPool(msg.sender, _amount);\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        if (address(poolRewarder) != address(0)) {\\r\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\r\\n        }\\r\\n\\r\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Borrows the specified amount\\r\\n     * It updates user borrowed balance, total borrowed amount and rates\\r\\n     * @dev _amount the amount to be borrowed\\r\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\r\\n     **/\\r\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\r\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\r\\n\\r\\n        _accumulateBorrowingInterest(msg.sender);\\r\\n\\r\\n        borrowed[msg.sender] += _amount;\\r\\n        borrowed[address(this)] += _amount;\\r\\n\\r\\n        _transferFromPool(msg.sender, _amount);\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Repays the amount\\r\\n     * It updates user borrowed balance, total borrowed amount and rates\\r\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\r\\n     **/\\r\\n    function repay(uint256 amount) external nonReentrant {\\r\\n        _accumulateBorrowingInterest(msg.sender);\\r\\n\\r\\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\\r\\n        _transferToPool(msg.sender, amount);\\r\\n\\r\\n        borrowed[msg.sender] -= amount;\\r\\n        borrowed[address(this)] -= amount;\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        emit Repayment(msg.sender, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /* =========\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the current borrowed amount for the given user\\r\\n     * The value includes the interest rates owned at the current moment\\r\\n     * @dev _user the address of queried borrower\\r\\n    **/\\r\\n    function getBorrowed(address _user) public view returns (uint256) {\\r\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function totalBorrowed() public view returns (uint256) {\\r\\n        return getBorrowed(address(this));\\r\\n    }\\r\\n\\r\\n\\r\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\r\\n    function getRewards() external {\\r\\n        poolRewarder.getRewardsFor(msg.sender);\\r\\n    }\\r\\n\\r\\n    // Returns number of pending rewards for msg.sender\\r\\n    function checkRewards() external view returns (uint256) {\\r\\n        return poolRewarder.earned(msg.sender);\\r\\n    }\\r\\n\\r\\n    // Returns max. acceptable pool utilisation after borrow action\\r\\n    function getMaxPoolUtilisationForBorrowing() virtual public view returns (uint256) {\\r\\n        return 0.9e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current deposited amount for the given user\\r\\n     * The value includes the interest rates earned at the current moment\\r\\n     * @dev _user the address of queried depositor\\r\\n     **/\\r\\n    function balanceOf(address user) public view override returns (uint256) {\\r\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current interest rate for deposits\\r\\n     **/\\r\\n    function getDepositRate() public view returns (uint256) {\\r\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current interest rate for borrowings\\r\\n     **/\\r\\n    function getBorrowingRate() public view returns (uint256) {\\r\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\r\\n     **/\\r\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\r\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\r\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\r\\n\\r\\n        if(amount > balance) revert InsufficientPoolFunds();\\r\\n        if(surplus < amount) revert InsufficientSurplus();\\r\\n\\r\\n        _transferFromPool(account, amount);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    function _mint(address to, uint256 amount) internal {\\r\\n        if(to == address(0)) revert MintToAddressZero();\\r\\n\\r\\n        _deposited[to] += amount;\\r\\n\\r\\n        emit Transfer(address(0), to, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\\r\\n\\r\\n        // verified in \\\"require\\\" above\\r\\n        unchecked {\\r\\n            _deposited[account] -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _updateRates() internal {\\r\\n        uint256 _totalBorrowed = totalBorrowed();\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\\r\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\r\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\r\\n    }\\r\\n\\r\\n    function _accumulateDepositInterest(address user) internal {\\r\\n        uint256 interest = balanceOf(user) - _deposited[user];\\r\\n\\r\\n        _mint(user, interest);\\r\\n        _deposited[address(this)] = balanceOf(address(this));\\r\\n\\r\\n        emit InterestCollected(user, interest, block.timestamp);\\r\\n\\r\\n        depositIndex.updateUser(user);\\r\\n        depositIndex.updateUser(address(this));\\r\\n    }\\r\\n\\r\\n    function _accumulateBorrowingInterest(address user) internal {\\r\\n        borrowed[user] = getBorrowed(user);\\r\\n        borrowed[address(this)] = getBorrowed(address(this));\\r\\n\\r\\n        borrowIndex.updateUser(user);\\r\\n        borrowIndex.updateUser(address(this));\\r\\n    }\\r\\n\\r\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\r\\n\\r\\n    function renounceOwnership() public virtual override {}\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier canBorrow() {\\r\\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\\r\\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\\r\\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\\r\\n        _;\\r\\n        if((totalBorrowed() * 1e18) / totalSupply() > getMaxPoolUtilisationForBorrowing()) revert MaxPoolUtilisationBreached();\\r\\n    }\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user deposits funds\\r\\n     * @param user the address performing the deposit\\r\\n     * @param value the amount deposited\\r\\n     * @param timestamp of the deposit\\r\\n     **/\\r\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user withdraws funds\\r\\n     * @param user the address performing the withdrawal\\r\\n     * @param value the amount withdrawn\\r\\n     * @param timestamp of the withdrawal\\r\\n     **/\\r\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user borrows funds\\r\\n     * @param user the address that borrows\\r\\n     * @param value the amount borrowed\\r\\n     * @param timestamp time of the borrowing\\r\\n     **/\\r\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user repays debt\\r\\n     * @param user the address that repays debt\\r\\n     * @param value the amount repaid\\r\\n     * @param timestamp of the repayment\\r\\n     **/\\r\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after accumulating deposit interest\\r\\n     * @param user the address that the deposit interest is accumulated for\\r\\n     * @param value the amount that interest is calculated from\\r\\n     * @param timestamp of the interest accumulation\\r\\n     **/\\r\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing borrowers registry\\r\\n    * @param registry an address of the newly set borrowers registry\\r\\n    * @param timestamp of the borrowers registry change\\r\\n    **/\\r\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing rates calculator\\r\\n    * @param calculator an address of the newly set rates calculator\\r\\n    * @param timestamp of the borrowers registry change\\r\\n    **/\\r\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing pool rewarder\\r\\n    * @param poolRewarder an address of the newly set pool rewarder\\r\\n    * @param timestamp of the pool rewarder change\\r\\n    **/\\r\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\r\\n\\r\\n    /* ========== ERRORS ========== */\\r\\n\\r\\n    // Only authorized accounts may borrow\\r\\n    error NotAuthorizedToBorrow();\\r\\n\\r\\n    // Borrowers registry is not configured\\r\\n    error BorrowersRegistryNotConfigured();\\r\\n\\r\\n    // Pool is frozen\\r\\n    error PoolFrozen();\\r\\n\\r\\n    // Not enough funds in the pool.\\r\\n    error InsufficientPoolFunds();\\r\\n\\r\\n    // Insufficient pool surplus to cover the requested recover amount\\r\\n    error InsufficientSurplus();\\r\\n\\r\\n    // Address (`target`) must be a contract\\r\\n    // @param target target address that must be a contract\\r\\n    error NotAContract(address target);\\r\\n\\r\\n    //  ERC20: Spender cannot be a zero address\\r\\n    error SpenderZeroAddress();\\r\\n\\r\\n    //  ERC20: cannot transfer to the zero address\\r\\n    error TransferToZeroAddress();\\r\\n\\r\\n    //  ERC20: cannot transfer to the pool address\\r\\n    error TransferToPoolAddress();\\r\\n\\r\\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\\r\\n    /// @param amount transfer amount\\r\\n    /// @param balance available balance\\r\\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\r\\n\\r\\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\\r\\n    /// @param requested requested transfer amount\\r\\n    /// @param allowance current allowance\\r\\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\\r\\n\\r\\n    //  This deposit operation would result in a breach of the totalSupplyCap\\r\\n    error TotalSupplyCapBreached();\\r\\n\\r\\n    // The deposit amount must be > 0\\r\\n    error ZeroDepositAmount();\\r\\n\\r\\n    // ERC20: cannot mint to the zero address\\r\\n    error MintToAddressZero();\\r\\n\\r\\n    // ERC20: burn amount exceeds current pool indexed balance\\r\\n    error BurnAmountExceedsBalance();\\r\\n\\r\\n    // Trying to repay more than was borrowed\\r\\n    error RepayingMoreThanWasBorrowed();\\r\\n\\r\\n    // getMaxPoolUtilisationForBorrowing was breached\\r\\n    error MaxPoolUtilisationBreached();\\r\\n}\",\"keccak256\":\"0xd59448147e759ba73843ca7a8c5a85549a2152601ab3577f80681835c41ecd54\",\"license\":\"BUSL-1.1\"},\"contracts/ReentrancyGuardKeccak.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Modified version of Openzeppelin (OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)) ReentrancyGuard\\r\\n// contract that uses keccak slots instead of the standard storage layout.\\r\\n\\r\\nimport {DiamondStorageLib} from \\\"./lib/DiamondStorageLib.sol\\\";\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n */\\r\\nabstract contract ReentrancyGuardKeccak {\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        DiamondStorageLib.ReentrancyGuardStorage storage rgs = DiamondStorageLib.reentrancyGuardStorage();\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(rgs._status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        rgs._status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        rgs._status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x10cf073a638c2bd869485bfe43d40720a1f65bb7521c5d780853c13baec74e19\",\"license\":\"MIT\"},\"contracts/facets/AssetsExposureController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\r\\n\\r\\n//This path is updated during deployment\\r\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\ncontract AssetsExposureController {\\r\\n\\r\\n    function resetPrimeAccountAssetsExposure() external {\\r\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n        for(uint i=0; i<ownedAssets.length; i++){\\r\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssets[i], true));\\r\\n            tokenManager.decreaseProtocolExposure(ownedAssets[i], token.balanceOf(address(this)) * 1e18 / 10**token.decimals());\\r\\n        }\\r\\n        for(uint i=0; i<positions.length; i++){\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\\r\\n                tokenManager.decreaseProtocolExposure(positions[i].identifier, balance * 1e18 / 10**decimals);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setPrimeAccountAssetsExposure() external {\\r\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n        for(uint i=0; i<ownedAssets.length; i++){\\r\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssets[i], true));\\r\\n            tokenManager.increaseProtocolExposure(ownedAssets[i], token.balanceOf(address(this)) * 1e18 / 10**token.decimals());\\r\\n        }\\r\\n        for(uint i=0; i<positions.length; i++){\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\\r\\n                tokenManager.increaseProtocolExposure(positions[i].identifier, balance * 1e18 / 10**decimals);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1a596ec4476c5f9798427c5bc82bf5d0206f09b5ac7bedb88b7e6b83f5817504\",\"license\":\"BUSL-1.1\"},\"contracts/facets/SolvencyFacetProd.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\\\";\\r\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\r\\nimport \\\"../Pool.sol\\\";\\r\\nimport \\\"../DiamondHelper.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\r\\n\\r\\n//This path is updated during deployment\\r\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\ncontract SolvencyFacetProd is AvalancheDataServiceConsumerBase, DiamondHelper {\\r\\n    struct AssetPrice {\\r\\n        bytes32 asset;\\r\\n        uint256 price;\\r\\n    }\\r\\n\\r\\n    // Struct used in the liquidation process to obtain necessary prices only once\\r\\n    struct CachedPrices {\\r\\n        AssetPrice[] ownedAssetsPrices;\\r\\n        AssetPrice[] debtAssetsPrices;\\r\\n        AssetPrice[] stakedPositionsPrices;\\r\\n        AssetPrice[] assetsToRepayPrices;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Checks if the loan is solvent.\\r\\n      * It means that the Health Ratio is greater than 1e18.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function isSolvent() public view returns (bool) {\\r\\n        return getHealthRatio() >= 1e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Checks if the loan is solvent.\\r\\n      * It means that the Health Ratio is greater than 1e18.\\r\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n      * @param cachedPrices Struct containing arrays of Asset/Price structs used to calculate value of owned assets, debt and staked positions\\r\\n    **/\\r\\n    function isSolventWithPrices(CachedPrices memory cachedPrices) public view returns (bool) {\\r\\n        return getHealthRatioWithPrices(cachedPrices) >= 1e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of Asset/Price structs of staked positions.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getStakedPositionsPrices() public view returns(AssetPrice[] memory result) {\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n\\r\\n        bytes32[] memory symbols = new bytes32[](positions.length);\\r\\n        for(uint256 i=0; i<positions.length; i++) {\\r\\n            symbols[i] = positions[i].symbol;\\r\\n        }\\r\\n\\r\\n        uint256[] memory stakedPositionsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(symbols);\\r\\n        result = new AssetPrice[](stakedPositionsPrices.length);\\r\\n\\r\\n        for(uint i; i<stakedPositionsPrices.length; i++){\\r\\n            result[i] = AssetPrice({\\r\\n                asset: symbols[i],\\r\\n                price: stakedPositionsPrices[i]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of bytes32[] symbols of debt (borrowable) assets.\\r\\n    **/\\r\\n    function getDebtAssets() public view returns(bytes32[] memory result) {\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        result = tokenManager.getAllPoolAssets();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of Asset/Price structs of debt (borrowable) assets.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getDebtAssetsPrices() public view returns(AssetPrice[] memory result) {\\r\\n        bytes32[] memory debtAssets = getDebtAssets();\\r\\n\\r\\n        uint256[] memory debtAssetsPrices = getOracleNumericValuesFromTxMsg(debtAssets);\\r\\n        result = new AssetPrice[](debtAssetsPrices.length);\\r\\n\\r\\n        for(uint i; i<debtAssetsPrices.length; i++){\\r\\n            result[i] = AssetPrice({\\r\\n                asset: debtAssets[i],\\r\\n                price: debtAssetsPrices[i]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getOwnedAssetsWithNativePrices() public view returns(AssetPrice[] memory result) {\\r\\n        bytes32[] memory assetsEnriched = getOwnedAssetsWithNative();\\r\\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(assetsEnriched);\\r\\n\\r\\n        result = new AssetPrice[](assetsEnriched.length);\\r\\n\\r\\n        for(uint i; i<assetsEnriched.length; i++){\\r\\n            result[i] = AssetPrice({\\r\\n                asset: assetsEnriched[i],\\r\\n                price: prices[i]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of bytes32[] symbols of staked positions.\\r\\n    **/\\r\\n    function getStakedAssets() internal view returns (bytes32[] memory result) {\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n        result = new bytes32[](positions.length);\\r\\n        for(uint i; i<positions.length; i++) {\\r\\n            result[i] = positions[i].symbol;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function copyToArray(bytes32[] memory target, bytes32[] memory source, uint256 offset, uint256 numberOfItems) pure internal {\\r\\n        require(numberOfItems <= source.length, \\\"numberOfItems > target array length\\\");\\r\\n        require(offset + numberOfItems <= target.length, \\\"offset + numberOfItems > target array length\\\");\\r\\n\\r\\n        for(uint i; i<numberOfItems; i++){\\r\\n            target[i + offset] = source[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function copyToAssetPriceArray(AssetPrice[] memory target, bytes32[] memory sourceAssets, uint256[] memory sourcePrices, uint256 offset, uint256 numberOfItems) pure internal {\\r\\n        require(numberOfItems <= sourceAssets.length, \\\"numberOfItems > sourceAssets array length\\\");\\r\\n        require(numberOfItems <= sourcePrices.length, \\\"numberOfItems > sourcePrices array length\\\");\\r\\n        require(offset + numberOfItems <= sourceAssets.length, \\\"offset + numberOfItems > sourceAssets array length\\\");\\r\\n        require(offset + numberOfItems <= sourcePrices.length, \\\"offset + numberOfItems > sourcePrices array length\\\");\\r\\n\\r\\n        for(uint i; i<numberOfItems; i++){\\r\\n            target[i] = AssetPrice({\\r\\n                asset: sourceAssets[i+offset],\\r\\n                price: sourcePrices[i+offset]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns CachedPrices struct consisting of Asset/Price arrays for ownedAssets, debtAssets, stakedPositions and assetsToRepay.\\r\\n      * Used during the liquidation process in order to obtain all necessary prices from calldata only once.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public view returns (CachedPrices memory result) {\\r\\n        bytes32[] memory ownedAssetsEnriched = getOwnedAssetsWithNative();\\r\\n        bytes32[] memory debtAssets = getDebtAssets();\\r\\n        bytes32[] memory stakedAssets = getStakedAssets();\\r\\n\\r\\n        bytes32[] memory allAssetsSymbols = new bytes32[](ownedAssetsEnriched.length + debtAssets.length + stakedAssets.length + assetsToRepay.length);\\r\\n        uint256 offset;\\r\\n\\r\\n        // Populate allAssetsSymbols with owned assets symbols\\r\\n        copyToArray(allAssetsSymbols, ownedAssetsEnriched, offset, ownedAssetsEnriched.length);\\r\\n        offset += ownedAssetsEnriched.length;\\r\\n\\r\\n        // Populate allAssetsSymbols with debt assets symbols\\r\\n        copyToArray(allAssetsSymbols, debtAssets, offset, debtAssets.length);\\r\\n        offset += debtAssets.length;\\r\\n\\r\\n        // Populate allAssetsSymbols with staked assets symbols\\r\\n        copyToArray(allAssetsSymbols, stakedAssets, offset, stakedAssets.length);\\r\\n        offset += stakedAssets.length;\\r\\n\\r\\n        // Populate allAssetsSymbols with assets to repay symbols\\r\\n        copyToArray(allAssetsSymbols, assetsToRepay, offset, assetsToRepay.length);\\r\\n\\r\\n        uint256[] memory allAssetsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(allAssetsSymbols);\\r\\n\\r\\n        offset = 0;\\r\\n\\r\\n        // Populate ownedAssetsPrices struct\\r\\n        AssetPrice[] memory ownedAssetsPrices = new AssetPrice[](ownedAssetsEnriched.length);\\r\\n        copyToAssetPriceArray(ownedAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, ownedAssetsEnriched.length);\\r\\n        offset += ownedAssetsEnriched.length;\\r\\n\\r\\n        // Populate debtAssetsPrices struct\\r\\n        AssetPrice[] memory debtAssetsPrices = new AssetPrice[](debtAssets.length);\\r\\n        copyToAssetPriceArray(debtAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, debtAssets.length);\\r\\n        offset += debtAssetsPrices.length;\\r\\n\\r\\n        // Populate stakedPositionsPrices struct\\r\\n        AssetPrice[] memory stakedPositionsPrices = new AssetPrice[](stakedAssets.length);\\r\\n        copyToAssetPriceArray(stakedPositionsPrices, allAssetsSymbols, allAssetsPrices, offset, stakedAssets.length);\\r\\n        offset += stakedAssets.length;\\r\\n\\r\\n        // Populate assetsToRepayPrices struct\\r\\n        // Stack too deep :F\\r\\n        AssetPrice[] memory assetsToRepayPrices = new AssetPrice[](assetsToRepay.length);\\r\\n        for(uint i=0; i<assetsToRepay.length; i++){\\r\\n            assetsToRepayPrices[i] = AssetPrice({\\r\\n            asset: allAssetsSymbols[i+offset],\\r\\n            price: allAssetsPrices[i+offset]\\r\\n            });\\r\\n        }\\r\\n\\r\\n        result = CachedPrices({\\r\\n        ownedAssetsPrices: ownedAssetsPrices,\\r\\n        debtAssetsPrices: debtAssetsPrices,\\r\\n        stakedPositionsPrices: stakedPositionsPrices,\\r\\n        assetsToRepayPrices: assetsToRepayPrices\\r\\n        });\\r\\n    }\\r\\n\\r\\n    // Check whether there is enough debt-denominated tokens to fully repaid what was previously borrowed\\r\\n    function canRepayDebtFully() external view returns(bool) {\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        bytes32[] memory poolAssets = tokenManager.getAllPoolAssets();\\r\\n\\r\\n        for(uint i; i< poolAssets.length; i++) {\\r\\n            Pool pool = Pool(DeploymentConstants.getTokenManager().getPoolAddress(poolAssets[i]));\\r\\n            IERC20 token = IERC20(pool.tokenAddress());\\r\\n            if(token.balanceOf(address(this)) < pool.getBorrowed(address(this))) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValuesFromTxMsg() method.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getPrices(bytes32[] memory symbols) external view returns (uint256[] memory) {\\r\\n        return getOracleNumericValuesFromTxMsg(symbols);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValueFromTxMsg() method.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getPrice(bytes32 symbol) external view returns (uint256) {\\r\\n        return getOracleNumericValueFromTxMsg(symbol);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns TotalWeightedValue of OwnedAssets in USD based on the supplied array of Asset/Price struct, tokenBalance and debtCoverage\\r\\n    **/\\r\\n    function _getTWVOwnedAssets(AssetPrice[] memory ownedAssetsPrices) internal view returns (uint256) {\\r\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n        uint256 weightedValueOfTokens = ownedAssetsPrices[0].price * address(this).balance * tokenManager.debtCoverage(tokenManager.getAssetAddress(nativeTokenSymbol, true)) / (10 ** 26);\\r\\n\\r\\n        if (ownedAssetsPrices.length > 0) {\\r\\n\\r\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\r\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\r\\n                weightedValueOfTokens = weightedValueOfTokens + (ownedAssetsPrices[i].price * token.balanceOf(address(this)) * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\\r\\n            }\\r\\n        }\\r\\n        return weightedValueOfTokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns TotalWeightedValue of StakedPositions in USD based on the supplied array of Asset/Price struct, positionBalance and debtCoverage\\r\\n    **/\\r\\n    function _getTWVStakedPositions(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n\\r\\n        uint256 weightedValueOfStaked;\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\r\\n\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n\\r\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\r\\n\\r\\n                weightedValueOfStaked += stakedPositionsPrices[i].price * balance * tokenManager.debtCoverageStaked(positions[i].identifier) / (10 ** token.decimals() * 10**8);\\r\\n            }\\r\\n\\r\\n\\r\\n        }\\r\\n        return weightedValueOfStaked;\\r\\n    }\\r\\n\\r\\n    function _getThresholdWeightedValueBase(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) internal view virtual returns (uint256) {\\r\\n        return _getTWVOwnedAssets(ownedAssetsPrices) + _getTWVStakedPositions(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getThresholdWeightedValue() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\\r\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\r\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\r\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getThresholdWeightedValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\r\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt denominated in USD\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getDebtBase(AssetPrice[] memory debtAssetsPrices) internal view returns (uint256){\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        uint256 debt;\\r\\n\\r\\n        for (uint256 i; i < debtAssetsPrices.length; i++) {\\r\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(debtAssetsPrices[i].asset, true));\\r\\n\\r\\n            Pool pool = Pool(tokenManager.getPoolAddress(debtAssetsPrices[i].asset));\\r\\n            //10**18 (wei in eth) / 10**8 (precision of oracle feed) = 10**10\\r\\n            debt = debt + pool.getBorrowed(address(this)) * debtAssetsPrices[i].price * 10 ** 10\\r\\n            / 10 ** token.decimals();\\r\\n        }\\r\\n\\r\\n        return debt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt denominated in USD\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getDebt() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory debtAssetsPrices = getDebtAssetsPrices();\\r\\n        return getDebtBase(debtAssetsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt denominated in USD\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getDebtWithPrices(AssetPrice[] memory debtAssetsPrices) public view virtual returns (uint256) {\\r\\n        return getDebtBase(debtAssetsPrices);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function _getTotalAssetsValueBase(AssetPrice[] memory ownedAssetsPrices) public view returns (uint256) {\\r\\n        if (ownedAssetsPrices.length > 0) {\\r\\n            ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n            uint256 total = address(this).balance * ownedAssetsPrices[0].price / 10 ** 8;\\r\\n\\r\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\r\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\r\\n                uint256 assetBalance = token.balanceOf(address(this));\\r\\n\\r\\n                total = total + (ownedAssetsPrices[i].price * 10 ** 10 * assetBalance / (10 ** token.decimals()));\\r\\n            }\\r\\n            return total;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n     **/\\r\\n    function getTotalAssetsValue() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\\r\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getTotalAssetsValueWithPrices(AssetPrice[] memory ownedAssetsPrices) public view virtual returns (uint256) {\\r\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns list of owned assets that always included NativeToken at index 0\\r\\n    **/\\r\\n    function getOwnedAssetsWithNative() public view returns(bytes32[] memory){\\r\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\r\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\r\\n\\r\\n        // If account already owns the native token the use ownedAssets.length; Otherwise add one element to account for additional native token.\\r\\n        uint256 numberOfAssets = DiamondStorageLib.hasAsset(nativeTokenSymbol) ? ownedAssets.length : ownedAssets.length + 1;\\r\\n        bytes32[] memory assetsWithNative = new bytes32[](numberOfAssets);\\r\\n\\r\\n        uint256 lastUsedIndex;\\r\\n        assetsWithNative[0] = nativeTokenSymbol; // First asset = NativeToken\\r\\n\\r\\n        for(uint i=0; i< ownedAssets.length; i++){\\r\\n            if(ownedAssets[i] != nativeTokenSymbol){\\r\\n                lastUsedIndex += 1;\\r\\n                assetsWithNative[lastUsedIndex] = ownedAssets[i];\\r\\n            }\\r\\n        }\\r\\n        return assetsWithNative;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of staked positions in USD.\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function _getStakedValueBase(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n\\r\\n        uint256 usdValue;\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\r\\n\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\r\\n                usdValue += stakedPositionsPrices[i].price * 10 ** 10 * balance / (10 ** token.decimals());\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return usdValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of staked positions in USD.\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getStakedValueWithPrices(AssetPrice[] memory stakedPositionsPrices) public view returns (uint256) {\\r\\n        return _getStakedValueBase(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of staked positions in USD.\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getStakedValue() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\r\\n        return _getStakedValueBase(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getTotalValue() public view virtual returns (uint256) {\\r\\n        return getTotalAssetsValue() + getStakedValue();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getTotalValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\r\\n        return getTotalAssetsValueWithPrices(ownedAssetsPrices) + getStakedValueWithPrices(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    function getFullLoanStatus() public view returns (uint256[5] memory) {\\r\\n        return [getTotalValue(), getDebt(), getThresholdWeightedValue(), getHealthRatio(), isSolvent() ? uint256(1) : uint256(0)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\r\\n     * by current debt\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n     **/\\r\\n    function getHealthRatio() public view virtual returns (uint256) {\\r\\n        CachedPrices memory cachedPrices = getAllPricesForLiquidation(new bytes32[](0));\\r\\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\\r\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\r\\n\\r\\n        if (debt == 0) {\\r\\n            return type(uint256).max;\\r\\n        } else {\\r\\n            return thresholdWeightedValue * 1e18 / debt;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\r\\n     * by current debt\\r\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n     **/\\r\\n    function getHealthRatioWithPrices(CachedPrices memory cachedPrices) public view virtual returns (uint256) {\\r\\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\\r\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\r\\n\\r\\n        if (debt == 0) {\\r\\n            return type(uint256).max;\\r\\n        } else {\\r\\n            return thresholdWeightedValue * 1e18 / debt;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb5bdb172ee6bd5549baa8764acbf330a605b3a663c490b65c7d74eb6a3cc93e\",\"license\":\"BUSL-1.1\"},\"contracts/facets/avalanche/YieldYakFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"../../ReentrancyGuardKeccak.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"../../lib/SolvencyMethods.sol\\\";\\r\\nimport \\\"../../interfaces/facets/avalanche/IYieldYak.sol\\\";\\r\\n\\r\\nimport {DiamondStorageLib} from \\\"../../lib/DiamondStorageLib.sol\\\";\\r\\nimport \\\"../../interfaces/IWrappedNativeToken.sol\\\";\\r\\n\\r\\n// TODO: Check STATUS (tokenManager) of Vault tokens before allowing to stake\\r\\n//This path is updated during deployment\\r\\nimport \\\"../../lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\ncontract YieldYakFacet is ReentrancyGuardKeccak, SolvencyMethods {\\r\\n    using TransferHelper for address payable;\\r\\n    using TransferHelper for address;\\r\\n\\r\\n    // Staking Vaults tokens\\r\\n    address private constant YY_AAVE_AVAX = 0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95;\\r\\n    address private constant YY_PTP_sAVAX = 0xb8f531c0d3c53B1760bcb7F57d87762Fd25c4977;\\r\\n\\r\\n    // Staking Vaults LPs\\r\\n    address private constant YY_PNG_AVAX_USDC_LP = 0xC0cd58661b68e10b49D3Bec4bC5E44e7A7c20656;\\r\\n    address private constant YY_PNG_AVAX_ETH_LP = 0xFCD2050E213cC54db2c9c99632AC870574FbC261;\\r\\n    address private constant YY_TJ_AVAX_USDC_LP = 0xDEf94a13fF31FB6363f1e03bF18fe0F59Db83BBC;\\r\\n    address private constant YY_TJ_AVAX_ETH_LP = 0x5219558ee591b030E075892acc41334A1694fd8A;\\r\\n    address private constant YY_TJ_AVAX_sAVAX_LP = 0x22EDe03f1115666CF05a4bAfafaEe8F43D42cD56;\\r\\n\\r\\n    // Tokens\\r\\n    address private constant SAVAX_TOKEN = 0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE;\\r\\n    address private constant AVAX_TOKEN = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\r\\n    // LPs\\r\\n    address private constant PNG_AVAX_USDC_LP = 0x0e0100Ab771E9288e0Aa97e11557E6654C3a9665;\\r\\n    address private constant PNG_AVAX_ETH_LP = 0x7c05d54fc5CB6e4Ad87c6f5db3b807C94bB89c52;\\r\\n\\r\\n    address private constant TJ_AVAX_USDC_LP = 0xf4003F4efBE8691B60249E6afbD307aBE7758adb;\\r\\n    address private constant TJ_AVAX_ETH_LP = 0xFE15c2695F1F920da45C30AAE47d11dE51007AF9;\\r\\n    address private constant TJ_AVAX_sAVAX_LP = 0x4b946c91C2B1a7d7C40FB3C130CdfBaf8389094d;\\r\\n\\r\\n    // ----- STAKE -----\\r\\n\\r\\n    /**\\r\\n        * Stakes AVAX in Yield Yak protocol\\r\\n        * @dev This function uses the redstone-evm-connector\\r\\n        * @param amount amount of AVAX to be staked\\r\\n    **/\\r\\n    function stakeAVAXYak(uint256 amount) public onlyOwner nonReentrant recalculateAssetsExposure remainsSolvent {\\r\\n        require(amount > 0, \\\"Cannot stake 0 tokens\\\");\\r\\n        require(IWrappedNativeToken(AVAX_TOKEN).balanceOf(address(this)) >= amount, \\\"Not enough AVAX available\\\");\\r\\n\\r\\n        IWrappedNativeToken(AVAX_TOKEN).withdraw(amount);\\r\\n        IYieldYak(YY_AAVE_AVAX).deposit{value: amount}();\\r\\n\\r\\n        DiamondStorageLib.addOwnedAsset(\\\"YY_AAVE_AVAX\\\", YY_AAVE_AVAX);\\r\\n\\r\\n        emit Staked(msg.sender, \\\"AVAX\\\", YY_AAVE_AVAX, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n       * Stakes sAVAX in Yield Yak protocol\\r\\n       * @dev This function uses the redstone-evm-connector\\r\\n       * @param amount amount of sAVAX to be staked\\r\\n    **/\\r\\n    function stakeSAVAXYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\\r\\n            tokenAddress: SAVAX_TOKEN,\\r\\n            vaultAddress: YY_PTP_sAVAX,\\r\\n            tokenSymbol: \\\"sAVAX\\\",\\r\\n            vaultTokenSymbol: \\\"YY_PTP_sAVAX\\\",\\r\\n            amount: amount\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Stakes PNG_AVAX_USDC_LP in Yield Yak protocol\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n      * @param amount amount of PNG_AVAX_USDC_LP to be staked\\r\\n    **/\\r\\n    function stakePNGAVAXUSDCYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\\r\\n        tokenAddress: PNG_AVAX_USDC_LP,\\r\\n        vaultAddress: YY_PNG_AVAX_USDC_LP,\\r\\n        tokenSymbol: \\\"PNG_AVAX_USDC_LP\\\",\\r\\n        vaultTokenSymbol: \\\"YY_PNG_AVAX_USDC_LP\\\",\\r\\n        amount: amount\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Stakes PNG_AVAX_ETH_LP in Yield Yak protocol\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n      * @param amount amount of PNG_AVAX_ETH_LP to be staked\\r\\n    **/\\r\\n    function stakePNGAVAXETHYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\\r\\n        tokenAddress: PNG_AVAX_ETH_LP,\\r\\n        vaultAddress: YY_PNG_AVAX_ETH_LP,\\r\\n        tokenSymbol: \\\"PNG_AVAX_ETH_LP\\\",\\r\\n        vaultTokenSymbol: \\\"YY_PNG_AVAX_ETH_LP\\\",\\r\\n        amount: amount\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Stakes TJ_AVAX_USDC in Yield Yak protocol\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n      * @param amount amount of TJ_AVAX_USDC to be staked\\r\\n    **/\\r\\n    function stakeTJAVAXUSDCYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\\r\\n        tokenAddress: TJ_AVAX_USDC_LP,\\r\\n        vaultAddress: YY_TJ_AVAX_USDC_LP,\\r\\n        tokenSymbol: \\\"TJ_AVAX_USDC_LP\\\",\\r\\n        vaultTokenSymbol: \\\"YY_TJ_AVAX_USDC_LP\\\",\\r\\n        amount: amount\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Stakes TJ_AVAX_ETH_LP in Yield Yak protocol\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n      * @param amount amount of TJ_AVAX_ETH_LP to be staked\\r\\n    **/\\r\\n    function stakeTJAVAXETHYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\\r\\n        tokenAddress: TJ_AVAX_ETH_LP,\\r\\n        vaultAddress: YY_TJ_AVAX_ETH_LP,\\r\\n        tokenSymbol: \\\"TJ_AVAX_ETH_LP\\\",\\r\\n        vaultTokenSymbol: \\\"YY_TJ_AVAX_ETH_LP\\\",\\r\\n        amount: amount\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Stakes TJ_AVAX_sAVAX_LP in Yield Yak protocol\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n      * @param amount amount of TJ_AVAX_sAVAX_LP to be staked\\r\\n    **/\\r\\n    function stakeTJAVAXSAVAXYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\\r\\n        tokenAddress: TJ_AVAX_sAVAX_LP,\\r\\n        vaultAddress: YY_TJ_AVAX_sAVAX_LP,\\r\\n        tokenSymbol: \\\"TJ_AVAX_sAVAX_LP\\\",\\r\\n        vaultTokenSymbol: \\\"YY_TJ_AVAX_sAVAX_LP\\\",\\r\\n        amount: amount\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    // ----- UNSTAKE -----\\r\\n\\r\\n\\r\\n    //TODO: make common method for unstaking single assets\\r\\n\\r\\n    /**\\r\\n        * Unstakes AVAX from Yield Yak protocol\\r\\n        * @dev This function uses the redstone-evm-connector\\r\\n        * @param amount amount of AVAX to be unstaked\\r\\n    **/\\r\\n    function unstakeAVAXYak(uint256 amount) public onlyOwner nonReentrant recalculateAssetsExposure remainsSolvent {\\r\\n        IYieldYak yakStakingContract = IYieldYak(YY_AAVE_AVAX);\\r\\n\\r\\n        amount = Math.min(yakStakingContract.balanceOf(address(this)), amount);\\r\\n\\r\\n        yakStakingContract.withdraw(amount);\\r\\n\\r\\n        if(yakStakingContract.balanceOf(address(this)) == 0) {\\r\\n            DiamondStorageLib.removeOwnedAsset(\\\"YY_AAVE_AVAX\\\");\\r\\n        }\\r\\n\\r\\n        emit Unstaked(msg.sender, \\\"AVAX\\\", YY_AAVE_AVAX, amount, block.timestamp);\\r\\n\\r\\n        if(IERC20(AVAX_TOKEN).balanceOf(address(this)) > 0) {\\r\\n            DiamondStorageLib.addOwnedAsset(\\\"AVAX\\\", AVAX_TOKEN);\\r\\n        }\\r\\n\\r\\n        IWrappedNativeToken(AVAX_TOKEN).deposit{value: amount}();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Unstakes sAVAX from Yield Yak protocol\\r\\n    * @dev This function uses the redstone-evm-connector\\r\\n        * @param amount amount of sAVAX to be unstaked\\r\\n    **/\\r\\n    function unstakeSAVAXYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\\r\\n        tokenAddress: SAVAX_TOKEN,\\r\\n        vaultAddress: YY_PTP_sAVAX,\\r\\n        tokenSymbol: \\\"sAVAX\\\",\\r\\n        vaultTokenSymbol: \\\"YY_PTP_sAVAX\\\",\\r\\n        amount: amount\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Unstakes PNG_AVAX_USDC_LP in Yield Yak protocol\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n      * @param amount amount of PNG_AVAX_USDC_LP to be staked\\r\\n    **/\\r\\n    function unstakePNGAVAXUSDCYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\\r\\n        tokenAddress: PNG_AVAX_USDC_LP,\\r\\n        vaultAddress: YY_PNG_AVAX_USDC_LP,\\r\\n        tokenSymbol: \\\"PNG_AVAX_USDC_LP\\\",\\r\\n        vaultTokenSymbol: \\\"YY_PNG_AVAX_USDC_LP\\\",\\r\\n        amount: amount\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Unstakes PNG_AVAX_ETH_LP in Yield Yak protocol\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n      * @param amount amount of PNG_AVAX_ETH_LP to be unstaked\\r\\n    **/\\r\\n    function unstakePNGAVAXETHYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\\r\\n        tokenAddress: PNG_AVAX_ETH_LP,\\r\\n        vaultAddress: YY_PNG_AVAX_ETH_LP,\\r\\n        tokenSymbol: \\\"PNG_AVAX_ETH_LP\\\",\\r\\n        vaultTokenSymbol: \\\"YY_PNG_AVAX_ETH_LP\\\",\\r\\n        amount: amount\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Unstakes TJ_AVAX_USDC in Yield Yak protocol\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n      * @param amount amount of TJ_AVAX_USDC to be unstaked\\r\\n    **/\\r\\n    function unstakeTJAVAXUSDCYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\\r\\n        tokenAddress: TJ_AVAX_USDC_LP,\\r\\n        vaultAddress: YY_TJ_AVAX_USDC_LP,\\r\\n        tokenSymbol: \\\"TJ_AVAX_USDC_LP\\\",\\r\\n        vaultTokenSymbol: \\\"YY_TJ_AVAX_USDC_LP\\\",\\r\\n        amount: amount\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Unstakes TJ_AVAX_ETH_LP in Yield Yak protocol\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n      * @param amount amount of TJ_AVAX_ETH_LP to be unstaked\\r\\n    **/\\r\\n    function unstakeTJAVAXETHYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\\r\\n        tokenAddress: TJ_AVAX_ETH_LP,\\r\\n        vaultAddress: YY_TJ_AVAX_ETH_LP,\\r\\n        tokenSymbol: \\\"TJ_AVAX_ETH_LP\\\",\\r\\n        vaultTokenSymbol: \\\"YY_TJ_AVAX_ETH_LP\\\",\\r\\n        amount: amount\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Unstakes TJ_AVAX_sAVAX_LP in Yield Yak protocol\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n      * @param amount amount of TJ_AVAX_sAVAX_LP to be unstaked\\r\\n    **/\\r\\n    function unstakeTJAVAXSAVAXYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\\r\\n        tokenAddress: TJ_AVAX_sAVAX_LP,\\r\\n        vaultAddress: YY_TJ_AVAX_sAVAX_LP,\\r\\n        tokenSymbol: \\\"TJ_AVAX_sAVAX_LP\\\",\\r\\n        vaultTokenSymbol: \\\"YY_TJ_AVAX_sAVAX_LP\\\",\\r\\n        amount: amount\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    // ----- PRIVATE METHODS -----\\r\\n\\r\\n    /**\\r\\n      * Stakes {stakingDetails.tokenAddress} token in the YieldYak protocol\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n      * @param stakingDetails IYieldYak.YYStakingDetails staking details\\r\\n    **/\\r\\n    function _stakeTokenYY(IYieldYak.YYStakingDetails memory stakingDetails) private recalculateAssetsExposure {\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n        require(stakingDetails.amount > 0, \\\"Cannot stake 0 tokens\\\");\\r\\n        // _ACTIVE = 2\\r\\n        require(tokenManager.tokenToStatus(stakingDetails.tokenAddress) == 2, \\\"Token not supported\\\");\\r\\n        require(tokenManager.tokenToStatus(stakingDetails.vaultAddress) == 2, \\\"Vault token not supported\\\");\\r\\n        require(IERC20Metadata(stakingDetails.tokenAddress).balanceOf(address(this)) >= stakingDetails.amount, \\\"Not enough token available\\\");\\r\\n\\r\\n        IERC20Metadata(stakingDetails.tokenAddress).approve(stakingDetails.vaultAddress, stakingDetails.amount);\\r\\n        IYieldYak(stakingDetails.vaultAddress).deposit(stakingDetails.amount);\\r\\n\\r\\n        // Add/remove owned tokens\\r\\n        DiamondStorageLib.addOwnedAsset(stakingDetails.vaultTokenSymbol, stakingDetails.vaultAddress);\\r\\n        if(IERC20(stakingDetails.tokenAddress).balanceOf(address(this)) == 0) {\\r\\n            DiamondStorageLib.removeOwnedAsset(stakingDetails.tokenSymbol);\\r\\n        }\\r\\n\\r\\n        emit Staked(msg.sender, stakingDetails.tokenSymbol, stakingDetails.vaultAddress, stakingDetails.amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Unstakes {stakingDetails.tokenAddress} token in the YieldYak protocol\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n      * @param stakingDetails IYieldYak.YYStakingDetails staking details\\r\\n    **/\\r\\n    function _unstakeTokenYY(IYieldYak.YYStakingDetails memory stakingDetails) private recalculateAssetsExposure {\\r\\n        IYieldYak vaultContract = IYieldYak(stakingDetails.vaultAddress);\\r\\n        stakingDetails.amount = Math.min(vaultContract.balanceOf(address(this)), stakingDetails.amount);\\r\\n\\r\\n        vaultContract.withdraw(stakingDetails.amount);\\r\\n\\r\\n        // Add/remove owned tokens\\r\\n        DiamondStorageLib.addOwnedAsset(stakingDetails.tokenSymbol, stakingDetails.tokenAddress);\\r\\n        if(vaultContract.balanceOf(address(this)) == 0) {\\r\\n            DiamondStorageLib.removeOwnedAsset(stakingDetails.vaultTokenSymbol);\\r\\n        }\\r\\n\\r\\n        emit Unstaked(msg.sender, stakingDetails.tokenSymbol, stakingDetails.vaultAddress, stakingDetails.amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        DiamondStorageLib.enforceIsContractOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== RECEIVE AVAX FUNCTION ========== */\\r\\n    receive() external payable {}\\r\\n\\r\\n    /**\\r\\n        * @dev emitted when user stakes an asset\\r\\n        * @param user the address executing staking\\r\\n        * @param vault address of the vault token\\r\\n        * @param asset the asset that was staked\\r\\n        * @param amount of the asset that was staked\\r\\n        * @param timestamp of staking\\r\\n    **/\\r\\n    event Staked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 amount, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n        * @dev emitted when user unstakes an asset\\r\\n        * @param user the address executing unstaking\\r\\n        * @param vault address of the vault token\\r\\n        * @param asset the asset that was unstaked\\r\\n        * @param amount of the asset that was unstaked\\r\\n        * @param timestamp of unstaking\\r\\n    **/\\r\\n    event Unstaked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 amount, uint256 timestamp);\\r\\n}\",\"keccak256\":\"0x2cd501382eb64c7cad681a2ad04eeaa3580418f0faabde05f764885694557451\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IBorrowersRegistry\\r\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\r\\n */\\r\\ninterface IBorrowersRegistry {\\r\\n    function canBorrow(address _account) external view returns (bool);\\r\\n\\r\\n    function getLoanForOwner(address _owner) external view returns (address);\\r\\n\\r\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xb8aaf225432273e91887b0ecda730ad062eaeef212cfd099e322393d1c3f56e3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\r\\n */\\r\\ninterface IDiamondBeacon {\\r\\n\\r\\n    function implementation() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Must return an address that can be used as a delegate call target.\\r\\n     *\\r\\n     * {SmartLoanDiamondProxy} will check that this address is a contract.\\r\\n     */\\r\\n    function implementation(bytes4) external view returns (address);\\r\\n\\r\\n    function getStatus() external view returns (bool);\\r\\n\\r\\n    function proposeBeaconOwnershipTransfer(address _newOwner) external;\\r\\n\\r\\n    function acceptBeaconOwnership() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9ebb1752fb7c26826cf3cccd2fb54a4db53d76a8d16dfa7614d772c3e92dd6cf\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\",\"keccak256\":\"0x98b528120c0598f550cf85472f8dd759952a41505d1c7c5a2f07ed03c18c87a7\",\"license\":\"MIT\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IIndex {\\r\\n\\r\\n    function setRate(uint256 _rate) external;\\r\\n\\r\\n    function updateUser(address user) external;\\r\\n\\r\\n    function getIndex() external view returns (uint256);\\r\\n\\r\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x0f06bd722f4574e6296b2e55a393e8b2abe81411ae1ec8598d761e5a8565390a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IPoolRewarder {\\r\\n\\r\\n    function stakeFor(uint _amount, address _stakeFor) external;\\r\\n\\r\\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\\r\\n\\r\\n    function getRewardsFor(address _user) external;\\r\\n\\r\\n    function earned(address _account) external view returns (uint);\\r\\n\\r\\n    function balanceOf(address _account) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xe5ff460a400055a73324bb2b6661e47bb5227c6bce4adec8befa541ded0b252d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IRatesCalculator\\r\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\r\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\r\\n */\\r\\ninterface IRatesCalculator {\\r\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\r\\n\\r\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc6f00bcba86f3aa78e79bec4943c8f47daf4b85698ce6686b4b2457a92f06bc8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IStakingPositions\\r\\n * Types for staking\\r\\n */\\r\\ninterface IStakingPositions {\\r\\n    struct StakedPosition {\\r\\n        // Asset is either the token (symbol) address being staked or the address of the PTP LP token in case where a pool for that token (symbol) already exists within the VectorFinance\\r\\n        address asset;\\r\\n        bytes32 symbol;\\r\\n        bytes32 identifier;\\r\\n        bytes4 balanceSelector;\\r\\n        bytes4 unstakeSelector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xce66179b8d802e46a03c412a23e2cb59fa4bc228cf475ca091b0425aecd0f16b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenManager.sol\":{\"content\":\"interface ITokenManager {\\r\\n    struct poolAsset {\\r\\n        bytes32 asset;\\r\\n        address poolAddress;\\r\\n    }\\r\\n\\r\\n    struct Asset {\\r\\n        bytes32 asset;\\r\\n        address assetAddress;\\r\\n        uint256 debtCoverage;\\r\\n    }\\r\\n\\r\\n    function activateToken ( address token ) external;\\r\\n    function addPoolAssets ( poolAsset[] memory poolAssets ) external;\\r\\n    function addTokenAssets ( Asset[] memory tokenAssets ) external;\\r\\n    function deactivateToken ( address token ) external;\\r\\n    function debtCoverage ( address ) external view returns ( uint256 );\\r\\n    function debtCoverageStaked ( bytes32 ) external view returns ( uint256 );\\r\\n    function getAllPoolAssets (  ) external view returns ( bytes32[] memory result );\\r\\n    function getAllTokenAssets (  ) external view returns ( bytes32[] memory result );\\r\\n    function getAssetAddress ( bytes32 _asset, bool allowInactive ) external view returns ( address );\\r\\n    function getPoolAddress ( bytes32 _asset ) external view returns ( address );\\r\\n    function getSupportedTokensAddresses (  ) external view returns ( address[] memory);\\r\\n    function initialize ( Asset[] memory tokenAssets, poolAsset[] memory poolAssets ) external;\\r\\n    function increaseProtocolExposure ( bytes32 assetIdentifier, uint256 exposureIncrease ) external;\\r\\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) external;\\r\\n    function isTokenAssetActive ( address token ) external view returns ( bool );\\r\\n    function owner (  ) external view returns ( address );\\r\\n    function removePoolAssets ( bytes32[] memory _poolAssets ) external;\\r\\n    function removeTokenAssets ( bytes32[] memory _tokenAssets ) external;\\r\\n    function renounceOwnership (  ) external;\\r\\n    function setDebtCoverage ( address token, uint256 coverage ) external;\\r\\n    function setDebtCoverageStaked ( bytes32 stakedAsset, uint256 coverage ) external;\\r\\n    function supportedTokensList ( uint256 ) external view returns ( address );\\r\\n    function tokenAddressToSymbol ( address ) external view returns ( bytes32 );\\r\\n    function tokenToStatus ( address ) external view returns ( uint256 );\\r\\n    function transferOwnership ( address newOwner ) external;\\r\\n}\",\"keccak256\":\"0x11244baa1d2c247ef14bf9c7fbb6e447d405f2020df59293cf1cd88b012e3f06\"},\"contracts/interfaces/IWrappedNativeToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IWrappedNativeToken {\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint wad) external;\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function approve(address guy, uint wad) external returns (bool);\\r\\n\\r\\n    function transfer(address dst, uint wad) external returns (bool);\\r\\n\\r\\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\\r\\n\\r\\n}\",\"keccak256\":\"0x8f31a0f28156c3c24412f22f549c441a2c29da2023aeec5808ef6fd11772aec9\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/facets/avalanche/IYieldYak.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IYieldYak {\\r\\n    function totalDeposits() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n\\r\\n    function depositFor(address account) external payable;\\r\\n\\r\\n    function depositFor(address account, uint256 amount) external;\\r\\n\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function deposit(uint256 amount) external;\\r\\n\\r\\n    function decimals() external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    // ---INTERFACE-----\\r\\n    struct YYStakingDetails {\\r\\n        address tokenAddress;\\r\\n        address vaultAddress;\\r\\n        bytes32 tokenSymbol;\\r\\n        bytes32 vaultTokenSymbol;\\r\\n        uint256 amount;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x93f2931b75de0ae71a538c20cb1002467e5cad7375825cf0be6c2f560af3e5b5\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\r\\n\\r\\n/**\\r\\n * @dev Library for managing an enumerable variant of Solidity's\\r\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\r\\n * type.\\r\\n *\\r\\n * Maps have the following properties:\\r\\n *\\r\\n * - Entries are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n */\\r\\nlibrary EnumerableMap {\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Map type with\\r\\n    // bytes32 keys and values.\\r\\n    // The Map implementation uses private functions, and user-facing\\r\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\r\\n    // the underlying Map.\\r\\n    // This means that we can only create new EnumerableMaps for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Map {\\r\\n        // Storage of keys\\r\\n        EnumerableSet.Bytes32Set _keys;\\r\\n        mapping(bytes32 => bytes32) _values;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _set(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        bytes32 value\\r\\n    ) private returns (bool) {\\r\\n        map._values[key] = value;\\r\\n        return map._keys.add(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a key-value pair from a map. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\r\\n        delete map._values[key];\\r\\n        return map._keys.remove(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\r\\n        return map._keys.contains(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\r\\n     */\\r\\n    function _length(Map storage map) private view returns (uint256) {\\r\\n        return map._keys.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of entries inside the\\r\\n     * array, and it may change when more entries are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\r\\n        bytes32 key = map._keys.at(index);\\r\\n        return (key, map._values[key]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     */\\r\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        if (value == bytes32(0)) {\\r\\n            return (_contains(map, key), bytes32(0));\\r\\n        } else {\\r\\n            return (true, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\r\\n     */\\r\\n    function _get(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), errorMessage);\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    // Bytes32ToAddressMap\\r\\n\\r\\n    struct Bytes32ToAddressMap {\\r\\n        Map _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function set(\\r\\n        Bytes32ToAddressMap storage map,\\r\\n        bytes32 key,\\r\\n        address value\\r\\n    ) internal returns (bool) {\\r\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\r\\n        return _remove(map._inner, key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\r\\n        return _contains(map._inner, key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of elements in the map. O(1).\\r\\n     */\\r\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\r\\n        return _length(map._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\r\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\r\\n        return (key, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\r\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\r\\n        return (success, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, key))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\r\\n     */\\r\\n    function get(\\r\\n        Bytes32ToAddressMap storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c9de7c7f3406d29dc518366c68a88cb29aaf36907b95422cceac140959c2463\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\r\\n\\r\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\r\\n// The loupe functions are required by the EIP2535 Diamonds standard\\r\\n\\r\\nlibrary DiamondStorageLib {\\r\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\r\\n\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n    bytes32 constant LIQUIDATION_STORAGE_POSITION = keccak256(\\\"diamond.standard.liquidation.storage\\\");\\r\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\r\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\r\\n\\r\\n    struct FacetAddressAndPosition {\\r\\n        address facetAddress;\\r\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\r\\n    }\\r\\n\\r\\n    struct FacetFunctionSelectors {\\r\\n        bytes4[] functionSelectors;\\r\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\r\\n    }\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\r\\n        // maps function selector to the facet address and\\r\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\r\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\r\\n        // maps facet addresses to function selectors\\r\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\r\\n        // facet addresses\\r\\n        address[] facetAddresses;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // Used to select methods that can be executed even when Diamond is paused\\r\\n        mapping(bytes4 => bool) canBeExecutedWhenPaused;\\r\\n\\r\\n        bool _initialized;\\r\\n        bool _active;\\r\\n\\r\\n        uint256 _lastBorrowTimestamp;\\r\\n    }\\r\\n\\r\\n    struct SmartLoanStorage {\\r\\n        // PauseAdmin has the power to pause/unpause the contract without the timelock delay in case of a critical bug/exploit\\r\\n        address pauseAdmin;\\r\\n        // Owner of the contract\\r\\n        address contractOwner;\\r\\n        // Proposed owner of the contract\\r\\n        address proposedOwner;\\r\\n        // Proposed pauseAdmin of the contract\\r\\n        address proposedPauseAdmin;\\r\\n        // Is contract initialized?\\r\\n        bool _initialized;\\r\\n        // TODO: mock staking tokens until redstone oracle supports them\\r\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\r\\n        // Staked positions of the contract\\r\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\r\\n    }\\r\\n\\r\\n    struct LiquidationStorage {\\r\\n        // Mapping controlling addresses that can execute the liquidation methods\\r\\n        mapping(address=>bool) canLiquidate;\\r\\n    }\\r\\n\\r\\n    struct ReentrancyGuardStorage {\\r\\n        uint256 _status;\\r\\n    }\\r\\n\\r\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\r\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            rgs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function liquidationStorage() internal pure returns (LiquidationStorage storage ls) {\\r\\n        bytes32 position = LIQUIDATION_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ls.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\r\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            sls.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    event PauseAdminOwnershipTransferred(address indexed previousPauseAdmin, address indexed newPauseAdmin);\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        address previousOwner = sls.contractOwner;\\r\\n        sls.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function setContractPauseAdmin(address _newPauseAdmin) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        address previousPauseAdmin = sls.pauseAdmin;\\r\\n        sls.pauseAdmin = _newPauseAdmin;\\r\\n        emit PauseAdminOwnershipTransferred(previousPauseAdmin, _newPauseAdmin);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = smartLoanStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function pauseAdmin() internal view returns (address pauseAdmin) {\\r\\n        pauseAdmin = smartLoanStorage().pauseAdmin;\\r\\n    }\\r\\n\\r\\n    function setProposedOwner(address _newOwner) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        sls.proposedOwner = _newOwner;\\r\\n    }\\r\\n\\r\\n    function setProposedPauseAdmin(address _newPauseAdmin) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        sls.proposedPauseAdmin = _newPauseAdmin;\\r\\n    }\\r\\n\\r\\n    function getPausedMethodExemption(bytes4 _methodSig) internal view returns (bool) {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        return ds.canBeExecutedWhenPaused[_methodSig];\\r\\n    }\\r\\n\\r\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\r\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\r\\n    }\\r\\n\\r\\n    function proposedPauseAdmin() internal view returns (address proposedPauseAdmin) {\\r\\n        proposedPauseAdmin = smartLoanStorage().proposedPauseAdmin;\\r\\n    }\\r\\n\\r\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\r\\n        _positions = smartLoanStorage().currentStakedPositions;\\r\\n    }\\r\\n\\r\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\r\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\r\\n\\r\\n        bool found;\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            if (positions[i].identifier == position.identifier) {\\r\\n                found = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!found) {\\r\\n            positions.push(position);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeStakedPosition(bytes32 identifier) internal {\\r\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            if (positions[i].identifier == identifier) {\\r\\n                positions[i] = positions[positions.length - 1];\\r\\n                positions.pop();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\r\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\r\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\r\\n    }\\r\\n\\r\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        return sls.ownedAssets.contains(_symbol);\\r\\n    }\\r\\n\\r\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\r\\n    }\\r\\n\\r\\n    function enforceIsPauseAdmin() internal view {\\r\\n        require(msg.sender == smartLoanStorage().pauseAdmin, \\\"DiamondStorageLib: Must be contract pauseAdmin\\\");\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\r\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\r\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\r\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\r\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\r\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else {\\r\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\r\\n            }\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        // if function does not exist then do nothing and return\\r\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\r\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\r\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\r\\n        ds.facetAddresses.push(_facetAddress);\\r\\n    }\\r\\n\\r\\n\\r\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\r\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\r\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\r\\n    }\\r\\n\\r\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\r\\n        // an immutable function is a function defined directly in a diamond\\r\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\r\\n        // replace selector with last selector, then delete last selector\\r\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\r\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\r\\n        // if not the same then replace _selector with lastSelector\\r\\n        if (selectorPosition != lastSelectorPosition) {\\r\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\r\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\r\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\r\\n        }\\r\\n        // delete the last selector\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\r\\n        delete ds.selectorToFacetAndPosition[_selector];\\r\\n\\r\\n        // if no more selectors for facet address then delete the facet address\\r\\n        if (lastSelectorPosition == 0) {\\r\\n            // replace facet address with last facet address and delete last facet address\\r\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\r\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\r\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\r\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\r\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\r\\n            }\\r\\n            ds.facetAddresses.pop();\\r\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (_init == address(0)) {\\r\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\r\\n        } else {\\r\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\r\\n            if (_init != address(this)) {\\r\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\r\\n            }\\r\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n            if (!success) {\\r\\n                if (error.length > 0) {\\r\\n                    // bubble up the error\\r\\n                    revert(string(error));\\r\\n                } else {\\r\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\r\\n        uint256 contractSize;\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4b0e53f952c3f8716cdda77a08f22018249081a9d450a1d51510b0a24f77e237\",\"license\":\"MIT\"},\"contracts/lib/SolvencyMethods.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\\\";\\r\\nimport \\\"../facets/SolvencyFacetProd.sol\\\";\\r\\nimport \\\"../facets/AssetsExposureController.sol\\\";\\r\\nimport \\\"../DiamondHelper.sol\\\";\\r\\n\\r\\n// TODO Rename to contract instead of lib\\r\\ncontract SolvencyMethods is DiamondHelper, ProxyConnector {\\r\\n    // This function executes SolvencyFacetProd.getDebt()\\r\\n    function _getDebt() internal virtual returns (uint256 debt) {\\r\\n        debt = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebt.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebt.selector)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getDebtWithPrices()\\r\\n    function _getDebtWithPrices(SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) internal virtual returns (uint256 debt) {\\r\\n        debt = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtWithPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtWithPrices.selector, debtAssetsPrices)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.isSolventWithPrices()\\r\\n    function _isSolventWithPrices(SolvencyFacetProd.CachedPrices memory cachedPrices) internal virtual returns (bool solvent){\\r\\n        solvent = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolventWithPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.isSolventWithPrices.selector, cachedPrices)\\r\\n            ),\\r\\n            (bool)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.isSolvent()\\r\\n    function _isSolvent() internal virtual returns (bool solvent){\\r\\n        solvent = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolvent.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.isSolvent.selector)\\r\\n            ),\\r\\n            (bool)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.canRepayDebtFully()\\r\\n    function _canRepayDebtFully() internal virtual returns (bool solvent){\\r\\n        solvent = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.canRepayDebtFully.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.canRepayDebtFully.selector)\\r\\n            ),\\r\\n            (bool)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getTotalValue()\\r\\n    function _getTotalValue() internal virtual returns (uint256 totalValue) {\\r\\n        totalValue = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValue.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValue.selector)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getTotalAssetsValue()\\r\\n    function _getTotalAssetsValue() internal virtual returns (uint256 assetsValue) {\\r\\n        assetsValue = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalAssetsValue.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalAssetsValue.selector)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getHealthRatioWithPrices()\\r\\n    function _getHealthRatioWithPrices(SolvencyFacetProd.CachedPrices memory cachedPrices) public virtual returns (uint256 health) {\\r\\n        health = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatioWithPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatioWithPrices.selector, cachedPrices)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getHealthRatio()\\r\\n    function _getHealthRatio() public virtual returns (uint256 health) {\\r\\n        health = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatio.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatio.selector)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getPrices()\\r\\n    function getPrices(bytes32[] memory symbols) public virtual returns (uint256[] memory prices) {\\r\\n        prices = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getPrices.selector, symbols)\\r\\n            ),\\r\\n            (uint256[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getPrices()\\r\\n    function _getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public virtual returns (SolvencyFacetProd.CachedPrices memory result) {\\r\\n        result = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getAllPricesForLiquidation.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getAllPricesForLiquidation.selector, assetsToRepay)\\r\\n            ),\\r\\n            (SolvencyFacetProd.CachedPrices)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getOwnedAssetsWithNativePrices()\\r\\n    function _getOwnedAssetsWithNativePrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices) {\\r\\n        ownedAssetsPrices = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getOwnedAssetsWithNativePrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getOwnedAssetsWithNativePrices.selector)\\r\\n            ),\\r\\n            (SolvencyFacetProd.AssetPrice[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getDebtAssetsPrices()\\r\\n    function _getDebtAssetsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) {\\r\\n        debtAssetsPrices = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtAssetsPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtAssetsPrices.selector)\\r\\n            ),\\r\\n            (SolvencyFacetProd.AssetPrice[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getStakedPositionsPrices()\\r\\n    function _getStakedPositionsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) {\\r\\n        stakedPositionsPrices = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getStakedPositionsPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getStakedPositionsPrices.selector)\\r\\n            ),\\r\\n            (SolvencyFacetProd.AssetPrice[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getTotalAssetsValueWithPrices()\\r\\n    function _getTotalValueWithPrices(SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices, SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) internal virtual returns (uint256 totalValue) {\\r\\n        totalValue = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValueWithPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValueWithPrices.selector, ownedAssetsPrices, stakedPositionsPrices)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getPrices()\\r\\n    function getPrice(bytes32 symbol) public virtual returns (uint256 price) {\\r\\n        price = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrice.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getPrice.selector, symbol)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes AssetsExposureController.decreaseAssetsExposure()\\r\\n    function _resetPrimeAccountAssetsExposure() public {\\r\\n        proxyDelegateCalldata(\\r\\n            DiamondHelper._getFacetAddress(AssetsExposureController.resetPrimeAccountAssetsExposure.selector),\\r\\n            abi.encodeWithSelector(AssetsExposureController.resetPrimeAccountAssetsExposure.selector)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes AssetsExposureController.increaseAssetsExposure()\\r\\n    function _setPrimeAccountAssetsExposure() public {\\r\\n        proxyDelegateCalldata(\\r\\n            DiamondHelper._getFacetAddress(AssetsExposureController.setPrimeAccountAssetsExposure.selector),\\r\\n            abi.encodeWithSelector(AssetsExposureController.setPrimeAccountAssetsExposure.selector)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns IERC20Metadata instance of a token\\r\\n     * @param _asset the code of an asset\\r\\n     **/\\r\\n    function getERC20TokenInstance(bytes32 _asset, bool allowInactive) internal view returns (IERC20Metadata) {\\r\\n        return IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(_asset, allowInactive));\\r\\n    }\\r\\n\\r\\n    modifier recalculateAssetsExposure() {\\r\\n        _resetPrimeAccountAssetsExposure();\\r\\n        _;\\r\\n        _setPrimeAccountAssetsExposure();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Checks whether account is solvent (health higher than 1)\\r\\n    * @dev This modifier uses the redstone-evm-connector\\r\\n    **/\\r\\n    modifier remainsSolvent() {\\r\\n        _;\\r\\n\\r\\n        require(_isSolvent(), \\\"The action may cause an account to become insolvent\\\");\\r\\n    }\\r\\n\\r\\n    modifier canRepayDebtFully() {\\r\\n        _;\\r\\n        require(_canRepayDebtFully(), \\\"Insufficient assets to fully repay the debt\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3035057cd12aa8147270b52117517db4a585baa15cf8ca24c2c7b052dd1226b1\",\"license\":\"BUSL-1.1\"},\"contracts/lib/avalanche/DeploymentConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../../interfaces/ITokenManager.sol\\\";\\r\\nimport {DiamondStorageLib} from \\\"../../lib/DiamondStorageLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * DeploymentConstants\\r\\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\\r\\n * to decrease gas costs. Not meant to be updated unless really necessary.\\r\\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\\r\\n **/\\r\\nlibrary DeploymentConstants {\\r\\n\\r\\n    // Used for LiquidationBonus calculations\\r\\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\\r\\n\\r\\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\\r\\n\\r\\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\r\\n\\r\\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x2916B3bf7C35bd21e63D01C93C62FB0d4994e56D;\\r\\n\\r\\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x3Ea9D480295A73fd2aF95b4D96c2afF88b21B03D;\\r\\n\\r\\n    address private constant _TOKEN_MANAGER_ADDRESS = 0xF3978209B7cfF2b90100C6F87CEC77dE928Ed58e;\\r\\n\\r\\n    //implementation-specific\\r\\n\\r\\n    function getPercentagePrecision() internal pure returns (uint256) {\\r\\n        return _PERCENTAGE_PRECISION;\\r\\n    }\\r\\n\\r\\n    //blockchain-specific\\r\\n\\r\\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\\r\\n        return _NATIVE_TOKEN_SYMBOL;\\r\\n    }\\r\\n\\r\\n    function getNativeToken() internal pure returns (address payable) {\\r\\n        return payable(_NATIVE_ADDRESS);\\r\\n    }\\r\\n\\r\\n    //deployment-specific\\r\\n\\r\\n    function getDiamondAddress() internal pure returns (address) {\\r\\n        return _DIAMOND_BEACON_ADDRESS;\\r\\n    }\\r\\n\\r\\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\\r\\n        return _SMART_LOANS_FACTORY_ADDRESS;\\r\\n    }\\r\\n\\r\\n    function getTokenManager() internal pure returns (ITokenManager) {\\r\\n        return ITokenManager(_TOKEN_MANAGER_ADDRESS);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Returns all owned assets keys\\r\\n    **/\\r\\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\\r\\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\\r\\n        return sls.ownedAssets._inner._keys._inner._values;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf019b3600c687707821c088c11c02df81e157e4e0c66827ce4c3ac66aba0bf9f\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Staked(address,bytes32,address,uint256,uint256)": {
        "details": "emitted when user stakes an asset",
        "params": {
          "amount": "of the asset that was staked",
          "asset": "the asset that was staked",
          "timestamp": "of staking*",
          "user": "the address executing staking",
          "vault": "address of the vault token"
        }
      },
      "Unstaked(address,bytes32,address,uint256,uint256)": {
        "details": "emitted when user unstakes an asset",
        "params": {
          "amount": "of the asset that was unstaked",
          "asset": "the asset that was unstaked",
          "timestamp": "of unstaking*",
          "user": "the address executing unstaking",
          "vault": "address of the vault token"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "stakeAVAXYak(uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "amount": "amount of AVAX to be staked*"
        }
      },
      "stakePNGAVAXETHYak(uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "amount": "amount of PNG_AVAX_ETH_LP to be staked*"
        }
      },
      "stakePNGAVAXUSDCYak(uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "amount": "amount of PNG_AVAX_USDC_LP to be staked*"
        }
      },
      "stakeSAVAXYak(uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "amount": "amount of sAVAX to be staked*"
        }
      },
      "stakeTJAVAXETHYak(uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "amount": "amount of TJ_AVAX_ETH_LP to be staked*"
        }
      },
      "stakeTJAVAXSAVAXYak(uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "amount": "amount of TJ_AVAX_sAVAX_LP to be staked*"
        }
      },
      "stakeTJAVAXUSDCYak(uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "amount": "amount of TJ_AVAX_USDC to be staked*"
        }
      },
      "unstakeAVAXYak(uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "amount": "amount of AVAX to be unstaked*"
        }
      },
      "unstakePNGAVAXETHYak(uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "amount": "amount of PNG_AVAX_ETH_LP to be unstaked*"
        }
      },
      "unstakePNGAVAXUSDCYak(uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "amount": "amount of PNG_AVAX_USDC_LP to be staked*"
        }
      },
      "unstakeSAVAXYak(uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "amount": "amount of sAVAX to be unstaked*"
        }
      },
      "unstakeTJAVAXETHYak(uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "amount": "amount of TJ_AVAX_ETH_LP to be unstaked*"
        }
      },
      "unstakeTJAVAXSAVAXYak(uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "amount": "amount of TJ_AVAX_sAVAX_LP to be unstaked*"
        }
      },
      "unstakeTJAVAXUSDCYak(uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "amount": "amount of TJ_AVAX_USDC to be unstaked*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "stakeAVAXYak(uint256)": {
        "notice": "Stakes AVAX in Yield Yak protocol"
      },
      "stakePNGAVAXETHYak(uint256)": {
        "notice": "Stakes PNG_AVAX_ETH_LP in Yield Yak protocol"
      },
      "stakePNGAVAXUSDCYak(uint256)": {
        "notice": "Stakes PNG_AVAX_USDC_LP in Yield Yak protocol"
      },
      "stakeSAVAXYak(uint256)": {
        "notice": "Stakes sAVAX in Yield Yak protocol"
      },
      "stakeTJAVAXETHYak(uint256)": {
        "notice": "Stakes TJ_AVAX_ETH_LP in Yield Yak protocol"
      },
      "stakeTJAVAXSAVAXYak(uint256)": {
        "notice": "Stakes TJ_AVAX_sAVAX_LP in Yield Yak protocol"
      },
      "stakeTJAVAXUSDCYak(uint256)": {
        "notice": "Stakes TJ_AVAX_USDC in Yield Yak protocol"
      },
      "unstakeAVAXYak(uint256)": {
        "notice": "Unstakes AVAX from Yield Yak protocol"
      },
      "unstakePNGAVAXETHYak(uint256)": {
        "notice": "Unstakes PNG_AVAX_ETH_LP in Yield Yak protocol"
      },
      "unstakePNGAVAXUSDCYak(uint256)": {
        "notice": "Unstakes PNG_AVAX_USDC_LP in Yield Yak protocol"
      },
      "unstakeSAVAXYak(uint256)": {
        "notice": "Unstakes sAVAX from Yield Yak protocol"
      },
      "unstakeTJAVAXETHYak(uint256)": {
        "notice": "Unstakes TJ_AVAX_ETH_LP in Yield Yak protocol"
      },
      "unstakeTJAVAXSAVAXYak(uint256)": {
        "notice": "Unstakes TJ_AVAX_sAVAX_LP in Yield Yak protocol"
      },
      "unstakeTJAVAXUSDCYak(uint256)": {
        "notice": "Unstakes TJ_AVAX_USDC in Yield Yak protocol"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12650,
        "contract": "contracts/facets/avalanche/YieldYakFacet.sol:YieldYakFacet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}