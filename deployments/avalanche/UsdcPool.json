{
  "address": "0x731a272d0701326C971A03Cd2D1EeE718E37729a",
  "abi": [
    {
      "inputs": [],
      "name": "BorrowersRegistryNotConfigured",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPoolFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientSurplus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxPoolUtilisationBreached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToAddressZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "NotAContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorizedToBorrow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolFrozen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RepayingMoreThanWasBorrowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SpenderZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TotalSupplyCapBreached",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "TransferAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToPoolAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroDepositAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BorrowersRegistryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Borrowing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InterestCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolRewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolRewarderChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "calculator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RatesCalculatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Repayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowIndex",
      "outputs": [
        {
          "internalType": "contract IIndex",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowersRegistry",
      "outputs": [
        {
          "internalType": "contract IBorrowersRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositIndex",
      "outputs": [
        {
          "internalType": "contract IIndex",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxPoolUtilisationForBorrowing",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRatesCalculator",
          "name": "ratesCalculator_",
          "type": "address"
        },
        {
          "internalType": "contract IBorrowersRegistry",
          "name": "borrowersRegistry_",
          "type": "address"
        },
        {
          "internalType": "contract IIndex",
          "name": "depositIndex_",
          "type": "address"
        },
        {
          "internalType": "contract IIndex",
          "name": "borrowIndex_",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "tokenAddress_",
          "type": "address"
        },
        {
          "internalType": "contract IPoolRewarder",
          "name": "poolRewarder_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRewarder",
      "outputs": [
        {
          "internalType": "contract IPoolRewarder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ratesCalculator",
      "outputs": [
        {
          "internalType": "contract IRatesCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "recoverSurplus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBorrowersRegistry",
          "name": "borrowersRegistry_",
          "type": "address"
        }
      ],
      "name": "setBorrowersRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolRewarder",
          "name": "_poolRewarder",
          "type": "address"
        }
      ],
      "name": "setPoolRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRatesCalculator",
          "name": "ratesCalculator_",
          "type": "address"
        }
      ],
      "name": "setRatesCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTotalSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "setTotalSupplyCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x33435971a22cd12403fca6252b3335c6751cc9ebf2d9750ab6e0f4d0d7224770",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x731a272d0701326C971A03Cd2D1EeE718E37729a",
    "transactionIndex": 0,
    "gasUsed": "4542593",
    "logsBloom": "0x
    "blockHash": "0xd9fe8a68b3de7213ae4e778a1ca472a6fa4587b9047040bd12bc2790fb3dd710",
    "transactionHash": "0x33435971a22cd12403fca6252b3335c6751cc9ebf2d9750ab6e0f4d0d7224770",
    "logs": [],
    "blockNumber": 24600202,
    "cumulativeGasUsed": "4542593",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fa23c61f86cec8c7de13e8bfa631887b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BorrowersRegistryNotConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPoolFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientSurplus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxPoolUtilisationBreached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"NotAContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorizedToBorrow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolFrozen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RepayingMoreThanWasBorrowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SpenderZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSupplyCapBreached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TransferAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToPoolAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDepositAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BorrowersRegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Borrowing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InterestCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolRewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolRewarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"calculator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RatesCalculatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Repayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"contract IIndex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowersRegistry\",\"outputs\":[{\"internalType\":\"contract IBorrowersRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositIndex\",\"outputs\":[{\"internalType\":\"contract IIndex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPoolUtilisationForBorrowing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRatesCalculator\",\"name\":\"ratesCalculator_\",\"type\":\"address\"},{\"internalType\":\"contract IBorrowersRegistry\",\"name\":\"borrowersRegistry_\",\"type\":\"address\"},{\"internalType\":\"contract IIndex\",\"name\":\"depositIndex_\",\"type\":\"address\"},{\"internalType\":\"contract IIndex\",\"name\":\"borrowIndex_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"contract IPoolRewarder\",\"name\":\"poolRewarder_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupplyCap\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRewarder\",\"outputs\":[{\"internalType\":\"contract IPoolRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratesCalculator\",\"outputs\":[{\"internalType\":\"contract IRatesCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"recoverSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBorrowersRegistry\",\"name\":\"borrowersRegistry_\",\"type\":\"address\"}],\"name\":\"setBorrowersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolRewarder\",\"name\":\"_poolRewarder\",\"type\":\"address\"}],\"name\":\"setPoolRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRatesCalculator\",\"name\":\"ratesCalculator_\",\"type\":\"address\"}],\"name\":\"setRatesCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTotalSupplyCap\",\"type\":\"uint256\"}],\"name\":\"setTotalSupplyCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract allowing user to deposit to and borrow USDC from a dedicated user account\",\"errors\":{\"InsufficientAllowance(uint256,uint256)\":[{\"params\":{\"allowance\":\"current allowance\",\"requested\":\"requested transfer amount\"}}],\"TransferAmountExceedsBalance(uint256,uint256)\":[{\"params\":{\"amount\":\"transfer amount\",\"balance\":\"available balance\"}}]},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"_user the address of queried depositor*\"},\"borrow(uint256)\":{\"details\":\"_amount the amount to be borrowedIt is only meant to be used by a SmartLoanDiamondProxy*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay(uint256)\":{\"details\":\"It is only meant to be used by a SmartLoanDiamondProxy*\"},\"setBorrowersRegistry(address)\":{\"details\":\"borrowersRegistry the address of borrowers registry*\"},\"setPoolRewarder(address)\":{\"details\":\"_poolRewarder the address of PoolRewarder*\"},\"setRatesCalculator(address)\":{\"details\":\"ratesCalculator the address of rates calculator*\"},\"setTotalSupplyCap(uint256)\":{\"details\":\"_newTotalSupplyCap new deposit cap*\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"details\":\"_amount the amount to be withdrawn*\"}},\"title\":\"UsdcPool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Returns the current deposited amount for the given user The value includes the interest rates earned at the current moment\"},\"borrow(uint256)\":{\"notice\":\"Borrows the specified amount It updates user borrowed balance, total borrowed amount and rates\"},\"deposit(uint256)\":{\"notice\":\"Deposits the amount It updates user deposited balance, total deposited and rates*\"},\"getBorrowingRate()\":{\"notice\":\"Returns the current interest rate for borrowings*\"},\"getDepositRate()\":{\"notice\":\"Returns the current interest rate for deposits*\"},\"recoverSurplus(uint256,address)\":{\"notice\":\"Recovers the surplus funds resultant from difference between deposit and borrowing rates*\"},\"repay(uint256)\":{\"notice\":\"Repays the amount It updates user borrowed balance, total borrowed amount and rates\"},\"setBorrowersRegistry(address)\":{\"notice\":\"Sets the new borrowers registry contract. The borrowers registry decides if an account can borrow funds. Only the owner of the Contract can execute this function.\"},\"setPoolRewarder(address)\":{\"notice\":\"Sets the new Pool Rewarder. The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance. Only the owner of the Contract can execute this function.\"},\"setRatesCalculator(address)\":{\"notice\":\"Sets the new rate calculator. The calculator is an external contract that contains the logic for calculating deposit and borrowing rates. Only the owner of the Contract can execute this function.\"},\"setTotalSupplyCap(uint256)\":{\"notice\":\"Sets new totalSupplyCap limiting how much in total can be deposited to the Pool. Only the owner of the Contract can execute this function.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws selected amount from the user deposits\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deployment/avalanche/UsdcPool.sol\":\"UsdcPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 5bae95ca244e96444fe80078195944f6637e72d8;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./interfaces/IIndex.sol\\\";\\r\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\r\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Pool\\r\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\r\\n * Depositors are rewarded with the interest rates collected from borrowers.\\r\\n * The interest rates calculation is delegated to an external calculator contract.\\r\\n */\\r\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\r\\n    using TransferHelper for address payable;\\r\\n\\r\\n    uint256 public totalSupplyCap;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowed;\\r\\n    mapping(address => uint256) internal _deposited;\\r\\n\\r\\n    mapping(address => uint256) public borrowed;\\r\\n\\r\\n    IRatesCalculator public ratesCalculator;\\r\\n    IBorrowersRegistry public borrowersRegistry;\\r\\n    IPoolRewarder public poolRewarder;\\r\\n\\r\\n    IIndex public depositIndex;\\r\\n    IIndex public borrowIndex;\\r\\n\\r\\n    address payable public tokenAddress;\\r\\n\\r\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\\r\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\r\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\r\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\r\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\r\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\r\\n\\r\\n        borrowersRegistry = borrowersRegistry_;\\r\\n        ratesCalculator = ratesCalculator_;\\r\\n        depositIndex = depositIndex_;\\r\\n        borrowIndex = borrowIndex_;\\r\\n        poolRewarder = poolRewarder_;\\r\\n        tokenAddress = tokenAddress_;\\r\\n        totalSupplyCap = _totalSupplyCap;\\r\\n\\r\\n        __Ownable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n        _updateRates();\\r\\n    }\\r\\n\\r\\n    /* ========== SETTERS ========== */\\r\\n\\r\\n    /**\\r\\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev _newTotalSupplyCap new deposit cap\\r\\n    **/\\r\\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\\r\\n        totalSupplyCap = _newTotalSupplyCap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new Pool Rewarder.\\r\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev _poolRewarder the address of PoolRewarder\\r\\n    **/\\r\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\r\\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\\r\\n        poolRewarder = _poolRewarder;\\r\\n\\r\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new rate calculator.\\r\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev ratesCalculator the address of rates calculator\\r\\n     **/\\r\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\r\\n        // setting address(0) ratesCalculator_ freezes the pool\\r\\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\\r\\n        ratesCalculator = ratesCalculator_;\\r\\n        if (address(ratesCalculator_) != address(0)) {\\r\\n            _updateRates();\\r\\n        }\\r\\n\\r\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new borrowers registry contract.\\r\\n     * The borrowers registry decides if an account can borrow funds.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev borrowersRegistry the address of borrowers registry\\r\\n     **/\\r\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\r\\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\\r\\n\\r\\n        borrowersRegistry = borrowersRegistry_;\\r\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(_deposited[msg.sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[msg.sender]);\\r\\n\\r\\n        // (this is verified in \\\"require\\\" above)\\r\\n        unchecked {\\r\\n            _deposited[msg.sender] -= amount;\\r\\n        }\\r\\n\\r\\n        _accumulateDepositInterest(recipient);\\r\\n        _deposited[recipient] += amount;\\r\\n\\r\\n        // Handle rewards\\r\\n        if(address(poolRewarder) != address(0) && amount != 0){\\r\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, msg.sender);\\r\\n            if(unstaked > 0) {\\r\\n                poolRewarder.stakeFor(unstaked, recipient);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(msg.sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\r\\n        return _allowed[owner][spender];\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\r\\n        _allowed[msg.sender][spender] = newAllowance;\\r\\n\\r\\n        emit Approval(msg.sender, spender, newAllowance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        uint256 currentAllowance = _allowed[msg.sender][spender];\\r\\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\\r\\n\\r\\n        uint256 newAllowance = currentAllowance - subtractedValue;\\r\\n        _allowed[msg.sender][spender] = newAllowance;\\r\\n\\r\\n        emit Approval(msg.sender, spender, newAllowance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        _allowed[msg.sender][spender] = amount;\\r\\n\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\\r\\n\\r\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\r\\n\\r\\n        _accumulateDepositInterest(sender);\\r\\n\\r\\n        if(_deposited[sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[sender]);\\r\\n\\r\\n\\r\\n        _deposited[sender] -= amount;\\r\\n        _allowed[sender][msg.sender] -= amount;\\r\\n\\r\\n        _accumulateDepositInterest(recipient);\\r\\n        _deposited[recipient] += amount;\\r\\n\\r\\n        // Handle rewards\\r\\n        if(address(poolRewarder) != address(0) && amount != 0){\\r\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\\r\\n            if(unstaked > 0) {\\r\\n                poolRewarder.stakeFor(unstaked, recipient);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Deposits the amount\\r\\n     * It updates user deposited balance, total deposited and rates\\r\\n     **/\\r\\n    function deposit(uint256 _amount) public virtual nonReentrant {\\r\\n        if(_amount == 0) revert ZeroDepositAmount();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(totalSupplyCap != 0){\\r\\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\\r\\n        }\\r\\n\\r\\n        _transferToPool(msg.sender, _amount);\\r\\n\\r\\n        _mint(msg.sender, _amount);\\r\\n        _deposited[address(this)] += _amount;\\r\\n        _updateRates();\\r\\n\\r\\n        if (address(poolRewarder) != address(0)) {\\r\\n            poolRewarder.stakeFor(_amount, msg.sender);\\r\\n        }\\r\\n\\r\\n        emit Deposit(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\r\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\r\\n        tokenAddress.safeTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws selected amount from the user deposits\\r\\n     * @dev _amount the amount to be withdrawn\\r\\n     **/\\r\\n    function withdraw(uint256 _amount) external nonReentrant {\\r\\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\r\\n        // verified in \\\"require\\\" above\\r\\n        unchecked {\\r\\n            _deposited[address(this)] -= _amount;\\r\\n        }\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        _transferFromPool(msg.sender, _amount);\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        if (address(poolRewarder) != address(0)) {\\r\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\r\\n        }\\r\\n\\r\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Borrows the specified amount\\r\\n     * It updates user borrowed balance, total borrowed amount and rates\\r\\n     * @dev _amount the amount to be borrowed\\r\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\r\\n     **/\\r\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\r\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\r\\n\\r\\n        _accumulateBorrowingInterest(msg.sender);\\r\\n\\r\\n        borrowed[msg.sender] += _amount;\\r\\n        borrowed[address(this)] += _amount;\\r\\n\\r\\n        _transferFromPool(msg.sender, _amount);\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Repays the amount\\r\\n     * It updates user borrowed balance, total borrowed amount and rates\\r\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\r\\n     **/\\r\\n    function repay(uint256 amount) external nonReentrant {\\r\\n        _accumulateBorrowingInterest(msg.sender);\\r\\n\\r\\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\\r\\n        _transferToPool(msg.sender, amount);\\r\\n\\r\\n        borrowed[msg.sender] -= amount;\\r\\n        borrowed[address(this)] -= amount;\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        emit Repayment(msg.sender, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /* =========\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the current borrowed amount for the given user\\r\\n     * The value includes the interest rates owned at the current moment\\r\\n     * @dev _user the address of queried borrower\\r\\n    **/\\r\\n    function getBorrowed(address _user) public view returns (uint256) {\\r\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function totalBorrowed() public view returns (uint256) {\\r\\n        return getBorrowed(address(this));\\r\\n    }\\r\\n\\r\\n\\r\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\r\\n    function getRewards() external {\\r\\n        poolRewarder.getRewardsFor(msg.sender);\\r\\n    }\\r\\n\\r\\n    // Returns number of pending rewards for msg.sender\\r\\n    function checkRewards() external view returns (uint256) {\\r\\n        return poolRewarder.earned(msg.sender);\\r\\n    }\\r\\n\\r\\n    // Returns max. acceptable pool utilisation after borrow action\\r\\n    function getMaxPoolUtilisationForBorrowing() virtual public view returns (uint256) {\\r\\n        return 0.9e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current deposited amount for the given user\\r\\n     * The value includes the interest rates earned at the current moment\\r\\n     * @dev _user the address of queried depositor\\r\\n     **/\\r\\n    function balanceOf(address user) public view override returns (uint256) {\\r\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current interest rate for deposits\\r\\n     **/\\r\\n    function getDepositRate() public view returns (uint256) {\\r\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current interest rate for borrowings\\r\\n     **/\\r\\n    function getBorrowingRate() public view returns (uint256) {\\r\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\r\\n     **/\\r\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\r\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\r\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\r\\n\\r\\n        if(amount > balance) revert InsufficientPoolFunds();\\r\\n        if(surplus < amount) revert InsufficientSurplus();\\r\\n\\r\\n        _transferFromPool(account, amount);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    function _mint(address to, uint256 amount) internal {\\r\\n        if(to == address(0)) revert MintToAddressZero();\\r\\n\\r\\n        _deposited[to] += amount;\\r\\n\\r\\n        emit Transfer(address(0), to, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\\r\\n\\r\\n        // verified in \\\"require\\\" above\\r\\n        unchecked {\\r\\n            _deposited[account] -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _updateRates() internal {\\r\\n        uint256 _totalBorrowed = totalBorrowed();\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\\r\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\r\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\r\\n    }\\r\\n\\r\\n    function _accumulateDepositInterest(address user) internal {\\r\\n        uint256 interest = balanceOf(user) - _deposited[user];\\r\\n\\r\\n        _mint(user, interest);\\r\\n        _deposited[address(this)] = balanceOf(address(this));\\r\\n\\r\\n        emit InterestCollected(user, interest, block.timestamp);\\r\\n\\r\\n        depositIndex.updateUser(user);\\r\\n        depositIndex.updateUser(address(this));\\r\\n    }\\r\\n\\r\\n    function _accumulateBorrowingInterest(address user) internal {\\r\\n        borrowed[user] = getBorrowed(user);\\r\\n        borrowed[address(this)] = getBorrowed(address(this));\\r\\n\\r\\n        borrowIndex.updateUser(user);\\r\\n        borrowIndex.updateUser(address(this));\\r\\n    }\\r\\n\\r\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\r\\n\\r\\n    function renounceOwnership() public virtual override {}\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier canBorrow() {\\r\\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\\r\\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\\r\\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\\r\\n        _;\\r\\n        if((totalBorrowed() * 1e18) / totalSupply() > getMaxPoolUtilisationForBorrowing()) revert MaxPoolUtilisationBreached();\\r\\n    }\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user deposits funds\\r\\n     * @param user the address performing the deposit\\r\\n     * @param value the amount deposited\\r\\n     * @param timestamp of the deposit\\r\\n     **/\\r\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user withdraws funds\\r\\n     * @param user the address performing the withdrawal\\r\\n     * @param value the amount withdrawn\\r\\n     * @param timestamp of the withdrawal\\r\\n     **/\\r\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user borrows funds\\r\\n     * @param user the address that borrows\\r\\n     * @param value the amount borrowed\\r\\n     * @param timestamp time of the borrowing\\r\\n     **/\\r\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user repays debt\\r\\n     * @param user the address that repays debt\\r\\n     * @param value the amount repaid\\r\\n     * @param timestamp of the repayment\\r\\n     **/\\r\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after accumulating deposit interest\\r\\n     * @param user the address that the deposit interest is accumulated for\\r\\n     * @param value the amount that interest is calculated from\\r\\n     * @param timestamp of the interest accumulation\\r\\n     **/\\r\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing borrowers registry\\r\\n    * @param registry an address of the newly set borrowers registry\\r\\n    * @param timestamp of the borrowers registry change\\r\\n    **/\\r\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing rates calculator\\r\\n    * @param calculator an address of the newly set rates calculator\\r\\n    * @param timestamp of the borrowers registry change\\r\\n    **/\\r\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing pool rewarder\\r\\n    * @param poolRewarder an address of the newly set pool rewarder\\r\\n    * @param timestamp of the pool rewarder change\\r\\n    **/\\r\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\r\\n\\r\\n    /* ========== ERRORS ========== */\\r\\n\\r\\n    // Only authorized accounts may borrow\\r\\n    error NotAuthorizedToBorrow();\\r\\n\\r\\n    // Borrowers registry is not configured\\r\\n    error BorrowersRegistryNotConfigured();\\r\\n\\r\\n    // Pool is frozen\\r\\n    error PoolFrozen();\\r\\n\\r\\n    // Not enough funds in the pool.\\r\\n    error InsufficientPoolFunds();\\r\\n\\r\\n    // Insufficient pool surplus to cover the requested recover amount\\r\\n    error InsufficientSurplus();\\r\\n\\r\\n    // Address (`target`) must be a contract\\r\\n    // @param target target address that must be a contract\\r\\n    error NotAContract(address target);\\r\\n\\r\\n    //  ERC20: Spender cannot be a zero address\\r\\n    error SpenderZeroAddress();\\r\\n\\r\\n    //  ERC20: cannot transfer to the zero address\\r\\n    error TransferToZeroAddress();\\r\\n\\r\\n    //  ERC20: cannot transfer to the pool address\\r\\n    error TransferToPoolAddress();\\r\\n\\r\\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\\r\\n    /// @param amount transfer amount\\r\\n    /// @param balance available balance\\r\\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\r\\n\\r\\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\\r\\n    /// @param requested requested transfer amount\\r\\n    /// @param allowance current allowance\\r\\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\\r\\n\\r\\n    //  This deposit operation would result in a breach of the totalSupplyCap\\r\\n    error TotalSupplyCapBreached();\\r\\n\\r\\n    // The deposit amount must be > 0\\r\\n    error ZeroDepositAmount();\\r\\n\\r\\n    // ERC20: cannot mint to the zero address\\r\\n    error MintToAddressZero();\\r\\n\\r\\n    // ERC20: burn amount exceeds current pool indexed balance\\r\\n    error BurnAmountExceedsBalance();\\r\\n\\r\\n    // Trying to repay more than was borrowed\\r\\n    error RepayingMoreThanWasBorrowed();\\r\\n\\r\\n    // getMaxPoolUtilisationForBorrowing was breached\\r\\n    error MaxPoolUtilisationBreached();\\r\\n}\",\"keccak256\":\"0xd59448147e759ba73843ca7a8c5a85549a2152601ab3577f80681835c41ecd54\",\"license\":\"BUSL-1.1\"},\"contracts/deployment/avalanche/UsdcPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../../Pool.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title UsdcPool\\r\\n * @dev Contract allowing user to deposit to and borrow USDC from a dedicated user account\\r\\n */\\r\\ncontract UsdcPool is Pool {\\r\\n}\",\"keccak256\":\"0x407e46bbf4e9dd828a7e6d9185dfa79d4f140ea0f076c8e1ff4a10fa0971ea86\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IBorrowersRegistry\\r\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\r\\n */\\r\\ninterface IBorrowersRegistry {\\r\\n    function canBorrow(address _account) external view returns (bool);\\r\\n\\r\\n    function getLoanForOwner(address _owner) external view returns (address);\\r\\n\\r\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xb8aaf225432273e91887b0ecda730ad062eaeef212cfd099e322393d1c3f56e3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IIndex {\\r\\n\\r\\n    function setRate(uint256 _rate) external;\\r\\n\\r\\n    function updateUser(address user) external;\\r\\n\\r\\n    function getIndex() external view returns (uint256);\\r\\n\\r\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x0f06bd722f4574e6296b2e55a393e8b2abe81411ae1ec8598d761e5a8565390a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IPoolRewarder {\\r\\n\\r\\n    function stakeFor(uint _amount, address _stakeFor) external;\\r\\n\\r\\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\\r\\n\\r\\n    function getRewardsFor(address _user) external;\\r\\n\\r\\n    function earned(address _account) external view returns (uint);\\r\\n\\r\\n    function balanceOf(address _account) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xe5ff460a400055a73324bb2b6661e47bb5227c6bce4adec8befa541ded0b252d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IRatesCalculator\\r\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\r\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\r\\n */\\r\\ninterface IRatesCalculator {\\r\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\r\\n\\r\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc6f00bcba86f3aa78e79bec4943c8f47daf4b85698ce6686b4b2457a92f06bc8\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061518c806100206000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c806370d4cea011610125578063b790634e116100ad578063dd62ed3e1161007c578063dd62ed3e14610619578063ee61bd6e14610649578063f2fde38b14610667578063f36b242514610683578063fc68f661146106a15761021c565b8063b790634e146105a3578063bb102aea146105c1578063c5ebeaec146105df578063d06dca89146105fb5761021c565b80639d76ea58116100f45780639d76ea58146104eb578063a457c2d714610509578063a9059cbb14610539578063aa5af0fd14610569578063b6b55f25146105875761021c565b806370d4cea014610489578063715018a6146104a55780637b898939146104af5780638da5cb5b146104cd5761021c565b80632e1a7d4d116101a85780634c19386c116101775780634c19386c146103cf5780636011163e146103ed57806361215aa81461041d5780636ca6d5d01461043b57806370a08231146104595761021c565b80632e1a7d4d1461034b57806331d05b1114610367578063371fd8e614610383578063395093511461039f5761021c565b80631457db34116101ef5780631457db34146102a75780631460e390146102c357806318160ddd146102df57806323b872dd146102fd5780632aeaa2911461032d5761021c565b80630572b0cc146102215780630790ef9a1461022b5780630941cb3d14610247578063095ea7b314610277575b600080fd5b6102296106bd565b005b6102456004803603810190610240919061446b565b61074c565b005b610261600480360381019061025c91906144ab565b61096a565b60405161026e91906144e7565b60405180910390f35b610291600480360381019061028c9190614502565b610982565b60405161029e919061455d565b60405180910390f35b6102c160048036038101906102bc91906145b6565b610ad9565b005b6102dd60048036038101906102d891906146db565b610c8e565b005b6102e7610fe1565b6040516102f491906144e7565b60405180910390f35b6103176004803603810190610312919061477d565b610ff1565b604051610324919061455d565b60405180910390f35b610335611627565b60405161034291906144e7565b60405180910390f35b610365600480360381019061036091906147d0565b6116c9565b005b610381600480360381019061037c91906147d0565b611a29565b005b61039d600480360381019061039891906147d0565b611aaf565b005b6103b960048036038101906103b49190614502565b611c97565b6040516103c6919061455d565b60405180910390f35b6103d7611e7b565b6040516103e491906144e7565b60405180910390f35b610407600480360381019061040291906144ab565b611e8b565b60405161041491906144e7565b60405180910390f35b610425611f71565b60405161043291906144e7565b60405180910390f35b610443611f81565b604051610450919061485c565b60405180910390f35b610473600480360381019061046e91906144ab565b611fa7565b60405161048091906144e7565b60405180910390f35b6104a3600480360381019061049e9190614877565b61208d565b005b6104ad61225d565b005b6104b761225f565b6040516104c491906148c5565b60405180910390f35b6104d5612285565b6040516104e291906148ef565b60405180910390f35b6104f36122af565b6040516105009190614919565b60405180910390f35b610523600480360381019061051e9190614502565b6122d5565b604051610530919061455d565b60405180910390f35b610553600480360381019061054e9190614502565b612506565b604051610560919061455d565b60405180910390f35b61057161295f565b60405161057e91906148c5565b60405180910390f35b6105a1600480360381019061059c91906147d0565b612985565b005b6105ab612c59565b6040516105b891906144e7565b60405180910390f35b6105c9612d0c565b6040516105d691906144e7565b60405180910390f35b6105f960048036038101906105f491906147d0565b612d12565b005b61060361315e565b6040516106109190614955565b60405180910390f35b610633600480360381019061062e9190614970565b613184565b60405161064091906144e7565b60405180910390f35b61065161320b565b60405161065e91906149d1565b60405180910390f35b610681600480360381019061067c91906144ab565b613231565b005b61068b613328565b60405161069891906144e7565b60405180910390f35b6106bb60048036038101906106b691906149ec565b6133db565b005b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632260b83e336040518263ffffffff1660e01b815260040161071891906148ef565b600060405180830381600087803b15801561073257600080fd5b505af1158015610746573d6000803e3d6000fd5b50505050565b610754613533565b73ffffffffffffffffffffffffffffffffffffffff16610772612285565b73ffffffffffffffffffffffffffffffffffffffff16146107c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bf90614a76565b60405180910390fd5b60026065540361080d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080490614ae2565b60405180910390fd5b6002606581905550600060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161087291906148ef565b602060405180830381865afa15801561088f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b39190614b17565b905060006108bf610fe1565b6108c7611e7b565b836108d29190614b73565b6108dc9190614ba7565b905081841115610918576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83811015610952576040517f94290ab900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61095c838561353b565b505060016065819055505050565b609a6020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109e9576040517f7acc038e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610ac791906144e7565b60405180910390a36001905092915050565b610ae1613533565b73ffffffffffffffffffffffffffffffffffffffff16610aff612285565b73ffffffffffffffffffffffffffffffffffffffff1614610b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4c90614a76565b60405180910390fd5b610b5e8161358c565b158015610b985750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15610bfc57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f8a8b41ec000000000000000000000000000000000000000000000000000000008152600401610bf391906148ef565b60405180910390fd5b80609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f85796821ee1d670b0fdb986f256b5c1a29b9019038831c7f09df2061879cf9e542604051610c8391906144e7565b60405180910390a250565b600060019054906101000a900460ff16610cb65760008054906101000a900460ff1615610cbf565b610cbe6135af565b5b610cfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf590614c4d565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d4e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d578861358c565b8015610d685750610d678761358c565b5b8015610d795750610d788661358c565b5b8015610d8a5750610d898561358c565b5b8015610dd25750610d9a8361358c565b80610dd15750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b5b610e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0890614cb9565b60405180910390fd5b86609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085609e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084609f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360a060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609781905550610fa66135c0565b610fae613619565b610fb6613672565b8015610fd75760008060016101000a81548160ff0219169083151502179055505b5050505050505050565b6000610fec30611fa7565b905090565b600081609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156111325781609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517f2a1b2dd8000000000000000000000000000000000000000000000000000000008152600401611129929190614cd9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611198576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111fd576040517fed728e5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112068461396a565b81609960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156112cb5781609960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517fa1a48f3a0000000000000000000000000000000000000000000000000000000081526004016112c2929190614cd9565b60405180910390fd5b81609960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461131a9190614ba7565b9250508190555081609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113ad9190614ba7565b925050819055506113bd8361396a565b81609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461140c9190614b73565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015611473575060008214155b156115b7576000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc84876040518363ffffffff1660e01b81526004016114d7929190614d02565b6020604051808303816000875af11580156114f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151a9190614b17565b905060008111156115b557609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282866040518363ffffffff1660e01b8152600401611582929190614d02565b600060405180830381600087803b15801561159c57600080fd5b505af11580156115b0573d6000803e3d6000fd5b505050505b505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161161491906144e7565b60405180910390a3600190509392505050565b6000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262336040518263ffffffff1660e01b815260040161168391906148ef565b602060405180830381865afa1580156116a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c49190614b17565b905090565b60026065540361170e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170590614ae2565b60405180910390fd5b600260658190555060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161177191906148ef565b602060405180830381865afa15801561178e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b29190614b17565b8111156117eb576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117f43361396a565b609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561186d576040517f177466fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506118c43382613b85565b6118ce338261353b565b6118d6613672565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146119ce57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc82336040518363ffffffff1660e01b8152600401611989929190614d02565b6020604051808303816000875af11580156119a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cc9190614b17565b505b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb8242604051611a16929190614cd9565b60405180910390a2600160658190555050565b611a31613533565b73ffffffffffffffffffffffffffffffffffffffff16611a4f612285565b73ffffffffffffffffffffffffffffffffffffffff1614611aa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9c90614a76565b60405180910390fd5b8060978190555050565b600260655403611af4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aeb90614ae2565b60405180910390fd5b6002606581905550611b0533613cb5565b609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115611b7e576040517f1b95a86600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b883382613e6a565b80609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bd79190614ba7565b9250508190555080609a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c2d9190614ba7565b92505081905550611c3c613672565b3373ffffffffffffffffffffffffffffffffffffffff167f24fcca58a997b1b2eff6db8107e860458544c09ddd3693b3b779e1df6c0d6c5d8242604051611c84929190614cd9565b60405180910390a2600160658190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611cfe576040517f7acc038e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d889190614b73565b905080609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611e6891906144e7565b60405180910390a3600191505092915050565b6000611e8630611e8b565b905090565b6000609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b8152600401611f29929190614d02565b602060405180830381865afa158015611f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6a9190614b17565b9050919050565b6000670c7d713b49da0000905090565b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b8152600401612045929190614d02565b602060405180830381865afa158015612062573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120869190614b17565b9050919050565b612095613533565b73ffffffffffffffffffffffffffffffffffffffff166120b3612285565b73ffffffffffffffffffffffffffffffffffffffff1614612109576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210090614a76565b60405180910390fd5b6121128161358c565b15801561214c5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b1561218e57806040517f8a8b41ec00000000000000000000000000000000000000000000000000000000815260040161218591906148ef565b60405180910390fd5b80609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461220c5761220b613672565b5b8073ffffffffffffffffffffffffffffffffffffffff167fef1b7e9216e08b283cc613824ccb26ea505227777839a4f3c6810d64594e01824260405161225291906144e7565b60405180910390a250565b565b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361233c576040517f7acc038e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156124045782816040517f2a1b2dd80000000000000000000000000000000000000000000000000000000081526004016123fb929190614cd9565b60405180910390fd5b600083826124129190614ba7565b905080609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516124f291906144e7565b60405180910390a360019250505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361256d576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036125d2576040517fed728e5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6125db3361396a565b81609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156126a05781609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517fa1a48f3a000000000000000000000000000000000000000000000000000000008152600401612697929190614cd9565b60405180910390fd5b81609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506126f68361396a565b81609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127459190614b73565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156127ac575060008214155b156128f0576000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc84336040518363ffffffff1660e01b8152600401612810929190614d02565b6020604051808303816000875af115801561282f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128539190614b17565b905060008111156128ee57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282866040518363ffffffff1660e01b81526004016128bb929190614d02565b600060405180830381600087803b1580156128d557600080fd5b505af11580156128e9573d6000803e3d6000fd5b505050505b505b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161294d91906144e7565b60405180910390a36001905092915050565b609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002606554036129ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c190614ae2565b60405180910390fd5b600260658190555060008103612a0c576040517f078e1d8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612a153361396a565b600060975414612aa65760975481609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a6d9190614b73565b1115612aa5576040517f3f27d61700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b612ab03382613e6a565b612aba3382613ebd565b80609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612b099190614b73565b92505081905550612b18613672565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612bfe57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282336040518363ffffffff1660e01b8152600401612bcb929190614d02565b600060405180830381600087803b158015612be557600080fd5b505af1158015612bf9573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158242604051612c46929190614cd9565b60405180910390a2600160658190555050565b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd08331612ca1611e7b565b612ca9610fe1565b6040518363ffffffff1660e01b8152600401612cc6929190614cd9565b602060405180830381865afa158015612ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d079190614b17565b905090565b60975481565b600073ffffffffffffffffffffffffffffffffffffffff16609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612d9a576040517f700e36ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e7fc864336040518263ffffffff1660e01b8152600401612df591906148ef565b602060405180830381865afa158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e369190614d57565b612e6c576040517feb05f53600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612e76610fe1565b03612ead576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260655403612ef2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee990614ae2565b60405180910390fd5b600260658190555060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612f5591906148ef565b602060405180830381865afa158015612f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f969190614b17565b811115612fcf576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612fd833613cb5565b80609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546130279190614b73565b9250508190555080609a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461307d9190614b73565b9250508190555061308e338261353b565b613096613672565b3373ffffffffffffffffffffffffffffffffffffffff167fd6b37be10b58108f696d9ed067fedad0bff7cb417ef4c28d2f8a25d6d83c98d582426040516130de929190614cd9565b60405180910390a260016065819055506130f6611f71565b6130fe610fe1565b670de0b6b3a764000061310f611e7b565b6131199190614d84565b6131239190614df5565b111561315b576040517fe5739c7e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b613239613533565b73ffffffffffffffffffffffffffffffffffffffff16613257612285565b73ffffffffffffffffffffffffffffffffffffffff16146132ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132a490614a76565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361331c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161331390614e98565b60405180910390fd5b61332581613fe3565b50565b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec613370611e7b565b613378610fe1565b6040518363ffffffff1660e01b8152600401613395929190614cd9565b602060405180830381865afa1580156133b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d69190614b17565b905090565b6133e3613533565b73ffffffffffffffffffffffffffffffffffffffff16613401612285565b73ffffffffffffffffffffffffffffffffffffffff1614613457576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161344e90614a76565b60405180910390fd5b6134608161358c565b6134a157806040517f8a8b41ec00000000000000000000000000000000000000000000000000000000815260040161349891906148ef565b60405180910390fd5b80609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f04dce7d074f7e287a2e6e3516c802271d58d5c14e0dede83a49719eb6b9204694260405161352891906144e7565b60405180910390a250565b600033905090565b613588828260a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166140a99092919063ffffffff16565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006135ba3061358c565b15905090565b600060019054906101000a900460ff1661360f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161360690614f2a565b60405180910390fd5b6136176141df565b565b600060019054906101000a900460ff16613668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161365f90614f2a565b60405180910390fd5b613670614240565b565b600061367c611e7b565b90506000613688610fe1565b9050600073ffffffffffffffffffffffffffffffffffffffff16609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603613712576040517ffd4851e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd0833185856040518363ffffffff1660e01b81526004016137ad929190614cd9565b602060405180830381865afa1580156137ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137ee9190614b17565b6040518263ffffffff1660e01b815260040161380a91906144e7565b600060405180830381600087803b15801561382457600080fd5b505af1158015613838573d6000803e3d6000fd5b50505050609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec85856040518363ffffffff1660e01b81526004016138d7929190614cd9565b602060405180830381865afa1580156138f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139189190614b17565b6040518263ffffffff1660e01b815260040161393491906144e7565b600060405180830381600087803b15801561394e57600080fd5b505af1158015613962573d6000803e3d6000fd5b505050505050565b6000609960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546139b583611fa7565b6139bf9190614ba7565b90506139cb8282613ebd565b6139d430611fa7565b609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e21618242604051613a5f929190614cd9565b60405180910390a2609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336836040518263ffffffff1660e01b8152600401613ac291906148ef565b600060405180830381600087803b158015613adc57600080fd5b505af1158015613af0573d6000803e3d6000fd5b50505050609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b8152600401613b4f91906148ef565b600060405180830381600087803b158015613b6957600080fd5b505af1158015613b7d573d6000803e3d6000fd5b505050505050565b609960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115613bfe576040517f177466fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613ca991906144e7565b60405180910390a35050565b613cbe81611e8b565b609a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613d0a30611e8b565b609a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336826040518263ffffffff1660e01b8152600401613da891906148ef565b600060405180830381600087803b158015613dc257600080fd5b505af1158015613dd6573d6000803e3d6000fd5b50505050609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b8152600401613e3591906148ef565b600060405180830381600087803b158015613e4f57600080fd5b505af1158015613e63573d6000803e3d6000fd5b5050505050565b613eb982308360a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16614299909392919063ffffffff16565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603613f23576040517f8db7f6da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613f729190614b73565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613fd791906144e7565b60405180910390a35050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016140db929190614f4a565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516141299190614fe4565b6000604051808303816000865af19150503d8060008114614166576040519150601f19603f3d011682016040523d82523d6000602084013e61416b565b606091505b509150915081801561419957506000815114806141985750808060200190518101906141979190614d57565b5b5b6141d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016141cf9061506d565b60405180910390fd5b5050505050565b600060019054906101000a900460ff1661422e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161422590614f2a565b60405180910390fd5b61423e614239613533565b613fe3565b565b600060019054906101000a900460ff1661428f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161428690614f2a565b60405180910390fd5b6001606581905550565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016142cd9392919061508d565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161431b9190614fe4565b6000604051808303816000865af19150503d8060008114614358576040519150601f19603f3d011682016040523d82523d6000602084013e61435d565b606091505b509150915081801561438b575060008151148061438a5750808060200190518101906143899190614d57565b5b5b6143ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016143c190615136565b60405180910390fd5b505050505050565b600080fd5b6000819050919050565b6143ea816143d7565b81146143f557600080fd5b50565b600081359050614407816143e1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006144388261440d565b9050919050565b6144488161442d565b811461445357600080fd5b50565b6000813590506144658161443f565b92915050565b60008060408385031215614482576144816143d2565b5b6000614490858286016143f8565b92505060206144a185828601614456565b9150509250929050565b6000602082840312156144c1576144c06143d2565b5b60006144cf84828501614456565b91505092915050565b6144e1816143d7565b82525050565b60006020820190506144fc60008301846144d8565b92915050565b60008060408385031215614519576145186143d2565b5b600061452785828601614456565b9250506020614538858286016143f8565b9150509250929050565b60008115159050919050565b61455781614542565b82525050565b6000602082019050614572600083018461454e565b92915050565b60006145838261442d565b9050919050565b61459381614578565b811461459e57600080fd5b50565b6000813590506145b08161458a565b92915050565b6000602082840312156145cc576145cb6143d2565b5b60006145da848285016145a1565b91505092915050565b60006145ee8261442d565b9050919050565b6145fe816145e3565b811461460957600080fd5b50565b60008135905061461b816145f5565b92915050565b600061462c8261442d565b9050919050565b61463c81614621565b811461464757600080fd5b50565b60008135905061465981614633565b92915050565b600061466a8261442d565b9050919050565b61467a8161465f565b811461468557600080fd5b50565b60008135905061469781614671565b92915050565b60006146a88261440d565b9050919050565b6146b88161469d565b81146146c357600080fd5b50565b6000813590506146d5816146af565b92915050565b600080600080600080600060e0888a0312156146fa576146f96143d2565b5b60006147088a828b0161460c565b97505060206147198a828b0161464a565b965050604061472a8a828b01614688565b955050606061473b8a828b01614688565b945050608061474c8a828b016146c6565b93505060a061475d8a828b016145a1565b92505060c061476e8a828b016143f8565b91505092959891949750929550565b600080600060608486031215614796576147956143d2565b5b60006147a486828701614456565b93505060206147b586828701614456565b92505060406147c6868287016143f8565b9150509250925092565b6000602082840312156147e6576147e56143d2565b5b60006147f4848285016143f8565b91505092915050565b6000819050919050565b600061482261481d6148188461440d565b6147fd565b61440d565b9050919050565b600061483482614807565b9050919050565b600061484682614829565b9050919050565b6148568161483b565b82525050565b6000602082019050614871600083018461484d565b92915050565b60006020828403121561488d5761488c6143d2565b5b600061489b8482850161460c565b91505092915050565b60006148af82614829565b9050919050565b6148bf816148a4565b82525050565b60006020820190506148da60008301846148b6565b92915050565b6148e98161442d565b82525050565b600060208201905061490460008301846148e0565b92915050565b6149138161469d565b82525050565b600060208201905061492e600083018461490a565b92915050565b600061493f82614829565b9050919050565b61494f81614934565b82525050565b600060208201905061496a6000830184614946565b92915050565b60008060408385031215614987576149866143d2565b5b600061499585828601614456565b92505060206149a685828601614456565b9150509250929050565b60006149bb82614829565b9050919050565b6149cb816149b0565b82525050565b60006020820190506149e660008301846149c2565b92915050565b600060208284031215614a0257614a016143d2565b5b6000614a108482850161464a565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614a60602083614a19565b9150614a6b82614a2a565b602082019050919050565b60006020820190508181036000830152614a8f81614a53565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614acc601f83614a19565b9150614ad782614a96565b602082019050919050565b60006020820190508181036000830152614afb81614abf565b9050919050565b600081519050614b11816143e1565b92915050565b600060208284031215614b2d57614b2c6143d2565b5b6000614b3b84828501614b02565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614b7e826143d7565b9150614b89836143d7565b9250828201905080821115614ba157614ba0614b44565b5b92915050565b6000614bb2826143d7565b9150614bbd836143d7565b9250828203905081811115614bd557614bd4614b44565b5b92915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000614c37602e83614a19565b9150614c4282614bdb565b604082019050919050565b60006020820190508181036000830152614c6681614c2a565b9050919050565b7f57726f6e6720696e697420617267756d656e7473000000000000000000000000600082015250565b6000614ca3601483614a19565b9150614cae82614c6d565b602082019050919050565b60006020820190508181036000830152614cd281614c96565b9050919050565b6000604082019050614cee60008301856144d8565b614cfb60208301846144d8565b9392505050565b6000604082019050614d1760008301856144d8565b614d2460208301846148e0565b9392505050565b614d3481614542565b8114614d3f57600080fd5b50565b600081519050614d5181614d2b565b92915050565b600060208284031215614d6d57614d6c6143d2565b5b6000614d7b84828501614d42565b91505092915050565b6000614d8f826143d7565b9150614d9a836143d7565b9250828202614da8816143d7565b91508282048414831517614dbf57614dbe614b44565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614e00826143d7565b9150614e0b836143d7565b925082614e1b57614e1a614dc6565b5b828204905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614e82602683614a19565b9150614e8d82614e26565b604082019050919050565b60006020820190508181036000830152614eb181614e75565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614f14602b83614a19565b9150614f1f82614eb8565b604082019050919050565b60006020820190508181036000830152614f4381614f07565b9050919050565b6000604082019050614f5f60008301856148e0565b614f6c60208301846144d8565b9392505050565b600081519050919050565b600081905092915050565b60005b83811015614fa7578082015181840152602081019050614f8c565b60008484015250505050565b6000614fbe82614f73565b614fc88185614f7e565b9350614fd8818560208601614f89565b80840191505092915050565b6000614ff08284614fb3565b915081905092915050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6000615057602d83614a19565b915061506282614ffb565b604082019050919050565b600060208201905081810360008301526150868161504a565b9050919050565b60006060820190506150a260008301866148e0565b6150af60208301856148e0565b6150bc60408301846144d8565b949350505050565b7f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260008201527f616e7366657246726f6d206661696c6564000000000000000000000000000000602082015250565b6000615120603183614a19565b915061512b826150c4565b604082019050919050565b6000602082019050818103600083015261514f81615113565b905091905056fea2646970667358221220c77d444105455029e72acf0b1ad213da2963b8a2676fcdc18ddf052f54002dea64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Contract allowing user to deposit to and borrow USDC from a dedicated user account",
    "errors": {
      "InsufficientAllowance(uint256,uint256)": [
        {
          "params": {
            "allowance": "current allowance",
            "requested": "requested transfer amount"
          }
        }
      ],
      "TransferAmountExceedsBalance(uint256,uint256)": [
        {
          "params": {
            "amount": "transfer amount",
            "balance": "available balance"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "_user the address of queried depositor*"
      },
      "borrow(uint256)": {
        "details": "_amount the amount to be borrowedIt is only meant to be used by a SmartLoanDiamondProxy*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay(uint256)": {
        "details": "It is only meant to be used by a SmartLoanDiamondProxy*"
      },
      "setBorrowersRegistry(address)": {
        "details": "borrowersRegistry the address of borrowers registry*"
      },
      "setPoolRewarder(address)": {
        "details": "_poolRewarder the address of PoolRewarder*"
      },
      "setRatesCalculator(address)": {
        "details": "ratesCalculator the address of rates calculator*"
      },
      "setTotalSupplyCap(uint256)": {
        "details": "_newTotalSupplyCap new deposit cap*"
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "details": "_amount the amount to be withdrawn*"
      }
    },
    "title": "UsdcPool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Returns the current deposited amount for the given user The value includes the interest rates earned at the current moment"
      },
      "borrow(uint256)": {
        "notice": "Borrows the specified amount It updates user borrowed balance, total borrowed amount and rates"
      },
      "deposit(uint256)": {
        "notice": "Deposits the amount It updates user deposited balance, total deposited and rates*"
      },
      "getBorrowingRate()": {
        "notice": "Returns the current interest rate for borrowings*"
      },
      "getDepositRate()": {
        "notice": "Returns the current interest rate for deposits*"
      },
      "recoverSurplus(uint256,address)": {
        "notice": "Recovers the surplus funds resultant from difference between deposit and borrowing rates*"
      },
      "repay(uint256)": {
        "notice": "Repays the amount It updates user borrowed balance, total borrowed amount and rates"
      },
      "setBorrowersRegistry(address)": {
        "notice": "Sets the new borrowers registry contract. The borrowers registry decides if an account can borrow funds. Only the owner of the Contract can execute this function."
      },
      "setPoolRewarder(address)": {
        "notice": "Sets the new Pool Rewarder. The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance. Only the owner of the Contract can execute this function."
      },
      "setRatesCalculator(address)": {
        "notice": "Sets the new rate calculator. The calculator is an external contract that contains the logic for calculating deposit and borrowing rates. Only the owner of the Contract can execute this function."
      },
      "setTotalSupplyCap(uint256)": {
        "notice": "Sets new totalSupplyCap limiting how much in total can be deposited to the Pool. Only the owner of the Contract can execute this function."
      },
      "withdraw(uint256)": {
        "notice": "Withdraws selected amount from the user deposits"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 211,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 255,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10553,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "totalSupplyCap",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 10559,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "_allowed",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10563,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "_deposited",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10567,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "borrowed",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10570,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "ratesCalculator",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(IRatesCalculator)27903"
      },
      {
        "astId": 10573,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "borrowersRegistry",
        "offset": 0,
        "slot": "156",
        "type": "t_contract(IBorrowersRegistry)27678"
      },
      {
        "astId": 10576,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "poolRewarder",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(IPoolRewarder)27881"
      },
      {
        "astId": 10579,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "depositIndex",
        "offset": 0,
        "slot": "158",
        "type": "t_contract(IIndex)27843"
      },
      {
        "astId": 10582,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "borrowIndex",
        "offset": 0,
        "slot": "159",
        "type": "t_contract(IIndex)27843"
      },
      {
        "astId": 10584,
        "contract": "contracts/deployment/avalanche/UsdcPool.sol:UsdcPool",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "160",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBorrowersRegistry)27678": {
        "encoding": "inplace",
        "label": "contract IBorrowersRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IIndex)27843": {
        "encoding": "inplace",
        "label": "contract IIndex",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolRewarder)27881": {
        "encoding": "inplace",
        "label": "contract IPoolRewarder",
        "numberOfBytes": "20"
      },
      "t_contract(IRatesCalculator)27903": {
        "encoding": "inplace",
        "label": "contract IRatesCalculator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}