{
  "address": "0x9f0798AF8eDb4b91301E6716948aE813Db31fb95",
  "abi": [
    {
      "inputs": [],
      "name": "resetPrimeAccountAssetsExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPrimeAccountAssetsExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa32a5cbad339590c0fde43542b76db8d6b04c28ad60eca34e364e8cd6e114f6c",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x9f0798AF8eDb4b91301E6716948aE813Db31fb95",
    "transactionIndex": 0,
    "gasUsed": "1056660",
    "logsBloom": "0x
    "blockHash": "0xad534f7b581d71f7daddd9e9bef0087e2fc45f0eea09a3333712a03ce6b1055f",
    "transactionHash": "0xa32a5cbad339590c0fde43542b76db8d6b04c28ad60eca34e364e8cd6e114f6c",
    "logs": [],
    "blockNumber": 24600547,
    "cumulativeGasUsed": "1056660",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fa23c61f86cec8c7de13e8bfa631887b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"resetPrimeAccountAssetsExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPrimeAccountAssetsExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/AssetsExposureController.sol\":\"AssetsExposureController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/facets/AssetsExposureController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\r\\n\\r\\n//This path is updated during deployment\\r\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\ncontract AssetsExposureController {\\r\\n\\r\\n    function resetPrimeAccountAssetsExposure() external {\\r\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n        for(uint i=0; i<ownedAssets.length; i++){\\r\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssets[i], true));\\r\\n            tokenManager.decreaseProtocolExposure(ownedAssets[i], token.balanceOf(address(this)) * 1e18 / 10**token.decimals());\\r\\n        }\\r\\n        for(uint i=0; i<positions.length; i++){\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\\r\\n                tokenManager.decreaseProtocolExposure(positions[i].identifier, balance * 1e18 / 10**decimals);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setPrimeAccountAssetsExposure() external {\\r\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n        for(uint i=0; i<ownedAssets.length; i++){\\r\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssets[i], true));\\r\\n            tokenManager.increaseProtocolExposure(ownedAssets[i], token.balanceOf(address(this)) * 1e18 / 10**token.decimals());\\r\\n        }\\r\\n        for(uint i=0; i<positions.length; i++){\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\\r\\n                tokenManager.increaseProtocolExposure(positions[i].identifier, balance * 1e18 / 10**decimals);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1a596ec4476c5f9798427c5bc82bf5d0206f09b5ac7bedb88b7e6b83f5817504\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\",\"keccak256\":\"0x98b528120c0598f550cf85472f8dd759952a41505d1c7c5a2f07ed03c18c87a7\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IStakingPositions\\r\\n * Types for staking\\r\\n */\\r\\ninterface IStakingPositions {\\r\\n    struct StakedPosition {\\r\\n        // Asset is either the token (symbol) address being staked or the address of the PTP LP token in case where a pool for that token (symbol) already exists within the VectorFinance\\r\\n        address asset;\\r\\n        bytes32 symbol;\\r\\n        bytes32 identifier;\\r\\n        bytes4 balanceSelector;\\r\\n        bytes4 unstakeSelector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xce66179b8d802e46a03c412a23e2cb59fa4bc228cf475ca091b0425aecd0f16b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenManager.sol\":{\"content\":\"interface ITokenManager {\\r\\n    struct poolAsset {\\r\\n        bytes32 asset;\\r\\n        address poolAddress;\\r\\n    }\\r\\n\\r\\n    struct Asset {\\r\\n        bytes32 asset;\\r\\n        address assetAddress;\\r\\n        uint256 debtCoverage;\\r\\n    }\\r\\n\\r\\n    function activateToken ( address token ) external;\\r\\n    function addPoolAssets ( poolAsset[] memory poolAssets ) external;\\r\\n    function addTokenAssets ( Asset[] memory tokenAssets ) external;\\r\\n    function deactivateToken ( address token ) external;\\r\\n    function debtCoverage ( address ) external view returns ( uint256 );\\r\\n    function debtCoverageStaked ( bytes32 ) external view returns ( uint256 );\\r\\n    function getAllPoolAssets (  ) external view returns ( bytes32[] memory result );\\r\\n    function getAllTokenAssets (  ) external view returns ( bytes32[] memory result );\\r\\n    function getAssetAddress ( bytes32 _asset, bool allowInactive ) external view returns ( address );\\r\\n    function getPoolAddress ( bytes32 _asset ) external view returns ( address );\\r\\n    function getSupportedTokensAddresses (  ) external view returns ( address[] memory);\\r\\n    function initialize ( Asset[] memory tokenAssets, poolAsset[] memory poolAssets ) external;\\r\\n    function increaseProtocolExposure ( bytes32 assetIdentifier, uint256 exposureIncrease ) external;\\r\\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) external;\\r\\n    function isTokenAssetActive ( address token ) external view returns ( bool );\\r\\n    function owner (  ) external view returns ( address );\\r\\n    function removePoolAssets ( bytes32[] memory _poolAssets ) external;\\r\\n    function removeTokenAssets ( bytes32[] memory _tokenAssets ) external;\\r\\n    function renounceOwnership (  ) external;\\r\\n    function setDebtCoverage ( address token, uint256 coverage ) external;\\r\\n    function setDebtCoverageStaked ( bytes32 stakedAsset, uint256 coverage ) external;\\r\\n    function supportedTokensList ( uint256 ) external view returns ( address );\\r\\n    function tokenAddressToSymbol ( address ) external view returns ( bytes32 );\\r\\n    function tokenToStatus ( address ) external view returns ( uint256 );\\r\\n    function transferOwnership ( address newOwner ) external;\\r\\n}\",\"keccak256\":\"0x11244baa1d2c247ef14bf9c7fbb6e447d405f2020df59293cf1cd88b012e3f06\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\r\\n\\r\\n/**\\r\\n * @dev Library for managing an enumerable variant of Solidity's\\r\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\r\\n * type.\\r\\n *\\r\\n * Maps have the following properties:\\r\\n *\\r\\n * - Entries are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n */\\r\\nlibrary EnumerableMap {\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Map type with\\r\\n    // bytes32 keys and values.\\r\\n    // The Map implementation uses private functions, and user-facing\\r\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\r\\n    // the underlying Map.\\r\\n    // This means that we can only create new EnumerableMaps for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Map {\\r\\n        // Storage of keys\\r\\n        EnumerableSet.Bytes32Set _keys;\\r\\n        mapping(bytes32 => bytes32) _values;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _set(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        bytes32 value\\r\\n    ) private returns (bool) {\\r\\n        map._values[key] = value;\\r\\n        return map._keys.add(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a key-value pair from a map. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\r\\n        delete map._values[key];\\r\\n        return map._keys.remove(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\r\\n        return map._keys.contains(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\r\\n     */\\r\\n    function _length(Map storage map) private view returns (uint256) {\\r\\n        return map._keys.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of entries inside the\\r\\n     * array, and it may change when more entries are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\r\\n        bytes32 key = map._keys.at(index);\\r\\n        return (key, map._values[key]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     */\\r\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        if (value == bytes32(0)) {\\r\\n            return (_contains(map, key), bytes32(0));\\r\\n        } else {\\r\\n            return (true, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\r\\n     */\\r\\n    function _get(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), errorMessage);\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    // Bytes32ToAddressMap\\r\\n\\r\\n    struct Bytes32ToAddressMap {\\r\\n        Map _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function set(\\r\\n        Bytes32ToAddressMap storage map,\\r\\n        bytes32 key,\\r\\n        address value\\r\\n    ) internal returns (bool) {\\r\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\r\\n        return _remove(map._inner, key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\r\\n        return _contains(map._inner, key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of elements in the map. O(1).\\r\\n     */\\r\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\r\\n        return _length(map._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\r\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\r\\n        return (key, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\r\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\r\\n        return (success, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, key))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\r\\n     */\\r\\n    function get(\\r\\n        Bytes32ToAddressMap storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c9de7c7f3406d29dc518366c68a88cb29aaf36907b95422cceac140959c2463\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\r\\n\\r\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\r\\n// The loupe functions are required by the EIP2535 Diamonds standard\\r\\n\\r\\nlibrary DiamondStorageLib {\\r\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\r\\n\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n    bytes32 constant LIQUIDATION_STORAGE_POSITION = keccak256(\\\"diamond.standard.liquidation.storage\\\");\\r\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\r\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\r\\n\\r\\n    struct FacetAddressAndPosition {\\r\\n        address facetAddress;\\r\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\r\\n    }\\r\\n\\r\\n    struct FacetFunctionSelectors {\\r\\n        bytes4[] functionSelectors;\\r\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\r\\n    }\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\r\\n        // maps function selector to the facet address and\\r\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\r\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\r\\n        // maps facet addresses to function selectors\\r\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\r\\n        // facet addresses\\r\\n        address[] facetAddresses;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // Used to select methods that can be executed even when Diamond is paused\\r\\n        mapping(bytes4 => bool) canBeExecutedWhenPaused;\\r\\n\\r\\n        bool _initialized;\\r\\n        bool _active;\\r\\n\\r\\n        uint256 _lastBorrowTimestamp;\\r\\n    }\\r\\n\\r\\n    struct SmartLoanStorage {\\r\\n        // PauseAdmin has the power to pause/unpause the contract without the timelock delay in case of a critical bug/exploit\\r\\n        address pauseAdmin;\\r\\n        // Owner of the contract\\r\\n        address contractOwner;\\r\\n        // Proposed owner of the contract\\r\\n        address proposedOwner;\\r\\n        // Proposed pauseAdmin of the contract\\r\\n        address proposedPauseAdmin;\\r\\n        // Is contract initialized?\\r\\n        bool _initialized;\\r\\n        // TODO: mock staking tokens until redstone oracle supports them\\r\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\r\\n        // Staked positions of the contract\\r\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\r\\n    }\\r\\n\\r\\n    struct LiquidationStorage {\\r\\n        // Mapping controlling addresses that can execute the liquidation methods\\r\\n        mapping(address=>bool) canLiquidate;\\r\\n    }\\r\\n\\r\\n    struct ReentrancyGuardStorage {\\r\\n        uint256 _status;\\r\\n    }\\r\\n\\r\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\r\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            rgs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function liquidationStorage() internal pure returns (LiquidationStorage storage ls) {\\r\\n        bytes32 position = LIQUIDATION_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ls.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\r\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            sls.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    event PauseAdminOwnershipTransferred(address indexed previousPauseAdmin, address indexed newPauseAdmin);\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        address previousOwner = sls.contractOwner;\\r\\n        sls.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function setContractPauseAdmin(address _newPauseAdmin) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        address previousPauseAdmin = sls.pauseAdmin;\\r\\n        sls.pauseAdmin = _newPauseAdmin;\\r\\n        emit PauseAdminOwnershipTransferred(previousPauseAdmin, _newPauseAdmin);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = smartLoanStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function pauseAdmin() internal view returns (address pauseAdmin) {\\r\\n        pauseAdmin = smartLoanStorage().pauseAdmin;\\r\\n    }\\r\\n\\r\\n    function setProposedOwner(address _newOwner) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        sls.proposedOwner = _newOwner;\\r\\n    }\\r\\n\\r\\n    function setProposedPauseAdmin(address _newPauseAdmin) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        sls.proposedPauseAdmin = _newPauseAdmin;\\r\\n    }\\r\\n\\r\\n    function getPausedMethodExemption(bytes4 _methodSig) internal view returns (bool) {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        return ds.canBeExecutedWhenPaused[_methodSig];\\r\\n    }\\r\\n\\r\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\r\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\r\\n    }\\r\\n\\r\\n    function proposedPauseAdmin() internal view returns (address proposedPauseAdmin) {\\r\\n        proposedPauseAdmin = smartLoanStorage().proposedPauseAdmin;\\r\\n    }\\r\\n\\r\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\r\\n        _positions = smartLoanStorage().currentStakedPositions;\\r\\n    }\\r\\n\\r\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\r\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\r\\n\\r\\n        bool found;\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            if (positions[i].identifier == position.identifier) {\\r\\n                found = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!found) {\\r\\n            positions.push(position);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeStakedPosition(bytes32 identifier) internal {\\r\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            if (positions[i].identifier == identifier) {\\r\\n                positions[i] = positions[positions.length - 1];\\r\\n                positions.pop();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\r\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\r\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\r\\n    }\\r\\n\\r\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        return sls.ownedAssets.contains(_symbol);\\r\\n    }\\r\\n\\r\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\r\\n    }\\r\\n\\r\\n    function enforceIsPauseAdmin() internal view {\\r\\n        require(msg.sender == smartLoanStorage().pauseAdmin, \\\"DiamondStorageLib: Must be contract pauseAdmin\\\");\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\r\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\r\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\r\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\r\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\r\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else {\\r\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\r\\n            }\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        // if function does not exist then do nothing and return\\r\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\r\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\r\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\r\\n        ds.facetAddresses.push(_facetAddress);\\r\\n    }\\r\\n\\r\\n\\r\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\r\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\r\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\r\\n    }\\r\\n\\r\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\r\\n        // an immutable function is a function defined directly in a diamond\\r\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\r\\n        // replace selector with last selector, then delete last selector\\r\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\r\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\r\\n        // if not the same then replace _selector with lastSelector\\r\\n        if (selectorPosition != lastSelectorPosition) {\\r\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\r\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\r\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\r\\n        }\\r\\n        // delete the last selector\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\r\\n        delete ds.selectorToFacetAndPosition[_selector];\\r\\n\\r\\n        // if no more selectors for facet address then delete the facet address\\r\\n        if (lastSelectorPosition == 0) {\\r\\n            // replace facet address with last facet address and delete last facet address\\r\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\r\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\r\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\r\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\r\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\r\\n            }\\r\\n            ds.facetAddresses.pop();\\r\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (_init == address(0)) {\\r\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\r\\n        } else {\\r\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\r\\n            if (_init != address(this)) {\\r\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\r\\n            }\\r\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n            if (!success) {\\r\\n                if (error.length > 0) {\\r\\n                    // bubble up the error\\r\\n                    revert(string(error));\\r\\n                } else {\\r\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\r\\n        uint256 contractSize;\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4b0e53f952c3f8716cdda77a08f22018249081a9d450a1d51510b0a24f77e237\",\"license\":\"MIT\"},\"contracts/lib/avalanche/DeploymentConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../../interfaces/ITokenManager.sol\\\";\\r\\nimport {DiamondStorageLib} from \\\"../../lib/DiamondStorageLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * DeploymentConstants\\r\\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\\r\\n * to decrease gas costs. Not meant to be updated unless really necessary.\\r\\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\\r\\n **/\\r\\nlibrary DeploymentConstants {\\r\\n\\r\\n    // Used for LiquidationBonus calculations\\r\\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\\r\\n\\r\\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\\r\\n\\r\\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\r\\n\\r\\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x2916B3bf7C35bd21e63D01C93C62FB0d4994e56D;\\r\\n\\r\\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x3Ea9D480295A73fd2aF95b4D96c2afF88b21B03D;\\r\\n\\r\\n    address private constant _TOKEN_MANAGER_ADDRESS = 0xF3978209B7cfF2b90100C6F87CEC77dE928Ed58e;\\r\\n\\r\\n    //implementation-specific\\r\\n\\r\\n    function getPercentagePrecision() internal pure returns (uint256) {\\r\\n        return _PERCENTAGE_PRECISION;\\r\\n    }\\r\\n\\r\\n    //blockchain-specific\\r\\n\\r\\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\\r\\n        return _NATIVE_TOKEN_SYMBOL;\\r\\n    }\\r\\n\\r\\n    function getNativeToken() internal pure returns (address payable) {\\r\\n        return payable(_NATIVE_ADDRESS);\\r\\n    }\\r\\n\\r\\n    //deployment-specific\\r\\n\\r\\n    function getDiamondAddress() internal pure returns (address) {\\r\\n        return _DIAMOND_BEACON_ADDRESS;\\r\\n    }\\r\\n\\r\\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\\r\\n        return _SMART_LOANS_FACTORY_ADDRESS;\\r\\n    }\\r\\n\\r\\n    function getTokenManager() internal pure returns (ITokenManager) {\\r\\n        return ITokenManager(_TOKEN_MANAGER_ADDRESS);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Returns all owned assets keys\\r\\n    **/\\r\\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\\r\\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\\r\\n        return sls.ownedAssets._inner._keys._inner._values;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf019b3600c687707821c088c11c02df81e157e4e0c66827ce4c3ac66aba0bf9f\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061122e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b1c9fbc11461003b578063e017e12514610045575b600080fd5b61004361004f565b005b61004d6105e4565b005b6000610059610b79565b90506000610065610bec565b90506000610071610bfe565b905060005b83518110156102c65760008273ffffffffffffffffffffffffffffffffffffffff166325eb876f8684815181106100b0576100af610c47565b5b602002602001015160016040518363ffffffff1660e01b81526004016100d7929190610caa565b602060405180830381865afa1580156100f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101189190610d36565b90508273ffffffffffffffffffffffffffffffffffffffff1663adfe6a0f86848151811061014957610148610c47565b5b60200260200101518373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561019c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c09190610d9c565b600a6101cc9190610f35565b670de0b6b3a76400008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161020e9190610f8f565b602060405180830381865afa15801561022b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024f9190610fd6565b6102599190611003565b6102639190611074565b6040518363ffffffff1660e01b81526004016102809291906110b4565b600060405180830381600087803b15801561029a57600080fd5b505af11580156102ae573d6000803e3d6000fd5b505050505080806102be906110dd565b915050610076565b5060005b82805490508110156105de576000803073ffffffffffffffffffffffffffffffffffffffff1685848154811061030357610302610c47565b5b906000526020600020906004020160030160009054906101000a900460e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103929190611196565b600060405180830381855afa9150503d80600081146103cd576040519150601f19603f3d011682016040523d82523d6000602084013e6103d2565b606091505b509150915081156105c9576000818060200190518101906103f39190610fd6565b905060008573ffffffffffffffffffffffffffffffffffffffff166325eb876f88878154811061042657610425610c47565b5b90600052602060002090600402016001015460016040518363ffffffff1660e01b8152600401610457929190610caa565b602060405180830381865afa158015610474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104989190610d36565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105069190610d9c565b60ff1690508573ffffffffffffffffffffffffffffffffffffffff1663adfe6a0f88878154811061053a57610539610c47565b5b90600052602060002090600402016002015483600a61055991906111ad565b670de0b6b3a76400008661056d9190611003565b6105779190611074565b6040518363ffffffff1660e01b81526004016105949291906110b4565b600060405180830381600087803b1580156105ae57600080fd5b505af11580156105c2573d6000803e3d6000fd5b5050505050505b505080806105d6906110dd565b9150506102ca565b50505050565b60006105ee610b79565b905060006105fa610bec565b90506000610606610bfe565b905060005b835181101561085b5760008273ffffffffffffffffffffffffffffffffffffffff166325eb876f86848151811061064557610644610c47565b5b602002602001015160016040518363ffffffff1660e01b815260040161066c929190610caa565b602060405180830381865afa158015610689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ad9190610d36565b90508273ffffffffffffffffffffffffffffffffffffffff1663c3cc6c7a8684815181106106de576106dd610c47565b5b60200260200101518373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610731573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107559190610d9c565b600a6107619190610f35565b670de0b6b3a76400008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107a39190610f8f565b602060405180830381865afa1580156107c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e49190610fd6565b6107ee9190611003565b6107f89190611074565b6040518363ffffffff1660e01b81526004016108159291906110b4565b600060405180830381600087803b15801561082f57600080fd5b505af1158015610843573d6000803e3d6000fd5b50505050508080610853906110dd565b91505061060b565b5060005b8280549050811015610b73576000803073ffffffffffffffffffffffffffffffffffffffff1685848154811061089857610897610c47565b5b906000526020600020906004020160030160009054906101000a900460e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516109279190611196565b600060405180830381855afa9150503d8060008114610962576040519150601f19603f3d011682016040523d82523d6000602084013e610967565b606091505b50915091508115610b5e576000818060200190518101906109889190610fd6565b905060008573ffffffffffffffffffffffffffffffffffffffff166325eb876f8887815481106109bb576109ba610c47565b5b90600052602060002090600402016001015460016040518363ffffffff1660e01b81526004016109ec929190610caa565b602060405180830381865afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190610d36565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9b9190610d9c565b60ff1690508573ffffffffffffffffffffffffffffffffffffffff1663c3cc6c7a888781548110610acf57610ace610c47565b5b90600052602060002090600402016002015483600a610aee91906111ad565b670de0b6b3a764000086610b029190611003565b610b0c9190611074565b6040518363ffffffff1660e01b8152600401610b299291906110b4565b600060405180830381600087803b158015610b4357600080fd5b505af1158015610b57573d6000803e3d6000fd5b5050505050505b50508080610b6b906110dd565b91505061085f565b50505050565b60606000610b85610c1a565b905080600401600001600001600001600001805480602002602001604051908101604052809291908181526020018280548015610be157602002820191906000526020600020905b815481526020019060010190808311610bcd575b505050505091505090565b6000610bf6610c1a565b600701905090565b600073f3978209b7cff2b90100c6f87cec77de928ed58e905090565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b610c8981610c76565b82525050565b60008115159050919050565b610ca481610c8f565b82525050565b6000604082019050610cbf6000830185610c80565b610ccc6020830184610c9b565b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d0382610cd8565b9050919050565b610d1381610cf8565b8114610d1e57600080fd5b50565b600081519050610d3081610d0a565b92915050565b600060208284031215610d4c57610d4b610cd3565b5b6000610d5a84828501610d21565b91505092915050565b600060ff82169050919050565b610d7981610d63565b8114610d8457600080fd5b50565b600081519050610d9681610d70565b92915050565b600060208284031215610db257610db1610cd3565b5b6000610dc084828501610d87565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610e4f57808604811115610e2b57610e2a610dc9565b5b6001851615610e3a5780820291505b8081029050610e4885610df8565b9450610e0f565b94509492505050565b600082610e685760019050610f24565b81610e765760009050610f24565b8160018114610e8c5760028114610e9657610ec5565b6001915050610f24565b60ff841115610ea857610ea7610dc9565b5b8360020a915084821115610ebf57610ebe610dc9565b5b50610f24565b5060208310610133831016604e8410600b8410161715610efa5782820a905083811115610ef557610ef4610dc9565b5b610f24565b610f078484846001610e05565b92509050818404811115610f1e57610f1d610dc9565b5b81810290505b9392505050565b6000819050919050565b6000610f4082610f2b565b9150610f4b83610d63565b9250610f787fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610e58565b905092915050565b610f8981610cf8565b82525050565b6000602082019050610fa46000830184610f80565b92915050565b610fb381610f2b565b8114610fbe57600080fd5b50565b600081519050610fd081610faa565b92915050565b600060208284031215610fec57610feb610cd3565b5b6000610ffa84828501610fc1565b91505092915050565b600061100e82610f2b565b915061101983610f2b565b925082820261102781610f2b565b9150828204841483151761103e5761103d610dc9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061107f82610f2b565b915061108a83610f2b565b92508261109a57611099611045565b5b828204905092915050565b6110ae81610f2b565b82525050565b60006040820190506110c96000830185610c80565b6110d660208301846110a5565b9392505050565b60006110e882610f2b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361111a57611119610dc9565b5b600182019050919050565b600081519050919050565b600081905092915050565b60005b8381101561115957808201518184015260208101905061113e565b60008484015250505050565b600061117082611125565b61117a8185611130565b935061118a81856020860161113b565b80840191505092915050565b60006111a28284611165565b915081905092915050565b60006111b882610f2b565b91506111c383610f2b565b92506111f07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610e58565b90509291505056fea2646970667358221220e634962e28811c6f212b804c7ac2950a76a8dc2e1c5dd42ac273fe767afd206e64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063b1c9fbc11461003b578063e017e12514610045575b600080fd5b61004361004f565b005b61004d6105e4565b005b6000610059610b79565b90506000610065610bec565b90506000610071610bfe565b905060005b83518110156102c65760008273ffffffffffffffffffffffffffffffffffffffff166325eb876f8684815181106100b0576100af610c47565b5b602002602001015160016040518363ffffffff1660e01b81526004016100d7929190610caa565b602060405180830381865afa1580156100f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101189190610d36565b90508273ffffffffffffffffffffffffffffffffffffffff1663adfe6a0f86848151811061014957610148610c47565b5b60200260200101518373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561019c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c09190610d9c565b600a6101cc9190610f35565b670de0b6b3a76400008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161020e9190610f8f565b602060405180830381865afa15801561022b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024f9190610fd6565b6102599190611003565b6102639190611074565b6040518363ffffffff1660e01b81526004016102809291906110b4565b600060405180830381600087803b15801561029a57600080fd5b505af11580156102ae573d6000803e3d6000fd5b505050505080806102be906110dd565b915050610076565b5060005b82805490508110156105de576000803073ffffffffffffffffffffffffffffffffffffffff1685848154811061030357610302610c47565b5b906000526020600020906004020160030160009054906101000a900460e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103929190611196565b600060405180830381855afa9150503d80600081146103cd576040519150601f19603f3d011682016040523d82523d6000602084013e6103d2565b606091505b509150915081156105c9576000818060200190518101906103f39190610fd6565b905060008573ffffffffffffffffffffffffffffffffffffffff166325eb876f88878154811061042657610425610c47565b5b90600052602060002090600402016001015460016040518363ffffffff1660e01b8152600401610457929190610caa565b602060405180830381865afa158015610474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104989190610d36565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105069190610d9c565b60ff1690508573ffffffffffffffffffffffffffffffffffffffff1663adfe6a0f88878154811061053a57610539610c47565b5b90600052602060002090600402016002015483600a61055991906111ad565b670de0b6b3a76400008661056d9190611003565b6105779190611074565b6040518363ffffffff1660e01b81526004016105949291906110b4565b600060405180830381600087803b1580156105ae57600080fd5b505af11580156105c2573d6000803e3d6000fd5b5050505050505b505080806105d6906110dd565b9150506102ca565b50505050565b60006105ee610b79565b905060006105fa610bec565b90506000610606610bfe565b905060005b835181101561085b5760008273ffffffffffffffffffffffffffffffffffffffff166325eb876f86848151811061064557610644610c47565b5b602002602001015160016040518363ffffffff1660e01b815260040161066c929190610caa565b602060405180830381865afa158015610689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ad9190610d36565b90508273ffffffffffffffffffffffffffffffffffffffff1663c3cc6c7a8684815181106106de576106dd610c47565b5b60200260200101518373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610731573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107559190610d9c565b600a6107619190610f35565b670de0b6b3a76400008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107a39190610f8f565b602060405180830381865afa1580156107c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e49190610fd6565b6107ee9190611003565b6107f89190611074565b6040518363ffffffff1660e01b81526004016108159291906110b4565b600060405180830381600087803b15801561082f57600080fd5b505af1158015610843573d6000803e3d6000fd5b50505050508080610853906110dd565b91505061060b565b5060005b8280549050811015610b73576000803073ffffffffffffffffffffffffffffffffffffffff1685848154811061089857610897610c47565b5b906000526020600020906004020160030160009054906101000a900460e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516109279190611196565b600060405180830381855afa9150503d8060008114610962576040519150601f19603f3d011682016040523d82523d6000602084013e610967565b606091505b50915091508115610b5e576000818060200190518101906109889190610fd6565b905060008573ffffffffffffffffffffffffffffffffffffffff166325eb876f8887815481106109bb576109ba610c47565b5b90600052602060002090600402016001015460016040518363ffffffff1660e01b81526004016109ec929190610caa565b602060405180830381865afa158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190610d36565b73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9b9190610d9c565b60ff1690508573ffffffffffffffffffffffffffffffffffffffff1663c3cc6c7a888781548110610acf57610ace610c47565b5b90600052602060002090600402016002015483600a610aee91906111ad565b670de0b6b3a764000086610b029190611003565b610b0c9190611074565b6040518363ffffffff1660e01b8152600401610b299291906110b4565b600060405180830381600087803b158015610b4357600080fd5b505af1158015610b57573d6000803e3d6000fd5b5050505050505b50508080610b6b906110dd565b91505061085f565b50505050565b60606000610b85610c1a565b905080600401600001600001600001600001805480602002602001604051908101604052809291908181526020018280548015610be157602002820191906000526020600020905b815481526020019060010190808311610bcd575b505050505091505090565b6000610bf6610c1a565b600701905090565b600073f3978209b7cff2b90100c6f87cec77de928ed58e905090565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b610c8981610c76565b82525050565b60008115159050919050565b610ca481610c8f565b82525050565b6000604082019050610cbf6000830185610c80565b610ccc6020830184610c9b565b9392505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d0382610cd8565b9050919050565b610d1381610cf8565b8114610d1e57600080fd5b50565b600081519050610d3081610d0a565b92915050565b600060208284031215610d4c57610d4b610cd3565b5b6000610d5a84828501610d21565b91505092915050565b600060ff82169050919050565b610d7981610d63565b8114610d8457600080fd5b50565b600081519050610d9681610d70565b92915050565b600060208284031215610db257610db1610cd3565b5b6000610dc084828501610d87565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115610e4f57808604811115610e2b57610e2a610dc9565b5b6001851615610e3a5780820291505b8081029050610e4885610df8565b9450610e0f565b94509492505050565b600082610e685760019050610f24565b81610e765760009050610f24565b8160018114610e8c5760028114610e9657610ec5565b6001915050610f24565b60ff841115610ea857610ea7610dc9565b5b8360020a915084821115610ebf57610ebe610dc9565b5b50610f24565b5060208310610133831016604e8410600b8410161715610efa5782820a905083811115610ef557610ef4610dc9565b5b610f24565b610f078484846001610e05565b92509050818404811115610f1e57610f1d610dc9565b5b81810290505b9392505050565b6000819050919050565b6000610f4082610f2b565b9150610f4b83610d63565b9250610f787fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610e58565b905092915050565b610f8981610cf8565b82525050565b6000602082019050610fa46000830184610f80565b92915050565b610fb381610f2b565b8114610fbe57600080fd5b50565b600081519050610fd081610faa565b92915050565b600060208284031215610fec57610feb610cd3565b5b6000610ffa84828501610fc1565b91505092915050565b600061100e82610f2b565b915061101983610f2b565b925082820261102781610f2b565b9150828204841483151761103e5761103d610dc9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061107f82610f2b565b915061108a83610f2b565b92508261109a57611099611045565b5b828204905092915050565b6110ae81610f2b565b82525050565b60006040820190506110c96000830185610c80565b6110d660208301846110a5565b9392505050565b60006110e882610f2b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361111a57611119610dc9565b5b600182019050919050565b600081519050919050565b600081905092915050565b60005b8381101561115957808201518184015260208101905061113e565b60008484015250505050565b600061117082611125565b61117a8185611130565b935061118a81856020860161113b565b80840191505092915050565b60006111a28284611165565b915081905092915050565b60006111b882610f2b565b91506111c383610f2b565b92506111f07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610e58565b90509291505056fea2646970667358221220e634962e28811c6f212b804c7ac2950a76a8dc2e1c5dd42ac273fe767afd206e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}