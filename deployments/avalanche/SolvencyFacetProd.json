{
  "address": "0x5550b29bEC7FbdF545E41895CD1732b5687205bb",
  "abi": [
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanNotPickMedianOfEmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receviedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TimestampFromTooLongFuture",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TimestampIsTooOld",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct SolvencyFacetProd.AssetPrice[]",
          "name": "ownedAssetsPrices",
          "type": "tuple[]"
        }
      ],
      "name": "_getTotalAssetsValueBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "aggregateValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canRepayDebtFully",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "assetsToRepay",
          "type": "bytes32[]"
        }
      ],
      "name": "getAllPricesForLiquidation",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "ownedAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "debtAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "stakedPositionsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "assetsToRepayPrices",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SolvencyFacetProd.CachedPrices",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        }
      ],
      "name": "getAuthorisedSignerIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebtAssets",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "result",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebtAssetsPrices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct SolvencyFacetProd.AssetPrice[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct SolvencyFacetProd.AssetPrice[]",
          "name": "debtAssetsPrices",
          "type": "tuple[]"
        }
      ],
      "name": "getDebtWithPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFullLoanStatus",
      "outputs": [
        {
          "internalType": "uint256[5]",
          "name": "",
          "type": "uint256[5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHealthRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "ownedAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "debtAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "stakedPositionsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "assetsToRepayPrices",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SolvencyFacetProd.CachedPrices",
          "name": "cachedPrices",
          "type": "tuple"
        }
      ],
      "name": "getHealthRatioWithPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnedAssetsWithNative",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnedAssetsWithNativePrices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct SolvencyFacetProd.AssetPrice[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "symbol",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "symbols",
          "type": "bytes32[]"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakedPositionsPrices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct SolvencyFacetProd.AssetPrice[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct SolvencyFacetProd.AssetPrice[]",
          "name": "stakedPositionsPrices",
          "type": "tuple[]"
        }
      ],
      "name": "getStakedValueWithPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getThresholdWeightedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct SolvencyFacetProd.AssetPrice[]",
          "name": "ownedAssetsPrices",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct SolvencyFacetProd.AssetPrice[]",
          "name": "stakedPositionsPrices",
          "type": "tuple[]"
        }
      ],
      "name": "getThresholdWeightedValueWithPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalAssetsValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct SolvencyFacetProd.AssetPrice[]",
          "name": "ownedAssetsPrices",
          "type": "tuple[]"
        }
      ],
      "name": "getTotalAssetsValueWithPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct SolvencyFacetProd.AssetPrice[]",
          "name": "ownedAssetsPrices",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct SolvencyFacetProd.AssetPrice[]",
          "name": "stakedPositionsPrices",
          "type": "tuple[]"
        }
      ],
      "name": "getTotalValueWithPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniqueSignersThreshold",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSolvent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "ownedAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "debtAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "stakedPositionsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "assetsToRepayPrices",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SolvencyFacetProd.CachedPrices",
          "name": "cachedPrices",
          "type": "tuple"
        }
      ],
      "name": "isSolventWithPrices",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampMilliseconds",
          "type": "uint256"
        }
      ],
      "name": "validateTimestamp",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc26f33191167b8742d82356333329ac356483a44a4327228b13fccbdfe9a5032",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x5550b29bEC7FbdF545E41895CD1732b5687205bb",
    "transactionIndex": 0,
    "gasUsed": "4788434",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0155a9ebdf03f8107e35b28945595593a7ad654cef5ee5016ab98b3ed93fc31f",
    "transactionHash": "0xc26f33191167b8742d82356333329ac356483a44a4327228b13fccbdfe9a5032",
    "logs": [],
    "blockNumber": 23296790,
    "cumulativeGasUsed": "4788434",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "05ee65db08456d97a7c820b4007dca51",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotPickMedianOfEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receviedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"TimestampFromTooLongFuture\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"TimestampIsTooOld\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"}],\"name\":\"_getTotalAssetsValueBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"aggregateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canRepayDebtFully\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"assetsToRepay\",\"type\":\"bytes32[]\"}],\"name\":\"getAllPricesForLiquidation\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"assetsToRepayPrices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SolvencyFacetProd.CachedPrices\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"getAuthorisedSignerIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtAssets\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"result\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtAssetsPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"}],\"name\":\"getDebtWithPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFullLoanStatus\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHealthRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"assetsToRepayPrices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SolvencyFacetProd.CachedPrices\",\"name\":\"cachedPrices\",\"type\":\"tuple\"}],\"name\":\"getHealthRatioWithPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnedAssetsWithNative\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnedAssetsWithNativePrices\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"symbols\",\"type\":\"bytes32[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedPositionsPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"}],\"name\":\"getStakedValueWithPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThresholdWeightedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"}],\"name\":\"getThresholdWeightedValueWithPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAssetsValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"}],\"name\":\"getTotalAssetsValueWithPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"}],\"name\":\"getTotalValueWithPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniqueSignersThreshold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"assetsToRepayPrices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SolvencyFacetProd.CachedPrices\",\"name\":\"cachedPrices\",\"type\":\"tuple\"}],\"name\":\"isSolventWithPrices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampMilliseconds\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"aggregateValues(uint256[])\":{\"details\":\"This function may be overriden by the child consumer contract. It should aggregate values from different signers to a single uint value. By default, it calculates the median value\",\"params\":{\"values\":\"An array of uint256 values from different signers\"},\"returns\":{\"_0\":\"Result of the aggregation in the form of a single number\"}},\"getAllPricesForLiquidation(bytes32[])\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getDebt()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getDebtAssetsPrices()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getHealthRatio()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getOwnedAssetsWithNativePrices()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getPrice(bytes32)\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getPrices(bytes32[])\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getStakedPositionsPrices()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getStakedValue()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getThresholdWeightedValue()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getTotalAssetsValue()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getTotalValue()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getUniqueSignersThreshold()\":{\"details\":\"This function should be overriden by the child consumer contract.\",\"returns\":{\"_0\":\"The minimum required value of unique authorised signers\"}},\"isSolvent()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"isSolventWithPrices(((bytes32,uint256)[],(bytes32,uint256)[],(bytes32,uint256)[],(bytes32,uint256)[]))\":{\"params\":{\"cachedPrices\":\"Struct containing arrays of Asset/Price structs used to calculate value of owned assets, debt and staked positions*\"}},\"validateTimestamp(uint256)\":{\"details\":\"This function may be overriden by the child consumer contract. It should validate the timestamp against the current time (block.timestamp) It should revert with a helpful message if the timestamp is not valid\",\"params\":{\"receivedTimestampMilliseconds\":\"Timestamp extracted from calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_getTotalAssetsValueBase((bytes32,uint256)[])\":{\"notice\":\"Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.*\"},\"getAllPricesForLiquidation(bytes32[])\":{\"notice\":\"Returns CachedPrices struct consisting of Asset/Price arrays for ownedAssets, debtAssets, stakedPositions and assetsToRepay. Used during the liquidation process in order to obtain all necessary prices from calldata only once.\"},\"getDebt()\":{\"notice\":\"Returns the current debt denominated in USD\"},\"getDebtAssets()\":{\"notice\":\"Returns an array of bytes32[] symbols of debt (borrowable) assets.*\"},\"getDebtAssetsPrices()\":{\"notice\":\"Returns an array of Asset/Price structs of debt (borrowable) assets.\"},\"getDebtWithPrices((bytes32,uint256)[])\":{\"notice\":\"Returns the current debt denominated in USD Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.*\"},\"getHealthRatio()\":{\"notice\":\"Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided by current debt\"},\"getHealthRatioWithPrices(((bytes32,uint256)[],(bytes32,uint256)[],(bytes32,uint256)[],(bytes32,uint256)[]))\":{\"notice\":\"Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided by current debt Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.*\"},\"getOwnedAssetsWithNative()\":{\"notice\":\"Returns list of owned assets that always included NativeToken at index 0*\"},\"getOwnedAssetsWithNativePrices()\":{\"notice\":\"Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets.\"},\"getPrice(bytes32)\":{\"notice\":\"Helper method exposing the redstone-evm-connector getOracleNumericValueFromTxMsg() method.\"},\"getPrices(bytes32[])\":{\"notice\":\"Helper method exposing the redstone-evm-connector getOracleNumericValuesFromTxMsg() method.\"},\"getStakedPositionsPrices()\":{\"notice\":\"Returns an array of Asset/Price structs of staked positions.\"},\"getStakedValue()\":{\"notice\":\"Returns the current value of staked positions in USD.\"},\"getStakedValueWithPrices((bytes32,uint256)[])\":{\"notice\":\"Returns the current value of staked positions in USD. Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.*\"},\"getThresholdWeightedValue()\":{\"notice\":\"Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\"},\"getThresholdWeightedValueWithPrices((bytes32,uint256)[],(bytes32,uint256)[])\":{\"notice\":\"Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.*\"},\"getTotalAssetsValue()\":{\"notice\":\"Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\"},\"getTotalAssetsValueWithPrices((bytes32,uint256)[])\":{\"notice\":\"Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.*\"},\"getTotalValue()\":{\"notice\":\"Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\"},\"getTotalValueWithPrices((bytes32,uint256)[],(bytes32,uint256)[])\":{\"notice\":\"Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.*\"},\"isSolvent()\":{\"notice\":\"Checks if the loan is solvent. It means that the Health Ratio is greater than 1e18.\"},\"isSolventWithPrices(((bytes32,uint256)[],(bytes32,uint256)[],(bytes32,uint256)[],(bytes32,uint256)[]))\":{\"notice\":\"Checks if the loan is solvent. It means that the Health Ratio is greater than 1e18. Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/SolvencyFacetProd.sol\":\"SolvencyFacetProd\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n  using SafeMath for uint256;\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSGINED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return dataPackagesCount;\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 calldataNegativeOffsetForDataPackage,\\n    uint256 defaultDataPointValueByteSize,\\n    uint256 dataPointIndex\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\\n    );\\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0xa96eced2521c637867c670f7f86f3a719e40f210d8a802124f322876bdf013df\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSGINED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receviedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n}\\n\",\"keccak256\":\"0xc9a73986f5a12a28f74d98e8f028ca47c79909f317a38be02820e421d0723b30\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./RedstoneDefaultsLib.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\nimport \\\"../libs/BitmapLib.sol\\\";\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n/**\\n * @title The base contract with the main Redstone logic\\n * @author The Redstone Oracles team\\n * @dev Do not use this contract directly in consumer contracts, take a\\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\\n */\\nabstract contract RedstoneConsumerBase is CalldataExtractor {\\n  using SafeMath for uint256;\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return a unique index for a given signer address if the signer\\n   * is authorised, otherwise it should revert\\n   * @param receviedSigner The address of a signer, recovered from ECDSA signature\\n   * @return Unique index for a signer in the range [0..255]\\n   */\\n  function getAuthorisedSignerIndex(address receviedSigner) public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overriden by the child consumer contract.\\n   * It should validate the timestamp against the current time (block.timestamp)\\n   * It should revert with a helpful message if the timestamp is not valid\\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n  }\\n\\n  /**\\n   * @dev This function should be overriden by the child consumer contract.\\n   * @return The minimum required value of unique authorised signers\\n   */\\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev This function may be overriden by the child consumer contract.\\n   * It should aggregate values from different signers to a single uint value.\\n   * By default, it calculates the median value\\n   * @param values An array of uint256 values from different signers\\n   * @return Result of the aggregation in the form of a single number\\n   */\\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\\n    return RedstoneDefaultsLib.aggregateValues(values);\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  /**\\n   * @dev This is an internal helpful function for secure extraction oracle values\\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\\n   * validation, and aggregating values from different authorised signers into a\\n   * single numeric value. If any of the required conditions (e.g. too old timestamp or\\n   * insufficient number of autorised signers) do not match, the function will revert.\\n   *\\n   * Note! You should not call this function in a consumer contract. You can use\\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n   *\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in dataFeedIds array\\n   */\\n  function _securelyExtractOracleValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    // Initializing helpful variables and allocating memory\\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n    for (uint256 i = 0; i < dataFeedIds.length; i++) {\\n      // The line below is commented because newly allocated arrays are filled with zeros\\n      // But we left it for better readability\\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\\n    }\\n\\n    // Extracting the number of data packages from calldata\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n\\n    // Saving current free memory pointer\\n    uint256 freeMemPtr;\\n    assembly {\\n      freeMemPtr := mload(FREE_MEMORY_PTR)\\n    }\\n\\n    // Data packages extraction in a loop\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      // Extract data package details and update calldata offset\\n      uint256 dataPackageByteSize = _extractDataPackage(\\n        dataFeedIds,\\n        uniqueSignerCountForDataFeedIds,\\n        signersBitmapForDataFeedIds,\\n        valuesForDataFeeds,\\n        calldataNegativeOffset\\n      );\\n      calldataNegativeOffset += dataPackageByteSize;\\n\\n      // Shifting memory pointer back to the \\\"safe\\\" value\\n      assembly {\\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\\n      }\\n    }\\n\\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n    return _getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which extracts data for a data package based\\n   * on the given negative calldata offset, verifies them, and in the case of successful\\n   * verification updates the corresponding data package values in memory\\n   *\\n   * @param dataFeedIds an array of unique data feed identifiers\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   * @param signersBitmapForDataFeedIds an array of sginers bitmaps for data feeds\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param calldataNegativeOffset negative calldata offset for the given data package\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _extractDataPackage(\\n    bytes32[] memory dataFeedIds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds,\\n    uint256[] memory signersBitmapForDataFeedIds,\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256 calldataNegativeOffset\\n  ) private view returns (uint256) {\\n    uint256 signerIndex;\\n\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    // We use scopes to resolve problem with too deep stack\\n    {\\n      uint48 extractedTimestamp;\\n      address signerAddress;\\n      bytes32 signedHash;\\n      bytes memory signedMessage;\\n      uint256 signedMessageBytesCount;\\n\\n      signedMessageBytesCount = dataPointsCount.mul(eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS;\\n\\n      uint256 timestampCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n\\n      uint256 signedMessageCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\\n\\n      assembly {\\n        // Extracting the signed message\\n        signedMessage := extractBytesFromCalldata(\\n          signedMessageCalldataOffset,\\n          signedMessageBytesCount\\n        )\\n\\n        // Hashing the signed message\\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n        // Extracting timestamp\\n        extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n        function initByteArray(bytesCount) -> ptr {\\n          ptr := mload(FREE_MEMORY_PTR)\\n          mstore(ptr, bytesCount)\\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n        }\\n\\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n          let extractedBytesStartPtr := initByteArray(bytesCount)\\n          calldatacopy(\\n            extractedBytesStartPtr,\\n            offset,\\n            bytesCount\\n          )\\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n        }\\n      }\\n\\n      // Validating timestamp\\n      validateTimestamp(extractedTimestamp);\\n\\n      // Verifying the off-chain signature against on-chain hashed data\\n      signerAddress = SignatureLib.recoverSignerAddress(\\n        signedHash,\\n        calldataNegativeOffset + SIG_BS\\n      );\\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\\n    }\\n\\n    // Updating helpful arrays\\n    {\\n      bytes32 dataPointDataFeedId;\\n      uint256 dataPointValue;\\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount; dataPointIndex++) {\\n        // Extracting data feed id and value for the current data point\\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n          calldataNegativeOffset,\\n          eachDataPointValueByteSize,\\n          dataPointIndex\\n        );\\n\\n        for (\\n          uint256 dataFeedIdIndex = 0;\\n          dataFeedIdIndex < dataFeedIds.length;\\n          dataFeedIdIndex++\\n        ) {\\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n            if (\\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n            ) {\\n              // Increase unique signer counter\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n              // Add new value\\n              valuesForDataFeeds[dataFeedIdIndex][\\n                uniqueSignerCountForDataFeedIds[dataFeedIdIndex] - 1\\n              ] = dataPointValue;\\n\\n              // Update signers bitmap\\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                bitmapSignersForDataFeedId,\\n                signerIndex\\n              );\\n            }\\n\\n            // Breaking, as there couldn't be several indexes for the same feed ID\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Return total data package byte size\\n    return\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS +\\n      (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) *\\n      dataPointsCount;\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which aggregates values from different\\n   * authorised signers for the given arrays of values for each data feed\\n   *\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _getAggregatedValues(\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds\\n  ) private view returns (uint256[] memory) {\\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n        revert InsufficientNumberOfUniqueSigners(\\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n          uniqueSignersThreshold);\\n      }\\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n    }\\n\\n    return aggregatedValues;\\n  }\\n}\\n\",\"keccak256\":\"0x202fada6c6efd72d2c57574f52ca1af65149c926b0e99a53503be3af6ad1864c\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConsumerBase.sol\\\";\\n\\n/**\\n * @title The base contract for Redstone consumers' contracts that allows to\\n * securely calculate numeric redstone oracle values\\n * @author The Redstone Oracles team\\n * @dev This contract can extend other contracts to allow them\\n * securely fetch Redstone oracle data from transactions calldata\\n */\\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract an\\n   * oracle value for a given data feed id. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n   * @return Extracted and verified numeric oracle value for the given data feed id\\n   */\\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    bytes32[] memory dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = dataFeedId;\\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array\\n   */\\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n  {\\n    return _securelyExtractOracleValuesFromTxMsg(dataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\\n   * only difference that it allows to request oracle data for an array of data feeds\\n   * that may contain duplicates\\n   * \\n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIdsWithDuplicates array\\n   */\\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\\n    // Building an array without duplicates\\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\\n    bool alreadyIncluded;\\n    uint256 uniqueDataFeedIdsCount = 0;\\n\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\\n      alreadyIncluded = false;\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < uniqueDataFeedIdsCount; indexWithoutDup++) {\\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\\n          alreadyIncluded = true;\\n          break;\\n        }\\n      }\\n\\n      // Adding if not included\\n      if (!alreadyIncluded) {\\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\\n        uniqueDataFeedIdsCount++;\\n      }\\n    }\\n\\n    // Overriding dataFeedIdsWithoutDuplicates.length\\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\\n    assembly {\\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\\n    }\\n\\n    // Requesting oracle values (without duplicates)\\n    uint256[] memory valuesWithoutDuplicates = getOracleNumericValuesFromTxMsg(dataFeedIdsWithoutDuplicates);\\n\\n    // Preparing result values array\\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\\n          break;\\n        }\\n      }\\n    }\\n\\n    return valuesWithDuplicates;\\n  }\\n}\\n\",\"keccak256\":\"0xe8e70ed8bb3efc527dccaf5919587c7ff3980836256d7d8db8f632721a3cf956\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n\\n    if (block.timestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n      }\\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0xe39ee1618d15944d6f44918f02f71d0d604fb678dbdbf36ca1eeecc86858ff25\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/RedstoneConsumerNumericBase.sol\\\";\\n\\ncontract AvalancheDataServiceConsumerBase is RedstoneConsumerNumericBase {\\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n    return 10;\\n  }\\n\\n  function getAuthorisedSignerIndex(address signerAddress)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint8)\\n  {\\n    if (signerAddress == 0x981bdA8276ae93F567922497153de7A5683708d3) {\\n      return 0;\\n    } else if (signerAddress == 0x3BEFDd935b50F172e696A5187DBaCfEf0D208e48) {\\n      return 1;\\n    } else if (signerAddress == 0xc1D5b940659e57b7bDF8870CDfC43f41Ca699460) {\\n      return 2;\\n    } else if (signerAddress == 0x1Cd8F9627a2838a7DAE6b98CF71c08B9CbF5174a) {\\n      return 3;\\n    } else if (signerAddress == 0xbC5a06815ee80dE7d20071703C1F1B8fC511c7d4) {\\n      return 4;\\n    } else if (signerAddress == 0xe9Fa2869C5f6fC3A0933981825564FD90573A86D) {\\n      return 5;\\n    } else if (signerAddress == 0xDf6b1cA313beE470D0142279791Fa760ABF5C537) {\\n      return 6;\\n    } else if (signerAddress == 0xa50abc5D76dAb99d5fe59FD32f239Bd37d55025f) {\\n      return 7;\\n    } else if (signerAddress == 0x496f4E8aC11076350A59b88D2ad62bc20d410EA3) {\\n      return 8;\\n    } else if (signerAddress == 0x41FB6b8d0f586E73d575bC57CFD29142B3214A47) {\\n      return 9;\\n    } else if (signerAddress == 0xC1068312a6333e6601f937c4773065B70D38A5bF) {\\n      return 10;\\n    } else if (signerAddress == 0xAE9D49Ea64DF38B9fcbC238bc7004a1421f7eeE8) {\\n      return 11;\\n    } else {\\n      revert SignerNotAuthorised(signerAddress);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa619980c305a60fe5743079c1fa7a3c0e15a54652a29e086ce4cb498613647cf\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9762198cae997eebad303a7a43a6133908646ed30811285085c9ea9cbd2a5e07\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = SafeMath.add(arr[middleIndex - 1], arr[middleIndex]);\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9b1a3a433a450cbe90e85801ddf891ab26deeda02d45a2d67e24443cdc33e764\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    return ecrecover(signedHash, v, r, s);\\n  }\\n}\\n\",\"keccak256\":\"0x06037b440e5eab52d550718543c463da00ac7231f303a503178ad5191e154310\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/DiamondHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 97d6cc3cb60bfd6feda4ea784b13bf0e7daac710;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./interfaces/IDiamondBeacon.sol\\\";\\r\\n\\r\\n//This path is updated during deployment\\r\\nimport \\\"./lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\n/**\\r\\n * DiamondHelper\\r\\n * Helper methods\\r\\n **/\\r\\ncontract DiamondHelper {\\r\\n    function _getFacetAddress(bytes4 methodSelector) internal view returns (address solvencyFacetAddress) {\\r\\n        solvencyFacetAddress = IDiamondBeacon(payable(DeploymentConstants.getDiamondAddress())).implementation(methodSelector);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1260e163609ca1f1b7508e0cf0b3b11ed45f844659f1720460000203de90d634\",\"license\":\"BUSL-1.1\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 49fd65d9a6ea5ddcd283ac4913262e342cf1ad80;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./interfaces/IIndex.sol\\\";\\r\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\r\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Pool\\r\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\r\\n * Depositors are rewarded with the interest rates collected from borrowers.\\r\\n * The interest rates calculation is delegated to an external calculator contract.\\r\\n */\\r\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\r\\n    using TransferHelper for address payable;\\r\\n\\r\\n    uint256 public constant MAX_POOL_UTILISATION_FOR_BORROWING = 0.90e18;\\r\\n    uint256 public totalSupplyCap;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowed;\\r\\n    mapping(address => uint256) internal _deposited;\\r\\n\\r\\n    mapping(address => uint256) public borrowed;\\r\\n\\r\\n    IRatesCalculator public ratesCalculator;\\r\\n    IBorrowersRegistry public borrowersRegistry;\\r\\n    IPoolRewarder public poolRewarder;\\r\\n\\r\\n    IIndex public depositIndex;\\r\\n    IIndex public borrowIndex;\\r\\n\\r\\n    address payable public tokenAddress;\\r\\n\\r\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\\r\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\r\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\r\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\r\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\r\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\r\\n\\r\\n        borrowersRegistry = borrowersRegistry_;\\r\\n        ratesCalculator = ratesCalculator_;\\r\\n        depositIndex = depositIndex_;\\r\\n        borrowIndex = borrowIndex_;\\r\\n        poolRewarder = poolRewarder_;\\r\\n        tokenAddress = tokenAddress_;\\r\\n        totalSupplyCap = _totalSupplyCap;\\r\\n\\r\\n        __Ownable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n        _updateRates();\\r\\n    }\\r\\n\\r\\n    /* ========== SETTERS ========== */\\r\\n\\r\\n    /**\\r\\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev _newTotalSupplyCap new deposit cap\\r\\n    **/\\r\\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\\r\\n        totalSupplyCap = _newTotalSupplyCap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new Pool Rewarder.\\r\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev _poolRewarder the address of PoolRewarder\\r\\n    **/\\r\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\r\\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\\r\\n        poolRewarder = _poolRewarder;\\r\\n\\r\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new rate calculator.\\r\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev ratesCalculator the address of rates calculator\\r\\n     **/\\r\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\r\\n        // setting address(0) ratesCalculator_ freezes the pool\\r\\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\\r\\n        ratesCalculator = ratesCalculator_;\\r\\n        if (address(ratesCalculator_) != address(0)) {\\r\\n            _updateRates();\\r\\n        }\\r\\n\\r\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new borrowers registry contract.\\r\\n     * The borrowers registry decides if an account can borrow funds.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev borrowersRegistry the address of borrowers registry\\r\\n     **/\\r\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\r\\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\\r\\n\\r\\n        borrowersRegistry = borrowersRegistry_;\\r\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(_deposited[msg.sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[msg.sender]);\\r\\n\\r\\n        // (this is verified in \\\"require\\\" above)\\r\\n        unchecked {\\r\\n            _deposited[msg.sender] -= amount;\\r\\n        }\\r\\n\\r\\n        _accumulateDepositInterest(recipient);\\r\\n        _deposited[recipient] += amount;\\r\\n\\r\\n        // Handle rewards\\r\\n        if(address(poolRewarder) != address(0) && amount != 0){\\r\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, msg.sender);\\r\\n            if(unstaked > 0) {\\r\\n                poolRewarder.stakeFor(unstaked, recipient);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(msg.sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\r\\n        return _allowed[owner][spender];\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\r\\n        _allowed[msg.sender][spender] = newAllowance;\\r\\n\\r\\n        emit Approval(msg.sender, spender, newAllowance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        uint256 currentAllowance = _allowed[msg.sender][spender];\\r\\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\\r\\n\\r\\n        uint256 newAllowance = currentAllowance - subtractedValue;\\r\\n        _allowed[msg.sender][spender] = newAllowance;\\r\\n\\r\\n        emit Approval(msg.sender, spender, newAllowance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        _allowed[msg.sender][spender] = amount;\\r\\n\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\\r\\n\\r\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\r\\n\\r\\n        _accumulateDepositInterest(sender);\\r\\n\\r\\n        if(_deposited[sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[sender]);\\r\\n\\r\\n\\r\\n        _deposited[sender] -= amount;\\r\\n        _allowed[sender][msg.sender] -= amount;\\r\\n\\r\\n        _accumulateDepositInterest(recipient);\\r\\n        _deposited[recipient] += amount;\\r\\n\\r\\n        // Handle rewards\\r\\n        if(address(poolRewarder) != address(0) && amount != 0){\\r\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\\r\\n            if(unstaked > 0) {\\r\\n                poolRewarder.stakeFor(unstaked, recipient);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Deposits the amount\\r\\n     * It updates user deposited balance, total deposited and rates\\r\\n     **/\\r\\n    function deposit(uint256 _amount) public virtual nonReentrant {\\r\\n        if(_amount == 0) revert ZeroDepositAmount();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(totalSupplyCap != 0){\\r\\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\\r\\n        }\\r\\n\\r\\n        _transferToPool(msg.sender, _amount);\\r\\n\\r\\n        _mint(msg.sender, _amount);\\r\\n        _deposited[address(this)] += _amount;\\r\\n        _updateRates();\\r\\n\\r\\n        if (address(poolRewarder) != address(0)) {\\r\\n            poolRewarder.stakeFor(_amount, msg.sender);\\r\\n        }\\r\\n\\r\\n        emit Deposit(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\r\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\r\\n        tokenAddress.safeTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws selected amount from the user deposits\\r\\n     * @dev _amount the amount to be withdrawn\\r\\n     **/\\r\\n    function withdraw(uint256 _amount) external nonReentrant {\\r\\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\r\\n        // verified in \\\"require\\\" above\\r\\n        unchecked {\\r\\n            _deposited[address(this)] -= _amount;\\r\\n        }\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        _transferFromPool(msg.sender, _amount);\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        if (address(poolRewarder) != address(0)) {\\r\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\r\\n        }\\r\\n\\r\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Borrows the specified amount\\r\\n     * It updates user borrowed balance, total borrowed amount and rates\\r\\n     * @dev _amount the amount to be borrowed\\r\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\r\\n     **/\\r\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\r\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\r\\n\\r\\n        _accumulateBorrowingInterest(msg.sender);\\r\\n\\r\\n        borrowed[msg.sender] += _amount;\\r\\n        borrowed[address(this)] += _amount;\\r\\n\\r\\n        _transferFromPool(msg.sender, _amount);\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Repays the amount\\r\\n     * It updates user borrowed balance, total borrowed amount and rates\\r\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\r\\n     **/\\r\\n    function repay(uint256 amount) external nonReentrant {\\r\\n        _accumulateBorrowingInterest(msg.sender);\\r\\n\\r\\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\\r\\n        _transferToPool(msg.sender, amount);\\r\\n\\r\\n        borrowed[msg.sender] -= amount;\\r\\n        borrowed[address(this)] -= amount;\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        emit Repayment(msg.sender, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /* =========\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the current borrowed amount for the given user\\r\\n     * The value includes the interest rates owned at the current moment\\r\\n     * @dev _user the address of queried borrower\\r\\n    **/\\r\\n    function getBorrowed(address _user) public view returns (uint256) {\\r\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function totalBorrowed() public view returns (uint256) {\\r\\n        return getBorrowed(address(this));\\r\\n    }\\r\\n\\r\\n\\r\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\r\\n    function getRewards() external {\\r\\n        poolRewarder.getRewardsFor(msg.sender);\\r\\n    }\\r\\n\\r\\n    // Returns number of pending rewards for msg.sender\\r\\n    function checkRewards() external view returns (uint256) {\\r\\n        return poolRewarder.earned(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current deposited amount for the given user\\r\\n     * The value includes the interest rates earned at the current moment\\r\\n     * @dev _user the address of queried depositor\\r\\n     **/\\r\\n    function balanceOf(address user) public view override returns (uint256) {\\r\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current interest rate for deposits\\r\\n     **/\\r\\n    function getDepositRate() public view returns (uint256) {\\r\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current interest rate for borrowings\\r\\n     **/\\r\\n    function getBorrowingRate() public view returns (uint256) {\\r\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\r\\n     **/\\r\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\r\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\r\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\r\\n\\r\\n        if(amount > balance) revert InsufficientPoolFunds();\\r\\n        if(surplus < amount) revert InsufficientSurplus();\\r\\n\\r\\n        _transferFromPool(account, amount);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    function _mint(address to, uint256 amount) internal {\\r\\n        if(to == address(0)) revert MintToAddressZero();\\r\\n\\r\\n        _deposited[to] += amount;\\r\\n\\r\\n        emit Transfer(address(0), to, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\\r\\n\\r\\n        // verified in \\\"require\\\" above\\r\\n        unchecked {\\r\\n            _deposited[account] -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _updateRates() internal {\\r\\n        uint256 _totalBorrowed = totalBorrowed();\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\\r\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\r\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\r\\n    }\\r\\n\\r\\n    function _accumulateDepositInterest(address user) internal {\\r\\n        uint256 interest = balanceOf(user) - _deposited[user];\\r\\n\\r\\n        _mint(user, interest);\\r\\n        _deposited[address(this)] = balanceOf(address(this));\\r\\n\\r\\n        emit InterestCollected(user, interest, block.timestamp);\\r\\n\\r\\n        depositIndex.updateUser(user);\\r\\n        depositIndex.updateUser(address(this));\\r\\n    }\\r\\n\\r\\n    function _accumulateBorrowingInterest(address user) internal {\\r\\n        borrowed[user] = getBorrowed(user);\\r\\n        borrowed[address(this)] = getBorrowed(address(this));\\r\\n\\r\\n        borrowIndex.updateUser(user);\\r\\n        borrowIndex.updateUser(address(this));\\r\\n    }\\r\\n\\r\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\r\\n\\r\\n    function renounceOwnership() public virtual override {}\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier canBorrow() {\\r\\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\\r\\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\\r\\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\\r\\n        _;\\r\\n        if((totalBorrowed() * 1e18) / totalSupply() > MAX_POOL_UTILISATION_FOR_BORROWING) revert MaxPoolUtilisationBreached();\\r\\n    }\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user deposits funds\\r\\n     * @param user the address performing the deposit\\r\\n     * @param value the amount deposited\\r\\n     * @param timestamp of the deposit\\r\\n     **/\\r\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user withdraws funds\\r\\n     * @param user the address performing the withdrawal\\r\\n     * @param value the amount withdrawn\\r\\n     * @param timestamp of the withdrawal\\r\\n     **/\\r\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user borrows funds\\r\\n     * @param user the address that borrows\\r\\n     * @param value the amount borrowed\\r\\n     * @param timestamp time of the borrowing\\r\\n     **/\\r\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user repays debt\\r\\n     * @param user the address that repays debt\\r\\n     * @param value the amount repaid\\r\\n     * @param timestamp of the repayment\\r\\n     **/\\r\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after accumulating deposit interest\\r\\n     * @param user the address that the deposit interest is accumulated for\\r\\n     * @param value the amount that interest is calculated from\\r\\n     * @param timestamp of the interest accumulation\\r\\n     **/\\r\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing borrowers registry\\r\\n    * @param registry an address of the newly set borrowers registry\\r\\n    * @param timestamp of the borrowers registry change\\r\\n    **/\\r\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing rates calculator\\r\\n    * @param calculator an address of the newly set rates calculator\\r\\n    * @param timestamp of the borrowers registry change\\r\\n    **/\\r\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing pool rewarder\\r\\n    * @param poolRewarder an address of the newly set pool rewarder\\r\\n    * @param timestamp of the pool rewarder change\\r\\n    **/\\r\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\r\\n\\r\\n    /* ========== ERRORS ========== */\\r\\n\\r\\n    // Only authorized accounts may borrow\\r\\n    error NotAuthorizedToBorrow();\\r\\n\\r\\n    // Borrowers registry is not configured\\r\\n    error BorrowersRegistryNotConfigured();\\r\\n\\r\\n    // Pool is frozen\\r\\n    error PoolFrozen();\\r\\n\\r\\n    // Not enough funds in the pool.\\r\\n    error InsufficientPoolFunds();\\r\\n\\r\\n    // Insufficient pool surplus to cover the requested recover amount\\r\\n    error InsufficientSurplus();\\r\\n\\r\\n    // Address (`target`) must be a contract\\r\\n    // @param target target address that must be a contract\\r\\n    error NotAContract(address target);\\r\\n\\r\\n    //  ERC20: Spender cannot be a zero address\\r\\n    error SpenderZeroAddress();\\r\\n\\r\\n    //  ERC20: cannot transfer to the zero address\\r\\n    error TransferToZeroAddress();\\r\\n\\r\\n    //  ERC20: cannot transfer to the pool address\\r\\n    error TransferToPoolAddress();\\r\\n\\r\\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\\r\\n    /// @param amount transfer amount\\r\\n    /// @param balance available balance\\r\\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\r\\n\\r\\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\\r\\n    /// @param requested requested transfer amount\\r\\n    /// @param allowance current allowance\\r\\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\\r\\n\\r\\n    //  This deposit operation would result in a breach of the totalSupplyCap\\r\\n    error TotalSupplyCapBreached();\\r\\n\\r\\n    // The deposit amount must be > 0\\r\\n    error ZeroDepositAmount();\\r\\n\\r\\n    // ERC20: cannot mint to the zero address\\r\\n    error MintToAddressZero();\\r\\n\\r\\n    // ERC20: burn amount exceeds current pool indexed balance\\r\\n    error BurnAmountExceedsBalance();\\r\\n\\r\\n    // Trying to repay more than was borrowed\\r\\n    error RepayingMoreThanWasBorrowed();\\r\\n\\r\\n    // MAX_POOL_UTILISATION_FOR_BORROWING was breached\\r\\n    error MaxPoolUtilisationBreached();\\r\\n}\",\"keccak256\":\"0x5fdcc31f77e996ac2d879cd657ad79a011004a12327c41e1d0cc300e91437fcd\",\"license\":\"BUSL-1.1\"},\"contracts/TokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 49fd65d9a6ea5ddcd283ac4913262e342cf1ad80;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./lib/Bytes32EnumerableMap.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\ncontract TokenManager is OwnableUpgradeable {\\r\\n    /**\\r\\n     * For adding supported assets\\r\\n     **/\\r\\n    struct Asset {\\r\\n        bytes32 asset;\\r\\n        address assetAddress;\\r\\n        uint256 debtCoverage;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * For adding supported lending pools\\r\\n     **/\\r\\n    struct poolAsset {\\r\\n        bytes32 asset;\\r\\n        address poolAddress;\\r\\n    }\\r\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\r\\n\\r\\n    uint256 private constant _NOT_SUPPORTED = 0;\\r\\n    uint256 private constant _INACTIVE = 1;\\r\\n    uint256 private constant _ACTIVE = 2;\\r\\n\\r\\n    // Stores an asset's bytes32 symbol representation to pool's address mapping\\r\\n    EnumerableMap.Bytes32ToAddressMap private assetToPoolAddress;\\r\\n    // Stores an asset's bytes32 symbol representation to asset's address mapping\\r\\n    EnumerableMap.Bytes32ToAddressMap private assetToTokenAddress;\\r\\n    mapping(address => bytes32) public tokenAddressToSymbol;\\r\\n    mapping(address => uint256) private tokenPositionInList;\\r\\n    // used for defining different leverage ratios for tokens\\r\\n    mapping(address => uint256) public debtCoverage;\\r\\n    address[] public supportedTokensList;\\r\\n\\r\\n    mapping(address => uint256) public tokenToStatus;\\r\\n\\r\\n    function initialize(Asset[] memory tokenAssets, poolAsset[] memory poolAssets) external initializer {\\r\\n        __Ownable_init();\\r\\n\\r\\n        addTokenAssets(tokenAssets);\\r\\n        addPoolAssets(poolAssets);\\r\\n    }\\r\\n\\r\\n    function getAllPoolAssets() public view returns (bytes32[] memory result) {\\r\\n        return assetToPoolAddress._inner._keys._inner._values;\\r\\n    }\\r\\n\\r\\n    function getSupportedTokensAddresses() public view returns (address[] memory) {\\r\\n        return supportedTokensList;\\r\\n    }\\r\\n\\r\\n    function getAllTokenAssets() public view returns (bytes32[] memory result) {\\r\\n        return assetToTokenAddress._inner._keys._inner._values;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Returns address of an asset\\r\\n    **/\\r\\n    function getAssetAddress(bytes32 _asset, bool allowInactive) public view returns (address) {\\r\\n        (, address assetAddress) = assetToTokenAddress.tryGet(_asset);\\r\\n        require(assetAddress != address(0), \\\"Asset not supported.\\\");\\r\\n        if (!allowInactive) {\\r\\n            require(tokenToStatus[assetAddress] == _ACTIVE, \\\"Asset inactive\\\");\\r\\n        }\\r\\n\\r\\n        return assetAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Returns address of an asset's lending pool\\r\\n    **/\\r\\n    function getPoolAddress(bytes32 _asset) public view returns (address) {\\r\\n        (, address assetAddress) = assetToPoolAddress.tryGet(_asset);\\r\\n        require(assetAddress != address(0), \\\"Pool asset not supported.\\\");\\r\\n\\r\\n        return assetAddress;\\r\\n    }\\r\\n\\r\\n    function addPoolAssets(poolAsset[] memory poolAssets) public onlyOwner {\\r\\n        for (uint256 i = 0; i < poolAssets.length; i++) {\\r\\n            _addPoolAsset(poolAssets[i].asset, poolAssets[i].poolAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _addPoolAsset(bytes32 _asset, address _poolAddress) internal {\\r\\n        require(Address.isContract(_poolAddress), \\\"TokenManager: Pool must be a contract\\\");\\r\\n        require(!assetToPoolAddress.contains(_asset), \\\"Asset's pool already exists\\\");\\r\\n        assetToPoolAddress.set(_asset, _poolAddress);\\r\\n        emit PoolAssetAdded(msg.sender, _asset, _poolAddress, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function addTokenAssets(Asset[] memory tokenAssets) public onlyOwner {\\r\\n        for (uint256 i = 0; i < tokenAssets.length; i++) {\\r\\n            _addTokenAsset(tokenAssets[i].asset, tokenAssets[i].assetAddress, tokenAssets[i].debtCoverage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function activateToken(address token) public onlyOwner {\\r\\n        require(tokenToStatus[token] == _INACTIVE, \\\"Must be inactive\\\");\\r\\n        tokenToStatus[token] = _ACTIVE;\\r\\n        emit TokenAssetActivated(msg.sender, token, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function deactivateToken(address token) public onlyOwner {\\r\\n        require(tokenToStatus[token] == _ACTIVE, \\\"Must be active\\\");\\r\\n        tokenToStatus[token] = _INACTIVE;\\r\\n        emit TokenAssetDeactivated(msg.sender, token, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _addTokenAsset(bytes32 _asset, address _tokenAddress, uint256 _debtCoverage) internal {\\r\\n        require(_asset != \\\"\\\", \\\"Cannot set an empty string asset.\\\");\\r\\n        require(_tokenAddress != address(0), \\\"Cannot set an empty address.\\\");\\r\\n        require(!assetToTokenAddress.contains(_asset), \\\"Asset's token already exists\\\");\\r\\n        require(tokenAddressToSymbol[_tokenAddress] == 0, \\\"Asset address is already in use\\\");\\r\\n        setDebtCoverage(_tokenAddress, _debtCoverage);\\r\\n\\r\\n        assetToTokenAddress.set(_asset, _tokenAddress);\\r\\n        tokenAddressToSymbol[_tokenAddress] = _asset;\\r\\n        tokenToStatus[_tokenAddress] = _ACTIVE;\\r\\n\\r\\n        supportedTokensList.push(_tokenAddress);\\r\\n        tokenPositionInList[_tokenAddress] = supportedTokensList.length - 1;\\r\\n\\r\\n        emit TokenAssetAdded(msg.sender, _asset, _tokenAddress, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _removeTokenFromList(address tokenToRemove) internal {\\r\\n        // Move last address token to the `tokenToRemoveIndex` position (index of an asset that is being removed) in the address[] supportedTokensList\\r\\n        // and update map(address=>uint256) tokenPostitionInList if the token is not already the last element\\r\\n        uint256 tokenToRemoveIndex = tokenPositionInList[tokenToRemove];\\r\\n        if (tokenToRemoveIndex != (supportedTokensList.length - 1)) {\\r\\n            address currentLastToken = supportedTokensList[supportedTokensList.length - 1];\\r\\n            tokenPositionInList[currentLastToken] = tokenToRemoveIndex;\\r\\n            supportedTokensList[tokenToRemoveIndex] = currentLastToken;\\r\\n        }\\r\\n        // Remove last element - that is either the token that is being removed (if was already at the end)\\r\\n        // or some other asset that at this point was already copied to the `index` positon\\r\\n        supportedTokensList.pop();\\r\\n        tokenPositionInList[tokenToRemove] = 0;\\r\\n    }\\r\\n\\r\\n    function removeTokenAssets(bytes32[] memory _tokenAssets) public onlyOwner {\\r\\n        for (uint256 i = 0; i < _tokenAssets.length; i++) {\\r\\n            _removeTokenAsset(_tokenAssets[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _removeTokenAsset(bytes32 _tokenAsset) internal {\\r\\n        address tokenAddress = getAssetAddress(_tokenAsset, true);\\r\\n        EnumerableMap.remove(assetToTokenAddress, _tokenAsset);\\r\\n        tokenAddressToSymbol[tokenAddress] = 0;\\r\\n        tokenToStatus[tokenAddress] = _NOT_SUPPORTED;\\r\\n        debtCoverage[tokenAddress] = 0;\\r\\n        _removeTokenFromList(tokenAddress);\\r\\n        emit TokenAssetRemoved(msg.sender, _tokenAsset, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function removePoolAssets(bytes32[] memory _poolAssets) public onlyOwner {\\r\\n        for (uint256 i = 0; i < _poolAssets.length; i++) {\\r\\n            _removePoolAsset(_poolAssets[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _removePoolAsset(bytes32 _poolAsset) internal {\\r\\n        address poolAddress = getPoolAddress(_poolAsset);\\r\\n        EnumerableMap.remove(assetToPoolAddress, _poolAsset);\\r\\n        emit PoolAssetRemoved(msg.sender, _poolAsset, poolAddress, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function setDebtCoverage(address token, uint256 coverage) public onlyOwner {\\r\\n        //LTV must be lower than 5\\r\\n        require(coverage <= 0.833333333333333333e18, 'Debt coverage higher than maximum acceptable');\\r\\n        debtCoverage[token] = coverage;\\r\\n    }\\r\\n\\r\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\r\\n\\r\\n    function renounceOwnership() public virtual override {}\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after adding a token asset\\r\\n     * @param performer an address of the wallet adding a token asset\\r\\n     * @param tokenAsset token asset\\r\\n     * @param assetAddress an address of the token asset\\r\\n     * @param timestamp time of adding a token asset\\r\\n     **/\\r\\n    event TokenAssetAdded(address indexed performer, bytes32 indexed tokenAsset, address assetAddress, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after activating a token asset\\r\\n     * @param performer an address of the wallet activating a token asset\\r\\n     * @param assetAddress an address of the token asset\\r\\n     * @param timestamp time of activating a token asset\\r\\n     **/\\r\\n    event TokenAssetActivated(address indexed performer, address assetAddress, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after deactivating a token asset\\r\\n     * @param performer an address of the wallet deactivating a token asset\\r\\n     * @param assetAddress an address of the token asset\\r\\n     * @param timestamp time of deactivating a token asset\\r\\n     **/\\r\\n    event TokenAssetDeactivated(address indexed performer, address assetAddress, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after removing a token asset\\r\\n     * @param performer an address of the wallet removing a token asset\\r\\n     * @param tokenAsset token asset\\r\\n     * @param timestamp time a token asset removal\\r\\n     **/\\r\\n    event TokenAssetRemoved(address indexed performer, bytes32 indexed tokenAsset, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after adding a pool asset\\r\\n     * @param performer an address of wallet adding the pool asset\\r\\n     * @param poolAsset pool asset\\r\\n     * @param poolAddress an address of the pool asset\\r\\n     * @param timestamp time of the pool asset addition\\r\\n     **/\\r\\n    event PoolAssetAdded(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after removing a pool asset\\r\\n     * @param performer an address of wallet removing the pool asset\\r\\n     * @param poolAsset pool asset\\r\\n     * @param poolAddress an address of the pool asset\\r\\n     * @param timestamp time of a pool asset removal\\r\\n     **/\\r\\n    event PoolAssetRemoved(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\r\\n}\\r\\n\",\"keccak256\":\"0xf5a8cd7e03e922bd84fec7dee6bc47ced3fb5d72cc81df48e8852649dc287143\",\"license\":\"BUSL-1.1\"},\"contracts/facets/SolvencyFacetProd.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../oracle/RSOracleProd3Signers.sol\\\";\\r\\nimport \\\"../TokenManager.sol\\\";\\r\\nimport \\\"../Pool.sol\\\";\\r\\nimport \\\"../DiamondHelper.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\r\\n\\r\\n//This path is updated during deployment\\r\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\ncontract SolvencyFacetProd is RSOracleProd3Signers, DiamondHelper {\\r\\n    struct AssetPrice {\\r\\n        bytes32 asset;\\r\\n        uint256 price;\\r\\n    }\\r\\n\\r\\n    // Struct used in the liquidation process to obtain necessary prices only once\\r\\n    struct CachedPrices {\\r\\n        AssetPrice[] ownedAssetsPrices;\\r\\n        AssetPrice[] debtAssetsPrices;\\r\\n        AssetPrice[] stakedPositionsPrices;\\r\\n        AssetPrice[] assetsToRepayPrices;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Checks if the loan is solvent.\\r\\n      * It means that the Health Ratio is greater than 1e18.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function isSolvent() public view returns (bool) {\\r\\n        return getHealthRatio() >= 1e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Checks if the loan is solvent.\\r\\n      * It means that the Health Ratio is greater than 1e18.\\r\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n      * @param cachedPrices Struct containing arrays of Asset/Price structs used to calculate value of owned assets, debt and staked positions\\r\\n    **/\\r\\n    function isSolventWithPrices(CachedPrices memory cachedPrices) public view returns (bool) {\\r\\n        return getHealthRatioWithPrices(cachedPrices) >= 1e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of Asset/Price structs of staked positions.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getStakedPositionsPrices() public view returns(AssetPrice[] memory result) {\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n\\r\\n        bytes32[] memory symbols = new bytes32[](positions.length);\\r\\n        for(uint256 i=0; i<positions.length; i++) {\\r\\n            symbols[i] = positions[i].symbol;\\r\\n        }\\r\\n\\r\\n        uint256[] memory stakedPositionsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(symbols);\\r\\n        result = new AssetPrice[](stakedPositionsPrices.length);\\r\\n\\r\\n        for(uint i; i<stakedPositionsPrices.length; i++){\\r\\n            result[i] = AssetPrice({\\r\\n                asset: symbols[i],\\r\\n                price: stakedPositionsPrices[i]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of bytes32[] symbols of debt (borrowable) assets.\\r\\n    **/\\r\\n    function getDebtAssets() public view returns(bytes32[] memory result) {\\r\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        result = tokenManager.getAllPoolAssets();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of Asset/Price structs of debt (borrowable) assets.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getDebtAssetsPrices() public view returns(AssetPrice[] memory result) {\\r\\n        bytes32[] memory debtAssets = getDebtAssets();\\r\\n\\r\\n        uint256[] memory debtAssetsPrices = getOracleNumericValuesFromTxMsg(debtAssets);\\r\\n        result = new AssetPrice[](debtAssetsPrices.length);\\r\\n\\r\\n        for(uint i; i<debtAssetsPrices.length; i++){\\r\\n            result[i] = AssetPrice({\\r\\n                asset: debtAssets[i],\\r\\n                price: debtAssetsPrices[i]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getOwnedAssetsWithNativePrices() public view returns(AssetPrice[] memory result) {\\r\\n        bytes32[] memory assetsEnriched = getOwnedAssetsWithNative();\\r\\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(assetsEnriched);\\r\\n\\r\\n        result = new AssetPrice[](assetsEnriched.length);\\r\\n\\r\\n        for(uint i; i<assetsEnriched.length; i++){\\r\\n            result[i] = AssetPrice({\\r\\n                asset: assetsEnriched[i],\\r\\n                price: prices[i]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of bytes32[] symbols of staked positions.\\r\\n    **/\\r\\n    function getStakedAssets() internal view returns (bytes32[] memory result) {\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n        result = new bytes32[](positions.length);\\r\\n        for(uint i; i<positions.length; i++) {\\r\\n            result[i] = positions[i].symbol;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function copyToArray(bytes32[] memory target, bytes32[] memory source, uint256 offset, uint256 numberOfItems) pure internal {\\r\\n        require(numberOfItems <= source.length, \\\"numberOfItems > target array length\\\");\\r\\n        require(offset + numberOfItems <= target.length, \\\"offset + numberOfItems > target array length\\\");\\r\\n\\r\\n        for(uint i; i<numberOfItems; i++){\\r\\n            target[i + offset] = source[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function copyToAssetPriceArray(AssetPrice[] memory target, bytes32[] memory sourceAssets, uint256[] memory sourcePrices, uint256 offset, uint256 numberOfItems) pure internal {\\r\\n        require(numberOfItems <= sourceAssets.length, \\\"numberOfItems > sourceAssets array length\\\");\\r\\n        require(numberOfItems <= sourcePrices.length, \\\"numberOfItems > sourcePrices array length\\\");\\r\\n        require(offset + numberOfItems <= sourceAssets.length, \\\"offset + numberOfItems > sourceAssets array length\\\");\\r\\n        require(offset + numberOfItems <= sourcePrices.length, \\\"offset + numberOfItems > sourcePrices array length\\\");\\r\\n\\r\\n        for(uint i; i<numberOfItems; i++){\\r\\n            target[i] = AssetPrice({\\r\\n                asset: sourceAssets[i+offset],\\r\\n                price: sourcePrices[i+offset]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns CachedPrices struct consisting of Asset/Price arrays for ownedAssets, debtAssets, stakedPositions and assetsToRepay.\\r\\n      * Used during the liquidation process in order to obtain all necessary prices from calldata only once.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public view returns (CachedPrices memory result) {\\r\\n        bytes32[] memory ownedAssetsEnriched = getOwnedAssetsWithNative();\\r\\n        bytes32[] memory debtAssets = getDebtAssets();\\r\\n        bytes32[] memory stakedAssets = getStakedAssets();\\r\\n\\r\\n        bytes32[] memory allAssetsSymbols = new bytes32[](ownedAssetsEnriched.length + debtAssets.length + stakedAssets.length + assetsToRepay.length);\\r\\n        uint256 offset;\\r\\n\\r\\n        // Populate allAssetsSymbols with owned assets symbols\\r\\n        copyToArray(allAssetsSymbols, ownedAssetsEnriched, offset, ownedAssetsEnriched.length);\\r\\n        offset += ownedAssetsEnriched.length;\\r\\n\\r\\n        // Populate allAssetsSymbols with debt assets symbols\\r\\n        copyToArray(allAssetsSymbols, debtAssets, offset, debtAssets.length);\\r\\n        offset += debtAssets.length;\\r\\n\\r\\n        // Populate allAssetsSymbols with staked assets symbols\\r\\n        copyToArray(allAssetsSymbols, stakedAssets, offset, stakedAssets.length);\\r\\n        offset += stakedAssets.length;\\r\\n\\r\\n        // Populate allAssetsSymbols with assets to repay symbols\\r\\n        copyToArray(allAssetsSymbols, assetsToRepay, offset, assetsToRepay.length);\\r\\n\\r\\n        uint256[] memory allAssetsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(allAssetsSymbols);\\r\\n\\r\\n        offset = 0;\\r\\n\\r\\n        // Populate ownedAssetsPrices struct\\r\\n        AssetPrice[] memory ownedAssetsPrices = new AssetPrice[](ownedAssetsEnriched.length);\\r\\n        copyToAssetPriceArray(ownedAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, ownedAssetsEnriched.length);\\r\\n        offset += ownedAssetsEnriched.length;\\r\\n\\r\\n        // Populate debtAssetsPrices struct\\r\\n        AssetPrice[] memory debtAssetsPrices = new AssetPrice[](debtAssets.length);\\r\\n        copyToAssetPriceArray(debtAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, debtAssets.length);\\r\\n        offset += debtAssetsPrices.length;\\r\\n\\r\\n        // Populate stakedPositionsPrices struct\\r\\n        AssetPrice[] memory stakedPositionsPrices = new AssetPrice[](stakedAssets.length);\\r\\n        copyToAssetPriceArray(stakedPositionsPrices, allAssetsSymbols, allAssetsPrices, offset, stakedAssets.length);\\r\\n        offset += stakedAssets.length;\\r\\n\\r\\n        // Populate assetsToRepayPrices struct\\r\\n        // Stack too deep :F\\r\\n        AssetPrice[] memory assetsToRepayPrices = new AssetPrice[](assetsToRepay.length);\\r\\n        for(uint i=0; i<assetsToRepay.length; i++){\\r\\n            assetsToRepayPrices[i] = AssetPrice({\\r\\n            asset: allAssetsSymbols[i+offset],\\r\\n            price: allAssetsPrices[i+offset]\\r\\n            });\\r\\n        }\\r\\n\\r\\n        result = CachedPrices({\\r\\n        ownedAssetsPrices: ownedAssetsPrices,\\r\\n        debtAssetsPrices: debtAssetsPrices,\\r\\n        stakedPositionsPrices: stakedPositionsPrices,\\r\\n        assetsToRepayPrices: assetsToRepayPrices\\r\\n        });\\r\\n    }\\r\\n\\r\\n    // Check whether there is enough debt-denominated tokens to fully repaid what was previously borrowed\\r\\n    function canRepayDebtFully() external view returns(bool) {\\r\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        bytes32[] memory poolAssets = tokenManager.getAllPoolAssets();\\r\\n\\r\\n        for(uint i; i< poolAssets.length; i++) {\\r\\n            Pool pool = Pool(DeploymentConstants.getTokenManager().getPoolAddress(poolAssets[i]));\\r\\n            IERC20 token = IERC20(pool.tokenAddress());\\r\\n            if(token.balanceOf(address(this)) < pool.getBorrowed(address(this))) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValuesFromTxMsg() method.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getPrices(bytes32[] memory symbols) external view returns (uint256[] memory) {\\r\\n        return getOracleNumericValuesFromTxMsg(symbols);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValueFromTxMsg() method.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getPrice(bytes32 symbol) external view returns (uint256) {\\r\\n        return getOracleNumericValueFromTxMsg(symbol);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns TotalWeightedValue of OwnedAssets in USD based on the supplied array of Asset/Price struct, tokenBalance and debtCoverage\\r\\n    **/\\r\\n    function _getTWVOwnedAssets(AssetPrice[] memory ownedAssetsPrices) internal view returns (uint256) {\\r\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\r\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n        uint256 weightedValueOfTokens = ownedAssetsPrices[0].price * address(this).balance * tokenManager.debtCoverage(tokenManager.getAssetAddress(nativeTokenSymbol, true)) / (10 ** 26);\\r\\n\\r\\n        if (ownedAssetsPrices.length > 0) {\\r\\n\\r\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\r\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\r\\n                weightedValueOfTokens = weightedValueOfTokens + (ownedAssetsPrices[i].price * token.balanceOf(address(this)) * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\\r\\n            }\\r\\n        }\\r\\n        return weightedValueOfTokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns TotalWeightedValue of StakedPositions in USD based on the supplied array of Asset/Price struct, positionBalance and debtCoverage\\r\\n    **/\\r\\n    function _getTWVStakedPositions(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\r\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n\\r\\n        uint256 weightedValueOfStaked;\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\r\\n\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n\\r\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\r\\n\\r\\n                weightedValueOfStaked += stakedPositionsPrices[i].price * balance * tokenManager.debtCoverage(positions[i].vault) / (10 ** token.decimals() * 10**8);\\r\\n            }\\r\\n        }\\r\\n        return weightedValueOfStaked;\\r\\n    }\\r\\n\\r\\n    function _getThresholdWeightedValueBase(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) internal view virtual returns (uint256) {\\r\\n        return _getTWVOwnedAssets(ownedAssetsPrices) + _getTWVStakedPositions(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getThresholdWeightedValue() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\\r\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\r\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\r\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getThresholdWeightedValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\r\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt denominated in USD\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getDebtBase(AssetPrice[] memory debtAssetsPrices) internal view returns (uint256){\\r\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        uint256 debt;\\r\\n\\r\\n        for (uint256 i; i < debtAssetsPrices.length; i++) {\\r\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(debtAssetsPrices[i].asset, true));\\r\\n\\r\\n            Pool pool = Pool(tokenManager.getPoolAddress(debtAssetsPrices[i].asset));\\r\\n            //10**18 (wei in eth) / 10**8 (precision of oracle feed) = 10**10\\r\\n            debt = debt + pool.getBorrowed(address(this)) * debtAssetsPrices[i].price * 10 ** 10\\r\\n            / 10 ** token.decimals();\\r\\n        }\\r\\n\\r\\n        return debt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt denominated in USD\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getDebt() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory debtAssetsPrices = getDebtAssetsPrices();\\r\\n        return getDebtBase(debtAssetsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt denominated in USD\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getDebtWithPrices(AssetPrice[] memory debtAssetsPrices) public view virtual returns (uint256) {\\r\\n        return getDebtBase(debtAssetsPrices);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function _getTotalAssetsValueBase(AssetPrice[] memory ownedAssetsPrices) public view returns (uint256) {\\r\\n        if (ownedAssetsPrices.length > 0) {\\r\\n            TokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n            uint256 total = address(this).balance * ownedAssetsPrices[0].price / 10 ** 8;\\r\\n\\r\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\r\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\r\\n                uint256 assetBalance = token.balanceOf(address(this));\\r\\n\\r\\n                total = total + (ownedAssetsPrices[i].price * 10 ** 10 * assetBalance / (10 ** token.decimals()));\\r\\n            }\\r\\n            return total;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n     **/\\r\\n    function getTotalAssetsValue() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\\r\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getTotalAssetsValueWithPrices(AssetPrice[] memory ownedAssetsPrices) public view virtual returns (uint256) {\\r\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns list of owned assets that always included NativeToken at index 0\\r\\n    **/\\r\\n    function getOwnedAssetsWithNative() public view returns(bytes32[] memory){\\r\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\r\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\r\\n\\r\\n        // If account already owns the native token the use ownedAssets.length; Otherwise add one element to account for additional native token.\\r\\n        uint256 numberOfAssets = DiamondStorageLib.hasAsset(nativeTokenSymbol) ? ownedAssets.length : ownedAssets.length + 1;\\r\\n        bytes32[] memory assetsWithNative = new bytes32[](numberOfAssets);\\r\\n\\r\\n        uint256 lastUsedIndex;\\r\\n        assetsWithNative[0] = nativeTokenSymbol; // First asset = NativeToken\\r\\n\\r\\n        for(uint i=0; i< ownedAssets.length; i++){\\r\\n            if(ownedAssets[i] != nativeTokenSymbol){\\r\\n                lastUsedIndex += 1;\\r\\n                assetsWithNative[lastUsedIndex] = ownedAssets[i];\\r\\n            }\\r\\n        }\\r\\n        return assetsWithNative;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of staked positions in USD.\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function _getStakedValueBase(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n\\r\\n        uint256 usdValue;\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\r\\n\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n\\r\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\r\\n\\r\\n                usdValue += stakedPositionsPrices[i].price * 10 ** 10 * balance / (10 ** token.decimals());\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return usdValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of staked positions in USD.\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getStakedValueWithPrices(AssetPrice[] memory stakedPositionsPrices) public view returns (uint256) {\\r\\n        return _getStakedValueBase(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of staked positions in USD.\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getStakedValue() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\r\\n        return _getStakedValueBase(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getTotalValue() public view virtual returns (uint256) {\\r\\n        return getTotalAssetsValue() + getStakedValue();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getTotalValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\r\\n        return getTotalAssetsValueWithPrices(ownedAssetsPrices) + getStakedValueWithPrices(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    function getFullLoanStatus() public view returns (uint256[5] memory) {\\r\\n        return [getTotalValue(), getDebt(), getThresholdWeightedValue(), getHealthRatio(), isSolvent() ? uint256(1) : uint256(0)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\r\\n     * by current debt\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n     **/\\r\\n    function getHealthRatio() public view virtual returns (uint256) {\\r\\n        CachedPrices memory cachedPrices = getAllPricesForLiquidation(new bytes32[](0));\\r\\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\\r\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\r\\n\\r\\n        if (debt == 0) {\\r\\n            return type(uint256).max;\\r\\n        } else {\\r\\n            return thresholdWeightedValue * 1e18 / debt;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\r\\n     * by current debt\\r\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n     **/\\r\\n    function getHealthRatioWithPrices(CachedPrices memory cachedPrices) public view virtual returns (uint256) {\\r\\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\\r\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\r\\n\\r\\n        if (debt == 0) {\\r\\n            return type(uint256).max;\\r\\n        } else {\\r\\n            return thresholdWeightedValue * 1e18 / debt;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb012a53e2736e1359b6a682889ec54632830a645e987610c1ea8143aabdb895c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IBorrowersRegistry\\r\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\r\\n */\\r\\ninterface IBorrowersRegistry {\\r\\n    function canBorrow(address _account) external view returns (bool);\\r\\n\\r\\n    function getLoanForOwner(address _owner) external view returns (address);\\r\\n\\r\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xb8aaf225432273e91887b0ecda730ad062eaeef212cfd099e322393d1c3f56e3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\r\\n */\\r\\ninterface IDiamondBeacon {\\r\\n\\r\\n    function implementation() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Must return an address that can be used as a delegate call target.\\r\\n     *\\r\\n     * {SmartLoanDiamondProxy} will check that this address is a contract.\\r\\n     */\\r\\n    function implementation(bytes4) external view returns (address);\\r\\n\\r\\n    function getStatus() external view returns (bool);\\r\\n\\r\\n    function proposeBeaconOwnershipTransfer(address _newOwner) external;\\r\\n\\r\\n    function acceptBeaconOwnership() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9ebb1752fb7c26826cf3cccd2fb54a4db53d76a8d16dfa7614d772c3e92dd6cf\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\",\"keccak256\":\"0x98b528120c0598f550cf85472f8dd759952a41505d1c7c5a2f07ed03c18c87a7\",\"license\":\"MIT\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IIndex {\\r\\n\\r\\n    function setRate(uint256 _rate) external;\\r\\n\\r\\n    function updateUser(address user) external;\\r\\n\\r\\n    function getIndex() external view returns (uint256);\\r\\n\\r\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x0f06bd722f4574e6296b2e55a393e8b2abe81411ae1ec8598d761e5a8565390a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IPoolRewarder {\\r\\n\\r\\n    function stakeFor(uint _amount, address _stakeFor) external;\\r\\n\\r\\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\\r\\n\\r\\n    function getRewardsFor(address _user) external;\\r\\n\\r\\n    function earned(address _account) external view returns (uint);\\r\\n\\r\\n    function balanceOf(address _account) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xe5ff460a400055a73324bb2b6661e47bb5227c6bce4adec8befa541ded0b252d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IRatesCalculator\\r\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\r\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\r\\n */\\r\\ninterface IRatesCalculator {\\r\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\r\\n\\r\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc6f00bcba86f3aa78e79bec4943c8f47daf4b85698ce6686b4b2457a92f06bc8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IStakingPositions\\r\\n * Types for staking\\r\\n */\\r\\ninterface IStakingPositions {\\r\\n    struct StakedPosition {\\r\\n        address vault;\\r\\n        bytes32 symbol;\\r\\n        bytes4 balanceSelector;\\r\\n        bytes4 unstakeSelector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4c5d88e9e7e82f78b40c4f1461820fa3ee6410e974b8bd82c103026d6d3c092b\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\r\\n\\r\\n/**\\r\\n * @dev Library for managing an enumerable variant of Solidity's\\r\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\r\\n * type.\\r\\n *\\r\\n * Maps have the following properties:\\r\\n *\\r\\n * - Entries are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n */\\r\\nlibrary EnumerableMap {\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Map type with\\r\\n    // bytes32 keys and values.\\r\\n    // The Map implementation uses private functions, and user-facing\\r\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\r\\n    // the underlying Map.\\r\\n    // This means that we can only create new EnumerableMaps for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Map {\\r\\n        // Storage of keys\\r\\n        EnumerableSet.Bytes32Set _keys;\\r\\n        mapping(bytes32 => bytes32) _values;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _set(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        bytes32 value\\r\\n    ) private returns (bool) {\\r\\n        map._values[key] = value;\\r\\n        return map._keys.add(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a key-value pair from a map. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\r\\n        delete map._values[key];\\r\\n        return map._keys.remove(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\r\\n        return map._keys.contains(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\r\\n     */\\r\\n    function _length(Map storage map) private view returns (uint256) {\\r\\n        return map._keys.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of entries inside the\\r\\n     * array, and it may change when more entries are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\r\\n        bytes32 key = map._keys.at(index);\\r\\n        return (key, map._values[key]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     */\\r\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        if (value == bytes32(0)) {\\r\\n            return (_contains(map, key), bytes32(0));\\r\\n        } else {\\r\\n            return (true, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\r\\n     */\\r\\n    function _get(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), errorMessage);\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    // Bytes32ToAddressMap\\r\\n\\r\\n    struct Bytes32ToAddressMap {\\r\\n        Map _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function set(\\r\\n        Bytes32ToAddressMap storage map,\\r\\n        bytes32 key,\\r\\n        address value\\r\\n    ) internal returns (bool) {\\r\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\r\\n        return _remove(map._inner, key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\r\\n        return _contains(map._inner, key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of elements in the map. O(1).\\r\\n     */\\r\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\r\\n        return _length(map._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\r\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\r\\n        return (key, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\r\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\r\\n        return (success, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, key))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\r\\n     */\\r\\n    function get(\\r\\n        Bytes32ToAddressMap storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c9de7c7f3406d29dc518366c68a88cb29aaf36907b95422cceac140959c2463\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\r\\n\\r\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\r\\n// The loupe functions are required by the EIP2535 Diamonds standard\\r\\n\\r\\nlibrary DiamondStorageLib {\\r\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\r\\n\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\r\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\r\\n\\r\\n    struct FacetAddressAndPosition {\\r\\n        address facetAddress;\\r\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\r\\n    }\\r\\n\\r\\n    struct FacetFunctionSelectors {\\r\\n        bytes4[] functionSelectors;\\r\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\r\\n    }\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\r\\n        // maps function selector to the facet address and\\r\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\r\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\r\\n        // maps facet addresses to function selectors\\r\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\r\\n        // facet addresses\\r\\n        address[] facetAddresses;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // Used to select methods that can be executed even when Diamond is paused\\r\\n        mapping(bytes4 => bool) canBeExecutedWhenPaused;\\r\\n\\r\\n        bool _initialized;\\r\\n        bool _active;\\r\\n    }\\r\\n\\r\\n    struct SmartLoanStorage {\\r\\n        // PauseAdmin has the power to pause/unpause the contract without the timelock delay in case of a critical bug/exploit\\r\\n        address pauseAdmin;\\r\\n        // Owner of the contract\\r\\n        address contractOwner;\\r\\n        // Proposed owner of the contract\\r\\n        address proposedOwner;\\r\\n        // Proposed pauseAdmin of the contract\\r\\n        address proposedPauseAdmin;\\r\\n        // Is contract initialized?\\r\\n        bool _initialized;\\r\\n        // TODO: mock staking tokens until redstone oracle supports them\\r\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\r\\n        // Staked positions of the contract\\r\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\r\\n    }\\r\\n\\r\\n    struct ReentrancyGuardStorage {\\r\\n        uint256 _status;\\r\\n    }\\r\\n\\r\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\r\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            rgs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\r\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            sls.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    event PauseAdminOwnershipTransferred(address indexed previousPauseAdmin, address indexed newPauseAdmin);\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        address previousOwner = sls.contractOwner;\\r\\n        sls.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function setContractPauseAdmin(address _newPauseAdmin) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        address previousPauseAdmin = sls.pauseAdmin;\\r\\n        sls.pauseAdmin = _newPauseAdmin;\\r\\n        emit PauseAdminOwnershipTransferred(previousPauseAdmin, _newPauseAdmin);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = smartLoanStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function pauseAdmin() internal view returns (address pauseAdmin) {\\r\\n        pauseAdmin = smartLoanStorage().pauseAdmin;\\r\\n    }\\r\\n\\r\\n    function setProposedOwner(address _newOwner) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        sls.proposedOwner = _newOwner;\\r\\n    }\\r\\n\\r\\n    function setProposedPauseAdmin(address _newPauseAdmin) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        sls.proposedPauseAdmin = _newPauseAdmin;\\r\\n    }\\r\\n\\r\\n    function getPausedMethodExemption(bytes4 _methodSig) internal view returns (bool) {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        return ds.canBeExecutedWhenPaused[_methodSig];\\r\\n    }\\r\\n\\r\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\r\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\r\\n    }\\r\\n\\r\\n    function proposedPauseAdmin() internal view returns (address proposedPauseAdmin) {\\r\\n        proposedPauseAdmin = smartLoanStorage().proposedPauseAdmin;\\r\\n    }\\r\\n\\r\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\r\\n        _positions = smartLoanStorage().currentStakedPositions;\\r\\n    }\\r\\n\\r\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\r\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\r\\n\\r\\n        bool found;\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            if (positions[i].balanceSelector == position.balanceSelector) {\\r\\n                found = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!found) {\\r\\n            positions.push(position);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeStakedPosition(bytes4 balanceSelector) internal {\\r\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            if (positions[i].balanceSelector == balanceSelector) {\\r\\n                positions[i] = positions[positions.length - 1];\\r\\n                positions.pop();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\r\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\r\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\r\\n    }\\r\\n\\r\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        return sls.ownedAssets.contains(_symbol);\\r\\n    }\\r\\n\\r\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\r\\n    }\\r\\n\\r\\n    function enforceIsPauseAdmin() internal view {\\r\\n        require(msg.sender == smartLoanStorage().pauseAdmin, \\\"DiamondStorageLib: Must be contract pauseAdmin\\\");\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\r\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\r\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\r\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\r\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\r\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else {\\r\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\r\\n            }\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        // if function does not exist then do nothing and return\\r\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\r\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\r\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\r\\n        ds.facetAddresses.push(_facetAddress);\\r\\n    }\\r\\n\\r\\n\\r\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\r\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\r\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\r\\n    }\\r\\n\\r\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\r\\n        // an immutable function is a function defined directly in a diamond\\r\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\r\\n        // replace selector with last selector, then delete last selector\\r\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\r\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\r\\n        // if not the same then replace _selector with lastSelector\\r\\n        if (selectorPosition != lastSelectorPosition) {\\r\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\r\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\r\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\r\\n        }\\r\\n        // delete the last selector\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\r\\n        delete ds.selectorToFacetAndPosition[_selector];\\r\\n\\r\\n        // if no more selectors for facet address then delete the facet address\\r\\n        if (lastSelectorPosition == 0) {\\r\\n            // replace facet address with last facet address and delete last facet address\\r\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\r\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\r\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\r\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\r\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\r\\n            }\\r\\n            ds.facetAddresses.pop();\\r\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (_init == address(0)) {\\r\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\r\\n        } else {\\r\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\r\\n            if (_init != address(this)) {\\r\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\r\\n            }\\r\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n            if (!success) {\\r\\n                if (error.length > 0) {\\r\\n                    // bubble up the error\\r\\n                    revert(string(error));\\r\\n                } else {\\r\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\r\\n        uint256 contractSize;\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xd3a13fa5f36bad96d572997ede9768a6b33f91f039c1a9acb60e6b432b032823\",\"license\":\"MIT\"},\"contracts/lib/avalanche/DeploymentConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 49fd65d9a6ea5ddcd283ac4913262e342cf1ad80;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../../TokenManager.sol\\\";\\r\\nimport {DiamondStorageLib} from \\\"../../lib/DiamondStorageLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * DeploymentConstants\\r\\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\\r\\n * to decrease gas costs. Not meant to be updated unless really necessary.\\r\\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\\r\\n **/\\r\\nlibrary DeploymentConstants {\\r\\n\\r\\n    // Used for LiquidationBonus calculations\\r\\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\\r\\n\\r\\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\\r\\n\\r\\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\r\\n\\r\\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x023dA3e0D49Ee05704773271b11484C6D1E76cCb;\\r\\n\\r\\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x6715e7768b6a9C523046407E0354a21bB17acb39;\\r\\n\\r\\n    address private constant _TOKEN_MANAGER_ADDRESS = 0x34cb5Fc3b28215713682De95DAF2b00a4619Db03;\\r\\n\\r\\n    //implementation-specific\\r\\n\\r\\n    function getPercentagePrecision() internal pure returns (uint256) {\\r\\n        return _PERCENTAGE_PRECISION;\\r\\n    }\\r\\n\\r\\n    //blockchain-specific\\r\\n\\r\\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\\r\\n        return _NATIVE_TOKEN_SYMBOL;\\r\\n    }\\r\\n\\r\\n    function getNativeToken() internal pure returns (address payable) {\\r\\n        return payable(_NATIVE_ADDRESS);\\r\\n    }\\r\\n\\r\\n    //deployment-specific\\r\\n\\r\\n    function getDiamondAddress() internal pure returns (address) {\\r\\n        return _DIAMOND_BEACON_ADDRESS;\\r\\n    }\\r\\n\\r\\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\\r\\n        return _SMART_LOANS_FACTORY_ADDRESS;\\r\\n    }\\r\\n\\r\\n    function getTokenManager() internal pure returns (TokenManager) {\\r\\n        return TokenManager(_TOKEN_MANAGER_ADDRESS);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Returns all owned assets keys\\r\\n    **/\\r\\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\\r\\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\\r\\n        return sls.ownedAssets._inner._keys._inner._values;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x13af9671d53c01caa7a431d814ac748e4c55874d6be97e5aeec8458aea514635\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/RSOracleProd3Signers.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\\\";\\r\\n\\r\\ncontract RSOracleProd3Signers is AvalancheDataServiceConsumerBase {\\r\\n    function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\r\\n        return 3;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb36b93e92019169117eff13e59ac5942c33b397aefbdb77aad94c8c06924e910\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506155cf80620000216000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806398d6dbee11610104578063caa648b4116100a2578063ecd658b411610071578063ecd658b4146105ac578063f50b2efe146105ca578063f90c4924146105e6578063fd4344cd14610604576101cf565b8063caa648b414610522578063d378d94e14610540578063d44e282b1461055e578063e28a5ad31461057c576101cf565b8063b24ebfcc116100de578063b24ebfcc14610462578063c32f5bfd14610492578063c3abc376146104c2578063c453e8c2146104f2576101cf565b806398d6dbee146103f6578063a3aa8d1e14610414578063a7ef708214610444576101cf565b80634295d2e5116101715780637914334f1161014b5780637914334f1461036c5780637a70bcce1461038a5780638be3471a146103ba5780638f59b7a9146103d8576101cf565b80634295d2e5146102ee578063465a1ae31461031e5780635ce239501461034e576101cf565b8063360398a3116101ad578063360398a3146102525780633942a52e146102825780633a264d10146102a05780633ce142f5146102be576101cf565b806314a6bf0f146101d457806326ee4836146101f257806331d98b3f14610222575b600080fd5b6101dc610622565b6040516101e99190613e99565b60405180910390f35b61020c60048036038101906102079190614057565b61063e565b604051610219919061415e565b60405180910390f35b61023c60048036038101906102379190614180565b610650565b6040516102499190613e99565b60405180910390f35b61026c600480360381019061026791906143de565b610662565b6040516102799190613e99565b60405180910390f35b61028a6106e5565b6040516102979190614442565b60405180910390f35b6102a86109b0565b6040516102b5919061454a565b60405180910390f35b6102d860048036038101906102d391906145ca565b610aae565b6040516102e59190614613565b60405180910390f35b6103086004803603810190610303919061462e565b610eb2565b6040516103159190613e99565b60405180910390f35b6103386004803603810190610333919061462e565b610ec4565b6040516103459190613e99565b60405180910390f35b610356611138565b6040516103639190614442565b60405180910390f35b610374611152565b6040516103819190613e99565b60405180910390f35b6103a4600480360381019061039f9190614677565b61122b565b6040516103b19190613e99565b60405180910390f35b6103c2611251565b6040516103cf919061454a565b60405180910390f35b6103e0611408565b6040516103ed9190613e99565b60405180910390f35b6103fe611424565b60405161040b919061479e565b60405180910390f35b61042e60048036038101906104299190614057565b61156b565b60405161043b91906148a7565b60405180910390f35b61044c611907565b6040516104599190613e99565b60405180910390f35b61047c6004803603810190610477919061498c565b611923565b6040516104899190613e99565b60405180910390f35b6104ac60048036038101906104a7919061462e565b611935565b6040516104b99190613e99565b60405180910390f35b6104dc60048036038101906104d791906143de565b611947565b6040516104e99190614442565b60405180910390f35b61050c60048036038101906105079190614677565b611964565b6040516105199190613e99565b60405180910390f35b61052a611978565b6040516105379190613e99565b60405180910390f35b610548611999565b604051610555919061454a565b60405180910390f35b610566611a97565b6040516105739190614a59565b60405180910390f35b6105966004803603810190610591919061462e565b611afc565b6040516105a39190613e99565b60405180910390f35b6105b4611b0e565b6040516105c1919061479e565b60405180910390f35b6105e460048036038101906105df9190614a74565b611b96565b005b6105ee611ba2565b6040516105fb9190614613565b60405180910390f35b61060c611bab565b6040516106199190613e99565b60405180910390f35b60008061062d6109b0565b905061063881611bd5565b91505090565b606061064982611e8f565b9050919050565b600061065b82611ea1565b9050919050565b6000806106728360200151611afc565b9050600061068884600001518560400151611964565b9050600082036106bc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff925050506106e0565b81670de0b6b3a7640000826106d19190614ad0565b6106db9190614b41565b925050505b919050565b6000806106f0611f3d565b905060008173ffffffffffffffffffffffffffffffffffffffff166366273c196040518163ffffffff1660e01b8152600401600060405180830381865afa15801561073f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107689190614c1e565b905060005b81518110156109a5576000610780611f3d565b73ffffffffffffffffffffffffffffffffffffffff16630edc25b68484815181106107ae576107ad614c67565b5b60200260200101516040518263ffffffff1660e01b81526004016107d29190614ca5565b602060405180830381865afa1580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108139190614cd5565b905060008173ffffffffffffffffffffffffffffffffffffffff16639d76ea586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108869190614d40565b90508173ffffffffffffffffffffffffffffffffffffffff16636011163e306040518263ffffffff1660e01b81526004016108c19190614d7c565b602060405180830381865afa1580156108de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109029190614dac565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161093b9190614d7c565b602060405180830381865afa158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c9190614dac565b1015610990576000955050505050506109ad565b5050808061099d90614dd9565b91505061076d565b506001925050505b90565b606060006109bc611b0e565b905060006109c982611e8f565b9050805167ffffffffffffffff8111156109e6576109e5613ede565b5b604051908082528060200260200182016040528015610a1f57816020015b610a0c613e19565b815260200190600190039081610a045790505b50925060005b8151811015610aa8576040518060400160405280848381518110610a4c57610a4b614c67565b5b60200260200101518152602001838381518110610a6c57610a6b614c67565b5b6020026020010151815250848281518110610a8a57610a89614c67565b5b60200260200101819052508080610aa090614dd9565b915050610a25565b50505090565b600073981bda8276ae93f567922497153de7a5683708d373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b005760009050610ead565b733befdd935b50f172e696a5187dbacfef0d208e4873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b505760019050610ead565b73c1d5b940659e57b7bdf8870cdfc43f41ca69946073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ba05760029050610ead565b731cd8f9627a2838a7dae6b98cf71c08b9cbf5174a73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bf05760039050610ead565b73bc5a06815ee80de7d20071703c1f1b8fc511c7d473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c405760049050610ead565b73e9fa2869c5f6fc3a0933981825564fd90573a86d73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c905760059050610ead565b73df6b1ca313bee470d0142279791fa760abf5c53773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ce05760069050610ead565b73a50abc5d76dab99d5fe59fd32f239bd37d55025f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d305760079050610ead565b73496f4e8ac11076350a59b88d2ad62bc20d410ea373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d805760089050610ead565b7341fb6b8d0f586e73d575bc57cfd29142b3214a4773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610dd05760099050610ead565b73c1068312a6333e6601f937c4773065b70d38a5bf73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e2057600a9050610ead565b73ae9d49ea64df38b9fcbc238bc7004a1421f7eee873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e7057600b9050610ead565b816040517fec459bc0000000000000000000000000000000000000000000000000000000008152600401610ea49190614d7c565b60405180910390fd5b919050565b6000610ebd82611f59565b9050919050565b6000808251111561112e576000610ed9611f3d565b905060006305f5e10084600081518110610ef657610ef5614c67565b5b60200260200101516020015147610f0d9190614ad0565b610f179190614b41565b905060005b84518110156111235760008373ffffffffffffffffffffffffffffffffffffffff166325eb876f878481518110610f5657610f55614c67565b5b60200260200101516000015160016040518363ffffffff1660e01b8152600401610f81929190614e21565b602060405180830381865afa158015610f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc29190614cd5565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fff9190614d7c565b602060405180830381865afa15801561101c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110409190614dac565b90508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561108d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b19190614e76565b600a6110bd9190614fd6565b816402540be4008986815181106110d7576110d6614c67565b5b6020026020010151602001516110ed9190614ad0565b6110f79190614ad0565b6111019190614b41565b8461110c9190615021565b93505050808061111b90614dd9565b915050610f1c565b508092505050611133565b600090505b919050565b6000670de0b6b3a764000061114b611152565b1015905090565b6000806111a7600067ffffffffffffffff81111561117357611172613ede565b5b6040519080825280602002602001820160405280156111a15781602001602082028036833780820191505090505b5061156b565b905060006111b88260200151611afc565b905060006111ce83600001518460400151611964565b905060008203611203577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9350505050611228565b81670de0b6b3a7640000826112189190614ad0565b6112229190614b41565b93505050505b90565b600061123682610eb2565b61123f84611935565b6112499190615021565b905092915050565b6060600061125d6122ae565b90506000818054905067ffffffffffffffff81111561127f5761127e613ede565b5b6040519080825280602002602001820160405280156112ad5781602001602082028036833780820191505090505b50905060005b8280549050811015611316578281815481106112d2576112d1614c67565b5b9060005260206000209060030201600101548282815181106112f7576112f6614c67565b5b602002602001018181525050808061130e90614dd9565b9150506112b3565b506000611322826122c0565b9050805167ffffffffffffffff81111561133f5761133e613ede565b5b60405190808252806020026020018201604052801561137857816020015b611365613e19565b81526020019060019003908161135d5790505b50935060005b81518110156114015760405180604001604052808483815181106113a5576113a4614c67565b5b602002602001015181526020018383815181106113c5576113c4614c67565b5b60200260200101518152508582815181106113e3576113e2614c67565b5b602002602001018190525080806113f990614dd9565b91505061137e565b5050505090565b600080611413611999565b905061141e81610ec4565b91505090565b60606000611430612511565b9050600061143c612584565b90506000611449826125ac565b611460576001835161145b9190615021565b611463565b82515b905060008167ffffffffffffffff81111561148157611480613ede565b5b6040519080825280602002602001820160405280156114af5781602001602082028036833780820191505090505b509050600083826000815181106114c9576114c8614c67565b5b60200260200101818152505060005b855181101561155f57848682815181106114f5576114f4614c67565b5b60200260200101511461154c5760018261150f9190615021565b915085818151811061152457611523614c67565b5b602002602001015183838151811061153f5761153e614c67565b5b6020026020010181815250505b808061155790614dd9565b9150506114d8565b50819550505050505090565b611573613e36565b600061157d611424565b90506000611589611b0e565b905060006115956125d7565b9050600085518251845186516115ab9190615021565b6115b59190615021565b6115bf9190615021565b67ffffffffffffffff8111156115d8576115d7613ede565b5b6040519080825280602002602001820160405280156116065781602001602082028036833780820191505090505b5090506000611618828683885161269f565b8451816116259190615021565b9050611634828583875161269f565b8351816116419190615021565b9050611650828483865161269f565b82518161165d9190615021565b905061166c8288838a5161269f565b6000611677836122c0565b9050600091506000865167ffffffffffffffff81111561169a57611699613ede565b5b6040519080825280602002602001820160405280156116d357816020015b6116c0613e19565b8152602001906001900390816116b85790505b5090506116e4818584868b5161279c565b8651836116f19190615021565b92506000865167ffffffffffffffff8111156117105761170f613ede565b5b60405190808252806020026020018201604052801561174957816020015b611736613e19565b81526020019060019003908161172e5790505b50905061175a818685878b5161279c565b8051846117679190615021565b93506000865167ffffffffffffffff81111561178657611785613ede565b5b6040519080825280602002602001820160405280156117bf57816020015b6117ac613e19565b8152602001906001900390816117a45790505b5090506117d0818786888b5161279c565b8651856117dd9190615021565b945060008b5167ffffffffffffffff8111156117fc576117fb613ede565b5b60405190808252806020026020018201604052801561183557816020015b611822613e19565b81526020019060019003908161181a5790505b50905060005b8c518110156118d457604051806040016040528089898461185c9190615021565b8151811061186d5761186c614c67565b5b602002602001015181526020018789846118879190615021565b8151811061189857611897614c67565b5b60200260200101518152508282815181106118b6576118b5614c67565b5b602002602001018190525080806118cc90614dd9565b91505061183b565b506040518060800160405280858152602001848152602001838152602001828152509a5050505050505050505050919050565b600080611912611251565b905061191d81611f59565b91505090565b600061192e82612965565b9050919050565b600061194082610ec4565b9050919050565b6000670de0b6b3a764000061195b83610662565b10159050919050565b60006119708383612977565b905092915050565b6000611982611907565b61198a611408565b6119949190615021565b905090565b606060006119a5611424565b905060006119b282611e8f565b9050815167ffffffffffffffff8111156119cf576119ce613ede565b5b604051908082528060200260200182016040528015611a0857816020015b6119f5613e19565b8152602001906001900390816119ed5790505b50925060005b8251811015611a91576040518060400160405280848381518110611a3557611a34614c67565b5b60200260200101518152602001838381518110611a5557611a54614c67565b5b6020026020010151815250848281518110611a7357611a72614c67565b5b60200260200101819052508080611a8990614dd9565b915050611a0e565b50505090565b611a9f613e5e565b6040518060a00160405280611ab2611978565b8152602001611abf610622565b8152602001611acc611bab565b8152602001611ad9611152565b8152602001611ae6611138565b611af1576000611af4565b60015b815250905090565b6000611b0782611bd5565b9050919050565b60606000611b1a611f3d565b90508073ffffffffffffffffffffffffffffffffffffffff166366273c196040518163ffffffff1660e01b8152600401600060405180830381865afa158015611b67573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611b909190614c1e565b91505090565b611b9f8161299d565b50565b60006003905090565b600080611bb6611999565b90506000611bc2611251565b9050611bce8282612977565b9250505090565b600080611be0611f3d565b90506000805b8451811015611e845760008373ffffffffffffffffffffffffffffffffffffffff166325eb876f878481518110611c2057611c1f614c67565b5b60200260200101516000015160016040518363ffffffff1660e01b8152600401611c4b929190614e21565b602060405180830381865afa158015611c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8c9190614cd5565b905060008473ffffffffffffffffffffffffffffffffffffffff16630edc25b6888581518110611cbf57611cbe614c67565b5b6020026020010151600001516040518263ffffffff1660e01b8152600401611ce79190614ca5565b602060405180830381865afa158015611d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d289190614cd5565b90508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d999190614e76565b600a611da59190614fd6565b6402540be400888581518110611dbe57611dbd614c67565b5b6020026020010151602001518373ffffffffffffffffffffffffffffffffffffffff16636011163e306040518263ffffffff1660e01b8152600401611e039190614d7c565b602060405180830381865afa158015611e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e449190614dac565b611e4e9190614ad0565b611e589190614ad0565b611e629190614b41565b84611e6d9190615021565b935050508080611e7c90614dd9565b915050611be6565b508092505050919050565b6060611e9a82612a67565b9050919050565b600080600167ffffffffffffffff811115611ebf57611ebe613ede565b5b604051908082528060200260200182016040528015611eed5781602001602082028036833780820191505090505b5090508281600081518110611f0557611f04614c67565b5b602002602001018181525050611f1a81611e8f565b600081518110611f2d57611f2c614c67565b5b6020026020010151915050919050565b60007334cb5fc3b28215713682de95daf2b00a4619db03905090565b600080611f646122ae565b90506000805b82805490508110156122a357828181548110611f8957611f88614c67565b5b906000526020600020906003020160010154858281518110611fae57611fad614c67565b5b60200260200101516000015114611ffa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff1906150b2565b60405180910390fd5b6000803073ffffffffffffffffffffffffffffffffffffffff1685848154811061202757612026614c67565b5b906000526020600020906003020160020160009054906101000a900460e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516120b69190615143565b600060405180830381855afa9150503d80600081146120f1576040519150601f19603f3d011682016040523d82523d6000602084013e6120f6565b606091505b5091509150811561228e576000818060200190518101906121179190614dac565b90506000612123611f3d565b73ffffffffffffffffffffffffffffffffffffffff166325eb876f8a878151811061215157612150614c67565b5b60200260200101516000015160016040518363ffffffff1660e01b815260040161217c929190614e21565b602060405180830381865afa158015612199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bd9190614cd5565b90508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561220a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222e9190614e76565b600a61223a9190614fd6565b826402540be4008b888151811061225457612253614c67565b5b60200260200101516020015161226a9190614ad0565b6122749190614ad0565b61227e9190614b41565b866122899190615021565b955050505b5050808061229b90614dd9565b915050611f6a565b508092505050919050565b60006122b8612c76565b600701905090565b60606000825167ffffffffffffffff8111156122df576122de613ede565b5b60405190808252806020026020018201604052801561230d5781602001602082028036833780820191505090505b5090506000806000905060005b85518110156123eb576000925060005b828110156123895786828151811061234557612344614c67565b5b60200260200101518582815181106123605761235f614c67565b5b6020026020010151036123765760019350612389565b808061238190614dd9565b91505061232a565b50826123d8578581815181106123a2576123a1614c67565b5b60200260200101518483815181106123bd576123bc614c67565b5b60200260200101818152505081806123d490614dd9565b9250505b80806123e390614dd9565b91505061231a565b5080835260006123fa84611e8f565b90506000865167ffffffffffffffff81111561241957612418613ede565b5b6040519080825280602002602001820160405280156124475781602001602082028036833780820191505090505b50905060005b87518110156125035760005b86518110156124ef5786818151811061247557612474614c67565b5b60200260200101518983815181106124905761248f614c67565b5b6020026020010151036124dc578381815181106124b0576124af614c67565b5b60200260200101518383815181106124cb576124ca614c67565b5b6020026020010181815250506124ef565b80806124e790614dd9565b915050612459565b5080806124fb90614dd9565b91505061244d565b508095505050505050919050565b6060600061251d612c76565b90508060040160000160000160000160000180548060200260200160405190810160405280929190818152602001828054801561257957602002820191906000526020600020905b815481526020019060010190808311612565575b505050505091505090565b60007f4156415800000000000000000000000000000000000000000000000000000000905090565b6000806125b7612c76565b90506125cf8382600401612ca390919063ffffffff16565b915050919050565b606060006125e36122ae565b9050808054905067ffffffffffffffff81111561260357612602613ede565b5b6040519080825280602002602001820160405280156126315781602001602082028036833780820191505090505b50915060005b818054905081101561269a5781818154811061265657612655614c67565b5b90600052602060002090600302016001015483828151811061267b5761267a614c67565b5b602002602001018181525050808061269290614dd9565b915050612637565b505090565b82518111156126e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126da906151cc565b60405180910390fd5b835181836126f19190615021565b1115612732576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127299061525e565b60405180910390fd5b60005b81811015612795578381815181106127505761274f614c67565b5b60200260200101518584836127659190615021565b8151811061277657612775614c67565b5b602002602001018181525050808061278d90614dd9565b915050612735565b5050505050565b83518111156127e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d7906152f0565b60405180910390fd5b8251811115612824576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281b90615382565b60405180910390fd5b835181836128329190615021565b1115612873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286a90615414565b60405180910390fd5b825181836128819190615021565b11156128c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b9906154a6565b60405180910390fd5b60005b8181101561295d5760405180604001604052808685846128e59190615021565b815181106128f6576128f5614c67565b5b602002602001015181526020018585846129109190615021565b8151811061292157612920614c67565b5b602002602001015181525086828151811061293f5761293e614c67565b5b6020026020010181905250808061295590614dd9565b9150506128c5565b505050505050565b600061297082612cba565b9050919050565b600061298282612dae565b61298b846131d7565b6129959190615021565b905092915050565b60006103e8826129ad9190614b41565b905080421015612a0f57603c42826129c591906154c6565b1115612a0a5780426040517fb6b0916d000000000000000000000000000000000000000000000000000000008152600401612a019291906154fa565b60405180910390fd5b612a63565b60b48142612a1d91906154c6565b1115612a625780426040517f0321d0b5000000000000000000000000000000000000000000000000000000008152600401612a599291906154fa565b60405180910390fd5b5b5050565b60606000825167ffffffffffffffff811115612a8657612a85613ede565b5b604051908082528060200260200182016040528015612ab45781602001602082028036833780820191505090505b5090506000835167ffffffffffffffff811115612ad457612ad3613ede565b5b604051908082528060200260200182016040528015612b025781602001602082028036833780820191505090505b5090506000845167ffffffffffffffff811115612b2257612b21613ede565b5b604051908082528060200260200182016040528015612b5557816020015b6060815260200190600190039081612b405790505b50905060005b8551811015612be857612b6c611ba2565b60ff1667ffffffffffffffff811115612b8857612b87613ede565b5b604051908082528060200260200182016040528015612bb65781602001602082028036833780820191505090505b50828281518110612bca57612bc9614c67565b5b60200260200101819052508080612be090614dd9565b915050612b5b565b506000612bf36135d3565b90506000612c00826136e4565b61ffff169050600282612c139190615021565b91506000604051905060005b82811015612c5e576000612c368a89898989613740565b90508085612c449190615021565b945082604052508080612c5690614dd9565b915050612c1f565b50612c698487613a38565b9650505050505050919050565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b6000612cb28360000183613b85565b905092915050565b600080825103612cf6576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612cff82613ba5565b600060028351612d0f9190614b41565b9050600060028451612d219190615523565b03612d8a576000612d7284600184612d3991906154c6565b81518110612d4a57612d49614c67565b5b6020026020010151858481518110612d6557612d64614c67565b5b6020026020010151613bf8565b9050600281612d819190614b41565b92505050612da9565b828181518110612d9d57612d9c614c67565b5b60200260200101519150505b919050565b600080612db9611f3d565b90506000612dc56122ae565b90506000805b82805490508110156131cb57828181548110612dea57612de9614c67565b5b906000526020600020906003020160010154868281518110612e0f57612e0e614c67565b5b60200260200101516000015114612e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e52906150b2565b60405180910390fd5b6000803073ffffffffffffffffffffffffffffffffffffffff16858481548110612e8857612e87614c67565b5b906000526020600020906003020160020160009054906101000a900460e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612f179190615143565b600060405180830381855afa9150503d8060008114612f52576040519150601f19603f3d011682016040523d82523d6000602084013e612f57565b606091505b509150915081156131b657600081806020019051810190612f789190614dac565b90506000612f84611f3d565b73ffffffffffffffffffffffffffffffffffffffff166325eb876f8b8781518110612fb257612fb1614c67565b5b60200260200101516000015160016040518363ffffffff1660e01b8152600401612fdd929190614e21565b602060405180830381865afa158015612ffa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301e9190614cd5565b90506305f5e1008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130949190614e76565b600a6130a09190614fd6565b6130aa9190614ad0565b8873ffffffffffffffffffffffffffffffffffffffff16636953c06c8988815481106130d9576130d8614c67565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016131279190614d7c565b602060405180830381865afa158015613144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131689190614dac565b838c888151811061317c5761317b614c67565b5b6020026020010151602001516131929190614ad0565b61319c9190614ad0565b6131a69190614b41565b866131b19190615021565b955050505b505080806131c390614dd9565b915050612dcb565b50809350505050919050565b6000806131e2612584565b905060006131ee611f3d565b905060006a52b7d2dcc80cd2e40000008273ffffffffffffffffffffffffffffffffffffffff16636953c06c8473ffffffffffffffffffffffffffffffffffffffff166325eb876f8760016040518363ffffffff1660e01b8152600401613256929190614e21565b602060405180830381865afa158015613273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132979190614cd5565b6040518263ffffffff1660e01b81526004016132b39190614d7c565b602060405180830381865afa1580156132d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f49190614dac565b478760008151811061330957613308614c67565b5b60200260200101516020015161331f9190614ad0565b6133299190614ad0565b6133339190614b41565b90506000855111156135c85760005b85518110156135c65760008373ffffffffffffffffffffffffffffffffffffffff166325eb876f88848151811061337c5761337b614c67565b5b60200260200101516000015160016040518363ffffffff1660e01b81526004016133a7929190614e21565b602060405180830381865afa1580156133c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e89190614cd5565b90506305f5e1008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561343a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061345e9190614e76565b600a61346a9190614fd6565b6134749190614ad0565b8473ffffffffffffffffffffffffffffffffffffffff16636953c06c836040518263ffffffff1660e01b81526004016134ad9190614d7c565b602060405180830381865afa1580156134ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ee9190614dac565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016135279190614d7c565b602060405180830381865afa158015613544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135689190614dac565b89858151811061357b5761357a614c67565b5b6020026020010151602001516135919190614ad0565b61359b9190614ad0565b6135a59190614b41565b836135b09190615021565b92505080806135be90614dd9565b915050613342565b505b809350505050919050565b60008060203603356602ed57011e000081166602ed57011e00001491505080613628576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008036905060291115613668576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602936033590506000600960038362ffffff166136859190615021565b61368f9190615021565b905060003690506002826136a39190615021565b11156136db576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80935050505090565b6000806020836136f49190615021565b90506000369050811115613734576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80360335915050919050565b60008060008061374f85613c0e565b91509150600080600060606000600d61377d60208861376e9190615021565b89613c8490919063ffffffff16565b6137879190615021565b905060006137ae60688c61379b9190615021565b6000369050613c9a90919063ffffffff16565b905060006137e08360418e6137c39190615021565b6137cd9190615021565b6000369050613c9a90919063ffffffff16565b90506137ec838261381a565b9350826020850120945081359650613836565b60006040519050818152602081019050818101604052919050565b6000613825836137ff565b838382376020810391505092915050565b6138478765ffffffffffff16611b96565b61385d8560418e6138589190615021565b613cb0565b955061386886610aae565b60ff1699505050505050505060008060005b84811015613a035761388d888583613d2f565b809350819450505060005b8c518110156139ef578c81815181106138b4576138b3614c67565b5b602002602001015184036139dc5760008b82815181106138d7576138d6614c67565b5b602002602001015190506138eb8189613db5565b15801561391b57506138fb611ba2565b60ff168d838151811061391157613910614c67565b5b6020026020010151105b156139d6578c828151811061393357613932614c67565b5b60200260200101805180919061394890614dd9565b81525050838b83815181106139605761395f614c67565b5b602002602001015160018f858151811061397d5761397c614c67565b5b602002602001015161398f91906154c6565b815181106139a05761399f614c67565b5b6020026020010181815250506139b68189613dce565b8c83815181106139c9576139c8614c67565b5b6020026020010181815250505b506139ef565b80806139e790614dd9565b915050613898565b5080806139fb90614dd9565b91505061387a565b50505081602082613a149190615021565b613a1e9190614ad0565b604e613a2a9190615021565b935050505095945050505050565b60606000835167ffffffffffffffff811115613a5757613a56613ede565b5b604051908082528060200260200182016040528015613a855781602001602082028036833780820191505090505b5090506000613a92611ba2565b60ff16905060005b8551811015613b795781858281518110613ab757613ab6614c67565b5b60200260200101511015613b1e57848181518110613ad857613ad7614c67565b5b6020026020010151826040517f2b13aef5000000000000000000000000000000000000000000000000000000008152600401613b159291906154fa565b60405180910390fd5b6000613b43878381518110613b3657613b35614c67565b5b6020026020010151611923565b905080848381518110613b5957613b58614c67565b5b602002602001018181525050508080613b7190614dd9565b915050613a9a565b50819250505092915050565b6000613b9d8284600001613ddf90919063ffffffff16565b905092915050565b805160208201602082028101815b81811015613bf157825b81811015613be5578151815180821015613bd8578084528183525b5050602081019050613bbd565b50602081019050613bb3565b5050505050565b60008183613c069190615021565b905092915050565b6000806000806000604186613c239190615021565b90506000613c4a602083613c379190615021565b6000369050613c9a90919063ffffffff16565b905080359350613c64600382613c9a90919063ffffffff16565b9050803592508362ffffff1695508263ffffffff16945050505050915091565b60008183613c929190614ad0565b905092915050565b60008183613ca891906154c6565b905092915050565b6000806000808436038035935060208101905080359250602081019050803560001a91505060018682858560405160008152602001604052604051613cf89493929190615554565b6020604051602081039080840390855afa158015613d1a573d6000803e3d6000fd5b50505060206040510351935050505092915050565b6000806000604e86613d419190615021565b90506000613d82613d73602088613d589190615021565b876001613d659190615021565b613c8490919063ffffffff16565b83613bf890919063ffffffff16565b90506000613d9d826000369050613c9a90919063ffffffff16565b90508035945060208101359350505050935093915050565b600080826001901b841690506000811191505092915050565b6000816001901b8317905092915050565b6000613dee8360000183613df6565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b604051806040016040528060008019168152602001600081525090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6040518060a00160405280600590602082028036833780820191505090505090565b6000819050919050565b613e9381613e80565b82525050565b6000602082019050613eae6000830184613e8a565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613f1682613ecd565b810181811067ffffffffffffffff82111715613f3557613f34613ede565b5b80604052505050565b6000613f48613eb4565b9050613f548282613f0d565b919050565b600067ffffffffffffffff821115613f7457613f73613ede565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b613f9d81613f8a565b8114613fa857600080fd5b50565b600081359050613fba81613f94565b92915050565b6000613fd3613fce84613f59565b613f3e565b90508083825260208201905060208402830185811115613ff657613ff5613f85565b5b835b8181101561401f578061400b8882613fab565b845260208401935050602081019050613ff8565b5050509392505050565b600082601f83011261403e5761403d613ec8565b5b813561404e848260208601613fc0565b91505092915050565b60006020828403121561406d5761406c613ebe565b5b600082013567ffffffffffffffff81111561408b5761408a613ec3565b5b61409784828501614029565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6140d581613e80565b82525050565b60006140e783836140cc565b60208301905092915050565b6000602082019050919050565b600061410b826140a0565b61411581856140ab565b9350614120836140bc565b8060005b8381101561415157815161413888826140db565b9750614143836140f3565b925050600181019050614124565b5085935050505092915050565b600060208201905081810360008301526141788184614100565b905092915050565b60006020828403121561419657614195613ebe565b5b60006141a484828501613fab565b91505092915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156141d2576141d1613ede565b5b602082029050602081019050919050565b6141ec81613e80565b81146141f757600080fd5b50565b600081359050614209816141e3565b92915050565b600060408284031215614225576142246141ad565b5b61422f6040613f3e565b9050600061423f84828501613fab565b6000830152506020614253848285016141fa565b60208301525092915050565b600061427261426d846141b7565b613f3e565b9050808382526020820190506040840283018581111561429557614294613f85565b5b835b818110156142be57806142aa888261420f565b845260208401935050604081019050614297565b5050509392505050565b600082601f8301126142dd576142dc613ec8565b5b81356142ed84826020860161425f565b91505092915050565b60006080828403121561430c5761430b6141ad565b5b6143166080613f3e565b9050600082013567ffffffffffffffff811115614336576143356141b2565b5b614342848285016142c8565b600083015250602082013567ffffffffffffffff811115614366576143656141b2565b5b614372848285016142c8565b602083015250604082013567ffffffffffffffff811115614396576143956141b2565b5b6143a2848285016142c8565b604083015250606082013567ffffffffffffffff8111156143c6576143c56141b2565b5b6143d2848285016142c8565b60608301525092915050565b6000602082840312156143f4576143f3613ebe565b5b600082013567ffffffffffffffff81111561441257614411613ec3565b5b61441e848285016142f6565b91505092915050565b60008115159050919050565b61443c81614427565b82525050565b60006020820190506144576000830184614433565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61449281613f8a565b82525050565b6040820160008201516144ae6000850182614489565b5060208201516144c160208501826140cc565b50505050565b60006144d38383614498565b60408301905092915050565b6000602082019050919050565b60006144f78261445d565b6145018185614468565b935061450c83614479565b8060005b8381101561453d57815161452488826144c7565b975061452f836144df565b925050600181019050614510565b5085935050505092915050565b6000602082019050818103600083015261456481846144ec565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006145978261456c565b9050919050565b6145a78161458c565b81146145b257600080fd5b50565b6000813590506145c48161459e565b92915050565b6000602082840312156145e0576145df613ebe565b5b60006145ee848285016145b5565b91505092915050565b600060ff82169050919050565b61460d816145f7565b82525050565b60006020820190506146286000830184614604565b92915050565b60006020828403121561464457614643613ebe565b5b600082013567ffffffffffffffff81111561466257614661613ec3565b5b61466e848285016142c8565b91505092915050565b6000806040838503121561468e5761468d613ebe565b5b600083013567ffffffffffffffff8111156146ac576146ab613ec3565b5b6146b8858286016142c8565b925050602083013567ffffffffffffffff8111156146d9576146d8613ec3565b5b6146e5858286016142c8565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006147278383614489565b60208301905092915050565b6000602082019050919050565b600061474b826146ef565b61475581856146fa565b93506147608361470b565b8060005b83811015614791578151614778888261471b565b975061478383614733565b925050600181019050614764565b5085935050505092915050565b600060208201905081810360008301526147b88184614740565b905092915050565b600082825260208201905092915050565b60006147dc8261445d565b6147e681856147c0565b93506147f183614479565b8060005b8381101561482257815161480988826144c7565b9750614814836144df565b9250506001810190506147f5565b5085935050505092915050565b6000608083016000830151848203600086015261484c82826147d1565b9150506020830151848203602086015261486682826147d1565b9150506040830151848203604086015261488082826147d1565b9150506060830151848203606086015261489a82826147d1565b9150508091505092915050565b600060208201905081810360008301526148c1818461482f565b905092915050565b600067ffffffffffffffff8211156148e4576148e3613ede565b5b602082029050602081019050919050565b6000614908614903846148c9565b613f3e565b9050808382526020820190506020840283018581111561492b5761492a613f85565b5b835b81811015614954578061494088826141fa565b84526020840193505060208101905061492d565b5050509392505050565b600082601f83011261497357614972613ec8565b5b81356149838482602086016148f5565b91505092915050565b6000602082840312156149a2576149a1613ebe565b5b600082013567ffffffffffffffff8111156149c0576149bf613ec3565b5b6149cc8482850161495e565b91505092915050565b600060059050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b614a0b816149d5565b614a1581846149e0565b9250614a20826149eb565b8060005b83811015614a51578151614a3887826140db565b9650614a43836149f5565b925050600181019050614a24565b505050505050565b600060a082019050614a6e6000830184614a02565b92915050565b600060208284031215614a8a57614a89613ebe565b5b6000614a98848285016141fa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614adb82613e80565b9150614ae683613e80565b9250828202614af481613e80565b91508282048414831517614b0b57614b0a614aa1565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614b4c82613e80565b9150614b5783613e80565b925082614b6757614b66614b12565b5b828204905092915050565b600081519050614b8181613f94565b92915050565b6000614b9a614b9584613f59565b613f3e565b90508083825260208201905060208402830185811115614bbd57614bbc613f85565b5b835b81811015614be65780614bd28882614b72565b845260208401935050602081019050614bbf565b5050509392505050565b600082601f830112614c0557614c04613ec8565b5b8151614c15848260208601614b87565b91505092915050565b600060208284031215614c3457614c33613ebe565b5b600082015167ffffffffffffffff811115614c5257614c51613ec3565b5b614c5e84828501614bf0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b614c9f81613f8a565b82525050565b6000602082019050614cba6000830184614c96565b92915050565b600081519050614ccf8161459e565b92915050565b600060208284031215614ceb57614cea613ebe565b5b6000614cf984828501614cc0565b91505092915050565b6000614d0d8261456c565b9050919050565b614d1d81614d02565b8114614d2857600080fd5b50565b600081519050614d3a81614d14565b92915050565b600060208284031215614d5657614d55613ebe565b5b6000614d6484828501614d2b565b91505092915050565b614d768161458c565b82525050565b6000602082019050614d916000830184614d6d565b92915050565b600081519050614da6816141e3565b92915050565b600060208284031215614dc257614dc1613ebe565b5b6000614dd084828501614d97565b91505092915050565b6000614de482613e80565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614e1657614e15614aa1565b5b600182019050919050565b6000604082019050614e366000830185614c96565b614e436020830184614433565b9392505050565b614e53816145f7565b8114614e5e57600080fd5b50565b600081519050614e7081614e4a565b92915050565b600060208284031215614e8c57614e8b613ebe565b5b6000614e9a84828501614e61565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115614efa57808604811115614ed657614ed5614aa1565b5b6001851615614ee55780820291505b8081029050614ef385614ea3565b9450614eba565b94509492505050565b600082614f135760019050614fcf565b81614f215760009050614fcf565b8160018114614f375760028114614f4157614f70565b6001915050614fcf565b60ff841115614f5357614f52614aa1565b5b8360020a915084821115614f6a57614f69614aa1565b5b50614fcf565b5060208310610133831016604e8410600b8410161715614fa55782820a905083811115614fa057614f9f614aa1565b5b614fcf565b614fb28484846001614eb0565b92509050818404811115614fc957614fc8614aa1565b5b81810290505b9392505050565b6000614fe182613e80565b9150614fec836145f7565b92506150197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614f03565b905092915050565b600061502c82613e80565b915061503783613e80565b925082820190508082111561504f5761504e614aa1565b5b92915050565b600082825260208201905092915050565b7f506f736974696f6e2d70726963652073796d626f6c206d69736d617463682e00600082015250565b600061509c601f83615055565b91506150a782615066565b602082019050919050565b600060208201905081810360008301526150cb8161508f565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156151065780820151818401526020810190506150eb565b60008484015250505050565b600061511d826150d2565b61512781856150dd565b93506151378185602086016150e8565b80840191505092915050565b600061514f8284615112565b915081905092915050565b7f6e756d6265724f664974656d73203e20746172676574206172726179206c656e60008201527f6774680000000000000000000000000000000000000000000000000000000000602082015250565b60006151b6602383615055565b91506151c18261515a565b604082019050919050565b600060208201905081810360008301526151e5816151a9565b9050919050565b7f6f6666736574202b206e756d6265724f664974656d73203e207461726765742060008201527f6172726179206c656e6774680000000000000000000000000000000000000000602082015250565b6000615248602c83615055565b9150615253826151ec565b604082019050919050565b600060208201905081810360008301526152778161523b565b9050919050565b7f6e756d6265724f664974656d73203e20736f757263654173736574732061727260008201527f6179206c656e6774680000000000000000000000000000000000000000000000602082015250565b60006152da602983615055565b91506152e58261527e565b604082019050919050565b60006020820190508181036000830152615309816152cd565b9050919050565b7f6e756d6265724f664974656d73203e20736f757263655072696365732061727260008201527f6179206c656e6774680000000000000000000000000000000000000000000000602082015250565b600061536c602983615055565b915061537782615310565b604082019050919050565b6000602082019050818103600083015261539b8161535f565b9050919050565b7f6f6666736574202b206e756d6265724f664974656d73203e20736f757263654160008201527f7373657473206172726179206c656e6774680000000000000000000000000000602082015250565b60006153fe603283615055565b9150615409826153a2565b604082019050919050565b6000602082019050818103600083015261542d816153f1565b9050919050565b7f6f6666736574202b206e756d6265724f664974656d73203e20736f757263655060008201527f7269636573206172726179206c656e6774680000000000000000000000000000602082015250565b6000615490603283615055565b915061549b82615434565b604082019050919050565b600060208201905081810360008301526154bf81615483565b9050919050565b60006154d182613e80565b91506154dc83613e80565b92508282039050818111156154f4576154f3614aa1565b5b92915050565b600060408201905061550f6000830185613e8a565b61551c6020830184613e8a565b9392505050565b600061552e82613e80565b915061553983613e80565b92508261554957615548614b12565b5b828206905092915050565b60006080820190506155696000830187614c96565b6155766020830186614604565b6155836040830185614c96565b6155906060830184614c96565b9594505050505056fea2646970667358221220c2bd9a8e36383331e1f5c8b99c0721f530ec2764128fc5ed169a1feb09f41c9364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806398d6dbee11610104578063caa648b4116100a2578063ecd658b411610071578063ecd658b4146105ac578063f50b2efe146105ca578063f90c4924146105e6578063fd4344cd14610604576101cf565b8063caa648b414610522578063d378d94e14610540578063d44e282b1461055e578063e28a5ad31461057c576101cf565b8063b24ebfcc116100de578063b24ebfcc14610462578063c32f5bfd14610492578063c3abc376146104c2578063c453e8c2146104f2576101cf565b806398d6dbee146103f6578063a3aa8d1e14610414578063a7ef708214610444576101cf565b80634295d2e5116101715780637914334f1161014b5780637914334f1461036c5780637a70bcce1461038a5780638be3471a146103ba5780638f59b7a9146103d8576101cf565b80634295d2e5146102ee578063465a1ae31461031e5780635ce239501461034e576101cf565b8063360398a3116101ad578063360398a3146102525780633942a52e146102825780633a264d10146102a05780633ce142f5146102be576101cf565b806314a6bf0f146101d457806326ee4836146101f257806331d98b3f14610222575b600080fd5b6101dc610622565b6040516101e99190613e99565b60405180910390f35b61020c60048036038101906102079190614057565b61063e565b604051610219919061415e565b60405180910390f35b61023c60048036038101906102379190614180565b610650565b6040516102499190613e99565b60405180910390f35b61026c600480360381019061026791906143de565b610662565b6040516102799190613e99565b60405180910390f35b61028a6106e5565b6040516102979190614442565b60405180910390f35b6102a86109b0565b6040516102b5919061454a565b60405180910390f35b6102d860048036038101906102d391906145ca565b610aae565b6040516102e59190614613565b60405180910390f35b6103086004803603810190610303919061462e565b610eb2565b6040516103159190613e99565b60405180910390f35b6103386004803603810190610333919061462e565b610ec4565b6040516103459190613e99565b60405180910390f35b610356611138565b6040516103639190614442565b60405180910390f35b610374611152565b6040516103819190613e99565b60405180910390f35b6103a4600480360381019061039f9190614677565b61122b565b6040516103b19190613e99565b60405180910390f35b6103c2611251565b6040516103cf919061454a565b60405180910390f35b6103e0611408565b6040516103ed9190613e99565b60405180910390f35b6103fe611424565b60405161040b919061479e565b60405180910390f35b61042e60048036038101906104299190614057565b61156b565b60405161043b91906148a7565b60405180910390f35b61044c611907565b6040516104599190613e99565b60405180910390f35b61047c6004803603810190610477919061498c565b611923565b6040516104899190613e99565b60405180910390f35b6104ac60048036038101906104a7919061462e565b611935565b6040516104b99190613e99565b60405180910390f35b6104dc60048036038101906104d791906143de565b611947565b6040516104e99190614442565b60405180910390f35b61050c60048036038101906105079190614677565b611964565b6040516105199190613e99565b60405180910390f35b61052a611978565b6040516105379190613e99565b60405180910390f35b610548611999565b604051610555919061454a565b60405180910390f35b610566611a97565b6040516105739190614a59565b60405180910390f35b6105966004803603810190610591919061462e565b611afc565b6040516105a39190613e99565b60405180910390f35b6105b4611b0e565b6040516105c1919061479e565b60405180910390f35b6105e460048036038101906105df9190614a74565b611b96565b005b6105ee611ba2565b6040516105fb9190614613565b60405180910390f35b61060c611bab565b6040516106199190613e99565b60405180910390f35b60008061062d6109b0565b905061063881611bd5565b91505090565b606061064982611e8f565b9050919050565b600061065b82611ea1565b9050919050565b6000806106728360200151611afc565b9050600061068884600001518560400151611964565b9050600082036106bc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff925050506106e0565b81670de0b6b3a7640000826106d19190614ad0565b6106db9190614b41565b925050505b919050565b6000806106f0611f3d565b905060008173ffffffffffffffffffffffffffffffffffffffff166366273c196040518163ffffffff1660e01b8152600401600060405180830381865afa15801561073f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107689190614c1e565b905060005b81518110156109a5576000610780611f3d565b73ffffffffffffffffffffffffffffffffffffffff16630edc25b68484815181106107ae576107ad614c67565b5b60200260200101516040518263ffffffff1660e01b81526004016107d29190614ca5565b602060405180830381865afa1580156107ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108139190614cd5565b905060008173ffffffffffffffffffffffffffffffffffffffff16639d76ea586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108869190614d40565b90508173ffffffffffffffffffffffffffffffffffffffff16636011163e306040518263ffffffff1660e01b81526004016108c19190614d7c565b602060405180830381865afa1580156108de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109029190614dac565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161093b9190614d7c565b602060405180830381865afa158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c9190614dac565b1015610990576000955050505050506109ad565b5050808061099d90614dd9565b91505061076d565b506001925050505b90565b606060006109bc611b0e565b905060006109c982611e8f565b9050805167ffffffffffffffff8111156109e6576109e5613ede565b5b604051908082528060200260200182016040528015610a1f57816020015b610a0c613e19565b815260200190600190039081610a045790505b50925060005b8151811015610aa8576040518060400160405280848381518110610a4c57610a4b614c67565b5b60200260200101518152602001838381518110610a6c57610a6b614c67565b5b6020026020010151815250848281518110610a8a57610a89614c67565b5b60200260200101819052508080610aa090614dd9565b915050610a25565b50505090565b600073981bda8276ae93f567922497153de7a5683708d373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b005760009050610ead565b733befdd935b50f172e696a5187dbacfef0d208e4873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b505760019050610ead565b73c1d5b940659e57b7bdf8870cdfc43f41ca69946073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ba05760029050610ead565b731cd8f9627a2838a7dae6b98cf71c08b9cbf5174a73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bf05760039050610ead565b73bc5a06815ee80de7d20071703c1f1b8fc511c7d473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c405760049050610ead565b73e9fa2869c5f6fc3a0933981825564fd90573a86d73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c905760059050610ead565b73df6b1ca313bee470d0142279791fa760abf5c53773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ce05760069050610ead565b73a50abc5d76dab99d5fe59fd32f239bd37d55025f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d305760079050610ead565b73496f4e8ac11076350a59b88d2ad62bc20d410ea373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d805760089050610ead565b7341fb6b8d0f586e73d575bc57cfd29142b3214a4773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610dd05760099050610ead565b73c1068312a6333e6601f937c4773065b70d38a5bf73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e2057600a9050610ead565b73ae9d49ea64df38b9fcbc238bc7004a1421f7eee873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e7057600b9050610ead565b816040517fec459bc0000000000000000000000000000000000000000000000000000000008152600401610ea49190614d7c565b60405180910390fd5b919050565b6000610ebd82611f59565b9050919050565b6000808251111561112e576000610ed9611f3d565b905060006305f5e10084600081518110610ef657610ef5614c67565b5b60200260200101516020015147610f0d9190614ad0565b610f179190614b41565b905060005b84518110156111235760008373ffffffffffffffffffffffffffffffffffffffff166325eb876f878481518110610f5657610f55614c67565b5b60200260200101516000015160016040518363ffffffff1660e01b8152600401610f81929190614e21565b602060405180830381865afa158015610f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc29190614cd5565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fff9190614d7c565b602060405180830381865afa15801561101c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110409190614dac565b90508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561108d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b19190614e76565b600a6110bd9190614fd6565b816402540be4008986815181106110d7576110d6614c67565b5b6020026020010151602001516110ed9190614ad0565b6110f79190614ad0565b6111019190614b41565b8461110c9190615021565b93505050808061111b90614dd9565b915050610f1c565b508092505050611133565b600090505b919050565b6000670de0b6b3a764000061114b611152565b1015905090565b6000806111a7600067ffffffffffffffff81111561117357611172613ede565b5b6040519080825280602002602001820160405280156111a15781602001602082028036833780820191505090505b5061156b565b905060006111b88260200151611afc565b905060006111ce83600001518460400151611964565b905060008203611203577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9350505050611228565b81670de0b6b3a7640000826112189190614ad0565b6112229190614b41565b93505050505b90565b600061123682610eb2565b61123f84611935565b6112499190615021565b905092915050565b6060600061125d6122ae565b90506000818054905067ffffffffffffffff81111561127f5761127e613ede565b5b6040519080825280602002602001820160405280156112ad5781602001602082028036833780820191505090505b50905060005b8280549050811015611316578281815481106112d2576112d1614c67565b5b9060005260206000209060030201600101548282815181106112f7576112f6614c67565b5b602002602001018181525050808061130e90614dd9565b9150506112b3565b506000611322826122c0565b9050805167ffffffffffffffff81111561133f5761133e613ede565b5b60405190808252806020026020018201604052801561137857816020015b611365613e19565b81526020019060019003908161135d5790505b50935060005b81518110156114015760405180604001604052808483815181106113a5576113a4614c67565b5b602002602001015181526020018383815181106113c5576113c4614c67565b5b60200260200101518152508582815181106113e3576113e2614c67565b5b602002602001018190525080806113f990614dd9565b91505061137e565b5050505090565b600080611413611999565b905061141e81610ec4565b91505090565b60606000611430612511565b9050600061143c612584565b90506000611449826125ac565b611460576001835161145b9190615021565b611463565b82515b905060008167ffffffffffffffff81111561148157611480613ede565b5b6040519080825280602002602001820160405280156114af5781602001602082028036833780820191505090505b509050600083826000815181106114c9576114c8614c67565b5b60200260200101818152505060005b855181101561155f57848682815181106114f5576114f4614c67565b5b60200260200101511461154c5760018261150f9190615021565b915085818151811061152457611523614c67565b5b602002602001015183838151811061153f5761153e614c67565b5b6020026020010181815250505b808061155790614dd9565b9150506114d8565b50819550505050505090565b611573613e36565b600061157d611424565b90506000611589611b0e565b905060006115956125d7565b9050600085518251845186516115ab9190615021565b6115b59190615021565b6115bf9190615021565b67ffffffffffffffff8111156115d8576115d7613ede565b5b6040519080825280602002602001820160405280156116065781602001602082028036833780820191505090505b5090506000611618828683885161269f565b8451816116259190615021565b9050611634828583875161269f565b8351816116419190615021565b9050611650828483865161269f565b82518161165d9190615021565b905061166c8288838a5161269f565b6000611677836122c0565b9050600091506000865167ffffffffffffffff81111561169a57611699613ede565b5b6040519080825280602002602001820160405280156116d357816020015b6116c0613e19565b8152602001906001900390816116b85790505b5090506116e4818584868b5161279c565b8651836116f19190615021565b92506000865167ffffffffffffffff8111156117105761170f613ede565b5b60405190808252806020026020018201604052801561174957816020015b611736613e19565b81526020019060019003908161172e5790505b50905061175a818685878b5161279c565b8051846117679190615021565b93506000865167ffffffffffffffff81111561178657611785613ede565b5b6040519080825280602002602001820160405280156117bf57816020015b6117ac613e19565b8152602001906001900390816117a45790505b5090506117d0818786888b5161279c565b8651856117dd9190615021565b945060008b5167ffffffffffffffff8111156117fc576117fb613ede565b5b60405190808252806020026020018201604052801561183557816020015b611822613e19565b81526020019060019003908161181a5790505b50905060005b8c518110156118d457604051806040016040528089898461185c9190615021565b8151811061186d5761186c614c67565b5b602002602001015181526020018789846118879190615021565b8151811061189857611897614c67565b5b60200260200101518152508282815181106118b6576118b5614c67565b5b602002602001018190525080806118cc90614dd9565b91505061183b565b506040518060800160405280858152602001848152602001838152602001828152509a5050505050505050505050919050565b600080611912611251565b905061191d81611f59565b91505090565b600061192e82612965565b9050919050565b600061194082610ec4565b9050919050565b6000670de0b6b3a764000061195b83610662565b10159050919050565b60006119708383612977565b905092915050565b6000611982611907565b61198a611408565b6119949190615021565b905090565b606060006119a5611424565b905060006119b282611e8f565b9050815167ffffffffffffffff8111156119cf576119ce613ede565b5b604051908082528060200260200182016040528015611a0857816020015b6119f5613e19565b8152602001906001900390816119ed5790505b50925060005b8251811015611a91576040518060400160405280848381518110611a3557611a34614c67565b5b60200260200101518152602001838381518110611a5557611a54614c67565b5b6020026020010151815250848281518110611a7357611a72614c67565b5b60200260200101819052508080611a8990614dd9565b915050611a0e565b50505090565b611a9f613e5e565b6040518060a00160405280611ab2611978565b8152602001611abf610622565b8152602001611acc611bab565b8152602001611ad9611152565b8152602001611ae6611138565b611af1576000611af4565b60015b815250905090565b6000611b0782611bd5565b9050919050565b60606000611b1a611f3d565b90508073ffffffffffffffffffffffffffffffffffffffff166366273c196040518163ffffffff1660e01b8152600401600060405180830381865afa158015611b67573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611b909190614c1e565b91505090565b611b9f8161299d565b50565b60006003905090565b600080611bb6611999565b90506000611bc2611251565b9050611bce8282612977565b9250505090565b600080611be0611f3d565b90506000805b8451811015611e845760008373ffffffffffffffffffffffffffffffffffffffff166325eb876f878481518110611c2057611c1f614c67565b5b60200260200101516000015160016040518363ffffffff1660e01b8152600401611c4b929190614e21565b602060405180830381865afa158015611c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8c9190614cd5565b905060008473ffffffffffffffffffffffffffffffffffffffff16630edc25b6888581518110611cbf57611cbe614c67565b5b6020026020010151600001516040518263ffffffff1660e01b8152600401611ce79190614ca5565b602060405180830381865afa158015611d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d289190614cd5565b90508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d999190614e76565b600a611da59190614fd6565b6402540be400888581518110611dbe57611dbd614c67565b5b6020026020010151602001518373ffffffffffffffffffffffffffffffffffffffff16636011163e306040518263ffffffff1660e01b8152600401611e039190614d7c565b602060405180830381865afa158015611e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e449190614dac565b611e4e9190614ad0565b611e589190614ad0565b611e629190614b41565b84611e6d9190615021565b935050508080611e7c90614dd9565b915050611be6565b508092505050919050565b6060611e9a82612a67565b9050919050565b600080600167ffffffffffffffff811115611ebf57611ebe613ede565b5b604051908082528060200260200182016040528015611eed5781602001602082028036833780820191505090505b5090508281600081518110611f0557611f04614c67565b5b602002602001018181525050611f1a81611e8f565b600081518110611f2d57611f2c614c67565b5b6020026020010151915050919050565b60007334cb5fc3b28215713682de95daf2b00a4619db03905090565b600080611f646122ae565b90506000805b82805490508110156122a357828181548110611f8957611f88614c67565b5b906000526020600020906003020160010154858281518110611fae57611fad614c67565b5b60200260200101516000015114611ffa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff1906150b2565b60405180910390fd5b6000803073ffffffffffffffffffffffffffffffffffffffff1685848154811061202757612026614c67565b5b906000526020600020906003020160020160009054906101000a900460e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516120b69190615143565b600060405180830381855afa9150503d80600081146120f1576040519150601f19603f3d011682016040523d82523d6000602084013e6120f6565b606091505b5091509150811561228e576000818060200190518101906121179190614dac565b90506000612123611f3d565b73ffffffffffffffffffffffffffffffffffffffff166325eb876f8a878151811061215157612150614c67565b5b60200260200101516000015160016040518363ffffffff1660e01b815260040161217c929190614e21565b602060405180830381865afa158015612199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bd9190614cd5565b90508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561220a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222e9190614e76565b600a61223a9190614fd6565b826402540be4008b888151811061225457612253614c67565b5b60200260200101516020015161226a9190614ad0565b6122749190614ad0565b61227e9190614b41565b866122899190615021565b955050505b5050808061229b90614dd9565b915050611f6a565b508092505050919050565b60006122b8612c76565b600701905090565b60606000825167ffffffffffffffff8111156122df576122de613ede565b5b60405190808252806020026020018201604052801561230d5781602001602082028036833780820191505090505b5090506000806000905060005b85518110156123eb576000925060005b828110156123895786828151811061234557612344614c67565b5b60200260200101518582815181106123605761235f614c67565b5b6020026020010151036123765760019350612389565b808061238190614dd9565b91505061232a565b50826123d8578581815181106123a2576123a1614c67565b5b60200260200101518483815181106123bd576123bc614c67565b5b60200260200101818152505081806123d490614dd9565b9250505b80806123e390614dd9565b91505061231a565b5080835260006123fa84611e8f565b90506000865167ffffffffffffffff81111561241957612418613ede565b5b6040519080825280602002602001820160405280156124475781602001602082028036833780820191505090505b50905060005b87518110156125035760005b86518110156124ef5786818151811061247557612474614c67565b5b60200260200101518983815181106124905761248f614c67565b5b6020026020010151036124dc578381815181106124b0576124af614c67565b5b60200260200101518383815181106124cb576124ca614c67565b5b6020026020010181815250506124ef565b80806124e790614dd9565b915050612459565b5080806124fb90614dd9565b91505061244d565b508095505050505050919050565b6060600061251d612c76565b90508060040160000160000160000160000180548060200260200160405190810160405280929190818152602001828054801561257957602002820191906000526020600020905b815481526020019060010190808311612565575b505050505091505090565b60007f4156415800000000000000000000000000000000000000000000000000000000905090565b6000806125b7612c76565b90506125cf8382600401612ca390919063ffffffff16565b915050919050565b606060006125e36122ae565b9050808054905067ffffffffffffffff81111561260357612602613ede565b5b6040519080825280602002602001820160405280156126315781602001602082028036833780820191505090505b50915060005b818054905081101561269a5781818154811061265657612655614c67565b5b90600052602060002090600302016001015483828151811061267b5761267a614c67565b5b602002602001018181525050808061269290614dd9565b915050612637565b505090565b82518111156126e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126da906151cc565b60405180910390fd5b835181836126f19190615021565b1115612732576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127299061525e565b60405180910390fd5b60005b81811015612795578381815181106127505761274f614c67565b5b60200260200101518584836127659190615021565b8151811061277657612775614c67565b5b602002602001018181525050808061278d90614dd9565b915050612735565b5050505050565b83518111156127e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d7906152f0565b60405180910390fd5b8251811115612824576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281b90615382565b60405180910390fd5b835181836128329190615021565b1115612873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286a90615414565b60405180910390fd5b825181836128819190615021565b11156128c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b9906154a6565b60405180910390fd5b60005b8181101561295d5760405180604001604052808685846128e59190615021565b815181106128f6576128f5614c67565b5b602002602001015181526020018585846129109190615021565b8151811061292157612920614c67565b5b602002602001015181525086828151811061293f5761293e614c67565b5b6020026020010181905250808061295590614dd9565b9150506128c5565b505050505050565b600061297082612cba565b9050919050565b600061298282612dae565b61298b846131d7565b6129959190615021565b905092915050565b60006103e8826129ad9190614b41565b905080421015612a0f57603c42826129c591906154c6565b1115612a0a5780426040517fb6b0916d000000000000000000000000000000000000000000000000000000008152600401612a019291906154fa565b60405180910390fd5b612a63565b60b48142612a1d91906154c6565b1115612a625780426040517f0321d0b5000000000000000000000000000000000000000000000000000000008152600401612a599291906154fa565b60405180910390fd5b5b5050565b60606000825167ffffffffffffffff811115612a8657612a85613ede565b5b604051908082528060200260200182016040528015612ab45781602001602082028036833780820191505090505b5090506000835167ffffffffffffffff811115612ad457612ad3613ede565b5b604051908082528060200260200182016040528015612b025781602001602082028036833780820191505090505b5090506000845167ffffffffffffffff811115612b2257612b21613ede565b5b604051908082528060200260200182016040528015612b5557816020015b6060815260200190600190039081612b405790505b50905060005b8551811015612be857612b6c611ba2565b60ff1667ffffffffffffffff811115612b8857612b87613ede565b5b604051908082528060200260200182016040528015612bb65781602001602082028036833780820191505090505b50828281518110612bca57612bc9614c67565b5b60200260200101819052508080612be090614dd9565b915050612b5b565b506000612bf36135d3565b90506000612c00826136e4565b61ffff169050600282612c139190615021565b91506000604051905060005b82811015612c5e576000612c368a89898989613740565b90508085612c449190615021565b945082604052508080612c5690614dd9565b915050612c1f565b50612c698487613a38565b9650505050505050919050565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b6000612cb28360000183613b85565b905092915050565b600080825103612cf6576040517f9e198af900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612cff82613ba5565b600060028351612d0f9190614b41565b9050600060028451612d219190615523565b03612d8a576000612d7284600184612d3991906154c6565b81518110612d4a57612d49614c67565b5b6020026020010151858481518110612d6557612d64614c67565b5b6020026020010151613bf8565b9050600281612d819190614b41565b92505050612da9565b828181518110612d9d57612d9c614c67565b5b60200260200101519150505b919050565b600080612db9611f3d565b90506000612dc56122ae565b90506000805b82805490508110156131cb57828181548110612dea57612de9614c67565b5b906000526020600020906003020160010154868281518110612e0f57612e0e614c67565b5b60200260200101516000015114612e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e52906150b2565b60405180910390fd5b6000803073ffffffffffffffffffffffffffffffffffffffff16858481548110612e8857612e87614c67565b5b906000526020600020906003020160020160009054906101000a900460e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612f179190615143565b600060405180830381855afa9150503d8060008114612f52576040519150601f19603f3d011682016040523d82523d6000602084013e612f57565b606091505b509150915081156131b657600081806020019051810190612f789190614dac565b90506000612f84611f3d565b73ffffffffffffffffffffffffffffffffffffffff166325eb876f8b8781518110612fb257612fb1614c67565b5b60200260200101516000015160016040518363ffffffff1660e01b8152600401612fdd929190614e21565b602060405180830381865afa158015612ffa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301e9190614cd5565b90506305f5e1008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130949190614e76565b600a6130a09190614fd6565b6130aa9190614ad0565b8873ffffffffffffffffffffffffffffffffffffffff16636953c06c8988815481106130d9576130d8614c67565b5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016131279190614d7c565b602060405180830381865afa158015613144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131689190614dac565b838c888151811061317c5761317b614c67565b5b6020026020010151602001516131929190614ad0565b61319c9190614ad0565b6131a69190614b41565b866131b19190615021565b955050505b505080806131c390614dd9565b915050612dcb565b50809350505050919050565b6000806131e2612584565b905060006131ee611f3d565b905060006a52b7d2dcc80cd2e40000008273ffffffffffffffffffffffffffffffffffffffff16636953c06c8473ffffffffffffffffffffffffffffffffffffffff166325eb876f8760016040518363ffffffff1660e01b8152600401613256929190614e21565b602060405180830381865afa158015613273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132979190614cd5565b6040518263ffffffff1660e01b81526004016132b39190614d7c565b602060405180830381865afa1580156132d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132f49190614dac565b478760008151811061330957613308614c67565b5b60200260200101516020015161331f9190614ad0565b6133299190614ad0565b6133339190614b41565b90506000855111156135c85760005b85518110156135c65760008373ffffffffffffffffffffffffffffffffffffffff166325eb876f88848151811061337c5761337b614c67565b5b60200260200101516000015160016040518363ffffffff1660e01b81526004016133a7929190614e21565b602060405180830381865afa1580156133c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e89190614cd5565b90506305f5e1008173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561343a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061345e9190614e76565b600a61346a9190614fd6565b6134749190614ad0565b8473ffffffffffffffffffffffffffffffffffffffff16636953c06c836040518263ffffffff1660e01b81526004016134ad9190614d7c565b602060405180830381865afa1580156134ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ee9190614dac565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016135279190614d7c565b602060405180830381865afa158015613544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135689190614dac565b89858151811061357b5761357a614c67565b5b6020026020010151602001516135919190614ad0565b61359b9190614ad0565b6135a59190614b41565b836135b09190615021565b92505080806135be90614dd9565b915050613342565b505b809350505050919050565b60008060203603356602ed57011e000081166602ed57011e00001491505080613628576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008036905060291115613668576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602936033590506000600960038362ffffff166136859190615021565b61368f9190615021565b905060003690506002826136a39190615021565b11156136db576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80935050505090565b6000806020836136f49190615021565b90506000369050811115613734576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80360335915050919050565b60008060008061374f85613c0e565b91509150600080600060606000600d61377d60208861376e9190615021565b89613c8490919063ffffffff16565b6137879190615021565b905060006137ae60688c61379b9190615021565b6000369050613c9a90919063ffffffff16565b905060006137e08360418e6137c39190615021565b6137cd9190615021565b6000369050613c9a90919063ffffffff16565b90506137ec838261381a565b9350826020850120945081359650613836565b60006040519050818152602081019050818101604052919050565b6000613825836137ff565b838382376020810391505092915050565b6138478765ffffffffffff16611b96565b61385d8560418e6138589190615021565b613cb0565b955061386886610aae565b60ff1699505050505050505060008060005b84811015613a035761388d888583613d2f565b809350819450505060005b8c518110156139ef578c81815181106138b4576138b3614c67565b5b602002602001015184036139dc5760008b82815181106138d7576138d6614c67565b5b602002602001015190506138eb8189613db5565b15801561391b57506138fb611ba2565b60ff168d838151811061391157613910614c67565b5b6020026020010151105b156139d6578c828151811061393357613932614c67565b5b60200260200101805180919061394890614dd9565b81525050838b83815181106139605761395f614c67565b5b602002602001015160018f858151811061397d5761397c614c67565b5b602002602001015161398f91906154c6565b815181106139a05761399f614c67565b5b6020026020010181815250506139b68189613dce565b8c83815181106139c9576139c8614c67565b5b6020026020010181815250505b506139ef565b80806139e790614dd9565b915050613898565b5080806139fb90614dd9565b91505061387a565b50505081602082613a149190615021565b613a1e9190614ad0565b604e613a2a9190615021565b935050505095945050505050565b60606000835167ffffffffffffffff811115613a5757613a56613ede565b5b604051908082528060200260200182016040528015613a855781602001602082028036833780820191505090505b5090506000613a92611ba2565b60ff16905060005b8551811015613b795781858281518110613ab757613ab6614c67565b5b60200260200101511015613b1e57848181518110613ad857613ad7614c67565b5b6020026020010151826040517f2b13aef5000000000000000000000000000000000000000000000000000000008152600401613b159291906154fa565b60405180910390fd5b6000613b43878381518110613b3657613b35614c67565b5b6020026020010151611923565b905080848381518110613b5957613b58614c67565b5b602002602001018181525050508080613b7190614dd9565b915050613a9a565b50819250505092915050565b6000613b9d8284600001613ddf90919063ffffffff16565b905092915050565b805160208201602082028101815b81811015613bf157825b81811015613be5578151815180821015613bd8578084528183525b5050602081019050613bbd565b50602081019050613bb3565b5050505050565b60008183613c069190615021565b905092915050565b6000806000806000604186613c239190615021565b90506000613c4a602083613c379190615021565b6000369050613c9a90919063ffffffff16565b905080359350613c64600382613c9a90919063ffffffff16565b9050803592508362ffffff1695508263ffffffff16945050505050915091565b60008183613c929190614ad0565b905092915050565b60008183613ca891906154c6565b905092915050565b6000806000808436038035935060208101905080359250602081019050803560001a91505060018682858560405160008152602001604052604051613cf89493929190615554565b6020604051602081039080840390855afa158015613d1a573d6000803e3d6000fd5b50505060206040510351935050505092915050565b6000806000604e86613d419190615021565b90506000613d82613d73602088613d589190615021565b876001613d659190615021565b613c8490919063ffffffff16565b83613bf890919063ffffffff16565b90506000613d9d826000369050613c9a90919063ffffffff16565b90508035945060208101359350505050935093915050565b600080826001901b841690506000811191505092915050565b6000816001901b8317905092915050565b6000613dee8360000183613df6565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b604051806040016040528060008019168152602001600081525090565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6040518060a00160405280600590602082028036833780820191505090505090565b6000819050919050565b613e9381613e80565b82525050565b6000602082019050613eae6000830184613e8a565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613f1682613ecd565b810181811067ffffffffffffffff82111715613f3557613f34613ede565b5b80604052505050565b6000613f48613eb4565b9050613f548282613f0d565b919050565b600067ffffffffffffffff821115613f7457613f73613ede565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b613f9d81613f8a565b8114613fa857600080fd5b50565b600081359050613fba81613f94565b92915050565b6000613fd3613fce84613f59565b613f3e565b90508083825260208201905060208402830185811115613ff657613ff5613f85565b5b835b8181101561401f578061400b8882613fab565b845260208401935050602081019050613ff8565b5050509392505050565b600082601f83011261403e5761403d613ec8565b5b813561404e848260208601613fc0565b91505092915050565b60006020828403121561406d5761406c613ebe565b5b600082013567ffffffffffffffff81111561408b5761408a613ec3565b5b61409784828501614029565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6140d581613e80565b82525050565b60006140e783836140cc565b60208301905092915050565b6000602082019050919050565b600061410b826140a0565b61411581856140ab565b9350614120836140bc565b8060005b8381101561415157815161413888826140db565b9750614143836140f3565b925050600181019050614124565b5085935050505092915050565b600060208201905081810360008301526141788184614100565b905092915050565b60006020828403121561419657614195613ebe565b5b60006141a484828501613fab565b91505092915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156141d2576141d1613ede565b5b602082029050602081019050919050565b6141ec81613e80565b81146141f757600080fd5b50565b600081359050614209816141e3565b92915050565b600060408284031215614225576142246141ad565b5b61422f6040613f3e565b9050600061423f84828501613fab565b6000830152506020614253848285016141fa565b60208301525092915050565b600061427261426d846141b7565b613f3e565b9050808382526020820190506040840283018581111561429557614294613f85565b5b835b818110156142be57806142aa888261420f565b845260208401935050604081019050614297565b5050509392505050565b600082601f8301126142dd576142dc613ec8565b5b81356142ed84826020860161425f565b91505092915050565b60006080828403121561430c5761430b6141ad565b5b6143166080613f3e565b9050600082013567ffffffffffffffff811115614336576143356141b2565b5b614342848285016142c8565b600083015250602082013567ffffffffffffffff811115614366576143656141b2565b5b614372848285016142c8565b602083015250604082013567ffffffffffffffff811115614396576143956141b2565b5b6143a2848285016142c8565b604083015250606082013567ffffffffffffffff8111156143c6576143c56141b2565b5b6143d2848285016142c8565b60608301525092915050565b6000602082840312156143f4576143f3613ebe565b5b600082013567ffffffffffffffff81111561441257614411613ec3565b5b61441e848285016142f6565b91505092915050565b60008115159050919050565b61443c81614427565b82525050565b60006020820190506144576000830184614433565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61449281613f8a565b82525050565b6040820160008201516144ae6000850182614489565b5060208201516144c160208501826140cc565b50505050565b60006144d38383614498565b60408301905092915050565b6000602082019050919050565b60006144f78261445d565b6145018185614468565b935061450c83614479565b8060005b8381101561453d57815161452488826144c7565b975061452f836144df565b925050600181019050614510565b5085935050505092915050565b6000602082019050818103600083015261456481846144ec565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006145978261456c565b9050919050565b6145a78161458c565b81146145b257600080fd5b50565b6000813590506145c48161459e565b92915050565b6000602082840312156145e0576145df613ebe565b5b60006145ee848285016145b5565b91505092915050565b600060ff82169050919050565b61460d816145f7565b82525050565b60006020820190506146286000830184614604565b92915050565b60006020828403121561464457614643613ebe565b5b600082013567ffffffffffffffff81111561466257614661613ec3565b5b61466e848285016142c8565b91505092915050565b6000806040838503121561468e5761468d613ebe565b5b600083013567ffffffffffffffff8111156146ac576146ab613ec3565b5b6146b8858286016142c8565b925050602083013567ffffffffffffffff8111156146d9576146d8613ec3565b5b6146e5858286016142c8565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006147278383614489565b60208301905092915050565b6000602082019050919050565b600061474b826146ef565b61475581856146fa565b93506147608361470b565b8060005b83811015614791578151614778888261471b565b975061478383614733565b925050600181019050614764565b5085935050505092915050565b600060208201905081810360008301526147b88184614740565b905092915050565b600082825260208201905092915050565b60006147dc8261445d565b6147e681856147c0565b93506147f183614479565b8060005b8381101561482257815161480988826144c7565b9750614814836144df565b9250506001810190506147f5565b5085935050505092915050565b6000608083016000830151848203600086015261484c82826147d1565b9150506020830151848203602086015261486682826147d1565b9150506040830151848203604086015261488082826147d1565b9150506060830151848203606086015261489a82826147d1565b9150508091505092915050565b600060208201905081810360008301526148c1818461482f565b905092915050565b600067ffffffffffffffff8211156148e4576148e3613ede565b5b602082029050602081019050919050565b6000614908614903846148c9565b613f3e565b9050808382526020820190506020840283018581111561492b5761492a613f85565b5b835b81811015614954578061494088826141fa565b84526020840193505060208101905061492d565b5050509392505050565b600082601f83011261497357614972613ec8565b5b81356149838482602086016148f5565b91505092915050565b6000602082840312156149a2576149a1613ebe565b5b600082013567ffffffffffffffff8111156149c0576149bf613ec3565b5b6149cc8482850161495e565b91505092915050565b600060059050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b614a0b816149d5565b614a1581846149e0565b9250614a20826149eb565b8060005b83811015614a51578151614a3887826140db565b9650614a43836149f5565b925050600181019050614a24565b505050505050565b600060a082019050614a6e6000830184614a02565b92915050565b600060208284031215614a8a57614a89613ebe565b5b6000614a98848285016141fa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614adb82613e80565b9150614ae683613e80565b9250828202614af481613e80565b91508282048414831517614b0b57614b0a614aa1565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614b4c82613e80565b9150614b5783613e80565b925082614b6757614b66614b12565b5b828204905092915050565b600081519050614b8181613f94565b92915050565b6000614b9a614b9584613f59565b613f3e565b90508083825260208201905060208402830185811115614bbd57614bbc613f85565b5b835b81811015614be65780614bd28882614b72565b845260208401935050602081019050614bbf565b5050509392505050565b600082601f830112614c0557614c04613ec8565b5b8151614c15848260208601614b87565b91505092915050565b600060208284031215614c3457614c33613ebe565b5b600082015167ffffffffffffffff811115614c5257614c51613ec3565b5b614c5e84828501614bf0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b614c9f81613f8a565b82525050565b6000602082019050614cba6000830184614c96565b92915050565b600081519050614ccf8161459e565b92915050565b600060208284031215614ceb57614cea613ebe565b5b6000614cf984828501614cc0565b91505092915050565b6000614d0d8261456c565b9050919050565b614d1d81614d02565b8114614d2857600080fd5b50565b600081519050614d3a81614d14565b92915050565b600060208284031215614d5657614d55613ebe565b5b6000614d6484828501614d2b565b91505092915050565b614d768161458c565b82525050565b6000602082019050614d916000830184614d6d565b92915050565b600081519050614da6816141e3565b92915050565b600060208284031215614dc257614dc1613ebe565b5b6000614dd084828501614d97565b91505092915050565b6000614de482613e80565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614e1657614e15614aa1565b5b600182019050919050565b6000604082019050614e366000830185614c96565b614e436020830184614433565b9392505050565b614e53816145f7565b8114614e5e57600080fd5b50565b600081519050614e7081614e4a565b92915050565b600060208284031215614e8c57614e8b613ebe565b5b6000614e9a84828501614e61565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115614efa57808604811115614ed657614ed5614aa1565b5b6001851615614ee55780820291505b8081029050614ef385614ea3565b9450614eba565b94509492505050565b600082614f135760019050614fcf565b81614f215760009050614fcf565b8160018114614f375760028114614f4157614f70565b6001915050614fcf565b60ff841115614f5357614f52614aa1565b5b8360020a915084821115614f6a57614f69614aa1565b5b50614fcf565b5060208310610133831016604e8410600b8410161715614fa55782820a905083811115614fa057614f9f614aa1565b5b614fcf565b614fb28484846001614eb0565b92509050818404811115614fc957614fc8614aa1565b5b81810290505b9392505050565b6000614fe182613e80565b9150614fec836145f7565b92506150197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614f03565b905092915050565b600061502c82613e80565b915061503783613e80565b925082820190508082111561504f5761504e614aa1565b5b92915050565b600082825260208201905092915050565b7f506f736974696f6e2d70726963652073796d626f6c206d69736d617463682e00600082015250565b600061509c601f83615055565b91506150a782615066565b602082019050919050565b600060208201905081810360008301526150cb8161508f565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156151065780820151818401526020810190506150eb565b60008484015250505050565b600061511d826150d2565b61512781856150dd565b93506151378185602086016150e8565b80840191505092915050565b600061514f8284615112565b915081905092915050565b7f6e756d6265724f664974656d73203e20746172676574206172726179206c656e60008201527f6774680000000000000000000000000000000000000000000000000000000000602082015250565b60006151b6602383615055565b91506151c18261515a565b604082019050919050565b600060208201905081810360008301526151e5816151a9565b9050919050565b7f6f6666736574202b206e756d6265724f664974656d73203e207461726765742060008201527f6172726179206c656e6774680000000000000000000000000000000000000000602082015250565b6000615248602c83615055565b9150615253826151ec565b604082019050919050565b600060208201905081810360008301526152778161523b565b9050919050565b7f6e756d6265724f664974656d73203e20736f757263654173736574732061727260008201527f6179206c656e6774680000000000000000000000000000000000000000000000602082015250565b60006152da602983615055565b91506152e58261527e565b604082019050919050565b60006020820190508181036000830152615309816152cd565b9050919050565b7f6e756d6265724f664974656d73203e20736f757263655072696365732061727260008201527f6179206c656e6774680000000000000000000000000000000000000000000000602082015250565b600061536c602983615055565b915061537782615310565b604082019050919050565b6000602082019050818103600083015261539b8161535f565b9050919050565b7f6f6666736574202b206e756d6265724f664974656d73203e20736f757263654160008201527f7373657473206172726179206c656e6774680000000000000000000000000000602082015250565b60006153fe603283615055565b9150615409826153a2565b604082019050919050565b6000602082019050818103600083015261542d816153f1565b9050919050565b7f6f6666736574202b206e756d6265724f664974656d73203e20736f757263655060008201527f7269636573206172726179206c656e6774680000000000000000000000000000602082015250565b6000615490603283615055565b915061549b82615434565b604082019050919050565b600060208201905081810360008301526154bf81615483565b9050919050565b60006154d182613e80565b91506154dc83613e80565b92508282039050818111156154f4576154f3614aa1565b5b92915050565b600060408201905061550f6000830185613e8a565b61551c6020830184613e8a565b9392505050565b600061552e82613e80565b915061553983613e80565b92508261554957615548614b12565b5b828206905092915050565b60006080820190506155696000830187614c96565b6155766020830186614604565b6155836040830185614c96565b6155906060830184614c96565b9594505050505056fea2646970667358221220c2bd9a8e36383331e1f5c8b99c0721f530ec2764128fc5ed169a1feb09f41c9364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "aggregateValues(uint256[])": {
        "details": "This function may be overriden by the child consumer contract. It should aggregate values from different signers to a single uint value. By default, it calculates the median value",
        "params": {
          "values": "An array of uint256 values from different signers"
        },
        "returns": {
          "_0": "Result of the aggregation in the form of a single number"
        }
      },
      "getAllPricesForLiquidation(bytes32[])": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getDebt()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getDebtAssetsPrices()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getHealthRatio()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getOwnedAssetsWithNativePrices()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getPrice(bytes32)": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getPrices(bytes32[])": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getStakedPositionsPrices()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getStakedValue()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getThresholdWeightedValue()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getTotalAssetsValue()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getTotalValue()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getUniqueSignersThreshold()": {
        "details": "This function should be overriden by the child consumer contract.",
        "returns": {
          "_0": "The minimum required value of unique authorised signers"
        }
      },
      "isSolvent()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "isSolventWithPrices(((bytes32,uint256)[],(bytes32,uint256)[],(bytes32,uint256)[],(bytes32,uint256)[]))": {
        "params": {
          "cachedPrices": "Struct containing arrays of Asset/Price structs used to calculate value of owned assets, debt and staked positions*"
        }
      },
      "validateTimestamp(uint256)": {
        "details": "This function may be overriden by the child consumer contract. It should validate the timestamp against the current time (block.timestamp) It should revert with a helpful message if the timestamp is not valid",
        "params": {
          "receivedTimestampMilliseconds": "Timestamp extracted from calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_getTotalAssetsValueBase((bytes32,uint256)[])": {
        "notice": "Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.*"
      },
      "getAllPricesForLiquidation(bytes32[])": {
        "notice": "Returns CachedPrices struct consisting of Asset/Price arrays for ownedAssets, debtAssets, stakedPositions and assetsToRepay. Used during the liquidation process in order to obtain all necessary prices from calldata only once."
      },
      "getDebt()": {
        "notice": "Returns the current debt denominated in USD"
      },
      "getDebtAssets()": {
        "notice": "Returns an array of bytes32[] symbols of debt (borrowable) assets.*"
      },
      "getDebtAssetsPrices()": {
        "notice": "Returns an array of Asset/Price structs of debt (borrowable) assets."
      },
      "getDebtWithPrices((bytes32,uint256)[])": {
        "notice": "Returns the current debt denominated in USD Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.*"
      },
      "getHealthRatio()": {
        "notice": "Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided by current debt"
      },
      "getHealthRatioWithPrices(((bytes32,uint256)[],(bytes32,uint256)[],(bytes32,uint256)[],(bytes32,uint256)[]))": {
        "notice": "Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided by current debt Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.*"
      },
      "getOwnedAssetsWithNative()": {
        "notice": "Returns list of owned assets that always included NativeToken at index 0*"
      },
      "getOwnedAssetsWithNativePrices()": {
        "notice": "Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets."
      },
      "getPrice(bytes32)": {
        "notice": "Helper method exposing the redstone-evm-connector getOracleNumericValueFromTxMsg() method."
      },
      "getPrices(bytes32[])": {
        "notice": "Helper method exposing the redstone-evm-connector getOracleNumericValuesFromTxMsg() method."
      },
      "getStakedPositionsPrices()": {
        "notice": "Returns an array of Asset/Price structs of staked positions."
      },
      "getStakedValue()": {
        "notice": "Returns the current value of staked positions in USD."
      },
      "getStakedValueWithPrices((bytes32,uint256)[])": {
        "notice": "Returns the current value of staked positions in USD. Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.*"
      },
      "getThresholdWeightedValue()": {
        "notice": "Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions"
      },
      "getThresholdWeightedValueWithPrices((bytes32,uint256)[],(bytes32,uint256)[])": {
        "notice": "Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.*"
      },
      "getTotalAssetsValue()": {
        "notice": "Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions"
      },
      "getTotalAssetsValueWithPrices((bytes32,uint256)[])": {
        "notice": "Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.*"
      },
      "getTotalValue()": {
        "notice": "Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions"
      },
      "getTotalValueWithPrices((bytes32,uint256)[],(bytes32,uint256)[])": {
        "notice": "Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.*"
      },
      "isSolvent()": {
        "notice": "Checks if the loan is solvent. It means that the Health Ratio is greater than 1e18."
      },
      "isSolventWithPrices(((bytes32,uint256)[],(bytes32,uint256)[],(bytes32,uint256)[],(bytes32,uint256)[]))": {
        "notice": "Checks if the loan is solvent. It means that the Health Ratio is greater than 1e18. Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}