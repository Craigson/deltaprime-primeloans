{
  "address": "0x5a3899FB27183C115FFBE22A58321Bc85d89Ed7f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialDebt",
          "type": "uint256"
        }
      ],
      "name": "SmartLoanCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "canBorrow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_initialDebt",
          "type": "uint256"
        }
      ],
      "name": "createAndFundLoan",
      "outputs": [
        {
          "internalType": "contract SmartLoan",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createLoan",
      "outputs": [
        {
          "internalType": "contract SmartLoan",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccessNFT",
      "outputs": [
        {
          "internalType": "contract ERC721",
          "name": "accessNFT",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllLoans",
      "outputs": [
        {
          "internalType": "contract SmartLoan[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLoanForOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loan",
          "type": "address"
        }
      ],
      "name": "getOwnerOfLoan",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract SmartLoan",
          "name": "_smartLoanImplementation",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loansToOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ownersToLoans",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC721",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "name": "setAccessNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgradeableBeacon",
      "outputs": [
        {
          "internalType": "contract UpgradeableBeacon",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a26413b3a747c57972d7da4884b72cc32b3fb82556ebc801de388b4ee9694f3",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x5a3899FB27183C115FFBE22A58321Bc85d89Ed7f",
    "transactionIndex": 0,
    "gasUsed": "3772372",
    "logsBloom": "0x
    "blockHash": "0xd298c0fdac8483151bf0cd0b950304b6157b75f7ac02f9a8f1010cf84a0ab217",
    "transactionHash": "0x5a26413b3a747c57972d7da4884b72cc32b3fb82556ebc801de388b4ee9694f3",
    "logs": [],
    "blockNumber": 14651699,
    "cumulativeGasUsed": "3772372",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "aad59b778f45eecff71065355ba90d69",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialDebt\",\"type\":\"uint256\"}],\"name\":\"SmartLoanCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"canBorrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialDebt\",\"type\":\"uint256\"}],\"name\":\"createAndFundLoan\",\"outputs\":[{\"internalType\":\"contract SmartLoan\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createLoan\",\"outputs\":[{\"internalType\":\"contract SmartLoan\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessNFT\",\"outputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"accessNFT\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLoans\",\"outputs\":[{\"internalType\":\"contract SmartLoan[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLoanForOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loan\",\"type\":\"address\"}],\"name\":\"getOwnerOfLoan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract SmartLoan\",\"name\":\"_smartLoanImplementation\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loansToOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownersToLoans\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"setAccessNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeableBeacon\",\"outputs\":[{\"internalType\":\"contract UpgradeableBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/upgraded/SmartLoansFactoryWithAccessNFT.sol\":\"SmartLoansFactoryWithAccessNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x0edeb16b9821ae2b16e9d69c383b38d3ad2fbb3e0c06cf809a0786d96e602551\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\",\"keccak256\":\"0x54878f0d2f40b5e13f84977bcd3c71d4c38581414e7efb4909cb16dd3ace392f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/CompoundingIndex.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./lib/WadRayMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * CompoundingIndex\\r\\n * The contract contains logic for time-based index recalculation with minimal memory footprint.\\r\\n * It could be used as a base building block for any index-based entities like deposits and loans.\\r\\n * @dev updatedRate the value of updated rate\\r\\n **/\\r\\ncontract CompoundingIndex is Ownable {\\r\\n  using WadRayMath for uint256;\\r\\n\\r\\n  uint256 private constant SECONDS_IN_YEAR = 365 days;\\r\\n  uint256 private constant BASE_RATE = 1e18;\\r\\n\\r\\n  uint256 public start = block.timestamp;\\r\\n\\r\\n  uint256 public index = BASE_RATE;\\r\\n  uint256 public indexUpdateTime = start;\\r\\n\\r\\n  mapping(uint256 => uint256) prevIndex;\\r\\n  mapping(address => uint256) userUpdateTime;\\r\\n\\r\\n  uint256 public rate;\\r\\n\\r\\n  constructor(address owner_) {\\r\\n    if (address(owner_) != address(0)) {\\r\\n      transferOwnership(owner_);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /* ========== SETTERS ========== */\\r\\n\\r\\n  /**\\r\\n   * Sets the new rate\\r\\n   * Before the new rate is set, the index is updated accumulating interest\\r\\n   * @dev updatedRate the value of updated rate\\r\\n   **/\\r\\n  function setRate(uint256 _rate) public onlyOwner {\\r\\n    updateIndex();\\r\\n    rate = _rate;\\r\\n    emit RateUpdated(rate);\\r\\n  }\\r\\n\\r\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n  /**\\r\\n   * Updates user index\\r\\n   * It persists the update time and the update index time->index mapping\\r\\n   * @dev user address of the index owner\\r\\n   **/\\r\\n  function updateUser(address user) public onlyOwner {\\r\\n    userUpdateTime[user] = block.timestamp;\\r\\n    prevIndex[block.timestamp] = getIndex();\\r\\n  }\\r\\n\\r\\n  /* ========== VIEW FUNCTIONS ========== */\\r\\n\\r\\n  /**\\r\\n   * Gets current value of the compounding index\\r\\n   * It recalculates the value on-demand without updating the storage\\r\\n   **/\\r\\n  function getIndex() public view returns (uint256) {\\r\\n    uint256 period = block.timestamp - indexUpdateTime;\\r\\n    if (period > 0) {\\r\\n      return index.wadToRay().rayMul(getCompoundedFactor(period)).rayToWad();\\r\\n    } else {\\r\\n      return index;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Gets the user value recalculated to the current index\\r\\n   * It recalculates the value on-demand without updating the storage\\r\\n   * Ray operations round up the result, but it is only an issue for very small values (with an order of magnitude\\r\\n   * of 1 Wei)\\r\\n   **/\\r\\n  function getIndexedValue(uint256 value, address user) public view returns (uint256) {\\r\\n    uint256 userTime = userUpdateTime[user];\\r\\n    uint256 prevUserIndex = userTime == 0 ? BASE_RATE : prevIndex[userTime];\\r\\n\\r\\n    return value.wadToRay().rayMul(getIndex().wadToRay()).rayDiv(prevUserIndex.wadToRay()).rayToWad();\\r\\n  }\\r\\n\\r\\n  /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n  function updateIndex() internal {\\r\\n    prevIndex[indexUpdateTime] = index;\\r\\n\\r\\n    index = getIndex();\\r\\n    indexUpdateTime = block.timestamp;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns compounded factor in Ray\\r\\n   **/\\r\\n  function getCompoundedFactor(uint256 period) internal view returns (uint256) {\\r\\n    return ((rate.wadToRay() / SECONDS_IN_YEAR) + WadRayMath.ray()).rayPow(period);\\r\\n  }\\r\\n\\r\\n  /* ========== EVENTS ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev updatedRate the value of updated rate\\r\\n   **/\\r\\n  event RateUpdated(uint256 updatedRate);\\r\\n}\\r\\n\",\"keccak256\":\"0x5770e5fa02286d191787c0a17c906d1c804856a15b0c4ab72d1327d9dfe4625a\",\"license\":\"UNLICENSED\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./CompoundingIndex.sol\\\";\\r\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\r\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Pool\\r\\n * @dev Contract allowing user to deposit and borrow funds from a single pot\\r\\n * Depositors are rewarded with the interest rates collected from borrowers.\\r\\n * Rates are compounded every second and getters always return the current deposit and borrowing balance.\\r\\n * The interest rates calculation is delegated to the external calculator contract.\\r\\n */\\r\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\r\\n  using TransferHelper for address payable;\\r\\n\\r\\n  uint256 public constant MAX_POOL_UTILISATION_FOR_BORROWING = 0.95e18;\\r\\n\\r\\n  mapping(address => mapping(address => uint256)) private _allowed;\\r\\n  mapping(address => uint256) private _deposited;\\r\\n\\r\\n  mapping(address => uint256) public borrowed;\\r\\n\\r\\n  IRatesCalculator private _ratesCalculator;\\r\\n  IBorrowersRegistry private _borrowersRegistry;\\r\\n\\r\\n  CompoundingIndex private _depositIndex;\\r\\n  CompoundingIndex private _borrowIndex;\\r\\n\\r\\n  function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, CompoundingIndex depositIndex_, CompoundingIndex borrowIndex_) public initializer {\\r\\n    require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\r\\n\\r\\n    _borrowersRegistry = borrowersRegistry_;\\r\\n    _ratesCalculator = ratesCalculator_;\\r\\n    _depositIndex = depositIndex_;\\r\\n    _borrowIndex = borrowIndex_;\\r\\n\\r\\n    __Ownable_init();\\r\\n    __ReentrancyGuard_init();\\r\\n    _updateRates();\\r\\n  }\\r\\n\\r\\n  /* ========== SETTERS ========== */\\r\\n\\r\\n  /**\\r\\n   * Sets the new rate calculator.\\r\\n   * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\r\\n   * Only the owner of the Contract can execute this function.\\r\\n   * @dev _ratesCalculator the address of rates calculator\\r\\n   **/\\r\\n  function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\r\\n    // setting address(0) ratesCalculator_ freezes the pool\\r\\n    require(AddressUpgradeable.isContract(address(ratesCalculator_)) || address(ratesCalculator_) == address(0), \\\"Must be a contract\\\");\\r\\n    _ratesCalculator = ratesCalculator_;\\r\\n    if (address(ratesCalculator_) != address(0)) {\\r\\n      _updateRates();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Sets the new borrowers registry contract.\\r\\n   * The borrowers registry decides if an account can borrow funds.\\r\\n   * Only the owner of the Contract can execute this function.\\r\\n   * @dev _borrowersRegistry the address of borrowers registry\\r\\n   **/\\r\\n  function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\r\\n    require(address(borrowersRegistry_) != address(0), \\\"The borrowers registry cannot set to a null address\\\");\\r\\n    require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\r\\n\\r\\n    _borrowersRegistry = borrowersRegistry_;\\r\\n    emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\r\\n  }\\r\\n\\r\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n    require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\r\\n    require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\r\\n\\r\\n    _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n    require(_deposited[msg.sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\r\\n    // (this is verified in \\\"require\\\" above)\\r\\n    unchecked {\\r\\n      _deposited[msg.sender] -= amount;\\r\\n    }\\r\\n\\r\\n    _accumulateDepositInterest(recipient);\\r\\n    _deposited[recipient] += amount;\\r\\n\\r\\n    emit Transfer(msg.sender, recipient, amount);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\r\\n    return _allowed[owner][spender];\\r\\n  }\\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\r\\n    uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\r\\n    _allowed[msg.sender][spender] = newAllowance;\\r\\n\\r\\n    emit Approval(msg.sender, spender, newAllowance);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\r\\n    uint256 currentAllowance = _allowed[msg.sender][spender];\\r\\n    require(currentAllowance >= subtractedValue, \\\"Current allowance is smaller than the subtractedValue\\\");\\r\\n\\r\\n    uint256 newAllowance = currentAllowance - subtractedValue;\\r\\n    _allowed[msg.sender][spender] = newAllowance;\\r\\n\\r\\n    emit Approval(msg.sender, spender, newAllowance);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\r\\n    _allowed[msg.sender][spender] = amount;\\r\\n\\r\\n    emit Approval(msg.sender, spender, amount);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n    require(_allowed[sender][msg.sender] >= amount, \\\"Not enough tokens allowed to transfer required amount\\\");\\r\\n    require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\r\\n    require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\r\\n\\r\\n    _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n    require(_deposited[sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\r\\n    _deposited[sender] -= amount;\\r\\n    _allowed[sender][msg.sender] -= amount;\\r\\n\\r\\n    _accumulateDepositInterest(recipient);\\r\\n    _deposited[recipient] += amount;\\r\\n\\r\\n    emit Transfer(sender, recipient, amount);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Deposits the message value\\r\\n   * It updates user deposited balance, total deposited and rates\\r\\n   **/\\r\\n  function deposit() public payable virtual nonReentrant {\\r\\n    _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n    _mint(msg.sender, msg.value);\\r\\n    _updateRates();\\r\\n\\r\\n    emit Deposit(msg.sender, msg.value, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Withdraws selected amount from the user deposits\\r\\n   * @dev _amount the amount to be withdrawn\\r\\n   **/\\r\\n  function withdraw(uint256 _amount) external nonReentrant {\\r\\n    require(address(this).balance >= _amount, \\\"There is not enough available funds to withdraw\\\");\\r\\n\\r\\n    _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n    _burn(msg.sender, _amount);\\r\\n\\r\\n    payable(msg.sender).safeTransferETH(_amount);\\r\\n\\r\\n    _updateRates();\\r\\n\\r\\n    emit Withdrawal(msg.sender, _amount, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Borrows the specified amount\\r\\n   * It updates user borrowed balance, total borrowed amount and rates\\r\\n   * @dev _amount the amount to be borrowed\\r\\n   **/\\r\\n  function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\r\\n    require(address(this).balance >= _amount, \\\"There is not enough funds in the pool to fund the loan\\\");\\r\\n\\r\\n    _accumulateBorrowingInterest(msg.sender);\\r\\n\\r\\n    borrowed[msg.sender] += _amount;\\r\\n    borrowed[address(this)] += _amount;\\r\\n\\r\\n    payable(msg.sender).safeTransferETH(_amount);\\r\\n\\r\\n    _updateRates();\\r\\n\\r\\n    emit Borrowing(msg.sender, _amount, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Repays the message value\\r\\n   * It updates user borrowed balance, total borrowed amount and rates\\r\\n   * @dev It is only meant to be used by the SmartLoan.\\r\\n   **/\\r\\n  function repay() external payable nonReentrant {\\r\\n    _accumulateBorrowingInterest(msg.sender);\\r\\n\\r\\n    require(borrowed[msg.sender] >= msg.value, \\\"You are trying to repay more that was borrowed by a user\\\");\\r\\n\\r\\n    borrowed[msg.sender] -= msg.value;\\r\\n    borrowed[address(this)] -= msg.value;\\r\\n\\r\\n    _updateRates();\\r\\n\\r\\n    emit Repayment(msg.sender, msg.value, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /* =========\\r\\n\\r\\n\\r\\n  /**\\r\\n   * Returns the current borrowed amount for the given user\\r\\n   * The value includes the interest rates owned at the current moment\\r\\n   * @dev _user the address of queried borrower\\r\\n  **/\\r\\n  function getBorrowed(address _user) public view returns (uint256) {\\r\\n    return _borrowIndex.getIndexedValue(borrowed[_user], _user);\\r\\n  }\\r\\n\\r\\n  function totalSupply() public view override returns (uint256) {\\r\\n    return balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  function totalBorrowed() public view returns (uint256) {\\r\\n    return getBorrowed(address(this));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the current deposited amount for the given user\\r\\n   * The value includes the interest rates earned at the current moment\\r\\n   * @dev _user the address of queried depositor\\r\\n   **/\\r\\n  function balanceOf(address user) public view override returns (uint256) {\\r\\n    return _depositIndex.getIndexedValue(_deposited[user], user);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the current interest rate for deposits\\r\\n   **/\\r\\n  function getDepositRate() public view returns (uint256) {\\r\\n    return _ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the current interest rate for borrowings\\r\\n   **/\\r\\n  function getBorrowingRate() public view returns (uint256) {\\r\\n    return _ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\r\\n   **/\\r\\n  function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\r\\n    uint256 surplus = address(this).balance + totalBorrowed() - totalSupply();\\r\\n\\r\\n    require(amount <= address(this).balance, \\\"Trying to recover more surplus funds than pool balance\\\");\\r\\n    require(amount <= surplus, \\\"Trying to recover more funds than current surplus\\\");\\r\\n\\r\\n    payable(account).safeTransferETH(amount);\\r\\n  }\\r\\n\\r\\n  /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n  function _mint(address account, uint256 amount) internal {\\r\\n    require(account != address(0), \\\"ERC20: cannot mint to the zero address\\\");\\r\\n\\r\\n    _deposited[account] += amount;\\r\\n    _deposited[address(this)] += amount;\\r\\n\\r\\n    emit Transfer(address(0), account, amount);\\r\\n  }\\r\\n\\r\\n  function _burn(address account, uint256 amount) internal {\\r\\n    require(_deposited[account] >= amount, \\\"ERC20: burn amount exceeds user balance\\\");\\r\\n    require(_deposited[address(this)] >= amount, \\\"ERC20: burn amount exceeds current pool indexed balance\\\");\\r\\n\\r\\n    // verified in \\\"require\\\" above\\r\\n    unchecked {\\r\\n      _deposited[account] -= amount;\\r\\n      _deposited[address(this)] -= amount;\\r\\n    }\\r\\n\\r\\n    emit Transfer(account, address(0), amount);\\r\\n  }\\r\\n\\r\\n  function _updateRates() internal {\\r\\n    require(address(_ratesCalculator) != address(0), \\\"Pool is frozen: cannot perform deposit, withdraw, borrow and repay operations\\\");\\r\\n    _depositIndex.setRate(_ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply()));\\r\\n    _borrowIndex.setRate(_ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply()));\\r\\n  }\\r\\n\\r\\n  function _accumulateDepositInterest(address user) internal {\\r\\n    uint256 depositedWithInterest = balanceOf(user);\\r\\n    uint256 interest = depositedWithInterest - _deposited[user];\\r\\n\\r\\n    _mint(user, interest);\\r\\n\\r\\n    emit InterestCollected(user, interest, block.timestamp);\\r\\n\\r\\n    _depositIndex.updateUser(user);\\r\\n    _depositIndex.updateUser(address(this));\\r\\n  }\\r\\n\\r\\n  function _accumulateBorrowingInterest(address user) internal {\\r\\n    uint256 borrowedWithInterest = getBorrowed(user);\\r\\n    uint256 interest = borrowedWithInterest - borrowed[user];\\r\\n    borrowed[user] = borrowedWithInterest;\\r\\n    borrowed[address(this)] += interest;\\r\\n\\r\\n    _borrowIndex.updateUser(user);\\r\\n    _borrowIndex.updateUser(address(this));\\r\\n  }\\r\\n\\r\\n  /* ========== MODIFIERS ========== */\\r\\n\\r\\n  modifier canBorrow() {\\r\\n    require(address(_borrowersRegistry) != address(0), \\\"Borrowers registry is not configured\\\");\\r\\n    require(_borrowersRegistry.canBorrow(msg.sender), \\\"Only the accounts authorised by borrowers registry may borrow\\\");\\r\\n    require(totalSupply() != 0, \\\"Cannot borrow from an empty pool\\\");\\r\\n    _;\\r\\n    require((totalBorrowed() * 1e18) / totalSupply() <= MAX_POOL_UTILISATION_FOR_BORROWING, \\\"The pool utilisation cannot be greater than 95%\\\");\\r\\n  }\\r\\n\\r\\n  /* ========== EVENTS ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after the user deposits funds\\r\\n   * @param user the address performing the deposit\\r\\n   * @param value the amount deposited\\r\\n   * @param timestamp of the deposit\\r\\n   **/\\r\\n  event Deposit(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after the user withdraws funds\\r\\n   * @param user the address performing the withdrawal\\r\\n   * @param value the amount withdrawn\\r\\n   * @param timestamp of the withdrawal\\r\\n   **/\\r\\n  event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after the user borrows funds\\r\\n   * @param user the address that borrows\\r\\n   * @param value the amount borrowed\\r\\n   * @param timestamp time of the borrowing\\r\\n   **/\\r\\n  event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after the user repays debt\\r\\n   * @param user the address that repays\\r\\n   * @param value the amount repaid\\r\\n   * @param timestamp of the repayment\\r\\n   **/\\r\\n  event Repayment(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after accumulating deposit interest\\r\\n   * @param user the address that the deposit interest is accumulated\\r\\n   * @param value the amount accumulated interest\\r\\n   * @param timestamp of the interest accumulation\\r\\n   **/\\r\\n  event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n  * @dev emitted after changing borrowers registry\\r\\n  * @param registry an address of the newly set borrowers registry\\r\\n  * @param timestamp of the borrowers registry change\\r\\n  **/\\r\\n  event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\r\\n}\",\"keccak256\":\"0x21b3560ec5e2ce2072f14d3c5eb80fd33fec38df4f27a2bd6aa48ba4edc9257d\",\"license\":\"UNLICENSED\"},\"contracts/SmartLoan.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./interfaces/IAssetsExchange.sol\\\";\\r\\nimport \\\"./Pool.sol\\\";\\r\\nimport \\\"./SmartLoanProperties.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SmartLoan\\r\\n * A contract that is authorised to borrow funds using delegated credit.\\r\\n * It maintains solvency calculating the current value of assets and borrowings.\\r\\n * In case the value of assets held drops below certain level, part of the funds may be forcibly repaid.\\r\\n * It permits only a limited and safe token transfer.\\r\\n *\\r\\n */\\r\\ncontract SmartLoan is SmartLoanProperties, PriceAware, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\r\\n  using TransferHelper for address payable;\\r\\n  using TransferHelper for address;\\r\\n\\r\\n  function initialize() external initializer {\\r\\n    __Ownable_init();\\r\\n    __ReentrancyGuard_init();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Override PriceAware method to consider Avalanche guaranteed block timestamp time accuracy\\r\\n   **/\\r\\n  function getMaxBlockTimestampDelay() public virtual override view returns (uint256) {\\r\\n    return MAX_BLOCK_TIMESTAMP_DELAY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Override PriceAware method, addresses below belong to authorized signers of data feeds\\r\\n   **/\\r\\n  function isSignerAuthorized(address _receivedSigner) public override virtual view returns (bool) {\\r\\n    return (_receivedSigner == getPriceProvider1()) || (_receivedSigner == getPriceProvider2());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Funds a loan with the value attached to the transaction\\r\\n   **/\\r\\n  function fund() public virtual payable {\\r\\n    emit Funded(msg.sender, msg.value, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * This function allows selling assets without checking if the loan will remain solvent after this operation.\\r\\n   * It is used as part of the sellout() function which sells part/all of assets in order to bring the loan back to solvency.\\r\\n   * It is possible that multiple different assets will have to be sold and for that reason we do not use the remainsSolvent modifier.\\r\\n   **/\\r\\n  function sellAsset(bytes32 asset, uint256 _amount, uint256 _minAvaxOut) internal {\\r\\n    IERC20Metadata token = getERC20TokenInstance(asset);\\r\\n    address(token).safeTransfer(address(getExchange()), _amount);\\r\\n    getExchange().sellAsset(asset, _amount, _minAvaxOut);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n  **/\\r\\n  function withdrawAsset(bytes32 asset, uint256 amount) external onlyOwner nonReentrant remainsSolvent {\\r\\n    IERC20Metadata token = getERC20TokenInstance(asset);\\r\\n    address(token).safeTransfer(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * This function attempts to sell just enough asset to receive targetAvaxAmount.\\r\\n   * If there is not enough asset's balance to cover the whole targetAvaxAmount then the whole asset's balance\\r\\n   * is being sold.\\r\\n   * It is possible that multiple different assets will have to be sold and for that reason we do not use the remainsSolvent modifier.\\r\\n   **/\\r\\n  function sellAssetForTargetAvax(bytes32 asset, uint256 targetAvaxAmount) private {\\r\\n    IERC20Metadata token = getERC20TokenInstance(asset);\\r\\n    uint256 balance = token.balanceOf(address(this));\\r\\n    if (balance > 0) {\\r\\n      uint256 minSaleAmount = getExchange().getMinimumERC20TokenAmountForExactAVAX(targetAvaxAmount, address(token));\\r\\n      if (balance < minSaleAmount) {\\r\\n        sellAsset(asset, balance, 0);\\r\\n      } else {\\r\\n        sellAsset(asset, minSaleAmount, targetAvaxAmount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * This function attempts to repay the _repayAmount back to the pool.\\r\\n   * If there is not enough AVAX balance to repay the _repayAmount then the available AVAX balance will be repaid.\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function attemptRepay(uint256 _repayAmount) internal {\\r\\n    repay(Math.min(address(this).balance, _repayAmount));\\r\\n  }\\r\\n\\r\\n  function payBonus(uint256 _bonus) internal {\\r\\n    payable(msg.sender).safeTransferETH(Math.min(_bonus, address(this).balance));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * This function can only be accessed by the owner and allows selling all of the assets.\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function closeLoan() public virtual payable onlyOwner nonReentrant remainsSolvent {\\r\\n    bytes32[] memory assets = getExchange().getAllAssets();\\r\\n    for (uint256 i = 0; i < assets.length; i++) {\\r\\n      uint256 balance = getERC20TokenInstance(assets[i]).balanceOf(address(this));\\r\\n      if (balance > 0) {\\r\\n        sellAsset(assets[i], balance, 0);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    uint256 debt = getDebt();\\r\\n    require(address(this).balance >= debt, \\\"Debt not repaid fully\\\");\\r\\n    repay(debt);\\r\\n    emit LoanClosed(debt, address(this).balance, block.timestamp);\\r\\n\\r\\n    uint256 balance = address(this).balance;\\r\\n    if (balance > 0) {\\r\\n      payable(msg.sender).safeTransferETH(balance);\\r\\n      emit Withdrawn(msg.sender, balance, block.timestamp);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev This function uses the redstone-evm-connector\\r\\n  **/\\r\\n  function liquidateLoan(uint256 repayAmount) external payable nonReentrant successfulLiquidation {\\r\\n    uint256 debt = getDebt();\\r\\n    if (repayAmount > debt) {\\r\\n      repayAmount = debt;\\r\\n    }\\r\\n    uint256 bonus = (repayAmount * getLiquidationBonus()) / getPercentagePrecision();\\r\\n    uint256 totalRepayAmount = repayAmount + bonus;\\r\\n\\r\\n    sellout(totalRepayAmount);\\r\\n    attemptRepay(repayAmount);\\r\\n    payBonus(bonus);\\r\\n    emit Liquidated(msg.sender, repayAmount, bonus, getLTV(), block.timestamp);\\r\\n  }\\r\\n\\r\\n  function selloutStakedAVAX(uint256 targetAvaxAmount) private returns(bool) {\\r\\n    address yakRouterAddress = address(getYieldYakRouter());\\r\\n    (bool successApprove, ) = address(getYakAvaxStakingContract()).call(\\r\\n      abi.encodeWithSignature(\\\"approve(address,uint256)\\\", yakRouterAddress, targetAvaxAmount)\\r\\n    );\\r\\n    (bool successUnstake, ) = yakRouterAddress.call(\\r\\n      abi.encodeWithSignature(\\\"unstakeAVAXForASpecifiedAmount(uint256)\\\", targetAvaxAmount)\\r\\n    );\\r\\n    return successApprove && successUnstake;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * This function role is to sell part/all of the available assets in order to receive the targetAvaxAmount.\\r\\n   *\\r\\n   **/\\r\\n  function sellout(uint256 targetAvaxAmount) private {\\r\\n    bool stakingSelloutSuccess = selloutStakedAVAX(targetAvaxAmount);\\r\\n    if (address(this).balance >= targetAvaxAmount) return;\\r\\n\\r\\n    bytes32[] memory assets = getExchange().getAllAssets();\\r\\n    for (uint256 i = 0; i < assets.length; i++) {\\r\\n      if (address(this).balance >= targetAvaxAmount) break;\\r\\n      sellAssetForTargetAvax(assets[i], targetAvaxAmount - address(this).balance);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Withdraws an amount from the loan\\r\\n   * This method could be used to cash out profits from investments\\r\\n   * The loan needs to remain solvent after the withdrawal\\r\\n   * @param _amount to be withdrawn\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function withdraw(uint256 _amount) public virtual onlyOwner nonReentrant remainsSolvent {\\r\\n    require(address(this).balance >= _amount, \\\"Insufficient funds\\\");\\r\\n\\r\\n    payable(msg.sender).safeTransferETH(_amount);\\r\\n\\r\\n    emit Withdrawn(msg.sender, _amount, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Invests an amount to buy an asset\\r\\n   * @param _asset code of the asset\\r\\n   * @param _exactERC20AmountOut exact amount of asset to buy\\r\\n   * @param _maxAvaxAmountIn maximum amount of AVAX to sell\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function invest(bytes32 _asset, uint256 _exactERC20AmountOut, uint256 _maxAvaxAmountIn) external onlyOwner nonReentrant remainsSolvent {\\r\\n    require(address(this).balance >= _maxAvaxAmountIn, \\\"Insufficient funds\\\");\\r\\n\\r\\n    bool success = getExchange().buyAsset{value: _maxAvaxAmountIn}(_asset, _exactERC20AmountOut);\\r\\n    require(success, \\\"Investment failed\\\");\\r\\n\\r\\n    emit Invested(msg.sender, _asset, _exactERC20AmountOut, block.timestamp);\\r\\n  }\\r\\n\\r\\n  function stakeAVAXYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n    require(address(this).balance >= amount, \\\"Not enough AVAX available\\\");\\r\\n    getYieldYakRouter().stakeAVAX{value: amount}(amount);\\r\\n  }\\r\\n\\r\\n  function unstakeAVAXYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n    IYieldYakRouter yakRouter = getYieldYakRouter();\\r\\n    address(getYakAvaxStakingContract()).safeApprove(address(yakRouter), amount);\\r\\n\\r\\n    require(yakRouter.unstakeAVAX(amount), \\\"Unstaking failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Redeem an investment by selling an asset\\r\\n   * @param _asset code of the asset\\r\\n   * @param _exactERC20AmountIn exact amount of token to sell\\r\\n   * @param _minAvaxAmountOut minimum amount of the AVAX token to buy\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function redeem(bytes32 _asset, uint256 _exactERC20AmountIn, uint256 _minAvaxAmountOut) external nonReentrant onlyOwner remainsSolvent {\\r\\n    IERC20Metadata token = getERC20TokenInstance(_asset);\\r\\n    address(token).safeTransfer(address(getExchange()), _exactERC20AmountIn);\\r\\n    bool success = getExchange().sellAsset(_asset, _exactERC20AmountIn, _minAvaxAmountOut);\\r\\n    require(success, \\\"Redemption failed\\\");\\r\\n\\r\\n    emit Redeemed(msg.sender, _asset, _exactERC20AmountIn, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Borrows funds from the pool\\r\\n   * @param _amount of funds to borrow\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function borrow(uint256 _amount) external onlyOwner remainsSolvent {\\r\\n    getPool().borrow(_amount);\\r\\n\\r\\n    emit Borrowed(msg.sender, _amount, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Repays funds to the pool\\r\\n   * @param _amount of funds to repay\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function repay(uint256 _amount) public payable {\\r\\n    if (isSolvent() && _liquidationInProgress == false) {\\r\\n      require(msg.sender == owner());\\r\\n    }\\r\\n\\r\\n    _amount = Math.min(_amount, getDebt());\\r\\n    require(address(this).balance >= _amount, \\\"Not enough funds to repay the loan\\\");\\r\\n\\r\\n    getPool().repay{value: _amount}();\\r\\n\\r\\n    emit Repaid(msg.sender, _amount, block.timestamp);\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  /* ========== VIEW FUNCTIONS ========== */\\r\\n\\r\\n  /**\\r\\n   * Returns the current value of a loan in AVAX including cash and investments\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function getTotalValue() public view virtual returns (uint256) {\\r\\n    uint256 total = address(this).balance;\\r\\n    bytes32[] memory assets = getExchange().getAllAssets();\\r\\n    uint256[] memory prices = getPricesFromMsg(assets);\\r\\n    uint256 avaxPrice = prices[0];\\r\\n    require(avaxPrice != 0, \\\"Avax price returned from oracle is zero\\\");\\r\\n\\r\\n    for (uint256 i = 1; i < prices.length; i++) {\\r\\n      require(prices[i] != 0, \\\"Asset price returned from oracle is zero\\\");\\r\\n\\r\\n      bytes32 _asset = assets[i];\\r\\n      IERC20Metadata token = getERC20TokenInstance(_asset);\\r\\n      uint256 assetBalance = getBalance(address(this), _asset);\\r\\n\\r\\n      total = total + (prices[i] * 10**18 * assetBalance) / (avaxPrice * 10**token.decimals());\\r\\n    }\\r\\n\\r\\n    // Get total value of assets staked in Yield Yak\\r\\n    total += getYieldYakRouter().getTotalStakedValue();\\r\\n\\r\\n    return total;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the current balance of the asset held by a given user\\r\\n   * @dev _asset the code of an asset\\r\\n   * @dev _user the address of queried user\\r\\n   **/\\r\\n  function getBalance(address _user, bytes32 _asset) public view returns (uint256) {\\r\\n    IERC20 token = IERC20(getExchange().getAssetAddress(_asset));\\r\\n    return token.balanceOf(_user);\\r\\n  }\\r\\n\\r\\n  function getERC20TokenInstance(bytes32 _asset) internal view returns (IERC20Metadata) {\\r\\n    address assetAddress = getExchange().getAssetAddress(_asset);\\r\\n    IERC20Metadata token = IERC20Metadata(assetAddress);\\r\\n    return token;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the current debt associated with the loan\\r\\n   **/\\r\\n  function getDebt() public view virtual returns (uint256) {\\r\\n    return getPool().getBorrowed(address(this));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * LoanToValue ratio is calculated as the ratio between debt and collateral.\\r\\n   * The collateral is equal to total loan value takeaway debt.\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function getLTV() public view returns (uint256) {\\r\\n    uint256 debt = getDebt();\\r\\n    uint256 totalValue = getTotalValue();\\r\\n    if (debt == 0) {\\r\\n      return 0;\\r\\n    } else if (debt < totalValue) {\\r\\n      return (debt * getPercentagePrecision()) / (totalValue - debt);\\r\\n    } else {\\r\\n      return getMaxLtv();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getFullLoanStatus() public view returns (uint256[4] memory) {\\r\\n    return [getTotalValue(), getDebt(), getLTV(), isSolvent() ? uint256(1) : uint256(0)];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Checks if the loan is solvent.\\r\\n   * It means that the ratio between debt and collateral is below safe level,\\r\\n   * which is parametrized by the getMaxLtv()\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function isSolvent() public view returns (bool) {\\r\\n    return getLTV() < getMaxLtv();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the balances of all assets served by the price provider\\r\\n   * It could be used as a helper method for UI\\r\\n   **/\\r\\n  function getAllAssetsBalances() public view returns (uint256[] memory) {\\r\\n    bytes32[] memory assets = getExchange().getAllAssets();\\r\\n    uint256[] memory balances = new uint256[](assets.length);\\r\\n\\r\\n    for (uint256 i = 0; i < assets.length; i++) {\\r\\n      balances[i] = getBalance(address(this), assets[i]);\\r\\n    }\\r\\n\\r\\n    return balances;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the prices of all assets served by the price provider\\r\\n   * It could be used as a helper method for UI\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function getAllAssetsPrices() public view returns (uint256[] memory) {\\r\\n    bytes32[] memory assets = getExchange().getAllAssets();\\r\\n\\r\\n    return getPricesFromMsg(assets);\\r\\n  }\\r\\n\\r\\n  /* ========== MODIFIERS ========== */\\r\\n\\r\\n  /**\\r\\n  * @dev This modifier uses the redstone-evm-connector\\r\\n  **/\\r\\n  modifier remainsSolvent() {\\r\\n    _;\\r\\n\\r\\n    require(isSolvent(), \\\"The action may cause an account to become insolvent\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * This modifier checks if the LTV is between MIN_SELLOUT_LTV and _MAX_LTV after performing the liquidateLoan() operation.\\r\\n   * If the liquidateLoan() was not called by the owner then an additional check of making sure that LTV > MIN_SELLOUT_LTV is applied.\\r\\n   * It protects the user from an unnecessarily costly liquidation.\\r\\n   * The loan must be solvent after the liquidateLoan() operation.\\r\\n   * @dev This modifier uses the redstone-evm-connector\\r\\n   **/\\r\\n  modifier successfulLiquidation() {\\r\\n    require(!isSolvent(), \\\"Cannot sellout a solvent account\\\");\\r\\n    _liquidationInProgress = true;\\r\\n\\r\\n    _;\\r\\n\\r\\n    uint256 LTV = getLTV();\\r\\n    if (msg.sender != owner()) {\\r\\n      require(LTV >= getMinSelloutLtv(), \\\"This operation would result in a loan with LTV lower than Minimal Sellout LTV which would put loan's owner in a risk of an unnecessarily high loss\\\");\\r\\n    }\\r\\n    require(LTV < getMaxLtv(), \\\"This operation would not result in bringing the loan back to a solvent state\\\");\\r\\n    _liquidationInProgress = false;\\r\\n  }\\r\\n\\r\\n  /* ========== EVENTS ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after a loan is funded\\r\\n   * @param funder the address which funded the loan\\r\\n   * @param amount the amount of funds\\r\\n   * @param timestamp time of funding\\r\\n   **/\\r\\n  event Funded(address indexed funder, uint256 amount, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after the funds are withdrawn from the loan\\r\\n   * @param owner the address which withdraws funds from the loan\\r\\n   * @param amount the amount of funds withdrawn\\r\\n   * @param timestamp of the withdrawal\\r\\n   **/\\r\\n  event Withdrawn(address indexed owner, uint256 amount, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after the funds are invested into an asset\\r\\n   * @param investor the address of investor making the purchase\\r\\n   * @param asset bought by the investor\\r\\n   * @param amount the investment\\r\\n   * @param timestamp time of the investment\\r\\n   **/\\r\\n  event Invested(address indexed investor, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after the investment is sold\\r\\n   * @param investor the address of investor selling the asset\\r\\n   * @param asset sold by the investor\\r\\n   * @param amount the investment\\r\\n   * @param timestamp of the redemption\\r\\n   **/\\r\\n  event Redeemed(address indexed investor, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted when funds are borrowed from the pool\\r\\n   * @param borrower the address of borrower\\r\\n   * @param amount of the borrowed funds\\r\\n   * @param timestamp time of the borrowing\\r\\n   **/\\r\\n  event Borrowed(address indexed borrower, uint256 amount, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted when funds are repaid to the pool\\r\\n   * @param borrower the address initiating repayment\\r\\n   * @param amount of repaid funds\\r\\n   * @param timestamp of the repayment\\r\\n   **/\\r\\n  event Repaid(address indexed borrower, uint256 amount, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after a successful liquidation operation\\r\\n   * @param liquidator the address that initiated the liquidation operation\\r\\n   * @param repayAmount requested amount (AVAX) of liquidation\\r\\n   * @param bonus an amount of bonus (AVAX) received by the liquidator\\r\\n   * @param ltv a new LTV after the liquidation operation\\r\\n   * @param timestamp a time of the liquidation\\r\\n   **/\\r\\n  event Liquidated(address indexed liquidator, uint256 repayAmount, uint256 bonus, uint256 ltv, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after closing a loan by the owner\\r\\n   * @param debtRepaid the amount of a borrowed AVAX that was repaid back to the pool\\r\\n   * @param withdrawalAmount the amount of AVAX that was withdrawn by the owner after closing the loan\\r\\n   * @param timestamp a time of the loan's closure\\r\\n   **/\\r\\n  event LoanClosed(uint256 debtRepaid, uint256 withdrawalAmount, uint256 timestamp);\\r\\n}\",\"keccak256\":\"0xdea1cc26ad8dfc13eb9d733814225df84a3fe8b693a34c4b3b9bd72f1219dd58\",\"license\":\"UNLICENSED\"},\"contracts/SmartLoanProperties.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./interfaces/IAssetsExchange.sol\\\";\\r\\nimport \\\"./Pool.sol\\\";\\r\\nimport \\\"./interfaces/IYieldYakRouter.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SmartLoanProperties\\r\\n * A contract that holds SmartLoan related properties.\\r\\n * Every property has a virtual getter to allow overriding when upgrading a SmartLoan contract.\\r\\n *\\r\\n */\\r\\ncontract SmartLoanProperties {\\r\\n\\r\\n  uint256 private constant _PERCENTAGE_PRECISION = 1000;\\r\\n  // 10%\\r\\n  uint256 private constant _LIQUIDATION_BONUS = 100;\\r\\n\\r\\n  // 500%\\r\\n  uint256 private constant _MAX_LTV = 5000;\\r\\n  // 400%\\r\\n  uint256 private constant _MIN_SELLOUT_LTV = 4000;\\r\\n\\r\\n  address private constant _EXCHANGE_ADDRESS = 0x0278438423f433e277F65D14c0E002b8828702ba;\\r\\n\\r\\n  address private constant _POOL_ADDRESS = 0x5ff1DE6091871adAAe64E2Ec4feD754628482868;\\r\\n\\r\\n  // redstone-evm-connector price providers\\r\\n  address private constant _PRICE_PROVIDER_1 = 0x981bdA8276ae93F567922497153de7A5683708d3;\\r\\n\\r\\n  address private constant _PRICE_PROVIDER_2 = 0x3BEFDd935b50F172e696A5187DBaCfEf0D208e48;\\r\\n\\r\\n  // redstone-evm-connector max block.timestamp acceptable delay\\r\\n  uint256 internal constant MAX_BLOCK_TIMESTAMP_DELAY = 30; // 30 seconds\\r\\n\\r\\n  bool internal _liquidationInProgress = false;\\r\\n\\r\\n\\r\\n  /* ========== GETTERS ========== */\\r\\n\\r\\n\\r\\n  function getPercentagePrecision() public virtual view returns (uint256) {\\r\\n    return _PERCENTAGE_PRECISION;\\r\\n  }\\r\\n\\r\\n  function getLiquidationBonus() public virtual view returns (uint256) {\\r\\n    return _LIQUIDATION_BONUS;\\r\\n  }\\r\\n\\r\\n  function getMaxLtv() public virtual view returns (uint256) {\\r\\n    return _MAX_LTV;\\r\\n  }\\r\\n\\r\\n  function getMinSelloutLtv() public virtual view returns (uint256) {\\r\\n    return _MIN_SELLOUT_LTV;\\r\\n  }\\r\\n\\r\\n  function getExchange() public virtual view returns (IAssetsExchange) {\\r\\n    return IAssetsExchange(_EXCHANGE_ADDRESS);\\r\\n  }\\r\\n\\r\\n  function getYieldYakRouter() public virtual view returns (IYieldYakRouter) {\\r\\n    return IYieldYakRouter(0x70952A912Fa50E04c608eb49E48afC975Eb91F21);\\r\\n  }\\r\\n\\r\\n  function getYakAvaxStakingContract() public virtual view returns (IERC20) {\\r\\n    return IERC20(0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95);\\r\\n  }\\r\\n\\r\\n  function getPool() public virtual view returns (Pool) {\\r\\n    return Pool(0x431290dF15777d46174b83C9E01F87d7b70D3073);\\r\\n  }\\r\\n\\r\\n  function getPriceProvider1() public virtual view returns (address) {\\r\\n    return _PRICE_PROVIDER_1;\\r\\n  }\\r\\n\\r\\n  function getPriceProvider2() public virtual view returns (address) {\\r\\n    return _PRICE_PROVIDER_2;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x433e37661e18e53f2b81cd8cc9236bd06ae7a44b5245d8f4bd8e300130115498\",\"license\":\"UNLICENSED\"},\"contracts/SmartLoansFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./SmartLoan.sol\\\";\\r\\nimport \\\"redstone-evm-connector/lib/contracts/commons/ProxyConnector.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SmartLoansFactory\\r\\n * It creates and fund the Smart Loan.\\r\\n * It's also responsible for keeping track of the loans and ensuring they follow the solvency protection rules\\r\\n * and could be authorised to access the lending pool.\\r\\n *\\r\\n */\\r\\ncontract SmartLoansFactory is OwnableUpgradeable, IBorrowersRegistry {\\r\\n  modifier oneLoanPerOwner() {\\r\\n    require(ownersToLoans[msg.sender] == address(0), \\\"Only one loan per owner is allowed\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  event SmartLoanCreated(address indexed accountAddress, address indexed creator, uint256 initialCollateral, uint256 initialDebt);\\r\\n\\r\\n  UpgradeableBeacon public upgradeableBeacon;\\r\\n\\r\\n  mapping(address => address) public ownersToLoans;\\r\\n  mapping(address => address) public loansToOwners;\\r\\n\\r\\n  SmartLoan[] loans;\\r\\n\\r\\n  function initialize(SmartLoan _smartLoanImplementation) external initializer {\\r\\n    upgradeableBeacon = new UpgradeableBeacon(address(_smartLoanImplementation));\\r\\n    upgradeableBeacon.transferOwnership(msg.sender);\\r\\n    __Ownable_init();\\r\\n  }\\r\\n\\r\\n  function createLoan() public virtual oneLoanPerOwner returns (SmartLoan) {\\r\\n    BeaconProxy beaconProxy = new BeaconProxy(\\r\\n      payable(address(upgradeableBeacon)),\\r\\n      abi.encodeWithSelector(SmartLoan.initialize.selector, 0)\\r\\n    );\\r\\n    SmartLoan smartLoan = SmartLoan(payable(address(beaconProxy)));\\r\\n\\r\\n    //Update registry and emit event\\r\\n    updateRegistry(smartLoan);\\r\\n    smartLoan.transferOwnership(msg.sender);\\r\\n\\r\\n    emit SmartLoanCreated(address(smartLoan), msg.sender, 0, 0);\\r\\n    return smartLoan;\\r\\n  }\\r\\n\\r\\n  function createAndFundLoan(uint256 _initialDebt) public virtual payable oneLoanPerOwner returns (SmartLoan) {\\r\\n    BeaconProxy beaconProxy = new BeaconProxy(payable(address(upgradeableBeacon)),\\r\\n      abi.encodeWithSelector(SmartLoan.initialize.selector));\\r\\n    SmartLoan smartLoan = SmartLoan(payable(address(beaconProxy)));\\r\\n\\r\\n    //Update registry and emit event\\r\\n    updateRegistry(smartLoan);\\r\\n\\r\\n    //Fund account with own funds and credit\\r\\n    ProxyConnector.proxyCalldata(address(smartLoan), abi.encodeWithSelector(SmartLoan.fund.selector), true);\\r\\n\\r\\n    ProxyConnector.proxyCalldata(address(smartLoan), abi.encodeWithSelector(SmartLoan.borrow.selector, _initialDebt), false);\\r\\n\\r\\n    smartLoan.transferOwnership(msg.sender);\\r\\n\\r\\n    emit SmartLoanCreated(address(smartLoan), msg.sender, msg.value, _initialDebt);\\r\\n\\r\\n    return smartLoan;\\r\\n  }\\r\\n\\r\\n  function updateRegistry(SmartLoan loan) internal {\\r\\n    ownersToLoans[msg.sender] = address(loan);\\r\\n    loansToOwners[address(loan)] = msg.sender;\\r\\n    loans.push(loan);\\r\\n  }\\r\\n\\r\\n  function canBorrow(address _account) external view override returns (bool) {\\r\\n    return loansToOwners[_account] != address(0);\\r\\n  }\\r\\n\\r\\n  function getLoanForOwner(address _user) external view override returns (address) {\\r\\n    return address(ownersToLoans[_user]);\\r\\n  }\\r\\n\\r\\n  function getOwnerOfLoan(address _loan) external view override returns (address) {\\r\\n    return loansToOwners[_loan];\\r\\n  }\\r\\n\\r\\n  function getAllLoans() public view returns (SmartLoan[] memory) {\\r\\n    return loans;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x4491677005ac27728ff61869cf0c1b53c1f4bb2f9239eafeb6129dfb6af5b7cb\",\"license\":\"UNLICENSED\"},\"contracts/abstract/NFTAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\nabstract contract NFTAccess is OwnableUpgradeable {\\r\\n    bytes32 internal constant ACCESS_NFT_SLOT = bytes32(uint256(keccak256('ACCESS_NFT_SLOT')) - 1);\\r\\n\\r\\n    function setAccessNFT(ERC721 nftAddress) external onlyOwner {\\r\\n        // Setting nftAddress to a address(0) removes the lock\\r\\n        if (address(nftAddress) != address(0)) {\\r\\n            require(AddressUpgradeable.isContract(address(nftAddress)), \\\"Cannot set nftAddress to a non-contract instance\\\");\\r\\n            (bool success, bytes memory result) = address(nftAddress).call(\\r\\n                abi.encodeWithSignature(\\\"balanceOf(address)\\\", msg.sender)\\r\\n            );\\r\\n            require(success && result.length > 0, \\\"Contract has to support the ERC721 balanceOf() interface\\\");\\r\\n        }\\r\\n\\r\\n        bytes32 slot = ACCESS_NFT_SLOT;\\r\\n        assembly {\\r\\n            sstore(slot, nftAddress)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAccessNFT() external view returns(ERC721 accessNFT) {\\r\\n        bytes32 slot = ACCESS_NFT_SLOT;\\r\\n        assembly {\\r\\n            accessNFT := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier hasAccessNFT {\\r\\n        bytes32 slot = ACCESS_NFT_SLOT;\\r\\n        ERC721 accessNFT;\\r\\n        assembly {\\r\\n            accessNFT := sload(slot)\\r\\n        }\\r\\n        if(address(accessNFT) != address(0)) {\\r\\n            require(accessNFT.balanceOf(msg.sender) > 0, \\\"Access NFT required\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb514a2d746c80d79d498f1bb95543734f85d77f1459c62964dfdfe606d1fa884\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAssetsExchange.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IAssetExchange\\r\\n * @dev Basic interface for investing into assets\\r\\n * It could be linked either to DEX or to a synthetic assets platform\\r\\n */\\r\\ninterface IAssetsExchange {\\r\\n  /**\\r\\n   * For adding supported assets\\r\\n   **/\\r\\n  struct Asset {\\r\\n    bytes32 asset;\\r\\n    address assetAddress;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Buys selected asset with AVAX\\r\\n   * @dev _asset asset code\\r\\n   * @dev _exactERC20AmountOut exact amount of asset to be bought\\r\\n   **/\\r\\n  function buyAsset(bytes32 _asset, uint256 _exactERC20AmountOut) external payable returns (bool);\\r\\n\\r\\n  /**\\r\\n   * Sells selected asset for AVAX\\r\\n   * @dev _asset asset code\\r\\n   * @dev _exactERC20AmountIn amount to be bought\\r\\n   * @dev _minAvaxAmountOut minimum amount of the AVAX token to be bought\\r\\n   **/\\r\\n  function sellAsset(bytes32 _asset, uint256 _exactERC20AmountIn, uint256 _minAvaxAmountOut) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * Returns the maximum AVAX amount that will be obtained in the event of selling _amountIn of _token ERC20 token.\\r\\n   **/\\r\\n  function getEstimatedAVAXFromERC20Token(uint256 _amountIn, address _token) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * Returns the minimum token amount that is required to be sold to receive _exactAmountOut of AVAX.\\r\\n   **/\\r\\n  function getMinimumERC20TokenAmountForExactAVAX(uint256 _exactAmountOut, address _token) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * Adds or updates supported assets\\r\\n   * First asset must be a blockchain native currency\\r\\n   * @dev _assets assets to be added or updated\\r\\n   **/\\r\\n  function updateAssets(Asset[] memory _assets) external;\\r\\n\\r\\n  /**\\r\\n   * Removes supported assets\\r\\n   * @dev _assets assets to be removed\\r\\n   **/\\r\\n  function removeAssets(bytes32[] calldata _assets) external;\\r\\n\\r\\n  /**\\r\\n   * Returns all the supported assets keys\\r\\n   **/\\r\\n  function getAllAssets() external view returns (bytes32[] memory);\\r\\n\\r\\n  /**\\r\\n   * Returns address of an asset\\r\\n   **/\\r\\n  function getAssetAddress(bytes32 _asset) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xc7d7a4697990c7d7c9ba55ecb86f0019d8ba66ddfa6b39bed994960bf1cdae9c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @title IBorrowersRegistry\\r\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\r\\n */\\r\\ninterface IBorrowersRegistry {\\r\\n  function canBorrow(address _account) external view returns (bool);\\r\\n\\r\\n  function getLoanForOwner(address _owner) external view returns (address);\\r\\n\\r\\n  function getOwnerOfLoan(address _loan) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xaee5fe5806928889976d6353ae80b02b3e200e4a135fcd6acc5482962ce6c089\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @title IRatesCalculator\\r\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\r\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\r\\n */\\r\\ninterface IRatesCalculator {\\r\\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\r\\n\\r\\n  function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xbf14e92506142bef86591fa68c55d8582902eefa2d3ee07bed9727e9e234a9de\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IYieldYakRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IYieldYakRouter {\\r\\n    function stakeAVAX(uint256 amount) payable external;\\r\\n\\r\\n    function unstakeAVAX(uint256 amount) external returns(bool);\\r\\n\\r\\n    function getTotalStakedValue() external view returns (uint256 totalValue);\\r\\n\\r\\n    function unstakeAVAXForASpecifiedAmount(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb3502c9484afe9bcdeaed3d4556f023d9880bdd85c3b89fd986d861156aca866\",\"license\":\"UNLICENSED\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL3\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/******************\\r\\n@title WadRayMath library\\r\\n@author Aave\\r\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\r\\n@dev https://github.com/aave/aave-protocol/blob/master/contracts/libraries/WadRayMath.sol\\r\\n */\\r\\n\\r\\nlibrary WadRayMath {\\r\\n  uint256 internal constant WAD = 1e18;\\r\\n  uint256 internal constant halfWAD = WAD / 2;\\r\\n\\r\\n  uint256 internal constant RAY = 1e27;\\r\\n  uint256 internal constant halfRAY = RAY / 2;\\r\\n\\r\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\r\\n\\r\\n  function ray() internal pure returns (uint256) {\\r\\n    return RAY;\\r\\n  }\\r\\n\\r\\n  function wad() internal pure returns (uint256) {\\r\\n    return WAD;\\r\\n  }\\r\\n\\r\\n  function halfRay() internal pure returns (uint256) {\\r\\n    return halfRAY;\\r\\n  }\\r\\n\\r\\n  function halfWad() internal pure returns (uint256) {\\r\\n    return halfWAD;\\r\\n  }\\r\\n\\r\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    //return halfWAD.add(a.mul(b)).div(WAD);\\r\\n    return (halfWAD + (a * b)) / WAD;\\r\\n  }\\r\\n\\r\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 halfB = b / 2;\\r\\n\\r\\n    //return halfB.add(a.mul(WAD)).div(b);\\r\\n    return (halfB + (a * WAD)) / b;\\r\\n  }\\r\\n\\r\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    //return halfRAY.add(a.mul(b)).div(RAY);\\r\\n    return (halfRAY + (a * b)) / RAY;\\r\\n  }\\r\\n\\r\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 halfB = b / 2;\\r\\n\\r\\n    //return halfB.add(a.mul(RAY)).div(b);\\r\\n    return (halfB + (a * RAY)) / b;\\r\\n  }\\r\\n\\r\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\r\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\r\\n\\r\\n    //return halfRatio.add(a).div(WAD_RAY_RATIO);\\r\\n    return (halfRatio + a) / WAD_RAY_RATIO;\\r\\n  }\\r\\n\\r\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\r\\n    //return a.mul(WAD_RAY_RATIO);\\r\\n    return a * WAD_RAY_RATIO;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev calculates base^exp. The code uses the ModExp precompile\\r\\n   */\\r\\n  //solium-disable-next-line\\r\\n  function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\r\\n    z = n % 2 != 0 ? x : RAY;\\r\\n\\r\\n    for (n /= 2; n != 0; n /= 2) {\\r\\n      x = rayMul(x, x);\\r\\n\\r\\n      if (n % 2 != 0) {\\r\\n        z = rayMul(z, x);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xe025e327e1bdbfb0fc9fe2739f3a3f0f92719a6d30c051d4433f411265b4afca\",\"license\":\"AGPL3\"},\"contracts/upgraded/SmartLoansFactoryWithAccessNFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: 0fbd3d2132ce3d3a12c966ee5e6ffba53aae9d33;\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"../abstract/NFTAccess.sol\\\";\\r\\nimport \\\"../SmartLoansFactory.sol\\\";\\r\\n\\r\\ncontract SmartLoansFactoryWithAccessNFT is NFTAccess, SmartLoansFactory {\\r\\n    function createLoan() public override oneLoanPerOwner hasAccessNFT returns (SmartLoan) {\\r\\n        BeaconProxy beaconProxy = new BeaconProxy(\\r\\n            payable(address(upgradeableBeacon)),\\r\\n            abi.encodeWithSelector(SmartLoan.initialize.selector, 0)\\r\\n        );\\r\\n        SmartLoan smartLoan = SmartLoan(payable(address(beaconProxy)));\\r\\n\\r\\n        //Update registry and emit event\\r\\n        updateRegistry(smartLoan);\\r\\n        smartLoan.transferOwnership(msg.sender);\\r\\n\\r\\n        emit SmartLoanCreated(address(smartLoan), msg.sender, 0, 0);\\r\\n        return smartLoan;\\r\\n    }\\r\\n\\r\\n    function createAndFundLoan(uint256 _initialDebt) public override payable oneLoanPerOwner hasAccessNFT returns (SmartLoan) {\\r\\n        BeaconProxy beaconProxy = new BeaconProxy(payable(address(upgradeableBeacon)),\\r\\n            abi.encodeWithSelector(SmartLoan.initialize.selector));\\r\\n        SmartLoan smartLoan = SmartLoan(payable(address(beaconProxy)));\\r\\n\\r\\n        //Update registry and emit event\\r\\n        updateRegistry(smartLoan);\\r\\n\\r\\n        //Fund account with own funds and credit\\r\\n        ProxyConnector.proxyCalldata(address(smartLoan), abi.encodeWithSelector(SmartLoan.fund.selector), true);\\r\\n\\r\\n        ProxyConnector.proxyCalldata(address(smartLoan), abi.encodeWithSelector(SmartLoan.borrow.selector, _initialDebt), false);\\r\\n\\r\\n        smartLoan.transferOwnership(msg.sender);\\r\\n\\r\\n        emit SmartLoanCreated(address(smartLoan), msg.sender, msg.value, _initialDebt);\\r\\n\\r\\n        return smartLoan;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xebec8a8e6ee387c7966d89b78a080554a4d47a3ec03c17fe8aad2f9277e7a5e8\",\"license\":\"UNLICENSED\"},\"redstone-evm-connector/lib/contracts/commons/ProxyConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nlibrary ProxyConnector {\\n\\n  function proxyCalldata(address contractAddress, bytes memory encodedFunction, bool forwardValue) internal returns (bytes memory) {\\n    bool success;\\n    bytes memory result;\\n    bytes memory message = prepareMessage(encodedFunction);\\n\\n    if (forwardValue == true) {\\n      (success, result) = contractAddress.call{value: msg.value}(message);\\n    } else {\\n      (success, result) = contractAddress.call(message);\\n    }\\n    return prepareReturnValue(success, result);\\n  }\\n\\n  function proxyCalldataView(address contractAddress, bytes memory encodedFunction) internal view returns (bytes memory) {\\n    bytes memory message = prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.staticcall(message);\\n    return prepareReturnValue(success, result);\\n  }\\n\\n  function prepareMessage(bytes memory encodedFunction) private pure returns (bytes memory) {\\n    uint8 dataSymbolsCount;\\n\\n    // calldatasize - whole calldata size\\n    // we get 97 last bytes, but we actually want to read only one byte\\n    // that stores number of redstone data symbols\\n    // Learn more: https://github.com/redstone-finance/redstone-evm-connector\\n    // calldataload - reads 32 bytes from calldata (it receives an offset)\\n    assembly {\\n      // We assign 32 bytes to dataSymbolsCount, but it has uint8 type (8 bit = 1 byte)\\n      // That's why only the last byte is assigned to dataSymbolsCount\\n      dataSymbolsCount := calldataload(sub(calldatasize(), 97))\\n    }\\n\\n    uint16 redstonePayloadBytesCount = uint16(dataSymbolsCount) * 64 + 32 + 1 + 65; // datapoints + timestamp + data size + signature\\n\\n    uint256 encodedFunctionBytesCount = encodedFunction.length;\\n\\n    uint256 i;\\n    bytes memory message;\\n\\n    assembly {\\n      message := mload(0x40) // sets message pointer to first free place in memory\\n\\n      // We save length of our message (it's a standard in EVM)\\n      mstore(\\n        message, // address\\n        add(encodedFunctionBytesCount, redstonePayloadBytesCount) // length of the result message\\n      )\\n\\n      // Copy function and its arguments byte by byte\\n      for { i := 0 } lt(i, encodedFunctionBytesCount) { i := add(i, 1) } {\\n        mstore(\\n          add(add(0x20, message), mul(0x20, i)), // address\\n          mload(add(add(0x20, encodedFunction), mul(0x20, i))) // byte to copy\\n        )\\n      }\\n\\n      // Copy redstone payload to the message bytes\\n      calldatacopy(\\n        add(message, add(0x20, encodedFunctionBytesCount)), // address\\n        sub(calldatasize(), redstonePayloadBytesCount), // offset\\n        redstonePayloadBytesCount // bytes length to copy\\n      )\\n\\n      // Update first free memory pointer\\n      mstore(\\n        0x40,\\n        add(add(message, add(redstonePayloadBytesCount, encodedFunctionBytesCount)), 0x20 /* 0x20 == 32 - message length size that is stored in the beginning of the message bytes */))\\n    }\\n\\n    return message;\\n  }\\n\\n  function prepareReturnValue(bool success, bytes memory result) internal pure returns (bytes memory) {\\n    if (!success) {\\n      if (result.length > 0) {\\n        assembly {\\n          let result_size := mload(result)\\n          revert(add(32, result), result_size)\\n        }\\n      } else {\\n        revert(\\\"Proxy connector call failed\\\");\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x4a47012da90a48b928dcf8b4a05b5952296127a51f47fe575dc9a2e1bf3197d8\",\"license\":\"MIT\"},\"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract PriceAware {\\n  using ECDSA for bytes32;\\n\\n  uint256 constant _MAX_DATA_TIMESTAMP_DELAY = 3 * 60; // 3 minutes\\n  uint256 constant _MAX_BLOCK_TIMESTAMP_DELAY = 15; // 15 seconds\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  function getMaxDataTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_DATA_TIMESTAMP_DELAY;\\n  }\\n\\n  function getMaxBlockTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_BLOCK_TIMESTAMP_DELAY;\\n  }\\n\\n  function isSignerAuthorized(address _receviedSigner) public virtual view returns (bool);\\n\\n  function isTimestampValid(uint256 _receivedTimestamp) public virtual view returns (bool) {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    require(\\n      (block.timestamp + getMaxBlockTimestampDelay()) > _receivedTimestamp,\\n      \\\"Data with future timestamps is not allowed\\\");\\n\\n    return block.timestamp < _receivedTimestamp\\n      || block.timestamp - _receivedTimestamp < getMaxDataTimestampDelay();\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  function getPriceFromMsg(bytes32 symbol) internal view returns (uint256) {bytes32[] memory symbols = new bytes32[](1); symbols[0] = symbol;\\n    return getPricesFromMsg(symbols)[0];\\n  }\\n\\n  function getPricesFromMsg(bytes32[] memory symbols) internal view returns (uint256[] memory) {\\n    // The structure of calldata witn n - data items:\\n    // The data that is signed (symbols, values, timestamp) are inside the {} brackets\\n    // [origina_call_data| ?]{[[symbol | 32][value | 32] | n times][timestamp | 32]}[size | 1][signature | 65]\\n\\n    // 1. First we extract dataSize - the number of data items (symbol,value pairs) in the message\\n    uint8 dataSize; //Number of data entries\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature\\n      // We load the previous 32 bytes and automatically take the 2 least significant ones (casting to uint16)\\n      dataSize := calldataload(sub(calldatasize(), 97))\\n    }\\n\\n    // 2. We calculate the size of signable message expressed in bytes\\n    // ((symbolLen(32) + valueLen(32)) * dataSize + timeStamp length\\n    uint16 messageLength = uint16(dataSize) * 64 + 32; //Length of data message in bytes\\n\\n    // 3. We extract the signableMessage\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory rawData = msg.data.slice(msg.data.length - messageLength - 65, messageLength);\\n\\n    bytes memory signableMessage;\\n    assembly {\\n      signableMessage := mload(0x40)\\n      mstore(signableMessage, messageLength)\\n      // The starting point is callDataSize minus length of data(messageLength), signature(65) and size(1) = 66\\n      calldatacopy(\\n        add(signableMessage, 0x20),\\n        sub(calldatasize(), add(messageLength, 66)),\\n        messageLength\\n      )\\n      mstore(0x40, add(signableMessage, 0x20))\\n    }\\n\\n    // 4. We first hash the raw message and then hash it again with the prefix\\n    // Following the https://github.com/ethereum/eips/issues/191 standard\\n    bytes32 hash = keccak256(signableMessage);\\n    bytes32 hashWithPrefix = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n    );\\n\\n    // 5. We extract the off-chain signature from calldata\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory signature = msg.data.slice(msg.data.length - 65, 65);\\n    bytes memory signature;\\n    assembly {\\n      signature := mload(0x40)\\n      mstore(signature, 65)\\n      calldatacopy(add(signature, 0x20), sub(calldatasize(), 65), 65)\\n      mstore(0x40, add(signature, 0x20))\\n    }\\n\\n    // 6. We verify the off-chain signature against on-chain hashed data\\n\\n    address signer = hashWithPrefix.recover(signature);\\n    require(isSignerAuthorized(signer), \\\"Signer not authorized\\\");\\n\\n    // 7. We extract timestamp from callData\\n\\n    uint256 dataTimestamp;\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature + 1 for data size\\n      // We load the previous 32 bytes\\n      dataTimestamp := calldataload(sub(calldatasize(), 98))\\n    }\\n\\n    // 8. We validate timestamp\\n    require(isTimestampValid(dataTimestamp), \\\"Data timestamp is invalid\\\");\\n\\n    return _readFromCallData(symbols, uint256(dataSize), messageLength);\\n  }\\n\\n  function _readFromCallData(bytes32[] memory symbols, uint256 dataSize, uint16 messageLength) private pure returns (uint256[] memory) {\\n    uint256[] memory values;\\n    uint256 i;\\n    uint256 j;\\n    uint256 readyAssets;\\n    bytes32 currentSymbol;\\n\\n    // We iterate directly through call data to extract the values for symbols\\n    assembly {\\n      let start := sub(calldatasize(), add(messageLength, 66))\\n\\n      values := msize()\\n      mstore(values, mload(symbols))\\n      mstore(0x40, add(add(values, 0x20), mul(mload(symbols), 0x20)))\\n\\n      for { i := 0 } lt(i, dataSize) { i := add(i, 1) } {\\n        currentSymbol := calldataload(add(start, mul(i, 64)))\\n\\n        for { j := 0 } lt(j, mload(symbols)) { j := add(j, 1) } {\\n          if eq(mload(add(add(symbols, 32), mul(j, 32))), currentSymbol) {\\n            mstore(\\n              add(add(values, 32), mul(j, 32)),\\n              calldataload(add(add(start, mul(i, 64)), 32))\\n            )\\n            readyAssets := add(readyAssets, 1)\\n          }\\n\\n          if eq(readyAssets, mload(symbols)) {\\n            i := dataSize\\n          }\\n        }\\n      }\\n    }\\n\\n    return (values);\\n  }\\n}\\n\",\"keccak256\":\"0xd34e84e25c6ef3010f5479755258aaddaeba63fa56eee31db26778c0fdd9d30a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506143b3806100206000396000f3fe608060405260043610620000fe5760003560e01c8063715018a61162000097578063d26095201162000061578063d2609520146200035d578063e3fcd8d1146200038d578063e78fd93114620003bd578063f2fde38b14620003f357620000fe565b8063715018a614620002b55780638da5cb5b14620002cf578063a5bfd16a14620002ff578063c4d66de8146200032f57620000fe565b8063357719ef11620000d9578063357719ef14620001cf578063429c9a5a14620002135780635b012546146200024157806365ec1a45146200028557620000fe565b80630e7fc86414620001035780631f278b7414620001475780633344a555146200018b575b600080fd5b3480156200011057600080fd5b506200012f600480360381019062000129919062001bfd565b62000421565b6040516200013e91906200206c565b60405180910390f35b3480156200015457600080fd5b506200017360048036038101906200016d919062001bfd565b620004b9565b60405162000182919062001ff7565b60405180910390f35b3480156200019857600080fd5b50620001b76004803603810190620001b1919062001bfd565b620004ec565b604051620001c6919062001ff7565b60405180910390f35b348015620001dc57600080fd5b50620001fb6004803603810190620001f5919062001bfd565b62000555565b6040516200020a919062001ff7565b60405180910390f35b3480156200022057600080fd5b506200023f600480360381019062000239919062001c29565b62000588565b005b3480156200024e57600080fd5b506200026d600480360381019062000267919062001bfd565b62000823565b6040516200027c919062001ff7565b60405180910390f35b3480156200029257600080fd5b506200029d6200088c565b604051620002ac9190620020a6565b60405180910390f35b348015620002c257600080fd5b50620002cd62000c73565b005b348015620002dc57600080fd5b50620002e762000d04565b604051620002f6919062001ff7565b60405180910390f35b3480156200030c57600080fd5b506200031762000d2e565b60405162000326919062002048565b60405180910390f35b3480156200033c57600080fd5b506200035b600480360381019062000355919062001c55565b62000dbe565b005b3480156200036a57600080fd5b506200037562000fc0565b604051620003849190620020c3565b60405180910390f35b3480156200039a57600080fd5b50620003a562000fe6565b604051620003b4919062002089565b60405180910390f35b620003db6004803603810190620003d5919062001c81565b62001028565b604051620003ea9190620020a6565b60405180910390f35b3480156200040057600080fd5b506200041f600480360381019062000419919062001bfd565b62001501565b005b60008073ffffffffffffffffffffffffffffffffffffffff16606760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60676020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60666020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6200059262001605565b73ffffffffffffffffffffffffffffffffffffffff16620005b262000d04565b73ffffffffffffffffffffffffffffffffffffffff16146200060b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200060290620021d4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620007e3576200064b816200160d565b6200068d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200068490620021f6565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1633604051602401620006ba919062001ff7565b6040516020818303038152906040527f70a08231000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405162000746919062001fde565b6000604051808303816000865af19150503d806000811462000785576040519150601f19603f3d011682016040523d82523d6000602084013e6200078a565b606091505b50915091508180156200079e575060008151115b620007e0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007d7906200214c565b60405180910390fd5b50505b600060017f05df0919f17c81dab74a24e96f8e9fcaf2f7ae9ec785467bc9a30e698771439060001c62000817919062002399565b60001b90508181555050565b6000606760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200095e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000955906200216e565b60405180910390fd5b600060017f05df0919f17c81dab74a24e96f8e9fcaf2f7ae9ec785467bc9a30e698771439060001c62000992919062002399565b60001b9050600081549050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462000aa75760008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040162000a0f919062001ff7565b60206040518083038186803b15801562000a2857600080fd5b505afa15801562000a3d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a63919062001cad565b1162000aa6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a9d906200223a565b60405180910390fd5b5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16638129fc1c60e01b600060405160240162000ae89190620020e0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405162000b539062001b6e565b62000b6092919062002014565b604051809103906000f08015801562000b7d573d6000803e3d6000fd5b509050600081905062000b908162001630565b8073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040162000bcb919062001ff7565b600060405180830381600087803b15801562000be657600080fd5b505af115801562000bfb573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f74f440674c6106c61951acc831efcdce60effebf4fea0fdc74f0e5ad72f56a1060008060405162000c61929190620020fd565b60405180910390a38094505050505090565b62000c7d62001605565b73ffffffffffffffffffffffffffffffffffffffff1662000c9d62000d04565b73ffffffffffffffffffffffffffffffffffffffff161462000cf6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ced90620021d4565b60405180910390fd5b62000d02600062001792565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060606880548060200260200160405190810160405280929190818152602001828054801562000db457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000d69575b5050505050905090565b600060019054906101000a900460ff1662000de85760008054906101000a900460ff161562000df3565b62000df262001858565b5b62000e35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e2c9062002190565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000e86576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8160405162000e959062001b7c565b62000ea1919062001ff7565b604051809103906000f08015801562000ebe573d6000803e3d6000fd5b50606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040162000f5c919062001ff7565b600060405180830381600087803b15801562000f7757600080fd5b505af115801562000f8c573d6000803e3d6000fd5b5050505062000f9a6200186b565b801562000fbc5760008060016101000a81548160ff0219169083151502179055505b5050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060017f05df0919f17c81dab74a24e96f8e9fcaf2f7ae9ec785467bc9a30e698771439060001c6200101b919062002399565b60001b9050805491505090565b60008073ffffffffffffffffffffffffffffffffffffffff16606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620010fa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010f1906200216e565b60405180910390fd5b600060017f05df0919f17c81dab74a24e96f8e9fcaf2f7ae9ec785467bc9a30e698771439060001c6200112e919062002399565b60001b9050600081549050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620012435760008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401620011ab919062001ff7565b60206040518083038186803b158015620011c457600080fd5b505afa158015620011d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011ff919062001cad565b1162001242576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001239906200223a565b60405180910390fd5b5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16638129fc1c60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051620012e19062001b6e565b620012ee92919062002014565b604051809103906000f0801580156200130b573d6000803e3d6000fd5b50905060008190506200131e8162001630565b620013968163b60d428860e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506001620018c9565b506200141c8163c5ebeaec60e01b88604051602401620013b791906200225c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506000620018c9565b508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040162001458919062001ff7565b600060405180830381600087803b1580156200147357600080fd5b505af115801562001488573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f74f440674c6106c61951acc831efcdce60effebf4fea0fdc74f0e5ad72f56a103489604051620014ed92919062002279565b60405180910390a380945050505050919050565b6200150b62001605565b73ffffffffffffffffffffffffffffffffffffffff166200152b62000d04565b73ffffffffffffffffffffffffffffffffffffffff161462001584576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200157b90620021d4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620015f7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620015ee906200212a565b60405180910390fd5b620016028162001792565b50565b600033905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b80606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033606760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506068819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600062001865306200160d565b15905090565b600060019054906101000a900460ff16620018bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620018b49062002218565b60405180910390fd5b620018c7620019f4565b565b6060600060606000620018dc8662001a5c565b905060011515851515141562001967578673ffffffffffffffffffffffffffffffffffffffff16348260405162001914919062001fde565b60006040518083038185875af1925050503d806000811462001953576040519150601f19603f3d011682016040523d82523d6000602084013e62001958565b606091505b508093508194505050620019dc565b8673ffffffffffffffffffffffffffffffffffffffff16816040516200198e919062001fde565b6000604051808303816000865af19150503d8060008114620019cd576040519150601f19603f3d011682016040523d82523d6000602084013e620019d2565b606091505b5080935081945050505b620019e8838362001b0c565b93505050509392505050565b600060019054906101000a900460ff1662001a46576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001a3d9062002218565b60405180910390fd5b62001a5a62001a5462001605565b62001792565b565b6060600060613603359050600060416001602060408560ff1662001a81919062002356565b62001a8d919062002317565b62001a99919062002317565b62001aa5919062002317565b90506000845190506000606060405190508383018152600091505b8282101562001ae957816020028760200101518260200282602001015260018201915062001ac0565b838436038460200183013760208385018201016040528095505050505050919050565b60608262001b655760008251111562001b285781518083602001fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001b5c90620021b2565b60405180910390fd5b81905092915050565b61105d806200288583390190565b610a9c80620038e283390190565b60008135905062001b9b816200281c565b92915050565b60008135905062001bb28162002836565b92915050565b60008135905062001bc98162002850565b92915050565b60008135905062001be0816200286a565b92915050565b60008151905062001bf7816200286a565b92915050565b60006020828403121562001c1057600080fd5b600062001c208482850162001b8a565b91505092915050565b60006020828403121562001c3c57600080fd5b600062001c4c8482850162001ba1565b91505092915050565b60006020828403121562001c6857600080fd5b600062001c788482850162001bb8565b91505092915050565b60006020828403121562001c9457600080fd5b600062001ca48482850162001bcf565b91505092915050565b60006020828403121562001cc057600080fd5b600062001cd08482850162001be6565b91505092915050565b600062001ce7838362001e19565b60208301905092915050565b62001cfe8162002475565b82525050565b62001d0f81620023d4565b82525050565b600062001d2282620022b6565b62001d2e8185620022d9565b935062001d3b83620022a6565b8060005b8381101562001d7257815162001d56888262001cd9565b975062001d6383620022cc565b92505060018101905062001d3f565b5085935050505092915050565b62001d8a81620023fc565b82525050565b600062001d9d82620022c1565b62001da98185620022ea565b935062001dbb81856020860162002551565b62001dc681620025b6565b840191505092915050565b600062001dde82620022c1565b62001dea8185620022fb565b935062001dfc81856020860162002551565b80840191505092915050565b62001e138162002489565b82525050565b62001e2481620024b1565b82525050565b62001e3581620024b1565b82525050565b62001e4681620024d9565b82525050565b62001e578162002501565b82525050565b62001e688162002515565b82525050565b600062001e7d60268362002306565b915062001e8a82620025c7565b604082019050919050565b600062001ea460388362002306565b915062001eb18262002616565b604082019050919050565b600062001ecb60228362002306565b915062001ed88262002665565b604082019050919050565b600062001ef2602e8362002306565b915062001eff82620026b4565b604082019050919050565b600062001f19601b8362002306565b915062001f268262002703565b602082019050919050565b600062001f4060208362002306565b915062001f4d826200272c565b602082019050919050565b600062001f6760308362002306565b915062001f748262002755565b604082019050919050565b600062001f8e602b8362002306565b915062001f9b82620027a4565b604082019050919050565b600062001fb560138362002306565b915062001fc282620027f3565b602082019050919050565b62001fd8816200245e565b82525050565b600062001fec828462001dd1565b915081905092915050565b60006020820190506200200e600083018462001d04565b92915050565b60006040820190506200202b600083018562001cf3565b81810360208301526200203f818462001d90565b90509392505050565b6000602082019050818103600083015262002064818462001d15565b905092915050565b600060208201905062002083600083018462001d7f565b92915050565b6000602082019050620020a0600083018462001e08565b92915050565b6000602082019050620020bd600083018462001e2a565b92915050565b6000602082019050620020da600083018462001e3b565b92915050565b6000602082019050620020f7600083018462001e5d565b92915050565b600060408201905062002114600083018562001e4c565b62002123602083018462001e4c565b9392505050565b60006020820190508181036000830152620021458162001e6e565b9050919050565b60006020820190508181036000830152620021678162001e95565b9050919050565b60006020820190508181036000830152620021898162001ebc565b9050919050565b60006020820190508181036000830152620021ab8162001ee3565b9050919050565b60006020820190508181036000830152620021cd8162001f0a565b9050919050565b60006020820190508181036000830152620021ef8162001f31565b9050919050565b60006020820190508181036000830152620022118162001f58565b9050919050565b60006020820190508181036000830152620022338162001f7f565b9050919050565b60006020820190508181036000830152620022558162001fa6565b9050919050565b600060208201905062002273600083018462001fcd565b92915050565b600060408201905062002290600083018562001fcd565b6200229f602083018462001fcd565b9392505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000620023248262002430565b9150620023318362002430565b92508261ffff038211156200234b576200234a62002587565b5b828201905092915050565b6000620023638262002430565b9150620023708362002430565b92508161ffff04831182151516156200238e576200238d62002587565b5b828202905092915050565b6000620023a6826200245e565b9150620023b3836200245e565b925082821015620023c957620023c862002587565b5b828203905092915050565b6000620023e1826200243e565b9050919050565b6000620023f5826200243e565b9050919050565b60008115159050919050565b60006200241582620023d4565b9050919050565b60006200242982620023e8565b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000620024828262002529565b9050919050565b600062002496826200249d565b9050919050565b6000620024aa826200243e565b9050919050565b6000620024be82620024c5565b9050919050565b6000620024d2826200243e565b9050919050565b6000620024e682620024ed565b9050919050565b6000620024fa826200243e565b9050919050565b60006200250e826200245e565b9050919050565b6000620025228262002468565b9050919050565b600062002536826200253d565b9050919050565b60006200254a826200243e565b9050919050565b60005b838110156200257157808201518184015260208101905062002554565b8381111562002581576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f436f6e74726163742068617320746f20737570706f727420746865204552433760008201527f32312062616c616e63654f66282920696e746572666163650000000000000000602082015250565b7f4f6e6c79206f6e65206c6f616e20706572206f776e657220697320616c6c6f7760008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f50726f787920636f6e6e6563746f722063616c6c206661696c65640000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e6e6f7420736574206e66744164647265737320746f2061206e6f6e2d6360008201527f6f6e747261637420696e7374616e636500000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f416363657373204e465420726571756972656400000000000000000000000000600082015250565b6200282781620023d4565b81146200283357600080fd5b50565b620028418162002408565b81146200284d57600080fd5b50565b6200285b816200241c565b81146200286757600080fd5b50565b62002875816200245e565b81146200288157600080fd5b5056fe60806040526040516200105d3803806200105d8339818101604052810190620000299190620005f1565b60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5160001c6200005b91906200086c565b60001b7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b14620000b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b620000cb82826000620000d360201b60201c565b505062000ac7565b620000e483620001da60201b60201c565b8273ffffffffffffffffffffffffffffffffffffffff167f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e60405160405180910390a2600082511180620001355750805b15620001d557620001d38373ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200018657600080fd5b505afa1580156200019b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c19190620005c5565b836200038960201b620000371760201c565b505b505050565b620001f081620003bf60201b620000641760201c565b62000232576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002299062000775565b60405180910390fd5b620002c98173ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200027d57600080fd5b505afa15801562000292573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002b89190620005c5565b620003bf60201b620000641760201c565b6200030b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200030290620007b9565b60405180910390fd5b80620003457fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b620003e260201b620000871760201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060620003b783836040518060600160405280602781526020016200103660279139620003ec60201b60201c565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b6060620003ff84620003bf60201b60201c565b62000441576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004389062000797565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516200046b919062000738565b600060405180830381855af49150503d8060008114620004a8576040519150601f19603f3d011682016040523d82523d6000602084013e620004ad565b606091505b5091509150620004c5828286620004d060201b60201c565b925050509392505050565b60608315620004e25782905062000535565b600083511115620004f65782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200052c919062000751565b60405180910390fd5b9392505050565b6000620005536200054d8462000804565b620007db565b9050828152602081018484840111156200056c57600080fd5b62000579848285620008e5565b509392505050565b600081519050620005928162000aad565b92915050565b600082601f830112620005aa57600080fd5b8151620005bc8482602086016200053c565b91505092915050565b600060208284031215620005d857600080fd5b6000620005e88482850162000581565b91505092915050565b600080604083850312156200060557600080fd5b6000620006158582860162000581565b925050602083015167ffffffffffffffff8111156200063357600080fd5b620006418582860162000598565b9150509250929050565b600062000658826200083a565b62000664818562000850565b935062000676818560208601620008e5565b80840191505092915050565b60006200068f8262000845565b6200069b81856200085b565b9350620006ad818560208601620008e5565b620006b881620009af565b840191505092915050565b6000620006d26025836200085b565b9150620006df82620009c0565b604082019050919050565b6000620006f96026836200085b565b9150620007068262000a0f565b604082019050919050565b6000620007206030836200085b565b91506200072d8262000a5e565b604082019050919050565b60006200074682846200064b565b915081905092915050565b600060208201905081810360008301526200076d818462000682565b905092915050565b600060208201905081810360008301526200079081620006c3565b9050919050565b60006020820190508181036000830152620007b281620006ea565b9050919050565b60006020820190508181036000830152620007d48162000711565b9050919050565b6000620007e7620007fa565b9050620007f582826200091b565b919050565b6000604051905090565b600067ffffffffffffffff82111562000822576200082162000980565b5b6200082d82620009af565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006200087982620008db565b91506200088683620008db565b9250828210156200089c576200089b62000951565b5b828203905092915050565b6000620008b482620008bb565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101562000905578082015181840152602081019050620008e8565b8381111562000915576000848401525b50505050565b6200092682620009af565b810181811067ffffffffffffffff8211171562000948576200094762000980565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b7f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201527f73206e6f74206120636f6e747261637400000000000000000000000000000000602082015250565b62000ab881620008a7565b811462000ac457600080fd5b50565b61055f8062000ad76000396000f3fe6080604052366100135761001161001d565b005b61001b61001d565b005b610025610091565b610035610030610093565b61011f565b565b606061005c838360405180606001604052806027815260200161050360279139610145565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b565b600061009d610212565b73ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100e257600080fd5b505afa1580156100f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011a91906102e5565b905090565b3660008037600080366000845af43d6000803e8060008114610140573d6000f35b3d6000fd5b606061015084610064565b61018f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610186906103d4565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516101b7919061039b565b600060405180830381855af49150503d80600081146101f2576040519150601f19603f3d011682016040523d82523d6000602084013e6101f7565b606091505b5091509150610207828286610269565b925050509392505050565b60006102407fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b610087565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60608315610279578290506102c9565b60008351111561028c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c091906103b2565b60405180910390fd5b9392505050565b6000815190506102df816104eb565b92915050565b6000602082840312156102f757600080fd5b6000610305848285016102d0565b91505092915050565b6000610319826103f4565b610323818561040a565b9350610333818560208601610458565b80840191505092915050565b600061034a826103ff565b6103548185610415565b9350610364818560208601610458565b61036d8161048b565b840191505092915050565b6000610385602683610415565b91506103908261049c565b604082019050919050565b60006103a7828461030e565b915081905092915050565b600060208201905081810360008301526103cc818461033f565b905092915050565b600060208201905081810360008301526103ed81610378565b9050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061043182610438565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b8381101561047657808201518184015260208101905061045b565b83811115610485576000848401525b50505050565b6000601f19601f8301169050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6104f481610426565b81146104ff57600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e315b5ae13d755f35a30ac5193a3d7551961da99f1fa532c06319914f1bfec5064736f6c63430008040033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564608060405234801561001057600080fd5b50604051610a9c380380610a9c833981810160405281019061003291906101fd565b61004e61004361006360201b60201c565b61006b60201b60201c565b61005d8161012f60201b60201c565b50610312565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610142816101c560201b6103781760201c565b610181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017890610249565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000815190506101f7816102fb565b92915050565b60006020828403121561020f57600080fd5b600061021d848285016101e8565b91505092915050565b6000610233603383610269565b915061023e826102ac565b604082019050919050565b6000602082019050818103600083015261026281610226565b9050919050565b600082825260208201905092915050565b60006102858261028c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000602082015250565b6103048161027a565b811461030f57600080fd5b50565b61077b806103216000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633659cfe61461005c5780635c60da1b14610078578063715018a6146100965780638da5cb5b146100a0578063f2fde38b146100be575b600080fd5b61007660048036038101906100719190610508565b6100da565b005b6100806101a5565b60405161008d91906105a9565b60405180910390f35b61009e6101cf565b005b6100a8610257565b6040516100b591906105a9565b60405180910390f35b6100d860048036038101906100d39190610508565b610280565b005b6100e261039b565b73ffffffffffffffffffffffffffffffffffffffff16610100610257565b73ffffffffffffffffffffffffffffffffffffffff1614610156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014d90610604565b60405180910390fd5b61015f816103a3565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101d761039b565b73ffffffffffffffffffffffffffffffffffffffff166101f5610257565b73ffffffffffffffffffffffffffffffffffffffff161461024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610604565b60405180910390fd5b610255600061042f565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61028861039b565b73ffffffffffffffffffffffffffffffffffffffff166102a6610257565b73ffffffffffffffffffffffffffffffffffffffff16146102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f390610604565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561036c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610363906105c4565b60405180910390fd5b6103758161042f565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6103ac81610378565b6103eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e2906105e4565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000813590506105028161072e565b92915050565b60006020828403121561051a57600080fd5b6000610528848285016104f3565b91505092915050565b61053a81610635565b82525050565b600061054d602683610624565b915061055882610667565b604082019050919050565b6000610570603383610624565b915061057b826106b6565b604082019050919050565b6000610593602083610624565b915061059e82610705565b602082019050919050565b60006020820190506105be6000830184610531565b92915050565b600060208201905081810360008301526105dd81610540565b9050919050565b600060208201905081810360008301526105fd81610563565b9050919050565b6000602082019050818103600083015261061d81610586565b9050919050565b600082825260208201905092915050565b600061064082610647565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61073781610635565b811461074257600080fd5b5056fea2646970667358221220151149c73270d1d35004fd185e9ecf2410985d323d9acbd45abd8d5e4166665664736f6c63430008040033a264697066735822122021b4f9d461b26d952ed665f585fab017192d4d49898b866d1e73f59da1af22e064736f6c63430008040033",
  "deployedBytecode": "0x608060405260043610620000fe5760003560e01c8063715018a61162000097578063d26095201162000061578063d2609520146200035d578063e3fcd8d1146200038d578063e78fd93114620003bd578063f2fde38b14620003f357620000fe565b8063715018a614620002b55780638da5cb5b14620002cf578063a5bfd16a14620002ff578063c4d66de8146200032f57620000fe565b8063357719ef11620000d9578063357719ef14620001cf578063429c9a5a14620002135780635b012546146200024157806365ec1a45146200028557620000fe565b80630e7fc86414620001035780631f278b7414620001475780633344a555146200018b575b600080fd5b3480156200011057600080fd5b506200012f600480360381019062000129919062001bfd565b62000421565b6040516200013e91906200206c565b60405180910390f35b3480156200015457600080fd5b506200017360048036038101906200016d919062001bfd565b620004b9565b60405162000182919062001ff7565b60405180910390f35b3480156200019857600080fd5b50620001b76004803603810190620001b1919062001bfd565b620004ec565b604051620001c6919062001ff7565b60405180910390f35b348015620001dc57600080fd5b50620001fb6004803603810190620001f5919062001bfd565b62000555565b6040516200020a919062001ff7565b60405180910390f35b3480156200022057600080fd5b506200023f600480360381019062000239919062001c29565b62000588565b005b3480156200024e57600080fd5b506200026d600480360381019062000267919062001bfd565b62000823565b6040516200027c919062001ff7565b60405180910390f35b3480156200029257600080fd5b506200029d6200088c565b604051620002ac9190620020a6565b60405180910390f35b348015620002c257600080fd5b50620002cd62000c73565b005b348015620002dc57600080fd5b50620002e762000d04565b604051620002f6919062001ff7565b60405180910390f35b3480156200030c57600080fd5b506200031762000d2e565b60405162000326919062002048565b60405180910390f35b3480156200033c57600080fd5b506200035b600480360381019062000355919062001c55565b62000dbe565b005b3480156200036a57600080fd5b506200037562000fc0565b604051620003849190620020c3565b60405180910390f35b3480156200039a57600080fd5b50620003a562000fe6565b604051620003b4919062002089565b60405180910390f35b620003db6004803603810190620003d5919062001c81565b62001028565b604051620003ea9190620020a6565b60405180910390f35b3480156200040057600080fd5b506200041f600480360381019062000419919062001bfd565b62001501565b005b60008073ffffffffffffffffffffffffffffffffffffffff16606760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60676020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60666020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6200059262001605565b73ffffffffffffffffffffffffffffffffffffffff16620005b262000d04565b73ffffffffffffffffffffffffffffffffffffffff16146200060b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200060290620021d4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620007e3576200064b816200160d565b6200068d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200068490620021f6565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1633604051602401620006ba919062001ff7565b6040516020818303038152906040527f70a08231000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405162000746919062001fde565b6000604051808303816000865af19150503d806000811462000785576040519150601f19603f3d011682016040523d82523d6000602084013e6200078a565b606091505b50915091508180156200079e575060008151115b620007e0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007d7906200214c565b60405180910390fd5b50505b600060017f05df0919f17c81dab74a24e96f8e9fcaf2f7ae9ec785467bc9a30e698771439060001c62000817919062002399565b60001b90508181555050565b6000606760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146200095e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000955906200216e565b60405180910390fd5b600060017f05df0919f17c81dab74a24e96f8e9fcaf2f7ae9ec785467bc9a30e698771439060001c62000992919062002399565b60001b9050600081549050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462000aa75760008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040162000a0f919062001ff7565b60206040518083038186803b15801562000a2857600080fd5b505afa15801562000a3d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a63919062001cad565b1162000aa6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a9d906200223a565b60405180910390fd5b5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16638129fc1c60e01b600060405160240162000ae89190620020e0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405162000b539062001b6e565b62000b6092919062002014565b604051809103906000f08015801562000b7d573d6000803e3d6000fd5b509050600081905062000b908162001630565b8073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040162000bcb919062001ff7565b600060405180830381600087803b15801562000be657600080fd5b505af115801562000bfb573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f74f440674c6106c61951acc831efcdce60effebf4fea0fdc74f0e5ad72f56a1060008060405162000c61929190620020fd565b60405180910390a38094505050505090565b62000c7d62001605565b73ffffffffffffffffffffffffffffffffffffffff1662000c9d62000d04565b73ffffffffffffffffffffffffffffffffffffffff161462000cf6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ced90620021d4565b60405180910390fd5b62000d02600062001792565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060606880548060200260200160405190810160405280929190818152602001828054801562000db457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000d69575b5050505050905090565b600060019054906101000a900460ff1662000de85760008054906101000a900460ff161562000df3565b62000df262001858565b5b62000e35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000e2c9062002190565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000e86576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8160405162000e959062001b7c565b62000ea1919062001ff7565b604051809103906000f08015801562000ebe573d6000803e3d6000fd5b50606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040162000f5c919062001ff7565b600060405180830381600087803b15801562000f7757600080fd5b505af115801562000f8c573d6000803e3d6000fd5b5050505062000f9a6200186b565b801562000fbc5760008060016101000a81548160ff0219169083151502179055505b5050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060017f05df0919f17c81dab74a24e96f8e9fcaf2f7ae9ec785467bc9a30e698771439060001c6200101b919062002399565b60001b9050805491505090565b60008073ffffffffffffffffffffffffffffffffffffffff16606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620010fa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010f1906200216e565b60405180910390fd5b600060017f05df0919f17c81dab74a24e96f8e9fcaf2f7ae9ec785467bc9a30e698771439060001c6200112e919062002399565b60001b9050600081549050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620012435760008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401620011ab919062001ff7565b60206040518083038186803b158015620011c457600080fd5b505afa158015620011d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011ff919062001cad565b1162001242576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001239906200223a565b60405180910390fd5b5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16638129fc1c60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051620012e19062001b6e565b620012ee92919062002014565b604051809103906000f0801580156200130b573d6000803e3d6000fd5b50905060008190506200131e8162001630565b620013968163b60d428860e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506001620018c9565b506200141c8163c5ebeaec60e01b88604051602401620013b791906200225c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506000620018c9565b508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040162001458919062001ff7565b600060405180830381600087803b1580156200147357600080fd5b505af115801562001488573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f74f440674c6106c61951acc831efcdce60effebf4fea0fdc74f0e5ad72f56a103489604051620014ed92919062002279565b60405180910390a380945050505050919050565b6200150b62001605565b73ffffffffffffffffffffffffffffffffffffffff166200152b62000d04565b73ffffffffffffffffffffffffffffffffffffffff161462001584576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200157b90620021d4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620015f7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620015ee906200212a565b60405180910390fd5b620016028162001792565b50565b600033905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b80606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033606760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506068819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600062001865306200160d565b15905090565b600060019054906101000a900460ff16620018bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620018b49062002218565b60405180910390fd5b620018c7620019f4565b565b6060600060606000620018dc8662001a5c565b905060011515851515141562001967578673ffffffffffffffffffffffffffffffffffffffff16348260405162001914919062001fde565b60006040518083038185875af1925050503d806000811462001953576040519150601f19603f3d011682016040523d82523d6000602084013e62001958565b606091505b508093508194505050620019dc565b8673ffffffffffffffffffffffffffffffffffffffff16816040516200198e919062001fde565b6000604051808303816000865af19150503d8060008114620019cd576040519150601f19603f3d011682016040523d82523d6000602084013e620019d2565b606091505b5080935081945050505b620019e8838362001b0c565b93505050509392505050565b600060019054906101000a900460ff1662001a46576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001a3d9062002218565b60405180910390fd5b62001a5a62001a5462001605565b62001792565b565b6060600060613603359050600060416001602060408560ff1662001a81919062002356565b62001a8d919062002317565b62001a99919062002317565b62001aa5919062002317565b90506000845190506000606060405190508383018152600091505b8282101562001ae957816020028760200101518260200282602001015260018201915062001ac0565b838436038460200183013760208385018201016040528095505050505050919050565b60608262001b655760008251111562001b285781518083602001fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001b5c90620021b2565b60405180910390fd5b81905092915050565b61105d806200288583390190565b610a9c80620038e283390190565b60008135905062001b9b816200281c565b92915050565b60008135905062001bb28162002836565b92915050565b60008135905062001bc98162002850565b92915050565b60008135905062001be0816200286a565b92915050565b60008151905062001bf7816200286a565b92915050565b60006020828403121562001c1057600080fd5b600062001c208482850162001b8a565b91505092915050565b60006020828403121562001c3c57600080fd5b600062001c4c8482850162001ba1565b91505092915050565b60006020828403121562001c6857600080fd5b600062001c788482850162001bb8565b91505092915050565b60006020828403121562001c9457600080fd5b600062001ca48482850162001bcf565b91505092915050565b60006020828403121562001cc057600080fd5b600062001cd08482850162001be6565b91505092915050565b600062001ce7838362001e19565b60208301905092915050565b62001cfe8162002475565b82525050565b62001d0f81620023d4565b82525050565b600062001d2282620022b6565b62001d2e8185620022d9565b935062001d3b83620022a6565b8060005b8381101562001d7257815162001d56888262001cd9565b975062001d6383620022cc565b92505060018101905062001d3f565b5085935050505092915050565b62001d8a81620023fc565b82525050565b600062001d9d82620022c1565b62001da98185620022ea565b935062001dbb81856020860162002551565b62001dc681620025b6565b840191505092915050565b600062001dde82620022c1565b62001dea8185620022fb565b935062001dfc81856020860162002551565b80840191505092915050565b62001e138162002489565b82525050565b62001e2481620024b1565b82525050565b62001e3581620024b1565b82525050565b62001e4681620024d9565b82525050565b62001e578162002501565b82525050565b62001e688162002515565b82525050565b600062001e7d60268362002306565b915062001e8a82620025c7565b604082019050919050565b600062001ea460388362002306565b915062001eb18262002616565b604082019050919050565b600062001ecb60228362002306565b915062001ed88262002665565b604082019050919050565b600062001ef2602e8362002306565b915062001eff82620026b4565b604082019050919050565b600062001f19601b8362002306565b915062001f268262002703565b602082019050919050565b600062001f4060208362002306565b915062001f4d826200272c565b602082019050919050565b600062001f6760308362002306565b915062001f748262002755565b604082019050919050565b600062001f8e602b8362002306565b915062001f9b82620027a4565b604082019050919050565b600062001fb560138362002306565b915062001fc282620027f3565b602082019050919050565b62001fd8816200245e565b82525050565b600062001fec828462001dd1565b915081905092915050565b60006020820190506200200e600083018462001d04565b92915050565b60006040820190506200202b600083018562001cf3565b81810360208301526200203f818462001d90565b90509392505050565b6000602082019050818103600083015262002064818462001d15565b905092915050565b600060208201905062002083600083018462001d7f565b92915050565b6000602082019050620020a0600083018462001e08565b92915050565b6000602082019050620020bd600083018462001e2a565b92915050565b6000602082019050620020da600083018462001e3b565b92915050565b6000602082019050620020f7600083018462001e5d565b92915050565b600060408201905062002114600083018562001e4c565b62002123602083018462001e4c565b9392505050565b60006020820190508181036000830152620021458162001e6e565b9050919050565b60006020820190508181036000830152620021678162001e95565b9050919050565b60006020820190508181036000830152620021898162001ebc565b9050919050565b60006020820190508181036000830152620021ab8162001ee3565b9050919050565b60006020820190508181036000830152620021cd8162001f0a565b9050919050565b60006020820190508181036000830152620021ef8162001f31565b9050919050565b60006020820190508181036000830152620022118162001f58565b9050919050565b60006020820190508181036000830152620022338162001f7f565b9050919050565b60006020820190508181036000830152620022558162001fa6565b9050919050565b600060208201905062002273600083018462001fcd565b92915050565b600060408201905062002290600083018562001fcd565b6200229f602083018462001fcd565b9392505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000620023248262002430565b9150620023318362002430565b92508261ffff038211156200234b576200234a62002587565b5b828201905092915050565b6000620023638262002430565b9150620023708362002430565b92508161ffff04831182151516156200238e576200238d62002587565b5b828202905092915050565b6000620023a6826200245e565b9150620023b3836200245e565b925082821015620023c957620023c862002587565b5b828203905092915050565b6000620023e1826200243e565b9050919050565b6000620023f5826200243e565b9050919050565b60008115159050919050565b60006200241582620023d4565b9050919050565b60006200242982620023e8565b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000620024828262002529565b9050919050565b600062002496826200249d565b9050919050565b6000620024aa826200243e565b9050919050565b6000620024be82620024c5565b9050919050565b6000620024d2826200243e565b9050919050565b6000620024e682620024ed565b9050919050565b6000620024fa826200243e565b9050919050565b60006200250e826200245e565b9050919050565b6000620025228262002468565b9050919050565b600062002536826200253d565b9050919050565b60006200254a826200243e565b9050919050565b60005b838110156200257157808201518184015260208101905062002554565b8381111562002581576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f436f6e74726163742068617320746f20737570706f727420746865204552433760008201527f32312062616c616e63654f66282920696e746572666163650000000000000000602082015250565b7f4f6e6c79206f6e65206c6f616e20706572206f776e657220697320616c6c6f7760008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f50726f787920636f6e6e6563746f722063616c6c206661696c65640000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e6e6f7420736574206e66744164647265737320746f2061206e6f6e2d6360008201527f6f6e747261637420696e7374616e636500000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f416363657373204e465420726571756972656400000000000000000000000000600082015250565b6200282781620023d4565b81146200283357600080fd5b50565b620028418162002408565b81146200284d57600080fd5b50565b6200285b816200241c565b81146200286757600080fd5b50565b62002875816200245e565b81146200288157600080fd5b5056fe60806040526040516200105d3803806200105d8339818101604052810190620000299190620005f1565b60017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5160001c6200005b91906200086c565b60001b7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b14620000b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b620000cb82826000620000d360201b60201c565b505062000ac7565b620000e483620001da60201b60201c565b8273ffffffffffffffffffffffffffffffffffffffff167f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e60405160405180910390a2600082511180620001355750805b15620001d557620001d38373ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200018657600080fd5b505afa1580156200019b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001c19190620005c5565b836200038960201b620000371760201c565b505b505050565b620001f081620003bf60201b620000641760201c565b62000232576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002299062000775565b60405180910390fd5b620002c98173ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200027d57600080fd5b505afa15801562000292573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002b89190620005c5565b620003bf60201b620000641760201c565b6200030b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200030290620007b9565b60405180910390fd5b80620003457fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b620003e260201b620000871760201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060620003b783836040518060600160405280602781526020016200103660279139620003ec60201b60201c565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b6060620003ff84620003bf60201b60201c565b62000441576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004389062000797565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516200046b919062000738565b600060405180830381855af49150503d8060008114620004a8576040519150601f19603f3d011682016040523d82523d6000602084013e620004ad565b606091505b5091509150620004c5828286620004d060201b60201c565b925050509392505050565b60608315620004e25782905062000535565b600083511115620004f65782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200052c919062000751565b60405180910390fd5b9392505050565b6000620005536200054d8462000804565b620007db565b9050828152602081018484840111156200056c57600080fd5b62000579848285620008e5565b509392505050565b600081519050620005928162000aad565b92915050565b600082601f830112620005aa57600080fd5b8151620005bc8482602086016200053c565b91505092915050565b600060208284031215620005d857600080fd5b6000620005e88482850162000581565b91505092915050565b600080604083850312156200060557600080fd5b6000620006158582860162000581565b925050602083015167ffffffffffffffff8111156200063357600080fd5b620006418582860162000598565b9150509250929050565b600062000658826200083a565b62000664818562000850565b935062000676818560208601620008e5565b80840191505092915050565b60006200068f8262000845565b6200069b81856200085b565b9350620006ad818560208601620008e5565b620006b881620009af565b840191505092915050565b6000620006d26025836200085b565b9150620006df82620009c0565b604082019050919050565b6000620006f96026836200085b565b9150620007068262000a0f565b604082019050919050565b6000620007206030836200085b565b91506200072d8262000a5e565b604082019050919050565b60006200074682846200064b565b915081905092915050565b600060208201905081810360008301526200076d818462000682565b905092915050565b600060208201905081810360008301526200079081620006c3565b9050919050565b60006020820190508181036000830152620007b281620006ea565b9050919050565b60006020820190508181036000830152620007d48162000711565b9050919050565b6000620007e7620007fa565b9050620007f582826200091b565b919050565b6000604051905090565b600067ffffffffffffffff82111562000822576200082162000980565b5b6200082d82620009af565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006200087982620008db565b91506200088683620008db565b9250828210156200089c576200089b62000951565b5b828203905092915050565b6000620008b482620008bb565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101562000905578082015181840152602081019050620008e8565b8381111562000915576000848401525b50505050565b6200092682620009af565b810181811067ffffffffffffffff8211171562000948576200094762000980565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b7f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201527f73206e6f74206120636f6e747261637400000000000000000000000000000000602082015250565b62000ab881620008a7565b811462000ac457600080fd5b50565b61055f8062000ad76000396000f3fe6080604052366100135761001161001d565b005b61001b61001d565b005b610025610091565b610035610030610093565b61011f565b565b606061005c838360405180606001604052806027815260200161050360279139610145565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b565b600061009d610212565b73ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156100e257600080fd5b505afa1580156100f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011a91906102e5565b905090565b3660008037600080366000845af43d6000803e8060008114610140573d6000f35b3d6000fd5b606061015084610064565b61018f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610186906103d4565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516101b7919061039b565b600060405180830381855af49150503d80600081146101f2576040519150601f19603f3d011682016040523d82523d6000602084013e6101f7565b606091505b5091509150610207828286610269565b925050509392505050565b60006102407fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b610087565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60608315610279578290506102c9565b60008351111561028c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c091906103b2565b60405180910390fd5b9392505050565b6000815190506102df816104eb565b92915050565b6000602082840312156102f757600080fd5b6000610305848285016102d0565b91505092915050565b6000610319826103f4565b610323818561040a565b9350610333818560208601610458565b80840191505092915050565b600061034a826103ff565b6103548185610415565b9350610364818560208601610458565b61036d8161048b565b840191505092915050565b6000610385602683610415565b91506103908261049c565b604082019050919050565b60006103a7828461030e565b915081905092915050565b600060208201905081810360008301526103cc818461033f565b905092915050565b600060208201905081810360008301526103ed81610378565b9050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061043182610438565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b8381101561047657808201518184015260208101905061045b565b83811115610485576000848401525b50505050565b6000601f19601f8301169050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6104f481610426565b81146104ff57600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e315b5ae13d755f35a30ac5193a3d7551961da99f1fa532c06319914f1bfec5064736f6c63430008040033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564608060405234801561001057600080fd5b50604051610a9c380380610a9c833981810160405281019061003291906101fd565b61004e61004361006360201b60201c565b61006b60201b60201c565b61005d8161012f60201b60201c565b50610312565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610142816101c560201b6103781760201c565b610181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017890610249565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000815190506101f7816102fb565b92915050565b60006020828403121561020f57600080fd5b600061021d848285016101e8565b91505092915050565b6000610233603383610269565b915061023e826102ac565b604082019050919050565b6000602082019050818103600083015261026281610226565b9050919050565b600082825260208201905092915050565b60006102858261028c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000602082015250565b6103048161027a565b811461030f57600080fd5b50565b61077b806103216000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633659cfe61461005c5780635c60da1b14610078578063715018a6146100965780638da5cb5b146100a0578063f2fde38b146100be575b600080fd5b61007660048036038101906100719190610508565b6100da565b005b6100806101a5565b60405161008d91906105a9565b60405180910390f35b61009e6101cf565b005b6100a8610257565b6040516100b591906105a9565b60405180910390f35b6100d860048036038101906100d39190610508565b610280565b005b6100e261039b565b73ffffffffffffffffffffffffffffffffffffffff16610100610257565b73ffffffffffffffffffffffffffffffffffffffff1614610156576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014d90610604565b60405180910390fd5b61015f816103a3565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101d761039b565b73ffffffffffffffffffffffffffffffffffffffff166101f5610257565b73ffffffffffffffffffffffffffffffffffffffff161461024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610604565b60405180910390fd5b610255600061042f565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61028861039b565b73ffffffffffffffffffffffffffffffffffffffff166102a6610257565b73ffffffffffffffffffffffffffffffffffffffff16146102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f390610604565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561036c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610363906105c4565b60405180910390fd5b6103758161042f565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6103ac81610378565b6103eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e2906105e4565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000813590506105028161072e565b92915050565b60006020828403121561051a57600080fd5b6000610528848285016104f3565b91505092915050565b61053a81610635565b82525050565b600061054d602683610624565b915061055882610667565b604082019050919050565b6000610570603383610624565b915061057b826106b6565b604082019050919050565b6000610593602083610624565b915061059e82610705565b602082019050919050565b60006020820190506105be6000830184610531565b92915050565b600060208201905081810360008301526105dd81610540565b9050919050565b600060208201905081810360008301526105fd81610563565b9050919050565b6000602082019050818103600083015261061d81610586565b9050919050565b600082825260208201905092915050565b600061064082610647565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201527f6e206973206e6f74206120636f6e747261637400000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61073781610635565b811461074257600080fd5b5056fea2646970667358221220151149c73270d1d35004fd185e9ecf2410985d323d9acbd45abd8d5e4166665664736f6c63430008040033a264697066735822122021b4f9d461b26d952ed665f585fab017192d4d49898b866d1e73f59da1af22e064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/upgraded/SmartLoansFactoryWithAccessNFT.sol:SmartLoansFactoryWithAccessNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/upgraded/SmartLoansFactoryWithAccessNFT.sol:SmartLoansFactoryWithAccessNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/upgraded/SmartLoansFactoryWithAccessNFT.sol:SmartLoansFactoryWithAccessNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/upgraded/SmartLoansFactoryWithAccessNFT.sol:SmartLoansFactoryWithAccessNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/upgraded/SmartLoansFactoryWithAccessNFT.sol:SmartLoansFactoryWithAccessNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6571,
        "contract": "contracts/upgraded/SmartLoansFactoryWithAccessNFT.sol:SmartLoansFactoryWithAccessNFT",
        "label": "upgradeableBeacon",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(UpgradeableBeacon)1193"
      },
      {
        "astId": 6575,
        "contract": "contracts/upgraded/SmartLoansFactoryWithAccessNFT.sol:SmartLoansFactoryWithAccessNFT",
        "label": "ownersToLoans",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6579,
        "contract": "contracts/upgraded/SmartLoansFactoryWithAccessNFT.sol:SmartLoansFactoryWithAccessNFT",
        "label": "loansToOwners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6583,
        "contract": "contracts/upgraded/SmartLoansFactoryWithAccessNFT.sol:SmartLoansFactoryWithAccessNFT",
        "label": "loans",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_contract(SmartLoan)6399)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(SmartLoan)6399)dyn_storage": {
        "base": "t_contract(SmartLoan)6399",
        "encoding": "dynamic_array",
        "label": "contract SmartLoan[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(SmartLoan)6399": {
        "encoding": "inplace",
        "label": "contract SmartLoan",
        "numberOfBytes": "20"
      },
      "t_contract(UpgradeableBeacon)1193": {
        "encoding": "inplace",
        "label": "contract UpgradeableBeacon",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}