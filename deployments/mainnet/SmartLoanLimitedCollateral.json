{
  "address": "0x7789BFf818C051c48e7EBA3550D72AC9bE2fCAF7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Borrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Funded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Invested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonus",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ltv",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtRepaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LoanClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Repaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssetsBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssetsPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchange",
      "outputs": [
        {
          "internalType": "contract IAssetsExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFullLoanStatus",
      "outputs": [
        {
          "internalType": "uint256[4]",
          "name": "",
          "type": "uint256[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLTV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidationBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxBlockTimestampDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxDataTimestampDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxLtv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinSelloutLtv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPercentagePrecision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceProvider1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceProvider2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYakAvaxStakingContract",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYieldYakRouter",
      "outputs": [
        {
          "internalType": "contract IYieldYakRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_exactERC20AmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAvaxAmountIn",
          "type": "uint256"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receivedSigner",
          "type": "address"
        }
      ],
      "name": "isSignerAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSolvent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_receivedTimestamp",
          "type": "uint256"
        }
      ],
      "name": "isTimestampValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_exactERC20AmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAvaxAmountOut",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeAVAXYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeAVAXYak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x96fd63467a15421f4d9b5adcb0aba2365bb11bf9bdde2cfe64fdf89ad8798783",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x7789BFf818C051c48e7EBA3550D72AC9bE2fCAF7",
    "transactionIndex": 0,
    "gasUsed": "5240754",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7e3b54f0d0b0a5fc175741ff54daae6b944f44f26598c27efd5a458a89368aef",
    "transactionHash": "0x96fd63467a15421f4d9b5adcb0aba2365bb11bf9bdde2cfe64fdf89ad8798783",
    "logs": [],
    "blockNumber": 13930870,
    "cumulativeGasUsed": "5240754",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "162ca26958c7dfa29193d7fc1f8fa0fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LoanClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssetsBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssetsPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchange\",\"outputs\":[{\"internalType\":\"contract IAssetsExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFullLoanStatus\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidationBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBlockTimestampDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDataTimestampDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxLtv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinSelloutLtv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPercentagePrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceProvider1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceProvider2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYakAvaxStakingContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYieldYakRouter\",\"outputs\":[{\"internalType\":\"contract IYieldYakRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exactERC20AmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAvaxAmountIn\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receivedSigner\",\"type\":\"address\"}],\"name\":\"isSignerAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_receivedTimestamp\",\"type\":\"uint256\"}],\"name\":\"isTimestampValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exactERC20AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAvaxAmountOut\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeAVAXYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeAVAXYak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"borrow(uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_amount\":\"of funds to borrow\"}},\"closeLoan()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getAllAssetsPrices()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getBalance(address,bytes32)\":{\"details\":\"_asset the code of an asset_user the address of queried user*\"},\"getLTV()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getTotalValue()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"invest(bytes32,uint256,uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_asset\":\"code of the asset\",\"_exactERC20AmountOut\":\"exact amount of asset to buy\",\"_maxAvaxAmountIn\":\"maximum amount of AVAX to sell\"}},\"isSolvent()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"liquidateLoan(uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(bytes32,uint256,uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_asset\":\"code of the asset\",\"_exactERC20AmountIn\":\"exact amount of token to sell\",\"_minAvaxAmountOut\":\"minimum amount of the AVAX token to buy\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay(uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_amount\":\"of funds to repay\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_amount\":\"to be withdrawn\"}},\"withdrawAsset(bytes32,uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(uint256)\":{\"notice\":\"Borrows funds from the pool\"},\"closeLoan()\":{\"notice\":\"This function can only be accessed by the owner and allows selling all of the assets.\"},\"fund()\":{\"notice\":\"Funds a loan with the value attached to the transaction Allows to add up to 7 AVAX of collateral in total*\"},\"getAllAssetsBalances()\":{\"notice\":\"Returns the balances of all assets served by the price provider It could be used as a helper method for UI*\"},\"getAllAssetsPrices()\":{\"notice\":\"Returns the prices of all assets served by the price provider It could be used as a helper method for UI\"},\"getBalance(address,bytes32)\":{\"notice\":\"Returns the current balance of the asset held by a given user\"},\"getDebt()\":{\"notice\":\"Returns the current debt associated with the loan*\"},\"getLTV()\":{\"notice\":\"LoanToValue ratio is calculated as the ratio between debt and collateral. The collateral is equal to total loan value takeaway debt.\"},\"getMaxBlockTimestampDelay()\":{\"notice\":\"Override PriceAware method to consider Avalanche guaranteed block timestamp time accuracy*\"},\"getTotalValue()\":{\"notice\":\"Returns the current value of a loan in AVAX including cash and investments\"},\"invest(bytes32,uint256,uint256)\":{\"notice\":\"Invests an amount to buy an asset\"},\"isSignerAuthorized(address)\":{\"notice\":\"Override PriceAware method, addresses below belong to authorized signers of data feeds*\"},\"isSolvent()\":{\"notice\":\"Checks if the loan is solvent. It means that the ratio between debt and collateral is below safe level, which is parametrized by the getMaxLtv()\"},\"redeem(bytes32,uint256,uint256)\":{\"notice\":\"Redeem an investment by selling an asset\"},\"repay(uint256)\":{\"notice\":\"Repays funds to the pool\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws an amount from the loan This method could be used to cash out profits from investments The loan needs to remain solvent after the withdrawal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/upgraded/SmartLoanLimitedCollateral.sol\":\"SmartLoanLimitedCollateral\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/CompoundingIndex.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./lib/WadRayMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * CompoundingIndex\\r\\n * The contract contains logic for time-based index recalculation with minimal memory footprint.\\r\\n * It could be used as a base building block for any index-based entities like deposits and loans.\\r\\n * @dev updatedRate the value of updated rate\\r\\n **/\\r\\ncontract CompoundingIndex is Ownable {\\r\\n  using WadRayMath for uint256;\\r\\n\\r\\n  uint256 private constant SECONDS_IN_YEAR = 365 days;\\r\\n  uint256 private constant BASE_RATE = 1e18;\\r\\n\\r\\n  uint256 public start = block.timestamp;\\r\\n\\r\\n  uint256 public index = BASE_RATE;\\r\\n  uint256 public indexUpdateTime = start;\\r\\n\\r\\n  mapping(uint256 => uint256) prevIndex;\\r\\n  mapping(address => uint256) userUpdateTime;\\r\\n\\r\\n  uint256 public rate;\\r\\n\\r\\n  constructor(address owner_) {\\r\\n    if (address(owner_) != address(0)) {\\r\\n      transferOwnership(owner_);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /* ========== SETTERS ========== */\\r\\n\\r\\n  /**\\r\\n   * Sets the new rate\\r\\n   * Before the new rate is set, the index is updated accumulating interest\\r\\n   * @dev updatedRate the value of updated rate\\r\\n   **/\\r\\n  function setRate(uint256 _rate) public onlyOwner {\\r\\n    updateIndex();\\r\\n    rate = _rate;\\r\\n    emit RateUpdated(rate);\\r\\n  }\\r\\n\\r\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n  /**\\r\\n   * Updates user index\\r\\n   * It persists the update time and the update index time->index mapping\\r\\n   * @dev user address of the index owner\\r\\n   **/\\r\\n  function updateUser(address user) public onlyOwner {\\r\\n    userUpdateTime[user] = block.timestamp;\\r\\n    prevIndex[block.timestamp] = getIndex();\\r\\n  }\\r\\n\\r\\n  /* ========== VIEW FUNCTIONS ========== */\\r\\n\\r\\n  /**\\r\\n   * Gets current value of the compounding index\\r\\n   * It recalculates the value on-demand without updating the storage\\r\\n   **/\\r\\n  function getIndex() public view returns (uint256) {\\r\\n    uint256 period = block.timestamp - indexUpdateTime;\\r\\n    if (period > 0) {\\r\\n      return index.wadToRay().rayMul(getCompoundedFactor(period)).rayToWad();\\r\\n    } else {\\r\\n      return index;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Gets the user value recalculated to the current index\\r\\n   * It recalculates the value on-demand without updating the storage\\r\\n   * Ray operations round up the result, but it is only an issue for very small values (with an order of magnitude\\r\\n   * of 1 Wei)\\r\\n   **/\\r\\n  function getIndexedValue(uint256 value, address user) public view returns (uint256) {\\r\\n    uint256 userTime = userUpdateTime[user];\\r\\n    uint256 prevUserIndex = userTime == 0 ? BASE_RATE : prevIndex[userTime];\\r\\n\\r\\n    return value.wadToRay().rayMul(getIndex().wadToRay()).rayDiv(prevUserIndex.wadToRay()).rayToWad();\\r\\n  }\\r\\n\\r\\n  /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n  function updateIndex() internal {\\r\\n    prevIndex[indexUpdateTime] = index;\\r\\n\\r\\n    index = getIndex();\\r\\n    indexUpdateTime = block.timestamp;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns compounded factor in Ray\\r\\n   **/\\r\\n  function getCompoundedFactor(uint256 period) internal view returns (uint256) {\\r\\n    return ((rate.wadToRay() / SECONDS_IN_YEAR) + WadRayMath.ray()).rayPow(period);\\r\\n  }\\r\\n\\r\\n  /* ========== EVENTS ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev updatedRate the value of updated rate\\r\\n   **/\\r\\n  event RateUpdated(uint256 updatedRate);\\r\\n}\\r\\n\",\"keccak256\":\"0x5770e5fa02286d191787c0a17c906d1c804856a15b0c4ab72d1327d9dfe4625a\",\"license\":\"UNLICENSED\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./CompoundingIndex.sol\\\";\\r\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\r\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Pool\\r\\n * @dev Contract allowing user to deposit and borrow funds from a single pot\\r\\n * Depositors are rewarded with the interest rates collected from borrowers.\\r\\n * Rates are compounded every second and getters always return the current deposit and borrowing balance.\\r\\n * The interest rates calculation is delegated to the external calculator contract.\\r\\n */\\r\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\r\\n  using TransferHelper for address payable;\\r\\n\\r\\n  uint256 public constant MAX_POOL_UTILISATION_FOR_BORROWING = 0.95e18;\\r\\n\\r\\n  mapping(address => mapping(address => uint256)) private _allowed;\\r\\n  mapping(address => uint256) private _deposited;\\r\\n\\r\\n  mapping(address => uint256) public borrowed;\\r\\n\\r\\n  IRatesCalculator private _ratesCalculator;\\r\\n  IBorrowersRegistry private _borrowersRegistry;\\r\\n\\r\\n  CompoundingIndex private _depositIndex;\\r\\n  CompoundingIndex private _borrowIndex;\\r\\n\\r\\n  function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, CompoundingIndex depositIndex_, CompoundingIndex borrowIndex_) public initializer {\\r\\n    require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\r\\n\\r\\n    _borrowersRegistry = borrowersRegistry_;\\r\\n    _ratesCalculator = ratesCalculator_;\\r\\n    _depositIndex = depositIndex_;\\r\\n    _borrowIndex = borrowIndex_;\\r\\n\\r\\n    __Ownable_init();\\r\\n    __ReentrancyGuard_init();\\r\\n    _updateRates();\\r\\n  }\\r\\n\\r\\n  /* ========== SETTERS ========== */\\r\\n\\r\\n  /**\\r\\n   * Sets the new rate calculator.\\r\\n   * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\r\\n   * Only the owner of the Contract can execute this function.\\r\\n   * @dev _ratesCalculator the address of rates calculator\\r\\n   **/\\r\\n  function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\r\\n    // setting address(0) ratesCalculator_ freezes the pool\\r\\n    require(AddressUpgradeable.isContract(address(ratesCalculator_)) || address(ratesCalculator_) == address(0), \\\"Must be a contract\\\");\\r\\n    _ratesCalculator = ratesCalculator_;\\r\\n    if (address(ratesCalculator_) != address(0)) {\\r\\n      _updateRates();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Sets the new borrowers registry contract.\\r\\n   * The borrowers registry decides if an account can borrow funds.\\r\\n   * Only the owner of the Contract can execute this function.\\r\\n   * @dev _borrowersRegistry the address of borrowers registry\\r\\n   **/\\r\\n  function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\r\\n    require(address(borrowersRegistry_) != address(0), \\\"The borrowers registry cannot set to a null address\\\");\\r\\n    require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\r\\n\\r\\n    _borrowersRegistry = borrowersRegistry_;\\r\\n    emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\r\\n  }\\r\\n\\r\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n    require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\r\\n    require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\r\\n\\r\\n    _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n    require(_deposited[msg.sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\r\\n    // (this is verified in \\\"require\\\" above)\\r\\n    unchecked {\\r\\n      _deposited[msg.sender] -= amount;\\r\\n    }\\r\\n\\r\\n    _accumulateDepositInterest(recipient);\\r\\n    _deposited[recipient] += amount;\\r\\n\\r\\n    emit Transfer(msg.sender, recipient, amount);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\r\\n    return _allowed[owner][spender];\\r\\n  }\\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\r\\n    uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\r\\n    _allowed[msg.sender][spender] = newAllowance;\\r\\n\\r\\n    emit Approval(msg.sender, spender, newAllowance);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\r\\n    uint256 currentAllowance = _allowed[msg.sender][spender];\\r\\n    require(currentAllowance >= subtractedValue, \\\"Current allowance is smaller than the subtractedValue\\\");\\r\\n\\r\\n    uint256 newAllowance = currentAllowance - subtractedValue;\\r\\n    _allowed[msg.sender][spender] = newAllowance;\\r\\n\\r\\n    emit Approval(msg.sender, spender, newAllowance);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\r\\n    _allowed[msg.sender][spender] = amount;\\r\\n\\r\\n    emit Approval(msg.sender, spender, amount);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n    require(_allowed[sender][msg.sender] >= amount, \\\"Not enough tokens allowed to transfer required amount\\\");\\r\\n    require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\r\\n    require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\r\\n\\r\\n    _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n    require(_deposited[sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\r\\n    _deposited[sender] -= amount;\\r\\n    _allowed[sender][msg.sender] -= amount;\\r\\n\\r\\n    _accumulateDepositInterest(recipient);\\r\\n    _deposited[recipient] += amount;\\r\\n\\r\\n    emit Transfer(sender, recipient, amount);\\r\\n\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Deposits the message value\\r\\n   * It updates user deposited balance, total deposited and rates\\r\\n   **/\\r\\n  function deposit() public payable virtual nonReentrant {\\r\\n    _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n    _mint(msg.sender, msg.value);\\r\\n    _updateRates();\\r\\n\\r\\n    emit Deposit(msg.sender, msg.value, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Withdraws selected amount from the user deposits\\r\\n   * @dev _amount the amount to be withdrawn\\r\\n   **/\\r\\n  function withdraw(uint256 _amount) external nonReentrant {\\r\\n    require(address(this).balance >= _amount, \\\"There is not enough available funds to withdraw\\\");\\r\\n\\r\\n    _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n    _burn(msg.sender, _amount);\\r\\n\\r\\n    payable(msg.sender).safeTransferETH(_amount);\\r\\n\\r\\n    _updateRates();\\r\\n\\r\\n    emit Withdrawal(msg.sender, _amount, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Borrows the specified amount\\r\\n   * It updates user borrowed balance, total borrowed amount and rates\\r\\n   * @dev _amount the amount to be borrowed\\r\\n   **/\\r\\n  function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\r\\n    require(address(this).balance >= _amount, \\\"There is not enough funds in the pool to fund the loan\\\");\\r\\n\\r\\n    _accumulateBorrowingInterest(msg.sender);\\r\\n\\r\\n    borrowed[msg.sender] += _amount;\\r\\n    borrowed[address(this)] += _amount;\\r\\n\\r\\n    payable(msg.sender).safeTransferETH(_amount);\\r\\n\\r\\n    _updateRates();\\r\\n\\r\\n    emit Borrowing(msg.sender, _amount, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Repays the message value\\r\\n   * It updates user borrowed balance, total borrowed amount and rates\\r\\n   * @dev It is only meant to be used by the SmartLoan.\\r\\n   **/\\r\\n  function repay() external payable nonReentrant {\\r\\n    _accumulateBorrowingInterest(msg.sender);\\r\\n\\r\\n    require(borrowed[msg.sender] >= msg.value, \\\"You are trying to repay more that was borrowed by a user\\\");\\r\\n\\r\\n    borrowed[msg.sender] -= msg.value;\\r\\n    borrowed[address(this)] -= msg.value;\\r\\n\\r\\n    _updateRates();\\r\\n\\r\\n    emit Repayment(msg.sender, msg.value, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /* =========\\r\\n\\r\\n\\r\\n  /**\\r\\n   * Returns the current borrowed amount for the given user\\r\\n   * The value includes the interest rates owned at the current moment\\r\\n   * @dev _user the address of queried borrower\\r\\n  **/\\r\\n  function getBorrowed(address _user) public view returns (uint256) {\\r\\n    return _borrowIndex.getIndexedValue(borrowed[_user], _user);\\r\\n  }\\r\\n\\r\\n  function totalSupply() public view override returns (uint256) {\\r\\n    return balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  function totalBorrowed() public view returns (uint256) {\\r\\n    return getBorrowed(address(this));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the current deposited amount for the given user\\r\\n   * The value includes the interest rates earned at the current moment\\r\\n   * @dev _user the address of queried depositor\\r\\n   **/\\r\\n  function balanceOf(address user) public view override returns (uint256) {\\r\\n    return _depositIndex.getIndexedValue(_deposited[user], user);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the current interest rate for deposits\\r\\n   **/\\r\\n  function getDepositRate() public view returns (uint256) {\\r\\n    return _ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the current interest rate for borrowings\\r\\n   **/\\r\\n  function getBorrowingRate() public view returns (uint256) {\\r\\n    return _ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\r\\n   **/\\r\\n  function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\r\\n    uint256 surplus = address(this).balance + totalBorrowed() - totalSupply();\\r\\n\\r\\n    require(amount <= address(this).balance, \\\"Trying to recover more surplus funds than pool balance\\\");\\r\\n    require(amount <= surplus, \\\"Trying to recover more funds than current surplus\\\");\\r\\n\\r\\n    payable(account).safeTransferETH(amount);\\r\\n  }\\r\\n\\r\\n  /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n  function _mint(address account, uint256 amount) internal {\\r\\n    require(account != address(0), \\\"ERC20: cannot mint to the zero address\\\");\\r\\n\\r\\n    _deposited[account] += amount;\\r\\n    _deposited[address(this)] += amount;\\r\\n\\r\\n    emit Transfer(address(0), account, amount);\\r\\n  }\\r\\n\\r\\n  function _burn(address account, uint256 amount) internal {\\r\\n    require(_deposited[account] >= amount, \\\"ERC20: burn amount exceeds user balance\\\");\\r\\n    require(_deposited[address(this)] >= amount, \\\"ERC20: burn amount exceeds current pool indexed balance\\\");\\r\\n\\r\\n    // verified in \\\"require\\\" above\\r\\n    unchecked {\\r\\n      _deposited[account] -= amount;\\r\\n      _deposited[address(this)] -= amount;\\r\\n    }\\r\\n\\r\\n    emit Transfer(account, address(0), amount);\\r\\n  }\\r\\n\\r\\n  function _updateRates() internal {\\r\\n    require(address(_ratesCalculator) != address(0), \\\"Pool is frozen: cannot perform deposit, withdraw, borrow and repay operations\\\");\\r\\n    _depositIndex.setRate(_ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply()));\\r\\n    _borrowIndex.setRate(_ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply()));\\r\\n  }\\r\\n\\r\\n  function _accumulateDepositInterest(address user) internal {\\r\\n    uint256 depositedWithInterest = balanceOf(user);\\r\\n    uint256 interest = depositedWithInterest - _deposited[user];\\r\\n\\r\\n    _mint(user, interest);\\r\\n\\r\\n    emit InterestCollected(user, interest, block.timestamp);\\r\\n\\r\\n    _depositIndex.updateUser(user);\\r\\n    _depositIndex.updateUser(address(this));\\r\\n  }\\r\\n\\r\\n  function _accumulateBorrowingInterest(address user) internal {\\r\\n    uint256 borrowedWithInterest = getBorrowed(user);\\r\\n    uint256 interest = borrowedWithInterest - borrowed[user];\\r\\n    borrowed[user] = borrowedWithInterest;\\r\\n    borrowed[address(this)] += interest;\\r\\n\\r\\n    _borrowIndex.updateUser(user);\\r\\n    _borrowIndex.updateUser(address(this));\\r\\n  }\\r\\n\\r\\n  /* ========== MODIFIERS ========== */\\r\\n\\r\\n  modifier canBorrow() {\\r\\n    require(address(_borrowersRegistry) != address(0), \\\"Borrowers registry is not configured\\\");\\r\\n    require(_borrowersRegistry.canBorrow(msg.sender), \\\"Only the accounts authorised by borrowers registry may borrow\\\");\\r\\n    require(totalSupply() != 0, \\\"Cannot borrow from an empty pool\\\");\\r\\n    _;\\r\\n    require((totalBorrowed() * 1e18) / totalSupply() <= MAX_POOL_UTILISATION_FOR_BORROWING, \\\"The pool utilisation cannot be greater than 95%\\\");\\r\\n  }\\r\\n\\r\\n  /* ========== EVENTS ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after the user deposits funds\\r\\n   * @param user the address performing the deposit\\r\\n   * @param value the amount deposited\\r\\n   * @param timestamp of the deposit\\r\\n   **/\\r\\n  event Deposit(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after the user withdraws funds\\r\\n   * @param user the address performing the withdrawal\\r\\n   * @param value the amount withdrawn\\r\\n   * @param timestamp of the withdrawal\\r\\n   **/\\r\\n  event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after the user borrows funds\\r\\n   * @param user the address that borrows\\r\\n   * @param value the amount borrowed\\r\\n   * @param timestamp time of the borrowing\\r\\n   **/\\r\\n  event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after the user repays debt\\r\\n   * @param user the address that repays\\r\\n   * @param value the amount repaid\\r\\n   * @param timestamp of the repayment\\r\\n   **/\\r\\n  event Repayment(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after accumulating deposit interest\\r\\n   * @param user the address that the deposit interest is accumulated\\r\\n   * @param value the amount accumulated interest\\r\\n   * @param timestamp of the interest accumulation\\r\\n   **/\\r\\n  event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n  * @dev emitted after changing borrowers registry\\r\\n  * @param registry an address of the newly set borrowers registry\\r\\n  * @param timestamp of the borrowers registry change\\r\\n  **/\\r\\n  event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\r\\n}\",\"keccak256\":\"0x21b3560ec5e2ce2072f14d3c5eb80fd33fec38df4f27a2bd6aa48ba4edc9257d\",\"license\":\"UNLICENSED\"},\"contracts/SmartLoan.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./interfaces/IAssetsExchange.sol\\\";\\r\\nimport \\\"./Pool.sol\\\";\\r\\nimport \\\"./SmartLoanProperties.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SmartLoan\\r\\n * A contract that is authorised to borrow funds using delegated credit.\\r\\n * It maintains solvency calculating the current value of assets and borrowings.\\r\\n * In case the value of assets held drops below certain level, part of the funds may be forcibly repaid.\\r\\n * It permits only a limited and safe token transfer.\\r\\n *\\r\\n */\\r\\ncontract SmartLoan is SmartLoanProperties, PriceAware, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\r\\n  using TransferHelper for address payable;\\r\\n  using TransferHelper for address;\\r\\n\\r\\n  function initialize() external initializer {\\r\\n    __Ownable_init();\\r\\n    __ReentrancyGuard_init();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Override PriceAware method to consider Avalanche guaranteed block timestamp time accuracy\\r\\n   **/\\r\\n  function getMaxBlockTimestampDelay() public virtual override view returns (uint256) {\\r\\n    return MAX_BLOCK_TIMESTAMP_DELAY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Override PriceAware method, addresses below belong to authorized signers of data feeds\\r\\n   **/\\r\\n  function isSignerAuthorized(address _receivedSigner) public override virtual view returns (bool) {\\r\\n    return (_receivedSigner == getPriceProvider1()) || (_receivedSigner == getPriceProvider2());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Funds a loan with the value attached to the transaction\\r\\n   **/\\r\\n  function fund() public virtual payable {\\r\\n    emit Funded(msg.sender, msg.value, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * This function allows selling assets without checking if the loan will remain solvent after this operation.\\r\\n   * It is used as part of the sellout() function which sells part/all of assets in order to bring the loan back to solvency.\\r\\n   * It is possible that multiple different assets will have to be sold and for that reason we do not use the remainsSolvent modifier.\\r\\n   **/\\r\\n  function sellAsset(bytes32 asset, uint256 _amount, uint256 _minAvaxOut) internal {\\r\\n    IERC20Metadata token = getERC20TokenInstance(asset);\\r\\n    address(token).safeTransfer(address(getExchange()), _amount);\\r\\n    getExchange().sellAsset(asset, _amount, _minAvaxOut);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n  **/\\r\\n  function withdrawAsset(bytes32 asset, uint256 amount) external onlyOwner nonReentrant remainsSolvent {\\r\\n    IERC20Metadata token = getERC20TokenInstance(asset);\\r\\n    address(token).safeTransfer(msg.sender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * This function attempts to sell just enough asset to receive targetAvaxAmount.\\r\\n   * If there is not enough asset's balance to cover the whole targetAvaxAmount then the whole asset's balance\\r\\n   * is being sold.\\r\\n   * It is possible that multiple different assets will have to be sold and for that reason we do not use the remainsSolvent modifier.\\r\\n   **/\\r\\n  function sellAssetForTargetAvax(bytes32 asset, uint256 targetAvaxAmount) private {\\r\\n    IERC20Metadata token = getERC20TokenInstance(asset);\\r\\n    uint256 balance = token.balanceOf(address(this));\\r\\n    if (balance > 0) {\\r\\n      uint256 minSaleAmount = getExchange().getMinimumERC20TokenAmountForExactAVAX(targetAvaxAmount, address(token));\\r\\n      if (balance < minSaleAmount) {\\r\\n        sellAsset(asset, balance, 0);\\r\\n      } else {\\r\\n        sellAsset(asset, minSaleAmount, targetAvaxAmount);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * This function attempts to repay the _repayAmount back to the pool.\\r\\n   * If there is not enough AVAX balance to repay the _repayAmount then the available AVAX balance will be repaid.\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function attemptRepay(uint256 _repayAmount) internal {\\r\\n    repay(Math.min(address(this).balance, _repayAmount));\\r\\n  }\\r\\n\\r\\n  function payBonus(uint256 _bonus) internal {\\r\\n    payable(msg.sender).safeTransferETH(Math.min(_bonus, address(this).balance));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * This function can only be accessed by the owner and allows selling all of the assets.\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function closeLoan() public virtual payable onlyOwner nonReentrant remainsSolvent {\\r\\n    bytes32[] memory assets = getExchange().getAllAssets();\\r\\n    for (uint256 i = 0; i < assets.length; i++) {\\r\\n      uint256 balance = getERC20TokenInstance(assets[i]).balanceOf(address(this));\\r\\n      if (balance > 0) {\\r\\n        sellAsset(assets[i], balance, 0);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    uint256 debt = getDebt();\\r\\n    require(address(this).balance >= debt, \\\"Debt not repaid fully\\\");\\r\\n    repay(debt);\\r\\n    emit LoanClosed(debt, address(this).balance, block.timestamp);\\r\\n\\r\\n    uint256 balance = address(this).balance;\\r\\n    if (balance > 0) {\\r\\n      payable(msg.sender).safeTransferETH(balance);\\r\\n      emit Withdrawn(msg.sender, balance, block.timestamp);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev This function uses the redstone-evm-connector\\r\\n  **/\\r\\n  function liquidateLoan(uint256 repayAmount) external payable nonReentrant successfulLiquidation {\\r\\n    uint256 debt = getDebt();\\r\\n    if (repayAmount > debt) {\\r\\n      repayAmount = debt;\\r\\n    }\\r\\n    uint256 bonus = (repayAmount * getLiquidationBonus()) / getPercentagePrecision();\\r\\n    uint256 totalRepayAmount = repayAmount + bonus;\\r\\n\\r\\n    sellout(totalRepayAmount);\\r\\n    attemptRepay(repayAmount);\\r\\n    payBonus(bonus);\\r\\n    emit Liquidated(msg.sender, repayAmount, bonus, getLTV(), block.timestamp);\\r\\n  }\\r\\n\\r\\n  function selloutStakedAVAX(uint256 targetAvaxAmount) private returns(bool) {\\r\\n    address yakRouterAddress = address(getYieldYakRouter());\\r\\n    (bool successApprove, ) = address(getYakAvaxStakingContract()).call(\\r\\n      abi.encodeWithSignature(\\\"approve(address,uint256)\\\", yakRouterAddress, targetAvaxAmount)\\r\\n    );\\r\\n    (bool successUnstake, ) = yakRouterAddress.call(\\r\\n      abi.encodeWithSignature(\\\"unstakeAVAXForASpecifiedAmount(uint256)\\\", targetAvaxAmount)\\r\\n    );\\r\\n    return successApprove && successUnstake;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * This function role is to sell part/all of the available assets in order to receive the targetAvaxAmount.\\r\\n   *\\r\\n   **/\\r\\n  function sellout(uint256 targetAvaxAmount) private {\\r\\n    bool stakingSelloutSuccess = selloutStakedAVAX(targetAvaxAmount);\\r\\n    if (address(this).balance >= targetAvaxAmount) return;\\r\\n\\r\\n    bytes32[] memory assets = getExchange().getAllAssets();\\r\\n    for (uint256 i = 0; i < assets.length; i++) {\\r\\n      if (address(this).balance >= targetAvaxAmount) break;\\r\\n      sellAssetForTargetAvax(assets[i], targetAvaxAmount - address(this).balance);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Withdraws an amount from the loan\\r\\n   * This method could be used to cash out profits from investments\\r\\n   * The loan needs to remain solvent after the withdrawal\\r\\n   * @param _amount to be withdrawn\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function withdraw(uint256 _amount) public virtual onlyOwner nonReentrant remainsSolvent {\\r\\n    require(address(this).balance >= _amount, \\\"Insufficient funds\\\");\\r\\n\\r\\n    payable(msg.sender).safeTransferETH(_amount);\\r\\n\\r\\n    emit Withdrawn(msg.sender, _amount, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Invests an amount to buy an asset\\r\\n   * @param _asset code of the asset\\r\\n   * @param _exactERC20AmountOut exact amount of asset to buy\\r\\n   * @param _maxAvaxAmountIn maximum amount of AVAX to sell\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function invest(bytes32 _asset, uint256 _exactERC20AmountOut, uint256 _maxAvaxAmountIn) external onlyOwner nonReentrant remainsSolvent {\\r\\n    require(address(this).balance >= _maxAvaxAmountIn, \\\"Insufficient funds\\\");\\r\\n\\r\\n    bool success = getExchange().buyAsset{value: _maxAvaxAmountIn}(_asset, _exactERC20AmountOut);\\r\\n    require(success, \\\"Investment failed\\\");\\r\\n\\r\\n    emit Invested(msg.sender, _asset, _exactERC20AmountOut, block.timestamp);\\r\\n  }\\r\\n\\r\\n  function stakeAVAXYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n    require(address(this).balance >= amount, \\\"Not enough AVAX available\\\");\\r\\n    getYieldYakRouter().stakeAVAX{value: amount}(amount);\\r\\n  }\\r\\n\\r\\n  function unstakeAVAXYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\\r\\n    IYieldYakRouter yakRouter = getYieldYakRouter();\\r\\n    address(getYakAvaxStakingContract()).safeApprove(address(yakRouter), amount);\\r\\n\\r\\n    require(yakRouter.unstakeAVAX(amount), \\\"Unstaking failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Redeem an investment by selling an asset\\r\\n   * @param _asset code of the asset\\r\\n   * @param _exactERC20AmountIn exact amount of token to sell\\r\\n   * @param _minAvaxAmountOut minimum amount of the AVAX token to buy\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function redeem(bytes32 _asset, uint256 _exactERC20AmountIn, uint256 _minAvaxAmountOut) external nonReentrant onlyOwner remainsSolvent {\\r\\n    IERC20Metadata token = getERC20TokenInstance(_asset);\\r\\n    address(token).safeTransfer(address(getExchange()), _exactERC20AmountIn);\\r\\n    bool success = getExchange().sellAsset(_asset, _exactERC20AmountIn, _minAvaxAmountOut);\\r\\n    require(success, \\\"Redemption failed\\\");\\r\\n\\r\\n    emit Redeemed(msg.sender, _asset, _exactERC20AmountIn, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Borrows funds from the pool\\r\\n   * @param _amount of funds to borrow\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function borrow(uint256 _amount) external onlyOwner remainsSolvent {\\r\\n    getPool().borrow(_amount);\\r\\n\\r\\n    emit Borrowed(msg.sender, _amount, block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Repays funds to the pool\\r\\n   * @param _amount of funds to repay\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function repay(uint256 _amount) public payable {\\r\\n    if (isSolvent() && _liquidationInProgress == false) {\\r\\n      require(msg.sender == owner());\\r\\n    }\\r\\n\\r\\n    _amount = Math.min(_amount, getDebt());\\r\\n    require(address(this).balance >= _amount, \\\"Not enough funds to repay the loan\\\");\\r\\n\\r\\n    getPool().repay{value: _amount}();\\r\\n\\r\\n    emit Repaid(msg.sender, _amount, block.timestamp);\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  /* ========== VIEW FUNCTIONS ========== */\\r\\n\\r\\n  /**\\r\\n   * Returns the current value of a loan in AVAX including cash and investments\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function getTotalValue() public view virtual returns (uint256) {\\r\\n    uint256 total = address(this).balance;\\r\\n    bytes32[] memory assets = getExchange().getAllAssets();\\r\\n    uint256[] memory prices = getPricesFromMsg(assets);\\r\\n    uint256 avaxPrice = prices[0];\\r\\n    require(avaxPrice != 0, \\\"Avax price returned from oracle is zero\\\");\\r\\n\\r\\n    for (uint256 i = 1; i < prices.length; i++) {\\r\\n      require(prices[i] != 0, \\\"Asset price returned from oracle is zero\\\");\\r\\n\\r\\n      bytes32 _asset = assets[i];\\r\\n      IERC20Metadata token = getERC20TokenInstance(_asset);\\r\\n      uint256 assetBalance = getBalance(address(this), _asset);\\r\\n\\r\\n      total = total + (prices[i] * 10**18 * assetBalance) / (avaxPrice * 10**token.decimals());\\r\\n    }\\r\\n\\r\\n    // Get total value of assets staked in Yield Yak\\r\\n    total += getYieldYakRouter().getTotalStakedValue();\\r\\n\\r\\n    return total;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the current balance of the asset held by a given user\\r\\n   * @dev _asset the code of an asset\\r\\n   * @dev _user the address of queried user\\r\\n   **/\\r\\n  function getBalance(address _user, bytes32 _asset) public view returns (uint256) {\\r\\n    IERC20 token = IERC20(getExchange().getAssetAddress(_asset));\\r\\n    return token.balanceOf(_user);\\r\\n  }\\r\\n\\r\\n  function getERC20TokenInstance(bytes32 _asset) internal view returns (IERC20Metadata) {\\r\\n    address assetAddress = getExchange().getAssetAddress(_asset);\\r\\n    IERC20Metadata token = IERC20Metadata(assetAddress);\\r\\n    return token;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the current debt associated with the loan\\r\\n   **/\\r\\n  function getDebt() public view virtual returns (uint256) {\\r\\n    return getPool().getBorrowed(address(this));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * LoanToValue ratio is calculated as the ratio between debt and collateral.\\r\\n   * The collateral is equal to total loan value takeaway debt.\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function getLTV() public view returns (uint256) {\\r\\n    uint256 debt = getDebt();\\r\\n    uint256 totalValue = getTotalValue();\\r\\n    if (debt == 0) {\\r\\n      return 0;\\r\\n    } else if (debt < totalValue) {\\r\\n      return (debt * getPercentagePrecision()) / (totalValue - debt);\\r\\n    } else {\\r\\n      return getMaxLtv();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getFullLoanStatus() public view returns (uint256[4] memory) {\\r\\n    return [getTotalValue(), getDebt(), getLTV(), isSolvent() ? uint256(1) : uint256(0)];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Checks if the loan is solvent.\\r\\n   * It means that the ratio between debt and collateral is below safe level,\\r\\n   * which is parametrized by the getMaxLtv()\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function isSolvent() public view returns (bool) {\\r\\n    return getLTV() < getMaxLtv();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the balances of all assets served by the price provider\\r\\n   * It could be used as a helper method for UI\\r\\n   **/\\r\\n  function getAllAssetsBalances() public view returns (uint256[] memory) {\\r\\n    bytes32[] memory assets = getExchange().getAllAssets();\\r\\n    uint256[] memory balances = new uint256[](assets.length);\\r\\n\\r\\n    for (uint256 i = 0; i < assets.length; i++) {\\r\\n      balances[i] = getBalance(address(this), assets[i]);\\r\\n    }\\r\\n\\r\\n    return balances;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Returns the prices of all assets served by the price provider\\r\\n   * It could be used as a helper method for UI\\r\\n   * @dev This function uses the redstone-evm-connector\\r\\n   **/\\r\\n  function getAllAssetsPrices() public view returns (uint256[] memory) {\\r\\n    bytes32[] memory assets = getExchange().getAllAssets();\\r\\n\\r\\n    return getPricesFromMsg(assets);\\r\\n  }\\r\\n\\r\\n  /* ========== MODIFIERS ========== */\\r\\n\\r\\n  /**\\r\\n  * @dev This modifier uses the redstone-evm-connector\\r\\n  **/\\r\\n  modifier remainsSolvent() {\\r\\n    _;\\r\\n\\r\\n    require(isSolvent(), \\\"The action may cause an account to become insolvent\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * This modifier checks if the LTV is between MIN_SELLOUT_LTV and _MAX_LTV after performing the liquidateLoan() operation.\\r\\n   * If the liquidateLoan() was not called by the owner then an additional check of making sure that LTV > MIN_SELLOUT_LTV is applied.\\r\\n   * It protects the user from an unnecessarily costly liquidation.\\r\\n   * The loan must be solvent after the liquidateLoan() operation.\\r\\n   * @dev This modifier uses the redstone-evm-connector\\r\\n   **/\\r\\n  modifier successfulLiquidation() {\\r\\n    require(!isSolvent(), \\\"Cannot sellout a solvent account\\\");\\r\\n    _liquidationInProgress = true;\\r\\n\\r\\n    _;\\r\\n\\r\\n    uint256 LTV = getLTV();\\r\\n    if (msg.sender != owner()) {\\r\\n      require(LTV >= getMinSelloutLtv(), \\\"This operation would result in a loan with LTV lower than Minimal Sellout LTV which would put loan's owner in a risk of an unnecessarily high loss\\\");\\r\\n    }\\r\\n    require(LTV < getMaxLtv(), \\\"This operation would not result in bringing the loan back to a solvent state\\\");\\r\\n    _liquidationInProgress = false;\\r\\n  }\\r\\n\\r\\n  /* ========== EVENTS ========== */\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after a loan is funded\\r\\n   * @param funder the address which funded the loan\\r\\n   * @param amount the amount of funds\\r\\n   * @param timestamp time of funding\\r\\n   **/\\r\\n  event Funded(address indexed funder, uint256 amount, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after the funds are withdrawn from the loan\\r\\n   * @param owner the address which withdraws funds from the loan\\r\\n   * @param amount the amount of funds withdrawn\\r\\n   * @param timestamp of the withdrawal\\r\\n   **/\\r\\n  event Withdrawn(address indexed owner, uint256 amount, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after the funds are invested into an asset\\r\\n   * @param investor the address of investor making the purchase\\r\\n   * @param asset bought by the investor\\r\\n   * @param amount the investment\\r\\n   * @param timestamp time of the investment\\r\\n   **/\\r\\n  event Invested(address indexed investor, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after the investment is sold\\r\\n   * @param investor the address of investor selling the asset\\r\\n   * @param asset sold by the investor\\r\\n   * @param amount the investment\\r\\n   * @param timestamp of the redemption\\r\\n   **/\\r\\n  event Redeemed(address indexed investor, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted when funds are borrowed from the pool\\r\\n   * @param borrower the address of borrower\\r\\n   * @param amount of the borrowed funds\\r\\n   * @param timestamp time of the borrowing\\r\\n   **/\\r\\n  event Borrowed(address indexed borrower, uint256 amount, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted when funds are repaid to the pool\\r\\n   * @param borrower the address initiating repayment\\r\\n   * @param amount of repaid funds\\r\\n   * @param timestamp of the repayment\\r\\n   **/\\r\\n  event Repaid(address indexed borrower, uint256 amount, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after a successful liquidation operation\\r\\n   * @param liquidator the address that initiated the liquidation operation\\r\\n   * @param repayAmount requested amount (AVAX) of liquidation\\r\\n   * @param bonus an amount of bonus (AVAX) received by the liquidator\\r\\n   * @param ltv a new LTV after the liquidation operation\\r\\n   * @param timestamp a time of the liquidation\\r\\n   **/\\r\\n  event Liquidated(address indexed liquidator, uint256 repayAmount, uint256 bonus, uint256 ltv, uint256 timestamp);\\r\\n\\r\\n  /**\\r\\n   * @dev emitted after closing a loan by the owner\\r\\n   * @param debtRepaid the amount of a borrowed AVAX that was repaid back to the pool\\r\\n   * @param withdrawalAmount the amount of AVAX that was withdrawn by the owner after closing the loan\\r\\n   * @param timestamp a time of the loan's closure\\r\\n   **/\\r\\n  event LoanClosed(uint256 debtRepaid, uint256 withdrawalAmount, uint256 timestamp);\\r\\n}\",\"keccak256\":\"0xdea1cc26ad8dfc13eb9d733814225df84a3fe8b693a34c4b3b9bd72f1219dd58\",\"license\":\"UNLICENSED\"},\"contracts/SmartLoanProperties.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./interfaces/IAssetsExchange.sol\\\";\\r\\nimport \\\"./Pool.sol\\\";\\r\\nimport \\\"./interfaces/IYieldYakRouter.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SmartLoanProperties\\r\\n * A contract that holds SmartLoan related properties.\\r\\n * Every property has a virtual getter to allow overriding when upgrading a SmartLoan contract.\\r\\n *\\r\\n */\\r\\ncontract SmartLoanProperties {\\r\\n\\r\\n  uint256 private constant _PERCENTAGE_PRECISION = 1000;\\r\\n  // 10%\\r\\n  uint256 private constant _LIQUIDATION_BONUS = 100;\\r\\n\\r\\n  // 500%\\r\\n  uint256 private constant _MAX_LTV = 5000;\\r\\n  // 400%\\r\\n  uint256 private constant _MIN_SELLOUT_LTV = 4000;\\r\\n\\r\\n  address private constant _EXCHANGE_ADDRESS = 0x0278438423f433e277F65D14c0E002b8828702ba;\\r\\n\\r\\n  address private constant _POOL_ADDRESS = 0x5ff1DE6091871adAAe64E2Ec4feD754628482868;\\r\\n\\r\\n  // redstone-evm-connector price providers\\r\\n  address private constant _PRICE_PROVIDER_1 = 0x981bdA8276ae93F567922497153de7A5683708d3;\\r\\n\\r\\n  address private constant _PRICE_PROVIDER_2 = 0x3BEFDd935b50F172e696A5187DBaCfEf0D208e48;\\r\\n\\r\\n  // redstone-evm-connector max block.timestamp acceptable delay\\r\\n  uint256 internal constant MAX_BLOCK_TIMESTAMP_DELAY = 30; // 30 seconds\\r\\n\\r\\n  bool internal _liquidationInProgress = false;\\r\\n\\r\\n\\r\\n  /* ========== GETTERS ========== */\\r\\n\\r\\n\\r\\n  function getPercentagePrecision() public virtual view returns (uint256) {\\r\\n    return _PERCENTAGE_PRECISION;\\r\\n  }\\r\\n\\r\\n  function getLiquidationBonus() public virtual view returns (uint256) {\\r\\n    return _LIQUIDATION_BONUS;\\r\\n  }\\r\\n\\r\\n  function getMaxLtv() public virtual view returns (uint256) {\\r\\n    return _MAX_LTV;\\r\\n  }\\r\\n\\r\\n  function getMinSelloutLtv() public virtual view returns (uint256) {\\r\\n    return _MIN_SELLOUT_LTV;\\r\\n  }\\r\\n\\r\\n  function getExchange() public virtual view returns (IAssetsExchange) {\\r\\n    return IAssetsExchange(_EXCHANGE_ADDRESS);\\r\\n  }\\r\\n\\r\\n  function getYieldYakRouter() public virtual view returns (IYieldYakRouter) {\\r\\n    return IYieldYakRouter(0x70952A912Fa50E04c608eb49E48afC975Eb91F21);\\r\\n  }\\r\\n\\r\\n  function getYakAvaxStakingContract() public virtual view returns (IERC20) {\\r\\n    return IERC20(0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95);\\r\\n  }\\r\\n\\r\\n  function getPool() public virtual view returns (Pool) {\\r\\n    return Pool(0x431290dF15777d46174b83C9E01F87d7b70D3073);\\r\\n  }\\r\\n\\r\\n  function getPriceProvider1() public virtual view returns (address) {\\r\\n    return _PRICE_PROVIDER_1;\\r\\n  }\\r\\n\\r\\n  function getPriceProvider2() public virtual view returns (address) {\\r\\n    return _PRICE_PROVIDER_2;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x433e37661e18e53f2b81cd8cc9236bd06ae7a44b5245d8f4bd8e300130115498\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAssetsExchange.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IAssetExchange\\r\\n * @dev Basic interface for investing into assets\\r\\n * It could be linked either to DEX or to a synthetic assets platform\\r\\n */\\r\\ninterface IAssetsExchange {\\r\\n  /**\\r\\n   * For adding supported assets\\r\\n   **/\\r\\n  struct Asset {\\r\\n    bytes32 asset;\\r\\n    address assetAddress;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Buys selected asset with AVAX\\r\\n   * @dev _asset asset code\\r\\n   * @dev _exactERC20AmountOut exact amount of asset to be bought\\r\\n   **/\\r\\n  function buyAsset(bytes32 _asset, uint256 _exactERC20AmountOut) external payable returns (bool);\\r\\n\\r\\n  /**\\r\\n   * Sells selected asset for AVAX\\r\\n   * @dev _asset asset code\\r\\n   * @dev _exactERC20AmountIn amount to be bought\\r\\n   * @dev _minAvaxAmountOut minimum amount of the AVAX token to be bought\\r\\n   **/\\r\\n  function sellAsset(bytes32 _asset, uint256 _exactERC20AmountIn, uint256 _minAvaxAmountOut) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * Returns the maximum AVAX amount that will be obtained in the event of selling _amountIn of _token ERC20 token.\\r\\n   **/\\r\\n  function getEstimatedAVAXFromERC20Token(uint256 _amountIn, address _token) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * Returns the minimum token amount that is required to be sold to receive _exactAmountOut of AVAX.\\r\\n   **/\\r\\n  function getMinimumERC20TokenAmountForExactAVAX(uint256 _exactAmountOut, address _token) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * Adds or updates supported assets\\r\\n   * First asset must be a blockchain native currency\\r\\n   * @dev _assets assets to be added or updated\\r\\n   **/\\r\\n  function updateAssets(Asset[] memory _assets) external;\\r\\n\\r\\n  /**\\r\\n   * Removes supported assets\\r\\n   * @dev _assets assets to be removed\\r\\n   **/\\r\\n  function removeAssets(bytes32[] calldata _assets) external;\\r\\n\\r\\n  /**\\r\\n   * Returns all the supported assets keys\\r\\n   **/\\r\\n  function getAllAssets() external view returns (bytes32[] memory);\\r\\n\\r\\n  /**\\r\\n   * Returns address of an asset\\r\\n   **/\\r\\n  function getAssetAddress(bytes32 _asset) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xc7d7a4697990c7d7c9ba55ecb86f0019d8ba66ddfa6b39bed994960bf1cdae9c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @title IBorrowersRegistry\\r\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\r\\n */\\r\\ninterface IBorrowersRegistry {\\r\\n  function canBorrow(address _account) external view returns (bool);\\r\\n\\r\\n  function getLoanForOwner(address _owner) external view returns (address);\\r\\n\\r\\n  function getOwnerOfLoan(address _loan) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xaee5fe5806928889976d6353ae80b02b3e200e4a135fcd6acc5482962ce6c089\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @title IRatesCalculator\\r\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\r\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\r\\n */\\r\\ninterface IRatesCalculator {\\r\\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\r\\n\\r\\n  function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xbf14e92506142bef86591fa68c55d8582902eefa2d3ee07bed9727e9e234a9de\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IYieldYakRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IYieldYakRouter {\\r\\n    function stakeAVAX(uint256 amount) payable external;\\r\\n\\r\\n    function unstakeAVAX(uint256 amount) external returns(bool);\\r\\n\\r\\n    function getTotalStakedValue() external view returns (uint256 totalValue);\\r\\n\\r\\n    function unstakeAVAXForASpecifiedAmount(uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb3502c9484afe9bcdeaed3d4556f023d9880bdd85c3b89fd986d861156aca866\",\"license\":\"UNLICENSED\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL3\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/******************\\r\\n@title WadRayMath library\\r\\n@author Aave\\r\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\r\\n@dev https://github.com/aave/aave-protocol/blob/master/contracts/libraries/WadRayMath.sol\\r\\n */\\r\\n\\r\\nlibrary WadRayMath {\\r\\n  uint256 internal constant WAD = 1e18;\\r\\n  uint256 internal constant halfWAD = WAD / 2;\\r\\n\\r\\n  uint256 internal constant RAY = 1e27;\\r\\n  uint256 internal constant halfRAY = RAY / 2;\\r\\n\\r\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\r\\n\\r\\n  function ray() internal pure returns (uint256) {\\r\\n    return RAY;\\r\\n  }\\r\\n\\r\\n  function wad() internal pure returns (uint256) {\\r\\n    return WAD;\\r\\n  }\\r\\n\\r\\n  function halfRay() internal pure returns (uint256) {\\r\\n    return halfRAY;\\r\\n  }\\r\\n\\r\\n  function halfWad() internal pure returns (uint256) {\\r\\n    return halfWAD;\\r\\n  }\\r\\n\\r\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    //return halfWAD.add(a.mul(b)).div(WAD);\\r\\n    return (halfWAD + (a * b)) / WAD;\\r\\n  }\\r\\n\\r\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 halfB = b / 2;\\r\\n\\r\\n    //return halfB.add(a.mul(WAD)).div(b);\\r\\n    return (halfB + (a * WAD)) / b;\\r\\n  }\\r\\n\\r\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    //return halfRAY.add(a.mul(b)).div(RAY);\\r\\n    return (halfRAY + (a * b)) / RAY;\\r\\n  }\\r\\n\\r\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 halfB = b / 2;\\r\\n\\r\\n    //return halfB.add(a.mul(RAY)).div(b);\\r\\n    return (halfB + (a * RAY)) / b;\\r\\n  }\\r\\n\\r\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\r\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\r\\n\\r\\n    //return halfRatio.add(a).div(WAD_RAY_RATIO);\\r\\n    return (halfRatio + a) / WAD_RAY_RATIO;\\r\\n  }\\r\\n\\r\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\r\\n    //return a.mul(WAD_RAY_RATIO);\\r\\n    return a * WAD_RAY_RATIO;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev calculates base^exp. The code uses the ModExp precompile\\r\\n   */\\r\\n  //solium-disable-next-line\\r\\n  function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\r\\n    z = n % 2 != 0 ? x : RAY;\\r\\n\\r\\n    for (n /= 2; n != 0; n /= 2) {\\r\\n      x = rayMul(x, x);\\r\\n\\r\\n      if (n % 2 != 0) {\\r\\n        z = rayMul(z, x);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xe025e327e1bdbfb0fc9fe2739f3a3f0f92719a6d30c051d4433f411265b4afca\",\"license\":\"AGPL3\"},\"contracts/upgraded/SmartLoanLimitedCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// Last deployed from commit: abc6cea589527b5b056d9754bdb215cb9014b9d2;\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"../SmartLoan.sol\\\";\\r\\n\\r\\ncontract SmartLoanLimitedCollateral is SmartLoan {\\r\\n\\r\\n   /**\\r\\n    * Funds a loan with the value attached to the transaction\\r\\n    * Allows to add up to 7 AVAX of collateral in total\\r\\n   **/\\r\\n    function fund() public override payable {\\r\\n        uint256 debt = getDebt();\\r\\n        uint256 totalValue = getTotalValue();\\r\\n        if (totalValue > debt) {\\r\\n            require(totalValue - debt <= 6 ether, \\\"Adding more collateral than 6 AVAX in total is not allowed\\\");\\r\\n        }\\r\\n        super.fund();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6197175bb05d9f83da159c8aa1303f3f962440586f97a8aae1746bfdae4ee6fa\",\"license\":\"UNLICENSED\"},\"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract PriceAware {\\n  using ECDSA for bytes32;\\n\\n  uint256 constant _MAX_DATA_TIMESTAMP_DELAY = 3 * 60; // 3 minutes\\n  uint256 constant _MAX_BLOCK_TIMESTAMP_DELAY = 15; // 15 seconds\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  function getMaxDataTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_DATA_TIMESTAMP_DELAY;\\n  }\\n\\n  function getMaxBlockTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_BLOCK_TIMESTAMP_DELAY;\\n  }\\n\\n  function isSignerAuthorized(address _receviedSigner) public virtual view returns (bool);\\n\\n  function isTimestampValid(uint256 _receivedTimestamp) public virtual view returns (bool) {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    require(\\n      (block.timestamp + getMaxBlockTimestampDelay()) > _receivedTimestamp,\\n      \\\"Data with future timestamps is not allowed\\\");\\n\\n    return block.timestamp < _receivedTimestamp\\n      || block.timestamp - _receivedTimestamp < getMaxDataTimestampDelay();\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  function getPriceFromMsg(bytes32 symbol) internal view returns (uint256) {bytes32[] memory symbols = new bytes32[](1); symbols[0] = symbol;\\n    return getPricesFromMsg(symbols)[0];\\n  }\\n\\n  function getPricesFromMsg(bytes32[] memory symbols) internal view returns (uint256[] memory) {\\n    // The structure of calldata witn n - data items:\\n    // The data that is signed (symbols, values, timestamp) are inside the {} brackets\\n    // [origina_call_data| ?]{[[symbol | 32][value | 32] | n times][timestamp | 32]}[size | 1][signature | 65]\\n\\n    // 1. First we extract dataSize - the number of data items (symbol,value pairs) in the message\\n    uint8 dataSize; //Number of data entries\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature\\n      // We load the previous 32 bytes and automatically take the 2 least significant ones (casting to uint16)\\n      dataSize := calldataload(sub(calldatasize(), 97))\\n    }\\n\\n    // 2. We calculate the size of signable message expressed in bytes\\n    // ((symbolLen(32) + valueLen(32)) * dataSize + timeStamp length\\n    uint16 messageLength = uint16(dataSize) * 64 + 32; //Length of data message in bytes\\n\\n    // 3. We extract the signableMessage\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory rawData = msg.data.slice(msg.data.length - messageLength - 65, messageLength);\\n\\n    bytes memory signableMessage;\\n    assembly {\\n      signableMessage := mload(0x40)\\n      mstore(signableMessage, messageLength)\\n      // The starting point is callDataSize minus length of data(messageLength), signature(65) and size(1) = 66\\n      calldatacopy(\\n        add(signableMessage, 0x20),\\n        sub(calldatasize(), add(messageLength, 66)),\\n        messageLength\\n      )\\n      mstore(0x40, add(signableMessage, 0x20))\\n    }\\n\\n    // 4. We first hash the raw message and then hash it again with the prefix\\n    // Following the https://github.com/ethereum/eips/issues/191 standard\\n    bytes32 hash = keccak256(signableMessage);\\n    bytes32 hashWithPrefix = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n    );\\n\\n    // 5. We extract the off-chain signature from calldata\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory signature = msg.data.slice(msg.data.length - 65, 65);\\n    bytes memory signature;\\n    assembly {\\n      signature := mload(0x40)\\n      mstore(signature, 65)\\n      calldatacopy(add(signature, 0x20), sub(calldatasize(), 65), 65)\\n      mstore(0x40, add(signature, 0x20))\\n    }\\n\\n    // 6. We verify the off-chain signature against on-chain hashed data\\n\\n    address signer = hashWithPrefix.recover(signature);\\n    require(isSignerAuthorized(signer), \\\"Signer not authorized\\\");\\n\\n    // 7. We extract timestamp from callData\\n\\n    uint256 dataTimestamp;\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature + 1 for data size\\n      // We load the previous 32 bytes\\n      dataTimestamp := calldataload(sub(calldatasize(), 98))\\n    }\\n\\n    // 8. We validate timestamp\\n    require(isTimestampValid(dataTimestamp), \\\"Data timestamp is invalid\\\");\\n\\n    return _readFromCallData(symbols, uint256(dataSize), messageLength);\\n  }\\n\\n  function _readFromCallData(bytes32[] memory symbols, uint256 dataSize, uint16 messageLength) private pure returns (uint256[] memory) {\\n    uint256[] memory values;\\n    uint256 i;\\n    uint256 j;\\n    uint256 readyAssets;\\n    bytes32 currentSymbol;\\n\\n    // We iterate directly through call data to extract the values for symbols\\n    assembly {\\n      let start := sub(calldatasize(), add(messageLength, 66))\\n\\n      values := msize()\\n      mstore(values, mload(symbols))\\n      mstore(0x40, add(add(values, 0x20), mul(mload(symbols), 0x20)))\\n\\n      for { i := 0 } lt(i, dataSize) { i := add(i, 1) } {\\n        currentSymbol := calldataload(add(start, mul(i, 64)))\\n\\n        for { j := 0 } lt(j, mload(symbols)) { j := add(j, 1) } {\\n          if eq(mload(add(add(symbols, 32), mul(j, 32))), currentSymbol) {\\n            mstore(\\n              add(add(values, 32), mul(j, 32)),\\n              calldataload(add(add(start, mul(i, 64)), 32))\\n            )\\n            readyAssets := add(readyAssets, 1)\\n          }\\n\\n          if eq(readyAssets, mload(symbols)) {\\n            i := dataSize\\n          }\\n        }\\n      }\\n    }\\n\\n    return (values);\\n  }\\n}\\n\",\"keccak256\":\"0xd34e84e25c6ef3010f5479755258aaddaeba63fa56eee31db26778c0fdd9d30a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260008060006101000a81548160ff02191690831515021790555034801561002a57600080fd5b50615e64806200003b6000396000f3fe60806040526004361061021e5760003560e01c80636b6c92d911610123578063b60d4288116100ab578063d2b29d701161006f578063d2b29d701461072c578063d44e282b14610755578063f2fde38b14610780578063f31a210a146107a9578063f807cd22146107d457610225565b8063b60d428814610675578063c5ebeaec1461067f578063c79d5ec5146106a8578063caa648b4146106e5578063ccdd9f5d1461071057610225565b80638a027cb3116100f25780638a027cb3146105a05780638da5cb5b146105c9578063a935310f146105f4578063ae1837371461061f578063b5dbd7f01461064a57610225565b80636b6c92d91461050a578063715018a614610535578063750582051461054c5780638129fc1c1461058957610225565b8063371fd8e6116101a65780635118af5a116101755780635118af5a1461043557806352154a261461046057806359aa9e721461048b5780635ce23950146104b65780636aa96162146104e157610225565b8063371fd8e61461039a5780633eb67e0b146103b65780634ed2b8ac146103df5780634fcaf08f1461040a57610225565b806314a6bf0f116101ed57806314a6bf0f146102e65780631e5140f014610311578063232fa7331461033c5780632802fdc8146103465780632e1a7d4d1461037157610225565b8063026b1d5f1461022a57806305d58c211461025557806311c89b101461027e578063132e1d39146102bb57610225565b3661022557005b600080fd5b34801561023657600080fd5b5061023f6107ff565b60405161024c9190614b0f565b60405180910390f35b34801561026157600080fd5b5061027c6004803603810190610277919061425a565b61081b565b005b34801561028a57600080fd5b506102a560048036038101906102a09190614162565b610971565b6040516102b291906149e3565b60405180910390f35b3480156102c757600080fd5b506102d06109ed565b6040516102dd9190614eca565b60405180910390f35b3480156102f257600080fd5b506102fb6109f7565b6040516103089190614eca565b60405180910390f35b34801561031d57600080fd5b50610326610a8e565b6040516103339190614af4565b60405180910390f35b610344610aaa565b005b34801561035257600080fd5b5061035b610ebd565b6040516103689190614962565b60405180910390f35b34801561037d57600080fd5b50610398600480360381019061039391906142e5565b610ed9565b005b6103b460048036038101906103af91906142e5565b6110b1565b005b3480156103c257600080fd5b506103dd60048036038101906103d891906142e5565b61122c565b005b3480156103eb57600080fd5b506103f4611451565b6040516104019190614eca565b60405180910390f35b34801561041657600080fd5b5061041f6114c8565b60405161042c9190614962565b60405180910390f35b34801561044157600080fd5b5061044a6114e4565b6040516104579190614eca565b60405180910390f35b34801561046c57600080fd5b506104756114ed565b6040516104829190614eca565b60405180910390f35b34801561049757600080fd5b506104a06114f7565b6040516104ad9190614eca565b60405180910390f35b3480156104c257600080fd5b506104cb611500565b6040516104d891906149e3565b60405180910390f35b3480156104ed57600080fd5b50610508600480360381019061050391906142e5565b611518565b005b34801561051657600080fd5b5061051f6116ea565b60405161052c91906149c1565b60405180910390f35b34801561054157600080fd5b5061054a6118a5565b005b34801561055857600080fd5b50610573600480360381019061056e91906142e5565b61192d565b60405161058091906149e3565b60405180910390f35b34801561059557600080fd5b5061059e6119a9565b005b3480156105ac57600080fd5b506105c760048036038101906105c29190614296565b611aa0565b005b3480156105d557600080fd5b506105de611d2c565b6040516105eb9190614962565b60405180910390f35b34801561060057600080fd5b50610609611d56565b60405161061691906149c1565b60405180910390f35b34801561062b57600080fd5b50610634611df5565b6040516106419190614ad9565b60405180910390f35b34801561065657600080fd5b5061065f611e11565b60405161066c9190614eca565b60405180910390f35b61067d611e1b565b005b34801561068b57600080fd5b506106a660048036038101906106a191906142e5565b611e9e565b005b3480156106b457600080fd5b506106cf60048036038101906106ca91906141b4565b612026565b6040516106dc9190614eca565b60405180910390f35b3480156106f157600080fd5b506106fa61214d565b6040516107079190614eca565b60405180910390f35b61072a600480360381019061072591906142e5565b61252a565b005b34801561073857600080fd5b50610753600480360381019061074e9190614296565b6127a4565b005b34801561076157600080fd5b5061076a612a2e565b60405161077791906149a6565b60405180910390f35b34801561078c57600080fd5b506107a760048036038101906107a29190614162565b612a86565b005b3480156107b557600080fd5b506107be612b7e565b6040516107cb9190614eca565b60405180910390f35b3480156107e057600080fd5b506107e9612b87565b6040516107f69190614abe565b60405180910390f35b600073431290df15777d46174b83c9e01f87d7b70d3073905090565b610823612ba3565b73ffffffffffffffffffffffffffffffffffffffff16610841611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614610897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088e90614d4a565b60405180910390fd5b600260655414156108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d490614eaa565b60405180910390fd5b600260658190555060006108f083612bab565b905061091d33838373ffffffffffffffffffffffffffffffffffffffff16612c4f9092919063ffffffff16565b50610926611500565b610965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095c90614d6a565b60405180910390fd5b60016065819055505050565b600061097b610ebd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806109e657506109b76114c8565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b60006103e8905090565b6000610a016107ff565b73ffffffffffffffffffffffffffffffffffffffff16636011163e306040518263ffffffff1660e01b8152600401610a399190614962565b60206040518083038186803b158015610a5157600080fd5b505afa158015610a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a89919061430e565b905090565b60007370952a912fa50e04c608eb49e48afc975eb91f21905090565b610ab2612ba3565b73ffffffffffffffffffffffffffffffffffffffff16610ad0611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614610b26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1d90614d4a565b60405180910390fd5b60026065541415610b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6390614eaa565b60405180910390fd5b60026065819055506000610b7e612b87565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610bc357600080fd5b505afa158015610bd7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c0091906141f0565b905060005b8151811015610d4d576000610c59838381518110610c4c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612bab565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c919190614962565b60206040518083038186803b158015610ca957600080fd5b505afa158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce1919061430e565b90506000811115610d3957610d38838381518110610d28577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826000612d85565b5b508080610d45906154f7565b915050610c05565b506000610d586109f7565b905080471015610d9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9490614caa565b60405180910390fd5b610da6816110b1565b7f4acb957de3799dd3d95bb7da6bcfbca6f5a33812d69ad37816ed87e79b6327d6814742604051610dd993929190614f37565b60405180910390a160004790506000811115610e6957610e18813373ffffffffffffffffffffffffffffffffffffffff16612e6190919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc68242604051610e60929190614f0e565b60405180910390a25b505050610e74611500565b610eb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eaa90614d6a565b60405180910390fd5b6001606581905550565b600073981bda8276ae93f567922497153de7a5683708d3905090565b610ee1612ba3565b73ffffffffffffffffffffffffffffffffffffffff16610eff611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614610f55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4c90614d4a565b60405180910390fd5b60026065541415610f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9290614eaa565b60405180910390fd5b600260658190555080471015610fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdd90614c8a565b60405180910390fd5b61100f813373ffffffffffffffffffffffffffffffffffffffff16612e6190919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc68242604051611057929190614f0e565b60405180910390a2611067611500565b6110a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109d90614d6a565b60405180910390fd5b600160658190555050565b6110b9611500565b80156110d657506000151560008054906101000a900460ff161515145b1561111b576110e3611d2c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461111a57600080fd5b5b61112c816111276109f7565b612f87565b905080471015611171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116890614b4a565b60405180910390fd5b6111796107ff565b73ffffffffffffffffffffffffffffffffffffffff1663402d8883826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156111c057600080fd5b505af11580156111d4573d6000803e3d6000fd5b50505050503373ffffffffffffffffffffffffffffffffffffffff167f1b8cd61ed43bec7c6bdad3a18ffee613f99c853d16c50678d248d879e1b434388242604051611221929190614f0e565b60405180910390a250565b611234612ba3565b73ffffffffffffffffffffffffffffffffffffffff16611252611d2c565b73ffffffffffffffffffffffffffffffffffffffff16146112a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129f90614d4a565b60405180910390fd5b600260655414156112ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e590614eaa565b60405180910390fd5b60026065819055506000611300610a8e565b9050611334818361130f611df5565b73ffffffffffffffffffffffffffffffffffffffff16612fa09092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff166318994c1f836040518263ffffffff1660e01b815260040161136d9190614eca565b602060405180830381600087803b15801561138757600080fd5b505af115801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf9190614231565b6113fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f590614d8a565b60405180910390fd5b50611407611500565b611446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143d90614d6a565b60405180910390fd5b600160658190555050565b60008061145c6109f7565b9050600061146861214d565b9050600082141561147e576000925050506114c5565b808210156114b85781816114929190615362565b61149a6109ed565b836114a59190615308565b6114af919061512a565b925050506114c5565b6114c0611e11565b925050505b90565b6000733befdd935b50f172e696a5187dbacfef0d208e48905090565b6000601e905090565b6000610fa0905090565b60006064905090565b600061150a611e11565b611512611451565b10905090565b611520612ba3565b73ffffffffffffffffffffffffffffffffffffffff1661153e611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614611594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158b90614d4a565b60405180910390fd5b600260655414156115da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d190614eaa565b60405180910390fd5b600260658190555080471015611625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161c90614daa565b60405180910390fd5b61162d610a8e565b73ffffffffffffffffffffffffffffffffffffffff166347f63dfd82836040518363ffffffff1660e01b81526004016116669190614eca565b6000604051808303818588803b15801561167f57600080fd5b505af1158015611693573d6000803e3d6000fd5b50505050506116a0611500565b6116df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d690614d6a565b60405180910390fd5b600160658190555050565b606060006116f6612b87565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561173b57600080fd5b505afa15801561174f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061177891906141f0565b90506000815167ffffffffffffffff8111156117bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156117eb5781602001602082028036833780820191505090505b50905060005b825181101561189c5761184430848381518110611837577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612026565b82828151811061187d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611894906154f7565b9150506117f1565b50809250505090565b6118ad612ba3565b73ffffffffffffffffffffffffffffffffffffffff166118cb611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614611921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191890614d4a565b60405180910390fd5b61192b60006130d6565b565b6000816119386114e4565b4261194391906150d4565b11611983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197a90614e4a565b60405180910390fd5b814210806119a25750611994612b7e565b82426119a09190615362565b105b9050919050565b600060029054906101000a900460ff166119d357600060019054906101000a900460ff16156119dc565b6119db61319c565b5b611a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1290614cea565b60405180910390fd5b60008060029054906101000a900460ff161590508015611a6c576001600060026101000a81548160ff0219169083151502179055506001600060016101000a81548160ff0219169083151502179055505b611a746131ad565b611a7c613206565b8015611a9d5760008060026101000a81548160ff0219169083151502179055505b50565b611aa8612ba3565b73ffffffffffffffffffffffffffffffffffffffff16611ac6611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614611b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1390614d4a565b60405180910390fd5b60026065541415611b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5990614eaa565b60405180910390fd5b600260658190555080471015611bad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba490614c8a565b60405180910390fd5b6000611bb7612b87565b73ffffffffffffffffffffffffffffffffffffffff16635d8874e98386866040518463ffffffff1660e01b8152600401611bf2929190614a19565b6020604051808303818588803b158015611c0b57600080fd5b505af1158015611c1f573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611c449190614231565b905080611c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7d90614e8a565b60405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff167f8c4f7b2f9ad7fde21c3ebf69d91938c2731761edd5820e45c17ea61d9c2ab90a8542604051611ccf929190614f0e565b60405180910390a350611ce0611500565b611d1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1690614d6a565b60405180910390fd5b6001606581905550505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606000611d62612b87565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b158015611da757600080fd5b505afa158015611dbb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611de491906141f0565b9050611def8161325f565b91505090565b600073aac0f2d0630d1d09ab2b5a400412a4840b866d95905090565b6000611388905090565b6000611e256109f7565b90506000611e3161214d565b905081811115611e92576753444835ec5800008282611e509190615362565b1115611e91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8890614e0a565b60405180910390fd5b5b611e9a6133c7565b5050565b611ea6612ba3565b73ffffffffffffffffffffffffffffffffffffffff16611ec4611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614611f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1190614d4a565b60405180910390fd5b611f226107ff565b73ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec826040518263ffffffff1660e01b8152600401611f5a9190614eca565b600060405180830381600087803b158015611f7457600080fd5b505af1158015611f88573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167feae9cfbc77fdd40ca899f36b608256063b2bc9d8178b0220f7ad513e178d67308242604051611fd4929190614f0e565b60405180910390a2611fe4611500565b612023576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201a90614d6a565b60405180910390fd5b50565b600080612031612b87565b73ffffffffffffffffffffffffffffffffffffffff166376d02895846040518263ffffffff1660e01b815260040161206991906149fe565b60206040518083038186803b15801561208157600080fd5b505afa158015612095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b9919061418b565b90508073ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016120f49190614962565b60206040518083038186803b15801561210c57600080fd5b505afa158015612120573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612144919061430e565b91505092915050565b600080479050600061215d612b87565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156121a257600080fd5b505afa1580156121b6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906121df91906141f0565b905060006121ec8261325f565b905060008160008151811061222a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000811415612278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226f90614c0a565b60405180910390fd5b6000600190505b825181101561248d5760008382815181106122c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151141561230c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230390614cca565b60405180910390fd5b6000848281518110612347577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600061235c82612bab565b9050600061236a3084612026565b90508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156123b257600080fd5b505afa1580156123c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ea9190614337565b600a6123f691906151ae565b856124019190615308565b81670de0b6b3a7640000888781518110612444577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516124569190615308565b6124609190615308565b61246a919061512a565b8861247591906150d4565b97505050508080612485906154f7565b91505061227f565b50612496610a8e565b73ffffffffffffffffffffffffffffffffffffffff16633999c4886040518163ffffffff1660e01b815260040160206040518083038186803b1580156124db57600080fd5b505afa1580156124ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612513919061430e565b8461251e91906150d4565b93508394505050505090565b60026065541415612570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256790614eaa565b60405180910390fd5b6002606581905550612580611500565b156125c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b790614c4a565b60405180910390fd5b60016000806101000a81548160ff02191690831515021790555060006125e46109f7565b9050808211156125f2578091505b60006125fc6109ed565b6126046114f7565b8461260f9190615308565b612619919061512a565b90506000818461262991906150d4565b905061263481613419565b61263d84613548565b6126468261355d565b3373ffffffffffffffffffffffffffffffffffffffff167f7abe212d4944ae75cf0a0477af92aa0db98c15aaf21d06c37c97c641427b8eb38584612688611451565b426040516126999493929190614f6e565b60405180910390a250505060006126ae611451565b90506126b8611d2c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612735576126f26114ed565b811015612734576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272b90614d2a565b60405180910390fd5b5b61273d611e11565b811061277e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277590614bea565b60405180910390fd5b60008060006101000a81548160ff02191690831515021790555050600160658190555050565b600260655414156127ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e190614eaa565b60405180910390fd5b60026065819055506127fa612ba3565b73ffffffffffffffffffffffffffffffffffffffff16612818611d2c565b73ffffffffffffffffffffffffffffffffffffffff161461286e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286590614d4a565b60405180910390fd5b600061287984612bab565b90506128ad612886612b87565b848373ffffffffffffffffffffffffffffffffffffffff16612c4f9092919063ffffffff16565b60006128b7612b87565b73ffffffffffffffffffffffffffffffffffffffff166348eedd6b8686866040518463ffffffff1660e01b81526004016128f393929190614a42565b602060405180830381600087803b15801561290d57600080fd5b505af1158015612921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129459190614231565b905080612987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161297e90614dea565b60405180910390fd5b843373ffffffffffffffffffffffffffffffffffffffff167fc95bd7ebbed9b9c3e9477753bcb60d02b328f1e5bce8b1a25986d6c73991c18286426040516129d0929190614f0e565b60405180910390a350506129e2611500565b612a21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a1890614d6a565b60405180910390fd5b6001606581905550505050565b612a36614002565b6040518060800160405280612a4961214d565b8152602001612a566109f7565b8152602001612a63611451565b8152602001612a70611500565b612a7b576000612a7e565b60015b815250905090565b612a8e612ba3565b73ffffffffffffffffffffffffffffffffffffffff16612aac611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614612b02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612af990614d4a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6990614baa565b60405180910390fd5b612b7b816130d6565b50565b600060b4905090565b6000730278438423f433e277f65d14c0e002b8828702ba905090565b600033905090565b600080612bb6612b87565b73ffffffffffffffffffffffffffffffffffffffff166376d02895846040518263ffffffff1660e01b8152600401612bee91906149fe565b60206040518083038186803b158015612c0657600080fd5b505afa158015612c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3e919061418b565b905060008190508092505050919050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612c8192919061497d565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612ccf9190614925565b6000604051808303816000865af19150503d8060008114612d0c576040519150601f19603f3d011682016040523d82523d6000602084013e612d11565b606091505b5091509150818015612d3f5750600081511480612d3e575080806020019051810190612d3d9190614231565b5b5b612d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7590614e6a565b60405180910390fd5b5050505050565b6000612d9084612bab565b9050612dc4612d9d612b87565b848373ffffffffffffffffffffffffffffffffffffffff16612c4f9092919063ffffffff16565b612dcc612b87565b73ffffffffffffffffffffffffffffffffffffffff166348eedd6b8585856040518463ffffffff1660e01b8152600401612e0893929190614a42565b602060405180830381600087803b158015612e2257600080fd5b505af1158015612e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5a9190614231565b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115612ebc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612eee5781602001600182028036833780820191505090505b50604051612efc9190614925565b60006040518083038185875af1925050503d8060008114612f39576040519150601f19603f3d011682016040523d82523d6000602084013e612f3e565b606091505b5050905080612f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f7990614c2a565b60405180910390fd5b505050565b6000818310612f965781612f98565b825b905092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b38585604051602401612fd292919061497d565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516130209190614925565b6000604051808303816000865af19150503d806000811461305d576040519150601f19603f3d011682016040523d82523d6000602084013e613062565b606091505b5091509150818015613090575060008151148061308f57508080602001905181019061308e9190614231565b5b5b6130cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130c690614dca565b60405180910390fd5b5050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006131a730613592565b15905090565b600060029054906101000a900460ff166131fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131f390614e2a565b60405180910390fd5b6132046135b5565b565b600060029054906101000a900460ff16613255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161324c90614e2a565b60405180910390fd5b61325d613616565b565b60606000606136033590506000602060408360ff1661327e91906152cc565b613288919061509c565b905060606040519050818152816042830136036020830137602081016040526000818051906020012090506000816040516020016132c6919061493c565b60405160208183030381529060405280519060200120905060606040519050604181526041803603602083013760208101604052600061330f828461366f90919063ffffffff16565b905061331a81610971565b613359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161335090614bca565b60405180910390fd5b60006062360335905061336b8161192d565b6133aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133a190614b8a565b60405180910390fd5b6133b88a8960ff1689613696565b98505050505050505050919050565b3373ffffffffffffffffffffffffffffffffffffffff167fcd909ec339185c4598a4096e174308fbdf136d117f230960f873a2f2e81f63af344260405161340f929190614f0e565b60405180910390a2565b60006134248261373c565b90508147106134335750613545565b600061343d612b87565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561348257600080fd5b505afa158015613496573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906134bf91906141f0565b905060005b8151811015613541578347106134d957613541565b61352e828281518110613515577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015147866135299190615362565b61395a565b8080613539906154f7565b9150506134c4565b5050505b50565b61355a6135554783612f87565b6110b1565b50565b61358f61356a8247612f87565b3373ffffffffffffffffffffffffffffffffffffffff16612e6190919063ffffffff16565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060029054906101000a900460ff16613604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135fb90614e2a565b60405180910390fd5b61361461360f612ba3565b6130d6565b565b600060029054906101000a900460ff16613665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161365c90614e2a565b60405180910390fd5b6001606581905550565b600080600061367e8585613ac2565b9150915061368b81613b45565b819250505092915050565b6060806000806000806042870136035995508951865260208a51026020870101604052600094505b8885101561372c57604085028101359150600093505b895184101561372157816020850260208c01015114156137095760206040860282010135602085026020880101526001830192505b8951831415613716578894505b6001840193506136d4565b6001850194506136be565b5084955050505050509392505050565b600080613747610a8e565b90506000613753611df5565b73ffffffffffffffffffffffffffffffffffffffff16828560405160240161377c92919061497d565b6040516020818303038152906040527f095ea7b3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516138069190614925565b6000604051808303816000865af19150503d8060008114613843576040519150601f19603f3d011682016040523d82523d6000602084013e613848565b606091505b5050905060008273ffffffffffffffffffffffffffffffffffffffff16856040516024016138769190614eca565b6040516020818303038152906040527fe15e2c44000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516139009190614925565b6000604051808303816000865af19150503d806000811461393d576040519150601f19603f3d011682016040523d82523d6000602084013e613942565b606091505b505090508180156139505750805b9350505050919050565b600061396583612bab565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016139a29190614962565b60206040518083038186803b1580156139ba57600080fd5b505afa1580156139ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139f2919061430e565b90506000811115613abc576000613a07612b87565b73ffffffffffffffffffffffffffffffffffffffff16639ac34dd385856040518363ffffffff1660e01b8152600401613a41929190614ee5565b602060405180830381600087803b158015613a5b57600080fd5b505af1158015613a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a93919061430e565b905080821015613aae57613aa985836000612d85565b613aba565b613ab9858286612d85565b5b505b50505050565b600080604183511415613b045760008060006020860151925060408601519150606086015160001a9050613af887828585613e96565b94509450505050613b3e565b604083511415613b35576000806020850151915060408501519050613b2a868383613fa3565b935093505050613b3e565b60006002915091505b9250929050565b60006004811115613b7f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613bb8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613bc357613e93565b60016004811115613bfd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613c36577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c6e90614b2a565b60405180910390fd5b60026004811115613cb1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613cea577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d2290614b6a565b60405180910390fd5b60036004811115613d65577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613d9e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613dd690614c6a565b60405180910390fd5b600480811115613e18577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613e51577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613e92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e8990614d0a565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115613ed1576000600391509150613f9a565b601b8560ff1614158015613ee95750601c8560ff1614155b15613efb576000600491509150613f9a565b600060018787878760405160008152602001604052604051613f209493929190614a79565b6020604051602081039080840390855afa158015613f42573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613f9157600060019250925050613f9a565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c613fe691906150d4565b9050613ff487828885613e96565b935093505050935093915050565b6040518060800160405280600490602082028036833780820191505090505090565b600061403761403284614fd8565b614fb3565b9050808382526020820190508285602086028201111561405657600080fd5b60005b85811015614086578161406c888261410e565b845260208401935060208301925050600181019050614059565b5050509392505050565b60008135905061409f81615dbb565b92915050565b6000815190506140b481615dbb565b92915050565b600082601f8301126140cb57600080fd5b81516140db848260208601614024565b91505092915050565b6000815190506140f381615dd2565b92915050565b60008135905061410881615de9565b92915050565b60008151905061411d81615de9565b92915050565b60008135905061413281615e00565b92915050565b60008151905061414781615e00565b92915050565b60008151905061415c81615e17565b92915050565b60006020828403121561417457600080fd5b600061418284828501614090565b91505092915050565b60006020828403121561419d57600080fd5b60006141ab848285016140a5565b91505092915050565b600080604083850312156141c757600080fd5b60006141d585828601614090565b92505060206141e6858286016140f9565b9150509250929050565b60006020828403121561420257600080fd5b600082015167ffffffffffffffff81111561421c57600080fd5b614228848285016140ba565b91505092915050565b60006020828403121561424357600080fd5b6000614251848285016140e4565b91505092915050565b6000806040838503121561426d57600080fd5b600061427b858286016140f9565b925050602061428c85828601614123565b9150509250929050565b6000806000606084860312156142ab57600080fd5b60006142b9868287016140f9565b93505060206142ca86828701614123565b92505060406142db86828701614123565b9150509250925092565b6000602082840312156142f757600080fd5b600061430584828501614123565b91505092915050565b60006020828403121561432057600080fd5b600061432e84828501614138565b91505092915050565b60006020828403121561434957600080fd5b60006143578482850161414d565b91505092915050565b600061436c83836148f8565b60208301905092915050565b61438181615396565b82525050565b6143908161501e565b61439a8184615059565b92506143a582615004565b8060005b838110156143d65781516143bd8782614360565b96506143c88361503f565b9250506001810190506143a9565b505050505050565b60006143e982615029565b6143f38185615064565b93506143fe8361500e565b8060005b8381101561442f5781516144168882614360565b97506144218361504c565b925050600181019050614402565b5085935050505092915050565b614445816153a8565b82525050565b614454816153b4565b82525050565b61446b614466826153b4565b615540565b82525050565b600061447c82615034565b6144868185615075565b9350614496818560208601615493565b80840191505092915050565b6144ab81615403565b82525050565b6144ba81615427565b82525050565b6144c98161544b565b82525050565b6144d88161546f565b82525050565b60006144eb601883615080565b91506144f6826155f5565b602082019050919050565b600061450e602283615080565b91506145198261561e565b604082019050919050565b6000614531601f83615080565b915061453c8261566d565b602082019050919050565b6000614554601c83615091565b915061455f82615696565b601c82019050919050565b6000614577601983615080565b9150614582826156bf565b602082019050919050565b600061459a602683615080565b91506145a5826156e8565b604082019050919050565b60006145bd601583615080565b91506145c882615737565b602082019050919050565b60006145e0604c83615080565b91506145eb82615760565b606082019050919050565b6000614603602783615080565b915061460e826157d5565b604082019050919050565b6000614626603483615080565b915061463182615824565b604082019050919050565b6000614649602083615080565b915061465482615873565b602082019050919050565b600061466c602283615080565b91506146778261589c565b604082019050919050565b600061468f601283615080565b915061469a826158eb565b602082019050919050565b60006146b2601583615080565b91506146bd82615914565b602082019050919050565b60006146d5602883615080565b91506146e08261593d565b604082019050919050565b60006146f8602e83615080565b91506147038261598c565b604082019050919050565b600061471b602283615080565b9150614726826159db565b604082019050919050565b600061473e609283615080565b915061474982615a2a565b60a082019050919050565b6000614761602083615080565b915061476c82615aeb565b602082019050919050565b6000614784603383615080565b915061478f82615b14565b604082019050919050565b60006147a7601083615080565b91506147b282615b63565b602082019050919050565b60006147ca601983615080565b91506147d582615b8c565b602082019050919050565b60006147ed602b83615080565b91506147f882615bb5565b604082019050919050565b6000614810601183615080565b915061481b82615c04565b602082019050919050565b6000614833603a83615080565b915061483e82615c2d565b604082019050919050565b6000614856602b83615080565b915061486182615c7c565b604082019050919050565b6000614879602a83615080565b915061488482615ccb565b604082019050919050565b600061489c602d83615080565b91506148a782615d1a565b604082019050919050565b60006148bf601183615080565b91506148ca82615d69565b602082019050919050565b60006148e2601f83615080565b91506148ed82615d92565b602082019050919050565b614901816153ec565b82525050565b614910816153ec565b82525050565b61491f816153f6565b82525050565b60006149318284614471565b915081905092915050565b600061494782614547565b9150614953828461445a565b60208201915081905092915050565b60006020820190506149776000830184614378565b92915050565b60006040820190506149926000830185614378565b61499f6020830184614907565b9392505050565b60006080820190506149bb6000830184614387565b92915050565b600060208201905081810360008301526149db81846143de565b905092915050565b60006020820190506149f8600083018461443c565b92915050565b6000602082019050614a13600083018461444b565b92915050565b6000604082019050614a2e600083018561444b565b614a3b6020830184614907565b9392505050565b6000606082019050614a57600083018661444b565b614a646020830185614907565b614a716040830184614907565b949350505050565b6000608082019050614a8e600083018761444b565b614a9b6020830186614916565b614aa8604083018561444b565b614ab5606083018461444b565b95945050505050565b6000602082019050614ad360008301846144a2565b92915050565b6000602082019050614aee60008301846144b1565b92915050565b6000602082019050614b0960008301846144c0565b92915050565b6000602082019050614b2460008301846144cf565b92915050565b60006020820190508181036000830152614b43816144de565b9050919050565b60006020820190508181036000830152614b6381614501565b9050919050565b60006020820190508181036000830152614b8381614524565b9050919050565b60006020820190508181036000830152614ba38161456a565b9050919050565b60006020820190508181036000830152614bc38161458d565b9050919050565b60006020820190508181036000830152614be3816145b0565b9050919050565b60006020820190508181036000830152614c03816145d3565b9050919050565b60006020820190508181036000830152614c23816145f6565b9050919050565b60006020820190508181036000830152614c4381614619565b9050919050565b60006020820190508181036000830152614c638161463c565b9050919050565b60006020820190508181036000830152614c838161465f565b9050919050565b60006020820190508181036000830152614ca381614682565b9050919050565b60006020820190508181036000830152614cc3816146a5565b9050919050565b60006020820190508181036000830152614ce3816146c8565b9050919050565b60006020820190508181036000830152614d03816146eb565b9050919050565b60006020820190508181036000830152614d238161470e565b9050919050565b60006020820190508181036000830152614d4381614731565b9050919050565b60006020820190508181036000830152614d6381614754565b9050919050565b60006020820190508181036000830152614d8381614777565b9050919050565b60006020820190508181036000830152614da38161479a565b9050919050565b60006020820190508181036000830152614dc3816147bd565b9050919050565b60006020820190508181036000830152614de3816147e0565b9050919050565b60006020820190508181036000830152614e0381614803565b9050919050565b60006020820190508181036000830152614e2381614826565b9050919050565b60006020820190508181036000830152614e4381614849565b9050919050565b60006020820190508181036000830152614e638161486c565b9050919050565b60006020820190508181036000830152614e838161488f565b9050919050565b60006020820190508181036000830152614ea3816148b2565b9050919050565b60006020820190508181036000830152614ec3816148d5565b9050919050565b6000602082019050614edf6000830184614907565b92915050565b6000604082019050614efa6000830185614907565b614f076020830184614378565b9392505050565b6000604082019050614f236000830185614907565b614f306020830184614907565b9392505050565b6000606082019050614f4c6000830186614907565b614f596020830185614907565b614f666040830184614907565b949350505050565b6000608082019050614f836000830187614907565b614f906020830186614907565b614f9d6040830185614907565b614faa6060830184614907565b95945050505050565b6000614fbd614fce565b9050614fc982826154c6565b919050565b6000604051905090565b600067ffffffffffffffff821115614ff357614ff26155a8565b5b602082029050602081019050919050565b6000819050919050565b6000819050602082019050919050565b600060049050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006150a7826153be565b91506150b2836153be565b92508261ffff038211156150c9576150c861554a565b5b828201905092915050565b60006150df826153ec565b91506150ea836153ec565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561511f5761511e61554a565b5b828201905092915050565b6000615135826153ec565b9150615140836153ec565b9250826151505761514f615579565b5b828204905092915050565b6000808291508390505b60018511156151a5578086048111156151815761518061554a565b5b60018516156151905780820291505b808102905061519e856155e8565b9450615165565b94509492505050565b60006151b9826153ec565b91506151c4836153f6565b92506151f17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846151f9565b905092915050565b60008261520957600190506152c5565b8161521757600090506152c5565b816001811461522d576002811461523757615266565b60019150506152c5565b60ff8411156152495761524861554a565b5b8360020a9150848211156152605761525f61554a565b5b506152c5565b5060208310610133831016604e8410600b841016171561529b5782820a9050838111156152965761529561554a565b5b6152c5565b6152a8848484600161515b565b925090508184048111156152bf576152be61554a565b5b81810290505b9392505050565b60006152d7826153be565b91506152e2836153be565b92508161ffff04831182151516156152fd576152fc61554a565b5b828202905092915050565b6000615313826153ec565b915061531e836153ec565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156153575761535661554a565b5b828202905092915050565b600061536d826153ec565b9150615378836153ec565b92508282101561538b5761538a61554a565b5b828203905092915050565b60006153a1826153cc565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061540e82615415565b9050919050565b6000615420826153cc565b9050919050565b600061543282615439565b9050919050565b6000615444826153cc565b9050919050565b60006154568261545d565b9050919050565b6000615468826153cc565b9050919050565b600061547a82615481565b9050919050565b600061548c826153cc565b9050919050565b60005b838110156154b1578082015181840152602081019050615496565b838111156154c0576000848401525b50505050565b6154cf826155d7565b810181811067ffffffffffffffff821117156154ee576154ed6155a8565b5b80604052505050565b6000615502826153ec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156155355761553461554a565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f4e6f7420656e6f7567682066756e647320746f20726570617920746865206c6f60008201527f616e000000000000000000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f446174612074696d657374616d7020697320696e76616c696400000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5369676e6572206e6f7420617574686f72697a65640000000000000000000000600082015250565b7f54686973206f7065726174696f6e20776f756c64206e6f7420726573756c742060008201527f696e206272696e67696e6720746865206c6f616e206261636b20746f2061207360208201527f6f6c76656e742073746174650000000000000000000000000000000000000000604082015250565b7f417661782070726963652072657475726e65642066726f6d206f7261636c652060008201527f6973207a65726f00000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b7f43616e6e6f742073656c6c6f7574206120736f6c76656e74206163636f756e74600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b7f44656274206e6f74207265706169642066756c6c790000000000000000000000600082015250565b7f41737365742070726963652072657475726e65642066726f6d206f7261636c6560008201527f206973207a65726f000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f54686973206f7065726174696f6e20776f756c6420726573756c7420696e206160008201527f206c6f616e2077697468204c5456206c6f776572207468616e204d696e696d6160208201527f6c2053656c6c6f7574204c545620776869636820776f756c6420707574206c6f60408201527f616e2773206f776e657220696e2061207269736b206f6620616e20756e6e656360608201527f6573736172696c792068696768206c6f73730000000000000000000000000000608082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f54686520616374696f6e206d617920636175736520616e206163636f756e742060008201527f746f206265636f6d6520696e736f6c76656e7400000000000000000000000000602082015250565b7f556e7374616b696e67206661696c656400000000000000000000000000000000600082015250565b7f4e6f7420656e6f756768204156415820617661696c61626c6500000000000000600082015250565b7f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060008201527f726f7665206661696c6564000000000000000000000000000000000000000000602082015250565b7f526564656d7074696f6e206661696c6564000000000000000000000000000000600082015250565b7f416464696e67206d6f726520636f6c6c61746572616c207468616e203620415660008201527f415820696e20746f74616c206973206e6f7420616c6c6f776564000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f446174612077697468206675747572652074696d657374616d7073206973206e60008201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b7f496e766573746d656e74206661696c6564000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b615dc481615396565b8114615dcf57600080fd5b50565b615ddb816153a8565b8114615de657600080fd5b50565b615df2816153b4565b8114615dfd57600080fd5b50565b615e09816153ec565b8114615e1457600080fd5b50565b615e20816153f6565b8114615e2b57600080fd5b5056fea26469706673582212203a1e0d0cb6d29e6cc7f9cf98874e30f3d2b680a3dc2ebb3ef66832883e65a1ea64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061021e5760003560e01c80636b6c92d911610123578063b60d4288116100ab578063d2b29d701161006f578063d2b29d701461072c578063d44e282b14610755578063f2fde38b14610780578063f31a210a146107a9578063f807cd22146107d457610225565b8063b60d428814610675578063c5ebeaec1461067f578063c79d5ec5146106a8578063caa648b4146106e5578063ccdd9f5d1461071057610225565b80638a027cb3116100f25780638a027cb3146105a05780638da5cb5b146105c9578063a935310f146105f4578063ae1837371461061f578063b5dbd7f01461064a57610225565b80636b6c92d91461050a578063715018a614610535578063750582051461054c5780638129fc1c1461058957610225565b8063371fd8e6116101a65780635118af5a116101755780635118af5a1461043557806352154a261461046057806359aa9e721461048b5780635ce23950146104b65780636aa96162146104e157610225565b8063371fd8e61461039a5780633eb67e0b146103b65780634ed2b8ac146103df5780634fcaf08f1461040a57610225565b806314a6bf0f116101ed57806314a6bf0f146102e65780631e5140f014610311578063232fa7331461033c5780632802fdc8146103465780632e1a7d4d1461037157610225565b8063026b1d5f1461022a57806305d58c211461025557806311c89b101461027e578063132e1d39146102bb57610225565b3661022557005b600080fd5b34801561023657600080fd5b5061023f6107ff565b60405161024c9190614b0f565b60405180910390f35b34801561026157600080fd5b5061027c6004803603810190610277919061425a565b61081b565b005b34801561028a57600080fd5b506102a560048036038101906102a09190614162565b610971565b6040516102b291906149e3565b60405180910390f35b3480156102c757600080fd5b506102d06109ed565b6040516102dd9190614eca565b60405180910390f35b3480156102f257600080fd5b506102fb6109f7565b6040516103089190614eca565b60405180910390f35b34801561031d57600080fd5b50610326610a8e565b6040516103339190614af4565b60405180910390f35b610344610aaa565b005b34801561035257600080fd5b5061035b610ebd565b6040516103689190614962565b60405180910390f35b34801561037d57600080fd5b50610398600480360381019061039391906142e5565b610ed9565b005b6103b460048036038101906103af91906142e5565b6110b1565b005b3480156103c257600080fd5b506103dd60048036038101906103d891906142e5565b61122c565b005b3480156103eb57600080fd5b506103f4611451565b6040516104019190614eca565b60405180910390f35b34801561041657600080fd5b5061041f6114c8565b60405161042c9190614962565b60405180910390f35b34801561044157600080fd5b5061044a6114e4565b6040516104579190614eca565b60405180910390f35b34801561046c57600080fd5b506104756114ed565b6040516104829190614eca565b60405180910390f35b34801561049757600080fd5b506104a06114f7565b6040516104ad9190614eca565b60405180910390f35b3480156104c257600080fd5b506104cb611500565b6040516104d891906149e3565b60405180910390f35b3480156104ed57600080fd5b50610508600480360381019061050391906142e5565b611518565b005b34801561051657600080fd5b5061051f6116ea565b60405161052c91906149c1565b60405180910390f35b34801561054157600080fd5b5061054a6118a5565b005b34801561055857600080fd5b50610573600480360381019061056e91906142e5565b61192d565b60405161058091906149e3565b60405180910390f35b34801561059557600080fd5b5061059e6119a9565b005b3480156105ac57600080fd5b506105c760048036038101906105c29190614296565b611aa0565b005b3480156105d557600080fd5b506105de611d2c565b6040516105eb9190614962565b60405180910390f35b34801561060057600080fd5b50610609611d56565b60405161061691906149c1565b60405180910390f35b34801561062b57600080fd5b50610634611df5565b6040516106419190614ad9565b60405180910390f35b34801561065657600080fd5b5061065f611e11565b60405161066c9190614eca565b60405180910390f35b61067d611e1b565b005b34801561068b57600080fd5b506106a660048036038101906106a191906142e5565b611e9e565b005b3480156106b457600080fd5b506106cf60048036038101906106ca91906141b4565b612026565b6040516106dc9190614eca565b60405180910390f35b3480156106f157600080fd5b506106fa61214d565b6040516107079190614eca565b60405180910390f35b61072a600480360381019061072591906142e5565b61252a565b005b34801561073857600080fd5b50610753600480360381019061074e9190614296565b6127a4565b005b34801561076157600080fd5b5061076a612a2e565b60405161077791906149a6565b60405180910390f35b34801561078c57600080fd5b506107a760048036038101906107a29190614162565b612a86565b005b3480156107b557600080fd5b506107be612b7e565b6040516107cb9190614eca565b60405180910390f35b3480156107e057600080fd5b506107e9612b87565b6040516107f69190614abe565b60405180910390f35b600073431290df15777d46174b83c9e01f87d7b70d3073905090565b610823612ba3565b73ffffffffffffffffffffffffffffffffffffffff16610841611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614610897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088e90614d4a565b60405180910390fd5b600260655414156108dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d490614eaa565b60405180910390fd5b600260658190555060006108f083612bab565b905061091d33838373ffffffffffffffffffffffffffffffffffffffff16612c4f9092919063ffffffff16565b50610926611500565b610965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095c90614d6a565b60405180910390fd5b60016065819055505050565b600061097b610ebd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806109e657506109b76114c8565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b60006103e8905090565b6000610a016107ff565b73ffffffffffffffffffffffffffffffffffffffff16636011163e306040518263ffffffff1660e01b8152600401610a399190614962565b60206040518083038186803b158015610a5157600080fd5b505afa158015610a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a89919061430e565b905090565b60007370952a912fa50e04c608eb49e48afc975eb91f21905090565b610ab2612ba3565b73ffffffffffffffffffffffffffffffffffffffff16610ad0611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614610b26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1d90614d4a565b60405180910390fd5b60026065541415610b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6390614eaa565b60405180910390fd5b60026065819055506000610b7e612b87565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610bc357600080fd5b505afa158015610bd7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c0091906141f0565b905060005b8151811015610d4d576000610c59838381518110610c4c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612bab565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c919190614962565b60206040518083038186803b158015610ca957600080fd5b505afa158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce1919061430e565b90506000811115610d3957610d38838381518110610d28577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826000612d85565b5b508080610d45906154f7565b915050610c05565b506000610d586109f7565b905080471015610d9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9490614caa565b60405180910390fd5b610da6816110b1565b7f4acb957de3799dd3d95bb7da6bcfbca6f5a33812d69ad37816ed87e79b6327d6814742604051610dd993929190614f37565b60405180910390a160004790506000811115610e6957610e18813373ffffffffffffffffffffffffffffffffffffffff16612e6190919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc68242604051610e60929190614f0e565b60405180910390a25b505050610e74611500565b610eb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eaa90614d6a565b60405180910390fd5b6001606581905550565b600073981bda8276ae93f567922497153de7a5683708d3905090565b610ee1612ba3565b73ffffffffffffffffffffffffffffffffffffffff16610eff611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614610f55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4c90614d4a565b60405180910390fd5b60026065541415610f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9290614eaa565b60405180910390fd5b600260658190555080471015610fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdd90614c8a565b60405180910390fd5b61100f813373ffffffffffffffffffffffffffffffffffffffff16612e6190919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc68242604051611057929190614f0e565b60405180910390a2611067611500565b6110a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109d90614d6a565b60405180910390fd5b600160658190555050565b6110b9611500565b80156110d657506000151560008054906101000a900460ff161515145b1561111b576110e3611d2c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461111a57600080fd5b5b61112c816111276109f7565b612f87565b905080471015611171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116890614b4a565b60405180910390fd5b6111796107ff565b73ffffffffffffffffffffffffffffffffffffffff1663402d8883826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156111c057600080fd5b505af11580156111d4573d6000803e3d6000fd5b50505050503373ffffffffffffffffffffffffffffffffffffffff167f1b8cd61ed43bec7c6bdad3a18ffee613f99c853d16c50678d248d879e1b434388242604051611221929190614f0e565b60405180910390a250565b611234612ba3565b73ffffffffffffffffffffffffffffffffffffffff16611252611d2c565b73ffffffffffffffffffffffffffffffffffffffff16146112a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129f90614d4a565b60405180910390fd5b600260655414156112ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e590614eaa565b60405180910390fd5b60026065819055506000611300610a8e565b9050611334818361130f611df5565b73ffffffffffffffffffffffffffffffffffffffff16612fa09092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff166318994c1f836040518263ffffffff1660e01b815260040161136d9190614eca565b602060405180830381600087803b15801561138757600080fd5b505af115801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf9190614231565b6113fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f590614d8a565b60405180910390fd5b50611407611500565b611446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143d90614d6a565b60405180910390fd5b600160658190555050565b60008061145c6109f7565b9050600061146861214d565b9050600082141561147e576000925050506114c5565b808210156114b85781816114929190615362565b61149a6109ed565b836114a59190615308565b6114af919061512a565b925050506114c5565b6114c0611e11565b925050505b90565b6000733befdd935b50f172e696a5187dbacfef0d208e48905090565b6000601e905090565b6000610fa0905090565b60006064905090565b600061150a611e11565b611512611451565b10905090565b611520612ba3565b73ffffffffffffffffffffffffffffffffffffffff1661153e611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614611594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158b90614d4a565b60405180910390fd5b600260655414156115da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d190614eaa565b60405180910390fd5b600260658190555080471015611625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161c90614daa565b60405180910390fd5b61162d610a8e565b73ffffffffffffffffffffffffffffffffffffffff166347f63dfd82836040518363ffffffff1660e01b81526004016116669190614eca565b6000604051808303818588803b15801561167f57600080fd5b505af1158015611693573d6000803e3d6000fd5b50505050506116a0611500565b6116df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d690614d6a565b60405180910390fd5b600160658190555050565b606060006116f6612b87565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561173b57600080fd5b505afa15801561174f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061177891906141f0565b90506000815167ffffffffffffffff8111156117bd577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156117eb5781602001602082028036833780820191505090505b50905060005b825181101561189c5761184430848381518110611837577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612026565b82828151811061187d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611894906154f7565b9150506117f1565b50809250505090565b6118ad612ba3565b73ffffffffffffffffffffffffffffffffffffffff166118cb611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614611921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191890614d4a565b60405180910390fd5b61192b60006130d6565b565b6000816119386114e4565b4261194391906150d4565b11611983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197a90614e4a565b60405180910390fd5b814210806119a25750611994612b7e565b82426119a09190615362565b105b9050919050565b600060029054906101000a900460ff166119d357600060019054906101000a900460ff16156119dc565b6119db61319c565b5b611a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1290614cea565b60405180910390fd5b60008060029054906101000a900460ff161590508015611a6c576001600060026101000a81548160ff0219169083151502179055506001600060016101000a81548160ff0219169083151502179055505b611a746131ad565b611a7c613206565b8015611a9d5760008060026101000a81548160ff0219169083151502179055505b50565b611aa8612ba3565b73ffffffffffffffffffffffffffffffffffffffff16611ac6611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614611b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1390614d4a565b60405180910390fd5b60026065541415611b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5990614eaa565b60405180910390fd5b600260658190555080471015611bad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba490614c8a565b60405180910390fd5b6000611bb7612b87565b73ffffffffffffffffffffffffffffffffffffffff16635d8874e98386866040518463ffffffff1660e01b8152600401611bf2929190614a19565b6020604051808303818588803b158015611c0b57600080fd5b505af1158015611c1f573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611c449190614231565b905080611c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7d90614e8a565b60405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff167f8c4f7b2f9ad7fde21c3ebf69d91938c2731761edd5820e45c17ea61d9c2ab90a8542604051611ccf929190614f0e565b60405180910390a350611ce0611500565b611d1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1690614d6a565b60405180910390fd5b6001606581905550505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606000611d62612b87565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b158015611da757600080fd5b505afa158015611dbb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611de491906141f0565b9050611def8161325f565b91505090565b600073aac0f2d0630d1d09ab2b5a400412a4840b866d95905090565b6000611388905090565b6000611e256109f7565b90506000611e3161214d565b905081811115611e92576753444835ec5800008282611e509190615362565b1115611e91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8890614e0a565b60405180910390fd5b5b611e9a6133c7565b5050565b611ea6612ba3565b73ffffffffffffffffffffffffffffffffffffffff16611ec4611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614611f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1190614d4a565b60405180910390fd5b611f226107ff565b73ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec826040518263ffffffff1660e01b8152600401611f5a9190614eca565b600060405180830381600087803b158015611f7457600080fd5b505af1158015611f88573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167feae9cfbc77fdd40ca899f36b608256063b2bc9d8178b0220f7ad513e178d67308242604051611fd4929190614f0e565b60405180910390a2611fe4611500565b612023576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201a90614d6a565b60405180910390fd5b50565b600080612031612b87565b73ffffffffffffffffffffffffffffffffffffffff166376d02895846040518263ffffffff1660e01b815260040161206991906149fe565b60206040518083038186803b15801561208157600080fd5b505afa158015612095573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b9919061418b565b90508073ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016120f49190614962565b60206040518083038186803b15801561210c57600080fd5b505afa158015612120573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612144919061430e565b91505092915050565b600080479050600061215d612b87565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156121a257600080fd5b505afa1580156121b6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906121df91906141f0565b905060006121ec8261325f565b905060008160008151811061222a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000811415612278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226f90614c0a565b60405180910390fd5b6000600190505b825181101561248d5760008382815181106122c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151141561230c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230390614cca565b60405180910390fd5b6000848281518110612347577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600061235c82612bab565b9050600061236a3084612026565b90508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156123b257600080fd5b505afa1580156123c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ea9190614337565b600a6123f691906151ae565b856124019190615308565b81670de0b6b3a7640000888781518110612444577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516124569190615308565b6124609190615308565b61246a919061512a565b8861247591906150d4565b97505050508080612485906154f7565b91505061227f565b50612496610a8e565b73ffffffffffffffffffffffffffffffffffffffff16633999c4886040518163ffffffff1660e01b815260040160206040518083038186803b1580156124db57600080fd5b505afa1580156124ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612513919061430e565b8461251e91906150d4565b93508394505050505090565b60026065541415612570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256790614eaa565b60405180910390fd5b6002606581905550612580611500565b156125c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b790614c4a565b60405180910390fd5b60016000806101000a81548160ff02191690831515021790555060006125e46109f7565b9050808211156125f2578091505b60006125fc6109ed565b6126046114f7565b8461260f9190615308565b612619919061512a565b90506000818461262991906150d4565b905061263481613419565b61263d84613548565b6126468261355d565b3373ffffffffffffffffffffffffffffffffffffffff167f7abe212d4944ae75cf0a0477af92aa0db98c15aaf21d06c37c97c641427b8eb38584612688611451565b426040516126999493929190614f6e565b60405180910390a250505060006126ae611451565b90506126b8611d2c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612735576126f26114ed565b811015612734576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272b90614d2a565b60405180910390fd5b5b61273d611e11565b811061277e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277590614bea565b60405180910390fd5b60008060006101000a81548160ff02191690831515021790555050600160658190555050565b600260655414156127ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127e190614eaa565b60405180910390fd5b60026065819055506127fa612ba3565b73ffffffffffffffffffffffffffffffffffffffff16612818611d2c565b73ffffffffffffffffffffffffffffffffffffffff161461286e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286590614d4a565b60405180910390fd5b600061287984612bab565b90506128ad612886612b87565b848373ffffffffffffffffffffffffffffffffffffffff16612c4f9092919063ffffffff16565b60006128b7612b87565b73ffffffffffffffffffffffffffffffffffffffff166348eedd6b8686866040518463ffffffff1660e01b81526004016128f393929190614a42565b602060405180830381600087803b15801561290d57600080fd5b505af1158015612921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129459190614231565b905080612987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161297e90614dea565b60405180910390fd5b843373ffffffffffffffffffffffffffffffffffffffff167fc95bd7ebbed9b9c3e9477753bcb60d02b328f1e5bce8b1a25986d6c73991c18286426040516129d0929190614f0e565b60405180910390a350506129e2611500565b612a21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a1890614d6a565b60405180910390fd5b6001606581905550505050565b612a36614002565b6040518060800160405280612a4961214d565b8152602001612a566109f7565b8152602001612a63611451565b8152602001612a70611500565b612a7b576000612a7e565b60015b815250905090565b612a8e612ba3565b73ffffffffffffffffffffffffffffffffffffffff16612aac611d2c565b73ffffffffffffffffffffffffffffffffffffffff1614612b02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612af990614d4a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612b72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6990614baa565b60405180910390fd5b612b7b816130d6565b50565b600060b4905090565b6000730278438423f433e277f65d14c0e002b8828702ba905090565b600033905090565b600080612bb6612b87565b73ffffffffffffffffffffffffffffffffffffffff166376d02895846040518263ffffffff1660e01b8152600401612bee91906149fe565b60206040518083038186803b158015612c0657600080fd5b505afa158015612c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3e919061418b565b905060008190508092505050919050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612c8192919061497d565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612ccf9190614925565b6000604051808303816000865af19150503d8060008114612d0c576040519150601f19603f3d011682016040523d82523d6000602084013e612d11565b606091505b5091509150818015612d3f5750600081511480612d3e575080806020019051810190612d3d9190614231565b5b5b612d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7590614e6a565b60405180910390fd5b5050505050565b6000612d9084612bab565b9050612dc4612d9d612b87565b848373ffffffffffffffffffffffffffffffffffffffff16612c4f9092919063ffffffff16565b612dcc612b87565b73ffffffffffffffffffffffffffffffffffffffff166348eedd6b8585856040518463ffffffff1660e01b8152600401612e0893929190614a42565b602060405180830381600087803b158015612e2257600080fd5b505af1158015612e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5a9190614231565b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115612ebc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612eee5781602001600182028036833780820191505090505b50604051612efc9190614925565b60006040518083038185875af1925050503d8060008114612f39576040519150601f19603f3d011682016040523d82523d6000602084013e612f3e565b606091505b5050905080612f82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f7990614c2a565b60405180910390fd5b505050565b6000818310612f965781612f98565b825b905092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b38585604051602401612fd292919061497d565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516130209190614925565b6000604051808303816000865af19150503d806000811461305d576040519150601f19603f3d011682016040523d82523d6000602084013e613062565b606091505b5091509150818015613090575060008151148061308f57508080602001905181019061308e9190614231565b5b5b6130cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130c690614dca565b60405180910390fd5b5050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006131a730613592565b15905090565b600060029054906101000a900460ff166131fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131f390614e2a565b60405180910390fd5b6132046135b5565b565b600060029054906101000a900460ff16613255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161324c90614e2a565b60405180910390fd5b61325d613616565b565b60606000606136033590506000602060408360ff1661327e91906152cc565b613288919061509c565b905060606040519050818152816042830136036020830137602081016040526000818051906020012090506000816040516020016132c6919061493c565b60405160208183030381529060405280519060200120905060606040519050604181526041803603602083013760208101604052600061330f828461366f90919063ffffffff16565b905061331a81610971565b613359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161335090614bca565b60405180910390fd5b60006062360335905061336b8161192d565b6133aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133a190614b8a565b60405180910390fd5b6133b88a8960ff1689613696565b98505050505050505050919050565b3373ffffffffffffffffffffffffffffffffffffffff167fcd909ec339185c4598a4096e174308fbdf136d117f230960f873a2f2e81f63af344260405161340f929190614f0e565b60405180910390a2565b60006134248261373c565b90508147106134335750613545565b600061343d612b87565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561348257600080fd5b505afa158015613496573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906134bf91906141f0565b905060005b8151811015613541578347106134d957613541565b61352e828281518110613515577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015147866135299190615362565b61395a565b8080613539906154f7565b9150506134c4565b5050505b50565b61355a6135554783612f87565b6110b1565b50565b61358f61356a8247612f87565b3373ffffffffffffffffffffffffffffffffffffffff16612e6190919063ffffffff16565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060029054906101000a900460ff16613604576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135fb90614e2a565b60405180910390fd5b61361461360f612ba3565b6130d6565b565b600060029054906101000a900460ff16613665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161365c90614e2a565b60405180910390fd5b6001606581905550565b600080600061367e8585613ac2565b9150915061368b81613b45565b819250505092915050565b6060806000806000806042870136035995508951865260208a51026020870101604052600094505b8885101561372c57604085028101359150600093505b895184101561372157816020850260208c01015114156137095760206040860282010135602085026020880101526001830192505b8951831415613716578894505b6001840193506136d4565b6001850194506136be565b5084955050505050509392505050565b600080613747610a8e565b90506000613753611df5565b73ffffffffffffffffffffffffffffffffffffffff16828560405160240161377c92919061497d565b6040516020818303038152906040527f095ea7b3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516138069190614925565b6000604051808303816000865af19150503d8060008114613843576040519150601f19603f3d011682016040523d82523d6000602084013e613848565b606091505b5050905060008273ffffffffffffffffffffffffffffffffffffffff16856040516024016138769190614eca565b6040516020818303038152906040527fe15e2c44000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516139009190614925565b6000604051808303816000865af19150503d806000811461393d576040519150601f19603f3d011682016040523d82523d6000602084013e613942565b606091505b505090508180156139505750805b9350505050919050565b600061396583612bab565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016139a29190614962565b60206040518083038186803b1580156139ba57600080fd5b505afa1580156139ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139f2919061430e565b90506000811115613abc576000613a07612b87565b73ffffffffffffffffffffffffffffffffffffffff16639ac34dd385856040518363ffffffff1660e01b8152600401613a41929190614ee5565b602060405180830381600087803b158015613a5b57600080fd5b505af1158015613a6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a93919061430e565b905080821015613aae57613aa985836000612d85565b613aba565b613ab9858286612d85565b5b505b50505050565b600080604183511415613b045760008060006020860151925060408601519150606086015160001a9050613af887828585613e96565b94509450505050613b3e565b604083511415613b35576000806020850151915060408501519050613b2a868383613fa3565b935093505050613b3e565b60006002915091505b9250929050565b60006004811115613b7f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613bb8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613bc357613e93565b60016004811115613bfd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613c36577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613c77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c6e90614b2a565b60405180910390fd5b60026004811115613cb1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613cea577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d2290614b6a565b60405180910390fd5b60036004811115613d65577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613d9e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613dd690614c6a565b60405180910390fd5b600480811115613e18577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613e51577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613e92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e8990614d0a565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115613ed1576000600391509150613f9a565b601b8560ff1614158015613ee95750601c8560ff1614155b15613efb576000600491509150613f9a565b600060018787878760405160008152602001604052604051613f209493929190614a79565b6020604051602081039080840390855afa158015613f42573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613f9157600060019250925050613f9a565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c613fe691906150d4565b9050613ff487828885613e96565b935093505050935093915050565b6040518060800160405280600490602082028036833780820191505090505090565b600061403761403284614fd8565b614fb3565b9050808382526020820190508285602086028201111561405657600080fd5b60005b85811015614086578161406c888261410e565b845260208401935060208301925050600181019050614059565b5050509392505050565b60008135905061409f81615dbb565b92915050565b6000815190506140b481615dbb565b92915050565b600082601f8301126140cb57600080fd5b81516140db848260208601614024565b91505092915050565b6000815190506140f381615dd2565b92915050565b60008135905061410881615de9565b92915050565b60008151905061411d81615de9565b92915050565b60008135905061413281615e00565b92915050565b60008151905061414781615e00565b92915050565b60008151905061415c81615e17565b92915050565b60006020828403121561417457600080fd5b600061418284828501614090565b91505092915050565b60006020828403121561419d57600080fd5b60006141ab848285016140a5565b91505092915050565b600080604083850312156141c757600080fd5b60006141d585828601614090565b92505060206141e6858286016140f9565b9150509250929050565b60006020828403121561420257600080fd5b600082015167ffffffffffffffff81111561421c57600080fd5b614228848285016140ba565b91505092915050565b60006020828403121561424357600080fd5b6000614251848285016140e4565b91505092915050565b6000806040838503121561426d57600080fd5b600061427b858286016140f9565b925050602061428c85828601614123565b9150509250929050565b6000806000606084860312156142ab57600080fd5b60006142b9868287016140f9565b93505060206142ca86828701614123565b92505060406142db86828701614123565b9150509250925092565b6000602082840312156142f757600080fd5b600061430584828501614123565b91505092915050565b60006020828403121561432057600080fd5b600061432e84828501614138565b91505092915050565b60006020828403121561434957600080fd5b60006143578482850161414d565b91505092915050565b600061436c83836148f8565b60208301905092915050565b61438181615396565b82525050565b6143908161501e565b61439a8184615059565b92506143a582615004565b8060005b838110156143d65781516143bd8782614360565b96506143c88361503f565b9250506001810190506143a9565b505050505050565b60006143e982615029565b6143f38185615064565b93506143fe8361500e565b8060005b8381101561442f5781516144168882614360565b97506144218361504c565b925050600181019050614402565b5085935050505092915050565b614445816153a8565b82525050565b614454816153b4565b82525050565b61446b614466826153b4565b615540565b82525050565b600061447c82615034565b6144868185615075565b9350614496818560208601615493565b80840191505092915050565b6144ab81615403565b82525050565b6144ba81615427565b82525050565b6144c98161544b565b82525050565b6144d88161546f565b82525050565b60006144eb601883615080565b91506144f6826155f5565b602082019050919050565b600061450e602283615080565b91506145198261561e565b604082019050919050565b6000614531601f83615080565b915061453c8261566d565b602082019050919050565b6000614554601c83615091565b915061455f82615696565b601c82019050919050565b6000614577601983615080565b9150614582826156bf565b602082019050919050565b600061459a602683615080565b91506145a5826156e8565b604082019050919050565b60006145bd601583615080565b91506145c882615737565b602082019050919050565b60006145e0604c83615080565b91506145eb82615760565b606082019050919050565b6000614603602783615080565b915061460e826157d5565b604082019050919050565b6000614626603483615080565b915061463182615824565b604082019050919050565b6000614649602083615080565b915061465482615873565b602082019050919050565b600061466c602283615080565b91506146778261589c565b604082019050919050565b600061468f601283615080565b915061469a826158eb565b602082019050919050565b60006146b2601583615080565b91506146bd82615914565b602082019050919050565b60006146d5602883615080565b91506146e08261593d565b604082019050919050565b60006146f8602e83615080565b91506147038261598c565b604082019050919050565b600061471b602283615080565b9150614726826159db565b604082019050919050565b600061473e609283615080565b915061474982615a2a565b60a082019050919050565b6000614761602083615080565b915061476c82615aeb565b602082019050919050565b6000614784603383615080565b915061478f82615b14565b604082019050919050565b60006147a7601083615080565b91506147b282615b63565b602082019050919050565b60006147ca601983615080565b91506147d582615b8c565b602082019050919050565b60006147ed602b83615080565b91506147f882615bb5565b604082019050919050565b6000614810601183615080565b915061481b82615c04565b602082019050919050565b6000614833603a83615080565b915061483e82615c2d565b604082019050919050565b6000614856602b83615080565b915061486182615c7c565b604082019050919050565b6000614879602a83615080565b915061488482615ccb565b604082019050919050565b600061489c602d83615080565b91506148a782615d1a565b604082019050919050565b60006148bf601183615080565b91506148ca82615d69565b602082019050919050565b60006148e2601f83615080565b91506148ed82615d92565b602082019050919050565b614901816153ec565b82525050565b614910816153ec565b82525050565b61491f816153f6565b82525050565b60006149318284614471565b915081905092915050565b600061494782614547565b9150614953828461445a565b60208201915081905092915050565b60006020820190506149776000830184614378565b92915050565b60006040820190506149926000830185614378565b61499f6020830184614907565b9392505050565b60006080820190506149bb6000830184614387565b92915050565b600060208201905081810360008301526149db81846143de565b905092915050565b60006020820190506149f8600083018461443c565b92915050565b6000602082019050614a13600083018461444b565b92915050565b6000604082019050614a2e600083018561444b565b614a3b6020830184614907565b9392505050565b6000606082019050614a57600083018661444b565b614a646020830185614907565b614a716040830184614907565b949350505050565b6000608082019050614a8e600083018761444b565b614a9b6020830186614916565b614aa8604083018561444b565b614ab5606083018461444b565b95945050505050565b6000602082019050614ad360008301846144a2565b92915050565b6000602082019050614aee60008301846144b1565b92915050565b6000602082019050614b0960008301846144c0565b92915050565b6000602082019050614b2460008301846144cf565b92915050565b60006020820190508181036000830152614b43816144de565b9050919050565b60006020820190508181036000830152614b6381614501565b9050919050565b60006020820190508181036000830152614b8381614524565b9050919050565b60006020820190508181036000830152614ba38161456a565b9050919050565b60006020820190508181036000830152614bc38161458d565b9050919050565b60006020820190508181036000830152614be3816145b0565b9050919050565b60006020820190508181036000830152614c03816145d3565b9050919050565b60006020820190508181036000830152614c23816145f6565b9050919050565b60006020820190508181036000830152614c4381614619565b9050919050565b60006020820190508181036000830152614c638161463c565b9050919050565b60006020820190508181036000830152614c838161465f565b9050919050565b60006020820190508181036000830152614ca381614682565b9050919050565b60006020820190508181036000830152614cc3816146a5565b9050919050565b60006020820190508181036000830152614ce3816146c8565b9050919050565b60006020820190508181036000830152614d03816146eb565b9050919050565b60006020820190508181036000830152614d238161470e565b9050919050565b60006020820190508181036000830152614d4381614731565b9050919050565b60006020820190508181036000830152614d6381614754565b9050919050565b60006020820190508181036000830152614d8381614777565b9050919050565b60006020820190508181036000830152614da38161479a565b9050919050565b60006020820190508181036000830152614dc3816147bd565b9050919050565b60006020820190508181036000830152614de3816147e0565b9050919050565b60006020820190508181036000830152614e0381614803565b9050919050565b60006020820190508181036000830152614e2381614826565b9050919050565b60006020820190508181036000830152614e4381614849565b9050919050565b60006020820190508181036000830152614e638161486c565b9050919050565b60006020820190508181036000830152614e838161488f565b9050919050565b60006020820190508181036000830152614ea3816148b2565b9050919050565b60006020820190508181036000830152614ec3816148d5565b9050919050565b6000602082019050614edf6000830184614907565b92915050565b6000604082019050614efa6000830185614907565b614f076020830184614378565b9392505050565b6000604082019050614f236000830185614907565b614f306020830184614907565b9392505050565b6000606082019050614f4c6000830186614907565b614f596020830185614907565b614f666040830184614907565b949350505050565b6000608082019050614f836000830187614907565b614f906020830186614907565b614f9d6040830185614907565b614faa6060830184614907565b95945050505050565b6000614fbd614fce565b9050614fc982826154c6565b919050565b6000604051905090565b600067ffffffffffffffff821115614ff357614ff26155a8565b5b602082029050602081019050919050565b6000819050919050565b6000819050602082019050919050565b600060049050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006150a7826153be565b91506150b2836153be565b92508261ffff038211156150c9576150c861554a565b5b828201905092915050565b60006150df826153ec565b91506150ea836153ec565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561511f5761511e61554a565b5b828201905092915050565b6000615135826153ec565b9150615140836153ec565b9250826151505761514f615579565b5b828204905092915050565b6000808291508390505b60018511156151a5578086048111156151815761518061554a565b5b60018516156151905780820291505b808102905061519e856155e8565b9450615165565b94509492505050565b60006151b9826153ec565b91506151c4836153f6565b92506151f17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846151f9565b905092915050565b60008261520957600190506152c5565b8161521757600090506152c5565b816001811461522d576002811461523757615266565b60019150506152c5565b60ff8411156152495761524861554a565b5b8360020a9150848211156152605761525f61554a565b5b506152c5565b5060208310610133831016604e8410600b841016171561529b5782820a9050838111156152965761529561554a565b5b6152c5565b6152a8848484600161515b565b925090508184048111156152bf576152be61554a565b5b81810290505b9392505050565b60006152d7826153be565b91506152e2836153be565b92508161ffff04831182151516156152fd576152fc61554a565b5b828202905092915050565b6000615313826153ec565b915061531e836153ec565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156153575761535661554a565b5b828202905092915050565b600061536d826153ec565b9150615378836153ec565b92508282101561538b5761538a61554a565b5b828203905092915050565b60006153a1826153cc565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061540e82615415565b9050919050565b6000615420826153cc565b9050919050565b600061543282615439565b9050919050565b6000615444826153cc565b9050919050565b60006154568261545d565b9050919050565b6000615468826153cc565b9050919050565b600061547a82615481565b9050919050565b600061548c826153cc565b9050919050565b60005b838110156154b1578082015181840152602081019050615496565b838111156154c0576000848401525b50505050565b6154cf826155d7565b810181811067ffffffffffffffff821117156154ee576154ed6155a8565b5b80604052505050565b6000615502826153ec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156155355761553461554a565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f4e6f7420656e6f7567682066756e647320746f20726570617920746865206c6f60008201527f616e000000000000000000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f446174612074696d657374616d7020697320696e76616c696400000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5369676e6572206e6f7420617574686f72697a65640000000000000000000000600082015250565b7f54686973206f7065726174696f6e20776f756c64206e6f7420726573756c742060008201527f696e206272696e67696e6720746865206c6f616e206261636b20746f2061207360208201527f6f6c76656e742073746174650000000000000000000000000000000000000000604082015250565b7f417661782070726963652072657475726e65642066726f6d206f7261636c652060008201527f6973207a65726f00000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b7f43616e6e6f742073656c6c6f7574206120736f6c76656e74206163636f756e74600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b7f44656274206e6f74207265706169642066756c6c790000000000000000000000600082015250565b7f41737365742070726963652072657475726e65642066726f6d206f7261636c6560008201527f206973207a65726f000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f54686973206f7065726174696f6e20776f756c6420726573756c7420696e206160008201527f206c6f616e2077697468204c5456206c6f776572207468616e204d696e696d6160208201527f6c2053656c6c6f7574204c545620776869636820776f756c6420707574206c6f60408201527f616e2773206f776e657220696e2061207269736b206f6620616e20756e6e656360608201527f6573736172696c792068696768206c6f73730000000000000000000000000000608082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f54686520616374696f6e206d617920636175736520616e206163636f756e742060008201527f746f206265636f6d6520696e736f6c76656e7400000000000000000000000000602082015250565b7f556e7374616b696e67206661696c656400000000000000000000000000000000600082015250565b7f4e6f7420656e6f756768204156415820617661696c61626c6500000000000000600082015250565b7f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060008201527f726f7665206661696c6564000000000000000000000000000000000000000000602082015250565b7f526564656d7074696f6e206661696c6564000000000000000000000000000000600082015250565b7f416464696e67206d6f726520636f6c6c61746572616c207468616e203620415660008201527f415820696e20746f74616c206973206e6f7420616c6c6f776564000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f446174612077697468206675747572652074696d657374616d7073206973206e60008201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b7f496e766573746d656e74206661696c6564000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b615dc481615396565b8114615dcf57600080fd5b50565b615ddb816153a8565b8114615de657600080fd5b50565b615df2816153b4565b8114615dfd57600080fd5b50565b615e09816153ec565b8114615e1457600080fd5b50565b615e20816153f6565b8114615e2b57600080fd5b5056fea26469706673582212203a1e0d0cb6d29e6cc7f9cf98874e30f3d2b680a3dc2ebb3ef66832883e65a1ea64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "borrow(uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_amount": "of funds to borrow"
        }
      },
      "closeLoan()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getAllAssetsPrices()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getBalance(address,bytes32)": {
        "details": "_asset the code of an asset_user the address of queried user*"
      },
      "getLTV()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getTotalValue()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "invest(bytes32,uint256,uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_asset": "code of the asset",
          "_exactERC20AmountOut": "exact amount of asset to buy",
          "_maxAvaxAmountIn": "maximum amount of AVAX to sell"
        }
      },
      "isSolvent()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "liquidateLoan(uint256)": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(bytes32,uint256,uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_asset": "code of the asset",
          "_exactERC20AmountIn": "exact amount of token to sell",
          "_minAvaxAmountOut": "minimum amount of the AVAX token to buy"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay(uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_amount": "of funds to repay"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_amount": "to be withdrawn"
        }
      },
      "withdrawAsset(bytes32,uint256)": {
        "details": "This function uses the redstone-evm-connector*"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(uint256)": {
        "notice": "Borrows funds from the pool"
      },
      "closeLoan()": {
        "notice": "This function can only be accessed by the owner and allows selling all of the assets."
      },
      "fund()": {
        "notice": "Funds a loan with the value attached to the transaction Allows to add up to 7 AVAX of collateral in total*"
      },
      "getAllAssetsBalances()": {
        "notice": "Returns the balances of all assets served by the price provider It could be used as a helper method for UI*"
      },
      "getAllAssetsPrices()": {
        "notice": "Returns the prices of all assets served by the price provider It could be used as a helper method for UI"
      },
      "getBalance(address,bytes32)": {
        "notice": "Returns the current balance of the asset held by a given user"
      },
      "getDebt()": {
        "notice": "Returns the current debt associated with the loan*"
      },
      "getLTV()": {
        "notice": "LoanToValue ratio is calculated as the ratio between debt and collateral. The collateral is equal to total loan value takeaway debt."
      },
      "getMaxBlockTimestampDelay()": {
        "notice": "Override PriceAware method to consider Avalanche guaranteed block timestamp time accuracy*"
      },
      "getTotalValue()": {
        "notice": "Returns the current value of a loan in AVAX including cash and investments"
      },
      "invest(bytes32,uint256,uint256)": {
        "notice": "Invests an amount to buy an asset"
      },
      "isSignerAuthorized(address)": {
        "notice": "Override PriceAware method, addresses below belong to authorized signers of data feeds*"
      },
      "isSolvent()": {
        "notice": "Checks if the loan is solvent. It means that the ratio between debt and collateral is below safe level, which is parametrized by the getMaxLtv()"
      },
      "redeem(bytes32,uint256,uint256)": {
        "notice": "Redeem an investment by selling an asset"
      },
      "repay(uint256)": {
        "notice": "Repays funds to the pool"
      },
      "withdraw(uint256)": {
        "notice": "Withdraws an amount from the loan This method could be used to cash out profits from investments The loan needs to remain solvent after the withdrawal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4471,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "_liquidationInProgress",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 130,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "_initialized",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "_initializing",
        "offset": 2,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 211,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 255,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}